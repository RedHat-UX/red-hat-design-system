:host {
  display: inline-flex;
  position: relative;
  z-index: 0;
  align-items: center;
  max-width: max-content;
}

a,
::slotted(:is(a, button, input)) {
  vertical-align: middle !important;
  word-break: break-word !important;
  display: inline !important;
  color: inherit !important;
  font-family: inherit !important;
  font-size: inherit !important;
  font-weight: inherit !important;
  line-height: inherit !important;

  /** Sets the cta text decoration */
  text-decoration: var(--_text-decoration) !important;
  z-index: 2 !important;
}

::slotted(:is(a, button, input)) {
  white-space: break-spaces !important;
}

a:after,
::slotted(a):after {
  display: block;
  content: '';
  position: absolute;
  inset: 0;
  z-index: 3;
}

::slotted(button),
::slotted(input) {
  background-color: transparent;
  border: medium none;
  margin: 0;
  padding: 0;
  text-align: left;
}

#container {
  position: relative;
  white-space: nowrap;
  color: var(--_color);
  font-family: var(--rh-font-family-heading, RedHatDisplay, 'Red Hat Display', Helvetica, Arial, sans-serif);
  font-size: var(--rh-font-size-body-text-lg, 1.125rem);
  font-weight: 600; /* WARNING: not a token value */
  line-height: var(--rh-line-height-body-text, 1.5);
  background-color: var(--_background-color);
  border-color: var(--_border-color, transparent);
  border-radius: var(--rh-border-radius-default, 3px);
  border-width: var(--rh-border-width-sm, 1px);

  --rh-color-surface: var(--_background-color) !important;
  --_arrow-size: 13px;
  --rh-icon-size: var(--rh-font-size-body-text-lg, 1.125rem);
  --_rh-icon-plus-padding: calc(5px + var(--rh-icon-size));
}

:dir(rtl) {
  text-align: right;
}

/** Inner border */
#container:after {
  --_offset: 2px;

  content: '';
  display: block;
  height: calc(100% - var(--_offset) * 2);
  width: calc(100% - var(--_offset) * 2);
  box-sizing: border-box;
  position: absolute;
  top: var(--_offset);
  left: var(--_offset);
  border-width: var(--rh-border-width-sm, 1px);
  border-radius: 2px;
  outline: none;
  pointer-events: none;
}

/** Default variant arrow icon */
rh-icon {
  vertical-align: middle;
  margin-inline-start: var(--rh-space-md, 8px);
  display: inline-block;
  fill: currentcolor;
  translate: 0 0;
  transition: translate var(--_trans);

  --_trans:
    var(--rh-animation-speed, 0.3s)
    var(--rh-animation-timing, cubic-bezier(0.465, 0.183, 0.153, 0.946));
}

#container:dir(rtl) rh-icon {
  rotate: 180deg;
}

/*****************************************************************************
 * FOCUS STATE                                                               *
 *****************************************************************************/

:host(:is(:focus, :focus-within)),
:host(:is(:focus, :focus-within)) ::slotted(:is(a, button, input)),
a:focus,
a:focus-within,
::slotted(:focus) {
  outline: none !important;
}

:host(:is(:focus, :focus-within)) #container {
  --_background-color: var(--rh-cta-focus-background-color);
  --_color: var(--_focus-color);

  /** Sets the cta text decoration on focus */
  --_text-decoration: var(--_focus-text-decoration);

  border-color: var(--_focus-border-color);
  background-color:
    var(--_focus-container-background-color,
      var(--_focus-background-color));
  color: var(--rh-cta-focus-color, var(--_color));
  outline:
    var(--rh-border-width-md, 2px)
    solid
    var(--rh-cta-focus-container-outline-color, var(--rh-cta-focus-outline-color));
  outline-offset: 2px;
}

:host(:is(:focus, :focus-within)) #container:after {
  border-style: solid;
  border-color: var(--_focus-inner-border-color);
}

/*****************************************************************************
 * HOVER STATE                                                               *
 *****************************************************************************/

:host(:hover) #container {
  color: var(--_hover-color);
  border-color: var(--_hover-border-color);
  background-color: var(--_hover-background-color);

  /** Sets the cta text decoration on hover */
  --_text-decoration: var(--rh-cta-hover-text-decoration, var(--_hover-text-decoration));
}

:host(:hover) #container rh-icon {
  translate: 3px 0;
}

:host(:hover) #container:dir(rtl) rh-icon {
  translate: -3px 0;
}

/*****************************************************************************
 * ACTIVE STATE                                                              *
 *****************************************************************************/

:host(:active) #container {
  background-color: var(--_background-color);
  color: var(--_active-color);

  --_background-color:
    var(--rh-cta-background-color,
      var(--rh-cta-active-container-background-color,
      var(--rh-cta-active-background-color)));
}

:host(:active) #container:after {
  border-style: solid;
  border-color: var(--_active-inner-border-color) !important;
}

/*****************************************************************************
 * VARIANTS                                                                  *
 *****************************************************************************/

:host([variant]) #container {
  font-size: var(--rh-font-size-body-text-md, 1rem);
  border-radius: var(--rh-border-radius-default, 3px);
  border-width: var(--rh-border-width-sm, 1px);
  padding-inline: var(--rh-space-2xl, 32px);
  padding-block: var(--rh-space-lg, 16px);

  & a,
  & ::slotted(:is(a, button, input)) {
    display: inline-flex !important;
    text-align: center !important;
  }

  &.icon {
    & a,
    & ::slotted(:is(a, button, input)) {
      display: inline !important;
    }

    & rh-icon {
      margin-inline-start: var(--rh-space-md, 8px);
    }
  }

  &.svg {
    & a,
    & ::slotted(:is(a, button, input)) {
      --_arrow-plus-padding: calc(var(--rh-space-md, 8px) + var(--_arrow-size));

      padding-inline-end: calc(var(--_arrow-plus-padding) + var(--rh-space-xl, 24px)) !important;
    }
  }
}

:host([variant$='ary']) #container {
  & a,
  & ::slotted(:is(a, button, input)) {
    font-size: var(--rh-cta-font-size-priority, var(--rh-font-size-body-text-md, 1rem));
  }
}

/*****************************************************************************
 * DEFAULT
 *****************************************************************************/

:host(:not([variant])) #container {
  --_background-color: /** Sets the cta background color */
    var(--rh-cta-background-color, transparent);
  --_border-color: /** Sets the cta border color */
    var(--rh-cta-border-color, transparent);
  --_color: /** Sets the cta color */
    var(--rh-cta-color, var(--rh-color-interactive-primary-default));
  --_hover-background-color: /** Sets the cta background color on hover */
    var(--rh-cta-hover-background-color, transparent);
  --_hover-border-color: /** Sets the cta boder color on hover */
    var(--rh-cta-hover-border-color, transparent);
  --_hover-color:
    /** Sets the cta color on hover */
    var(--rh-cta-hover-color,
      var(--rh-color-interactive-primary-hover));
  --_hover-text-decoration: /** Sets the cta text decoration on hover */
    var(--rh-cta-hover-text-decoration, none);
  --_focus-background-color: /** Sets the cta background color on focus */
    var(--rh-cta-focus-background-color, transparent);

  /* --rh-color-border-interactive-on-light with 10% opacity */

  --_focus-container-background-color:
    light-dark(
        /** Sets the cta container background color on focus */
        var(--rh-cta-focus-container-background-color, #0066cc1a),
        var(--rh-cta-focus-container-background-color, #73bcf740)
      );
  --_focus-border-color: /** Sets the cta border color on focus */
    var(--rh-cta-focus-border-color, transparent);
  --_focus-color:
    /** Sets the cta color on focus */
    var(--rh-cta-focus-color,
      var(--rh-color-interactive-primary-default));
  --_focus-inner-border-color: /** Sets the cta inner border color on focus */
    var(--rh-cta-focus-inner-border-color, transparent);
  --_focus-text-decoration: /** Sets the cta text decoration on focus */
    var(--rh-cta-focus-text-decoration, none);

  /* --rh-color-border-interactive-on-light with 10% opacity */

  --_active-container-background-color:
    light-dark(
        /**
         * Sets the cta container background color on active.
         * Applicable only for default variant
         */
        var(--rh-cta-active-container-background-color, #0066cc1a),
        var(--rh-cta-active-container-background-color, #73bcf740)
      );
  --_active-inner-border-color: /** Sets the cta inner border color on active */
    var(--rh-cta-active-inner-border-color, transparent);
  --_active-text-decoration: /** Sets the cta text decoration on active */
    var(--rh-cta-active-text-decoration, none);
}

/*****************************************************************************
 * PRIMARY
 *****************************************************************************/

:host([variant='primary']) #container {
  border-style: solid;

  --_background-color: var(--rh-cta-background-color, var(--rh-color-brand-red));
  --_border-color: var(--rh-cta-border-color, var(--rh-color-brand-red));
  --_color: var(--rh-cta-color, var(--rh-color-text-primary-on-dark, #ffffff));

  /** Sets the cta color on active. Applicable only for secondary variant */
  --_active-color: var(--rh-cta-color, var(--rh-color-text-primary-on-dark, #ffffff));
  --_hover-background-color:
    var(--rh-cta-hover-background-color,
      var(--rh-color-brand-red-dark, #a60000));
  --_hover-border-color: var(--rh-cta-hover-border-color, var(--rh-color-brand-red-dark, #a60000));
  --_hover-color: var(--rh-cta-hover-color, var(--rh-color-text-primary-on-dark, #ffffff));
  --_focus-background-color:
    var(--rh-cta-focus-background-color,
      var(--rh-color-brand-red-dark, #a60000));
  --_focus-border-color: var(--rh-cta-focus-border-color, var(--rh-color-brand-red-dark, #a60000));
  --_focus-color:
    var(--rh-cta-focus-color,
      var(--rh-color-text-primary-on-dark, #ffffff)) !important;
  --_focus-inner-border-color:
    var(--rh-cta-focus-inner-border-color,
      var(--rh-color-text-primary-on-dark, #ffffff));

  /** Sets the cta background color on active */
  --_active-background-color:
    var(--rh-cta-active-background-color,
      var(--rh-color-brand-red-dark, #a60000));
  --_active-inner-border-color:
    var(--rh-cta-active-inner-border-color,
      var(--rh-color-text-primary-on-dark, #ffffff));
}

/*****************************************************************************
 * SECONDARY
 *****************************************************************************/

:host([variant='secondary']) #container {
  border-style: solid;

  --_background-color: var(--rh-cta-background-color, transparent);
  --_border-color: var(--rh-cta-border-color, var(--rh-color-border-strong));
  --_color:
    light-dark(var(--rh-cta-color, var(--rh-color-text-primary-on-light, #151515)),
      var(--rh-cta-color, var(--rh-color-text-primary-on-dark, #ffffff)));
  --_hover-background-color:
    light-dark(var(--rh-cta-hover-background-color, var(--rh-color-surface-darkest, #151515)),
      var(--rh-cta-hover-background-color, var(--rh-color-surface-lightest, #ffffff)));
  --_hover-border-color: var(--rh-cta-hover-border-color, var(--rh-color-border-strong));
  --_hover-color:
    light-dark(var(--rh-cta-hover-color, var(--rh-color-text-primary-on-dark, #ffffff)),
      var(--rh-cta-hover-color, var(--rh-color-text-primary-on-light, #151515)));
  --_focus-background-color:
    light-dark(var(--rh-cta-focus-background-color, var(--rh-color-surface-lighter, #f2f2f2)),
      var(--rh-cta-focus-background-color, var(--rh-color-surface-dark, #383838)));
  --_focus-border-color: var(--rh-cta-focus-border-color, var(--rh-color-border-strong));
  --_focus-color: var(--rh-color-text-primary);
  --_focus-inner-border-color:
    var(--rh-cta-focus-inner-border-color,
      var(--rh-color-border-strong));
  --_active-color: /** Sets the cta color on active. Applicable only for secondary variant */
    var(--rh-cta-active-color, var(--rh-color-text-primary));
  --_active-background-color:
    light-dark(var(--rh-cta-active-background-color, var(--rh-color-border-strong)),
      var(--rh-cta-active-background-color, var(--rh-color-surface-lightest, #ffffff)));
  --_active-inner-border-color:
    light-dark(var(--rh-cta-active-inner-border-color, var(--rh-color-surface-light, #e0e0e0)),
      var(--rh-cta-active-inner-border-color, var(--rh-color-border-strong-on-light, #151515)));
}

/*****************************************************************************
 * BRICK
 *****************************************************************************/

:host([variant='brick']) {
  display: inline-block !important;
  max-width: 100%;
  width: 100%;

  & #container {
    border-style: solid;
    font-family: var(--rh-font-family-body-text, RedHatText, 'Red Hat Text', Helvetica, Arial, sans-serif);
    font-weight: var(--rh-font-weight-body-text-regular, 400);
    display: flex;
    flex-flow: row wrap;
    gap: var(--rh-space-md, 8px);
    justify-content: center;
    align-items: center;

    --_background-color: var(--rh-cta-background-color, transparent);
    --_border-color: var(--rh-cta-border-color, var(--rh-color-border-subtle));
    --_color: var(--rh-cta-color, var(--rh-color-interactive-primary-default));
    --_hover-background-color:
      light-dark(var(--rh-cta-hover-background-color, var(--rh-color-surface-lighter, #f2f2f2)),
        var(--rh-cta-hover-background-color, var(--rh-color-surface-darker, #1f1f1f)));
    --_hover-border-color: var(--rh-cta-hover-border-color, var(--rh-color-border-subtle));
    --_hover-color: var(--rh-cta-hover-color, var(--rh-color-interactive-primary-hover));
    --_hover-text-decoration:
      light-dark(var(--rh-cta-hover-text-decoration, none),
        var(--rh-cta-hover-text-decoration, underline));
    --_focus-color: var(--rh-cta-focus-color, var(--rh-color-interactive-primary-default));
    --_focus-border-color: var(--rh-cta-focus-border-color, var(--rh-color-border-subtle));
    --_focus-inner-border-color:
      var(--rh-cta-focus-inner-border-color,
        var(--rh-color-border-subtle));
    --_focus-text-decoration:
      light-dark(var(--rh-cta-focus-text-decoration, none),
        var(--rh-cta-focus-text-decoration, none));
    --_active-background-color:
      light-dark(var(--rh-cta-active-background-color,
        var(--rh-color-surface-lighter, #f2f2f2)),
        var(--rh-cta-active-background-color, var(--rh-color-surface-darker, #1f1f1f)));
    --_active-inner-border-color:
      var(--rh-cta-active-inner-border-color,
        var(--rh-color-border-subtle));
    --_active-text-decoration:
      light-dark(var(--rh-cta-active-text-decoration, none),
        var(--rh-cta-active-text-decoration, underline));

    &.icon rh-icon {
      margin-inline: 0;
    }
  }
}

/* chrome <= 103 */
@supports not (translate: 0 0) {
  rh-icon {
    transform: translate(0, 0);
    transition: transform var(--_trans);
  }

  #container:dir(rtl) rh-icon { transform: translate(0, 0) rotate(180deg); }
  :host(:hover) #container rh-icon { transform: translate(3px, 0); }
  :host(:hover) #container:dir(rtl) rh-icon { transform: translate(-3px, 0) rotate(180deg); }
}
