:host {
  display: inline-flex;
  outline: none;
  vertical-align: top;
  cursor: pointer;
}

[hidden] {
  display: none !important;
}

#container {
  display: inline-flex;
  align-items: center;
  gap: var(--rh-space-lg, 16px);

  --_margin-inline: 5px; /* non standard spacer */
  --_switch-width: 40px;
  --_switch-height: 24px;
  --_switch-handle-size: 14px;
  --_switch-track-background-color:
    light-dark(/** The background color of the switch when it is unchecked. */var(
      --rh-switch-unchecked,
      var(--rh-color-gray-60, #4d4d4d)),
        var(--rh-switch-unchecked, var(--rh-color-gray-40, #a3a3a3)));
  --_switch-handle-color:
    light-dark(var(--rh-color-surface-lightest, #ffffff),
      oklch(from var(--rh-color-surface-dark, #383838) calc(l * 0.82) c h));

  &:after {
    box-shadow: light-dark(none, var(--rh-box-shadow-sm, 0 2px 4px 0 rgba(21, 21, 21, 0.2)));
  }

  #switch {
    align-items: center;
    display: inline-flex;
    flex-shrink: 0;
    position: relative;
    width: var(--_switch-width);
    height: var(--_switch-height);
    border-radius: var(--rh-border-radius-pill, 64px);

    /* track */
    &:before {
      content: '';
      display: flex;
      position: absolute;
      width: 100%;
      height: 100%;
      border-radius: inherit;
      justify-content: center;
      align-items: center;
      background-color: var(--_switch-track-background-color);
    }

    /* handle */
    &:after {
      content: '';
      height: var(--_switch-handle-size);
      width: var(--_switch-handle-size);
      border-radius: var(--rh-border-radius-pill, 64px);
      transform-origin: center;
      z-index: 0;
      background-color: var(--_switch-handle-color);
      margin-inline: var(--_margin-inline);
      translate: 0%;
      transition: translate 0.25s ease 0s;
    }
  }

  & .message {
    color: var(--rh-color-text-secondary);
  }

  &.checked {
    --_switch-track-background-color: /** The background color of the switch when it is checked. */
      var(--rh-switch-checked, var(--rh-color-accent-base));

    & .message {
      color: var(--rh-color-text-primary);
    }

    & #switch:after {
      translate:
        calc(var(--_switch-width) - (var(--_switch-handle-size) +
          (var(--_margin-inline) * 2)));
    }

    & #switch:dir(rtl):after {
      translate:
        calc(-1 * (
            var(--_switch-width) - (var(--_switch-handle-size) +
            (var(--_margin-inline) * 2))
          ));
    }
  }
}

rh-icon {
  margin-inline: var(--_margin-inline);
  color: var(--_switch-handle-color);
  position: absolute;
  z-index: 1;
}

:host(:is(:focus, :focus-within)) #container #switch {
  outline: var(--rh-border-width-md, 2px) solid var(--rh-color-border-interactive);
  outline-offset: var(--rh-space-sm, 6px);
}

:host(:disabled) {
  pointer-events: none;
  cursor: not-allowed;

  & #container {
    & .message {
      color: var(--rh-color-gray-50, #707070);
    }

    & ::slotted(*),
    & span {
      color: light-dark(var(--rh-color-gray-60, #4d4d4d), var(--rh-color-gray-40, #a3a3a3));
    }

    &.checked,
    &:not(.checked) {
      --_switch-track-background-color:
        light-dark(/** The background color of the switch when it is disabled. */var(
          --rh-switch-disabled,
          var(--rh-color-gray-30, #c7c7c7)),
            var(--rh-switch-disabled, var(--rh-color-gray-60, #4d4d4d)));
    }
  }
}
