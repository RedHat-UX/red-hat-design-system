diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.d.ts b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.d.ts
new file mode 100644
index 0000000..05be11d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.d.ts
@@ -0,0 +1,21 @@
+import type { PfeConfig } from '../config.js';
+import { Manifest } from '../custom-elements-manifest/lib/Manifest.js';
+interface DocsPageOptions extends PfeConfig {
+    docsTemplatePath?: string;
+    tagName?: string;
+    title?: string;
+    /** When true, renders an <h1> with the element's title in the element docs overview */
+    renderTitleInOverview?: boolean;
+}
+export declare class DocsPage {
+    manifest: Manifest;
+    static isDocsPage: boolean;
+    tagName: string;
+    title: string;
+    slug: string;
+    description?: string | null;
+    summary?: string | null;
+    docsTemplatePath?: string;
+    constructor(manifest: Manifest, options?: DocsPageOptions);
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js
new file mode 100644
index 0000000..34ced6e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js
@@ -0,0 +1,16 @@
+import { Manifest } from '../custom-elements-manifest/lib/Manifest.js';
+import slugify from 'slugify';
+export class DocsPage {
+    static { this.isDocsPage = true; }
+    constructor(manifest, options) {
+        this.manifest = manifest;
+        this.tagName = options?.tagName ?? '';
+        this.title = options?.title ?? Manifest.prettyTag(this.tagName);
+        this.docsTemplatePath = options?.docsTemplatePath;
+        this.summary = this.manifest.getSummary(this.tagName);
+        this.description = this.manifest.getDescription(this.tagName);
+        const aliased = options?.aliases?.[this.tagName] ?? this.tagName.replace(/^\w+-/, '');
+        this.slug = slugify(aliased, { strict: true, lower: true });
+    }
+}
+//# sourceMappingURL=DocsPage.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js.map b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js.map
new file mode 100644
index 0000000..6d841c2
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/DocsPage.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"DocsPage.js","sourceRoot":"","sources":["DocsPage.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,6CAA6C,CAAC;AAEvE,OAAO,OAAO,MAAM,SAAS,CAAC;AAU9B,MAAM,OAAO,QAAQ;aACZ,eAAU,GAAG,IAAI,CAAC;IAOzB,YAAmB,QAAkB,EAAE,OAAyB;QAA7C,aAAQ,GAAR,QAAQ,CAAU;QACnC,IAAI,CAAC,OAAO,GAAG,OAAO,EAAE,OAAO,IAAI,EAAE,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,OAAO,EAAE,KAAK,IAAI,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,gBAAgB,GAAG,OAAO,EAAE,gBAAgB,CAAC;QAClD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC9D,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9D,CAAC","sourcesContent":["import type { PfeConfig } from '../config.js';\nimport { Manifest } from '../custom-elements-manifest/lib/Manifest.js';\n\nimport slugify from 'slugify';\n\ninterface DocsPageOptions extends PfeConfig {\n  docsTemplatePath?: string;\n  tagName?: string;\n  title?: string;\n  /** When true, renders an <h1> with the element's title in the element docs overview */\n  renderTitleInOverview?: boolean;\n}\n\nexport class DocsPage {\n  static isDocsPage = true;\n  tagName: string;\n  title: string;\n  slug: string;\n  description?: string | null;\n  summary?: string | null;\n  docsTemplatePath?: string;\n  constructor(public manifest: Manifest, options?: DocsPageOptions) {\n    this.tagName = options?.tagName ?? '';\n    this.title = options?.title ?? Manifest.prettyTag(this.tagName);\n    this.docsTemplatePath = options?.docsTemplatePath;\n    this.summary = this.manifest.getSummary(this.tagName);\n    this.description = this.manifest.getDescription(this.tagName);\n    const aliased = options?.aliases?.[this.tagName] ?? this.tagName.replace(/^\\w+-/, '');\n    this.slug = slugify(aliased, { strict: true, lower: true });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/anchors.cjs b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/anchors.cjs
new file mode 100644
index 0000000..87ee973
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/anchors.cjs
@@ -0,0 +1,42 @@
+/**
+ * @license Apache-2.0
+ * Portions copyright https://github.com/orchidjs/eleventy-plugin-ids
+ */
+
+const cheerio = require('cheerio');
+
+/**
+ * @param {import('@11ty/eleventy/src/UserConfig')} eleventyConfig
+ * @param {{ prefix: string; formatter: (element: *, existingIds: string[]) => string; selectors: string[]; exclude: RegExp; }} config
+ */
+module.exports = function(eleventyConfig, config = {}) {
+  let { selectors, prefix, formatter } = config;
+  selectors ??= ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
+  prefix ??= '';
+  formatter ??= function(element) {
+    return prefix + eleventyConfig.javascriptFunctions
+        .slug(element.textContent)
+        .replace(/[&,+()$~%.'":*?!<>{}]/g, '');
+  };
+
+  eleventyConfig.addTransform('ids', async function(rawContent, outputPath) {
+    if (!outputPath || !outputPath.endsWith('.html') || config.exclude?.test?.(outputPath)) {
+      return rawContent;
+    } else {
+      const $ = cheerio.load(rawContent);
+      const ids = [];
+      for (const selector of selectors) {
+        $(selector).each(function() {
+          const el = $(this);
+          const id = el.attr('id');
+          if (id) {
+            ids.push(id);
+          } else {
+            el.attr('id', formatter(el, ids));
+          }
+        });
+      }
+      return $.html();
+    }
+  });
+};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/custom-elements-manifest.cjs b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/custom-elements-manifest.cjs
new file mode 100644
index 0000000..c7465d8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/custom-elements-manifest.cjs
@@ -0,0 +1,102 @@
+// @ts-check
+const { join } = require('node:path');
+const { existsSync } = require('node:fs');
+const { glob } = require('glob');
+const { stat, rm } = require('node:fs/promises');
+
+const isDir = dir => stat(dir).then(x => x.isDirectory, () => false);
+
+// TODO: programmable package scopes, etc
+/**
+ * @param {*} eleventyConfig
+ * @param {import('./types').PluginOptions} pluginOpts
+ */
+module.exports = function configFunction(eleventyConfig, pluginOpts = {}) {
+  eleventyConfig.addGlobalData('env', () => process.env);
+
+  eleventyConfig.addGlobalData('demos', async function demos() {
+    const { Manifest } = await import('../../custom-elements-manifest/lib/Manifest.js');
+    const { getPfeConfig } = await import('../../config.js');
+    const options = { ...getPfeConfig(), ...pluginOpts };
+    const extraDemos = options?.extraDemos ?? [];
+
+    // 1. get all packages
+    // 2. get manifests per package
+    // 3. get tagNames per manifest
+    // 4. get demos per tagName
+    // 5. generate demo record with tagName, slug, title, and filepath per demo
+    return Manifest.getAll(options.rootDir)
+        .flatMap(manifest => manifest.getTagNames()
+            .flatMap(tagName => [...manifest.getDemoMetadata(tagName, options), ...extraDemos]));
+  });
+
+  eleventyConfig.addGlobalData('elements', async function elements() {
+    const { Manifest } = await import('../../custom-elements-manifest/lib/Manifest.js');
+    const { DocsPage } = await import('../DocsPage.js');
+    const { getPfeConfig } = await import('../../config.js');
+    const options = { ...getPfeConfig(), ...pluginOpts };
+    const rootDir = options?.rootDir ?? process.cwd();
+
+    // 1. get all packages
+    // 2. get manifests from packages, construct manifest objects, associate packages
+    // 3. get all tag names from each manifest. construct docs page for tag names w/ associates manifest and package
+    return Manifest.getAll(rootDir)
+        .flatMap(manifest =>
+          Array.from(manifest.declarations.values(), decl => {
+            const { tagName } = decl;
+            const elementsDir = options.elementsDir ?? 'elements';
+            const docsTemplatePath = join(process.cwd(), elementsDir, `${tagName}`, 'docs', `${tagName}.md`);
+            return new DocsPage(manifest, {
+              ...options,
+              tagName,
+              // only include the template if it exists
+              ...Object.fromEntries(Object.entries({ docsTemplatePath }).filter(([, path]) =>
+                existsSync(path))),
+            });
+          }));
+  });
+
+  // Netlify tends to turn html files into directories with index.html,
+  // but 11ty already did that, so let's delete the html file.
+  eleventyConfig.on('eleventy.after', async function({ runMode, dir }) {
+    const { getPfeConfig } = await import('../../config.js');
+    const options = { ...getPfeConfig(), ...pluginOpts };
+    if (runMode === 'build') {
+      const files = await glob(`${dir.output}/${options.site.componentSubpath}/*/demo/*`);
+      const htmls = files.filter(x => x.endsWith('.html') && !x.endsWith('/index.html'));
+      for (const file of htmls) {
+        const dir = file.replace(/\.html$/, '');
+        if (await isDir(dir)) {
+          await rm(file);
+        }
+      }
+    }
+  });
+
+  // 11ty turn elements/pf-jazz-hands/demo/special-name.html into
+  //            components/jazz-hands/demo/special-name/index.html
+  // Here, we rewrite the subresource links so they point to the right files.
+  eleventyConfig.addTransform('reroute-special-demo-subresources', function(content) {
+    if (this.inputPath.endsWith('/demos.html')) {
+      const [, one, , three, four] = this.outputPath.split('/');
+      if (one === 'components' && three === 'demo' && four !== 'index.html') {
+        const cheerio = require('cheerio');
+        const $ = cheerio.load(content);
+        $('body link').each(function() {
+          const href = $(this).attr('href');
+          if (href && !href.startsWith('http')) {
+            $(this).attr('href', join('..', href));
+          }
+        });
+        $('body script, body img').each(function() {
+          const src = $(this).attr('src');
+          if (src && !src.startsWith('http')) {
+            $(this).attr('src', join('..', src));
+          }
+        });
+        return $.html();
+      }
+    }
+    return content;
+  });
+};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/order-tags.cjs b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/order-tags.cjs
new file mode 100644
index 0000000..aaf0cb5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/order-tags.cjs
@@ -0,0 +1,20 @@
+function alphabetically(a, b) {
+  return (
+      a.data.title < b.data.title ? -1
+    : a.data.title > b.data.title ? 1
+    : 0
+  );
+}
+
+const byOrder = (a, b) => a.data.order - b.data.order;
+
+module.exports = {
+  configFunction(eleventyConfig, options) {
+    for (const tag of options?.tags ?? []) {
+      eleventyConfig.addCollection(tag, collection =>
+        collection
+            .getFilteredByTag(tag)
+            .sort(options.order === 'alphabetical' ? alphabetically : byOrder));
+    }
+  },
+};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/table-of-contents.cjs b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/table-of-contents.cjs
new file mode 100644
index 0000000..0430467
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/table-of-contents.cjs
@@ -0,0 +1,118 @@
+/** @license portions MIT Jordan Shermer */
+const cheerio = require('cheerio');
+
+/** Attribute which if found on a heading means the heading is excluded */
+const ignoreAttribute = 'data-toc-exclude';
+
+const defaults = {
+  tags: ['h2', 'h3', 'h4'],
+  ignoredElements: [],
+  wrapper: 'nav',
+  wrapperClass: 'toc',
+  headingText: '',
+  headingTag: 'h2',
+};
+
+function getParent(prev, current) {
+  if (current.level > prev.level) {
+    // child heading
+    return prev;
+  } else if (current.level === prev.level) {
+    // sibling of previous
+    return prev.parent;
+  } else {
+    // above the previous
+    return getParent(prev.parent, current);
+  }
+}
+
+class Item {
+  constructor($el) {
+    if ($el) {
+      this.slug = $el.attr('id');
+      this.text = $el.text().trim();
+      this.level = +$el.get(0).tagName.slice(1);
+    } else {
+      this.level = 0;
+    }
+    this.children = [];
+  }
+
+  html() {
+    let markup = '';
+    if (this.slug && this.text) {
+      markup += `
+                    <li><a href="#${this.slug}">${this.text}</a>
+            `;
+    }
+    if (this.children.length > 0) {
+      markup += `
+                <ol>
+                    ${this.children.map(item => item.html()).join('\n')}
+                </ol>
+            `;
+    }
+
+    if (this.slug && this.text) {
+      markup += '\t\t</li>';
+    }
+
+    return markup;
+  }
+}
+
+class Toc {
+  constructor(htmlstring = '', options = defaults) {
+    this.options = { ...defaults, ...options };
+    const selector = this.options.tags.join(',');
+    this.root = new Item();
+    this.root.parent = this.root;
+
+    const $ = cheerio.load(htmlstring);
+
+    const headings = $(selector)
+        .filter('[id]')
+        .filter(`:not([${ignoreAttribute}])`);
+
+    const ignoredElementsSelector = this.options.ignoredElements.join(',');
+    headings.find(ignoredElementsSelector).remove();
+
+    if (headings.length) {
+      let previous = this.root;
+      headings.each((index, heading) => {
+        const current = new Item($(heading));
+        const parent = getParent(previous, current);
+        current.parent = parent;
+        parent.children.push(current);
+        previous = current;
+      });
+    }
+  }
+
+  get() {
+    return this.root;
+  }
+
+  html() {
+    const { wrapper, wrapperClass, headingText, headingTag } = this.options;
+    const root = this.get();
+
+    let html = '';
+
+    if (root.children.length) {
+      html += `<${wrapper} class="${wrapperClass}"> ${!headingText ? '' : `<${headingTag}>${headingText}</${headingTag}>\n`}${root.html()}</${wrapper}>`;
+    }
+
+    return html;
+  }
+}
+
+module.exports = {
+  initArguments: {},
+  configFunction: function(eleventyConfig, options = {}) {
+    eleventyConfig.addFilter('toc', (content, opts) => {
+      const toc = new Toc(content, { ...options, ...opts });
+      return toc.html();
+    });
+  },
+};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/todos.cjs b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/todos.cjs
new file mode 100644
index 0000000..2097c33
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/todos.cjs
@@ -0,0 +1,42 @@
+const { readFile } = require('fs/promises');
+const { extname } = require('path');
+const { glob } = require('glob');
+
+const cache = new Map();
+
+module.exports = function(eleventyConfig) {
+  eleventyConfig.addGlobalData('todos', async function generateTodos() {
+    const { parse, report } = await import('leasot');
+    const start = performance.now();
+
+    const todos = [];
+
+    const files = await glob('{elements,core,tools}/**/*.ts', {
+      ignore: ['**/node_modules/**/*', '*.spec.ts', '*.test.ts'],
+    });
+
+    const cacheKey = files.join('--');
+    const cached = cache.get(cacheKey);
+
+    if (cached) {
+      return cached;
+    }
+
+    for (const filename of files) {
+      const contents = await readFile(filename, 'utf8');
+      const extension = extname(filename);
+      const parsed = await parse(contents, { extension, filename });
+      const output = await report(parsed, 'raw');
+      todos.push(...output);
+    }
+
+    cache.set(cacheKey, todos);
+
+    const end = performance.now();
+
+    // eslint-disable-next-line no-console
+    console.log(`[TODOs] Generated in ${(end - start) / 1000}s`);
+
+    return todos;
+  });
+};
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.d.ts b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.d.ts
new file mode 100644
index 0000000..e10482d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.d.ts
@@ -0,0 +1,38 @@
+import type { PfeConfig } from '@patternfly/pfe-tools/config';
+import type { Manifest } from '@patternfly/pfe-tools/custom-elements-manifest/lib/Manifest.js';
+export interface DemoRecord {
+    title: string;
+    tagName: string;
+    tagPrefix: string;
+    primaryElementName: string;
+    manifest: Manifest;
+    slug: string;
+    filePath: string;
+    permalink: string;
+    url: string;
+}
+export interface PluginOptions extends PfeConfig {
+    /** list of extra demo records not included in the custom-elements-manifest. Default [] */
+    extraDemos?: DemoRecord[];
+}
+export interface EleventyPage {
+    date: Date;
+    /** Path to the input file */
+    inputPath: string;
+    fileSlug: string;
+    filePathStem: string;
+    outputFileExtension: string;
+    /** final generated permalink pathname */
+    url: string;
+    /** file output path */
+    outputPath: string;
+}
+export interface EleventyContext {
+    page: EleventyPage;
+    /** NB: New with 11ty 1.0.0? Maybe it's the pagination value? */
+    ctx?: {
+        /** The pagination value? */
+        _?: unknown;
+    };
+}
+export type RendererName = `render${'Attributes' | 'CssCustomProperties' | 'CssParts' | 'Events' | 'Methods' | 'Overview' | 'Properties' | 'Slots'}`[];
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js
new file mode 100644
index 0000000..718fd38
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=types.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js.map b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js.map
new file mode 100644
index 0000000..4012f0d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/11ty/plugins/types.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"types.js","sourceRoot":"","sources":["types.ts"],"names":[],"mappings":"","sourcesContent":["import type { PfeConfig } from '@patternfly/pfe-tools/config';\nimport type { Manifest } from '@patternfly/pfe-tools/custom-elements-manifest/lib/Manifest.js';\n\nexport interface DemoRecord {\n  title: string;\n  tagName: string;\n  tagPrefix: string;\n  primaryElementName: string;\n  manifest: Manifest;\n  slug: string;\n  filePath: string;\n  permalink: string;\n  url: string;\n}\n\nexport interface PluginOptions extends PfeConfig {\n  /** list of extra demo records not included in the custom-elements-manifest. Default [] */\n  extraDemos?: DemoRecord[];\n}\n\nexport interface EleventyPage {\n  date: Date;\n  /** Path to the input file */\n  inputPath: string;\n  fileSlug: string;\n  filePathStem: string;\n  outputFileExtension: string;\n  /** final generated permalink pathname */\n  url: string;\n  /** file output path */\n  outputPath: string;\n}\n\n\nexport interface EleventyContext {\n  page: EleventyPage;\n  /** NB: New with 11ty 1.0.0? Maybe it's the pagination value? */\n  ctx?: {\n    /** The pagination value? */\n    _?: unknown;\n  };\n}\n\nexport type RendererName = `render${\n  | 'Attributes'\n  | 'CssCustomProperties'\n  | 'CssParts'\n  | 'Events'\n  | 'Methods'\n  | 'Overview'\n  | 'Properties'\n  | 'Slots'\n}`[];\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/CHANGELOG.md b/node_modules/@patternfly/pfe-tools/package/CHANGELOG.md
new file mode 100644
index 0000000..5215809
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/CHANGELOG.md
@@ -0,0 +1,884 @@
+# @patternfly/pfe-tools
+
+## 4.0.3
+### Patch Changes
+
+- 9208bcf: Dev Server: pass `ignore` and `typeScript` options to import map generator plugin
+
+## 4.0.2
+### Patch Changes
+
+- 2910260: Update changesets version
+
+## 4.0.1
+
+### Patch Changes
+
+- d2cd76d: **Test Runner**: prevent config exception when lightdom shims are present
+
+## 4.0.0
+
+### Major Changes
+
+- f779095: Removes `EleventyRenderPlugin` from custom-elements-manifest 11ty plugin config. Ensure you add it yourself.
+
+  Before:
+
+  ```js
+  module.exports = function (eleventyConfig) {
+    eleventyConfig.addPlugin(CustomElementsManifestPlugin);
+  };
+  ```
+
+  After:
+
+  ```js
+  import { EleventyRenderPlugin } from "@11ty/eleventy"; // 3.0.0 only
+  export default function (eleventyConfig) {
+    eleventyConfig.addPlugin(CustomElementsManifestPlugin);
+    eleventyConfig.addPlugin(EleventyRenderPlugin);
+  }
+  ```
+
+## 3.0.2
+
+### Patch Changes
+
+- 4a03ced: SSR: add shim for `ResizeObserver`
+
+## 3.0.1
+
+### Patch Changes
+
+- 921e5d5: TypeScript CSS Import Transforms: allow importing from bare specifiers
+
+## 3.0.0
+
+### Major Changes
+
+- 1ca3515: **Custom Elements Manifest**: Removed support for non-standard inline `{@default value}` JSDoc tags. Use standard syntax instead
+
+  **Before**:
+
+  ```js
+  /**
+   * @cssprop --foo {@default bar} Foo
+   */
+  ```
+
+  **After**:
+
+  ```js
+  /**
+   * @cssprop [--foo=bar] Foo
+   */
+  ```
+
+- c9bd577: **Custom Elements Manifest**: added `custom-elements-manifest.js`, which exports the function `getAllManifests`
+
+  ```js
+  import { getAllManifests } from "@patternfly/pfe-tools/custom-elements-manifest/custom-elements-manifest/.js";
+
+  for (const manifest of getAllManifests()) {
+    const packageName = manifest.packageJson?.name ?? "package";
+    console.log(
+      `Available Elements in ${packageName}`,
+      ...manifest.getTagNames()
+    );
+  }
+  ```
+
+### Minor Changes
+
+- c9bd577: `a11ySnapshot`: Added chai assertions for various accessibility-tree scenarios
+
+  Examples:
+
+  ```ts
+  describe("<pf-accordion>", function () {
+    beforeEach(() =>
+      fixture(html`
+        <pf-accordion>
+          <pf-accordion-header id="header1">header-1</pf-accordion-header>
+          <pf-accordion-panel>panel-1</pf-accordion-panel>
+        </pf-accordion>
+      `)
+    );
+    describe("clicking the first heading", function () {
+      beforeEach(clickFirstHeading);
+      it("expands the first panel", async function () {
+        expect(await a11ySnapshot()).to.axContainName("panel-1");
+      });
+      it("focuses the first panel", async function () {
+        expect(await a11ySnapshot()).to.have.axTreeFocusOn(
+          document.getElementById("header1")
+        );
+      });
+      it("shows the collapse all button", async function () {
+        expect(await a11ySnapshot()).to.axContainRole("button");
+      });
+    });
+  });
+  ```
+
+- c9bd577: Added `querySnapshot` accessibility testing helper
+
+  ```ts
+  describe("then clicking the toggle", function () {
+    beforeEach(async function () {
+      await clickElementAtCenter(toggle);
+    });
+    it("expands the disclosure panel", async function () {
+      const snapshot = await a11ySnapshot();
+      const expanded = querySnapshot(snapshot, { expanded: true });
+      expect(expanded).to.be.ok;
+    });
+  });
+  ```
+
+- c9bd577: **TypeScript**: Add static version transformer. This adds a runtime-only
+  static `version` field to custom element classes.
+
+  ```js
+  import "@patternfly/elements/pf-button/pf-button.js";
+  const PFE_VERSION = await customElements
+    .whenDefined("pf-button")
+    .then((PfButton) => PfButton.version);
+  ```
+
+### Patch Changes
+
+- c9bd577: updated dependencies
+- 9d68f3d: **Dev Server**: load lightdom shim files
+- 9d68f3d: **Dev Server**: reload on typescript file changes
+- f3f68c9: Windows compatibility for various tools packages
+- c9bd577: **Dev Server**: use last modified time for the dev server cache
+- c9bd577: **Test Runner Config**: import the production version of Lit for tests, reducing
+  console chatter during test runs
+
+## 2.0.3
+
+### Patch Changes
+
+- aca8409: **React**: ensure that only classes which are exported get wrapped
+
+## 2.0.2
+
+### Patch Changes
+
+- c57c5dd: Dev Server: redirect demo links to css lightdom subresources
+- 9995136: **React**: corrected syntax error in some generated modules
+
+## 2.0.1
+
+### Patch Changes
+
+- d50a651: Dev Server: update icon and theme colours
+- 65079fb: Update typescript types
+
+## 2.0.0
+
+### Major Changes
+
+- de4cfa4: Remove `DocsPage` render functions
+- de4cfa4: Dev server config no longer uses `nodeResolution`. Instead you must provide configuration for the import map plugin.
+
+  ```js
+  import {
+    pfeDevServerConfig,
+    getPatternflyIconNodemodulesImports,
+  } from "@patternfly/pfe-tools/dev-server/config.js";
+
+  export default pfeDevServerConfig({
+    importMapOptions: {
+      providers: {
+        "zero-md": "nodemodules",
+        "@patternfly/icons": "nodemodules",
+        "@patternfly/elements": "nodemodules",
+        "@patternfly/pfe-tools": "nodemodules",
+        "@patternfly/pfe-core": "nodemodules",
+      },
+      inputMap: {
+        imports: {
+          ...(await getPatternflyIconNodemodulesImports(import.meta.url)),
+        },
+      },
+    },
+  });
+  ```
+
+- de4cfa4: Remove react and vue test wrapper helpers. Use React wrapper components instead.
+
+### Minor Changes
+
+- 502e931: React wrapper generator: add parameters to support different packages
+
+### Patch Changes
+
+- e6ca914: Update dependencies
+- fd1202d: `typescript/css-imports`: prevent shared css modules from being inlined to files; emit them instead.
+- 22d7536: Update typescript version
+- 50f462c: Update dependencies, including Lit version 3
+
+## 1.5.0
+
+### Minor Changes
+
+- 57b7dba20: Test: add `clickElementAtOffset` utility function for tests
+- dcdbce66d: Test: add `clickElementAtCenter` utility function for tests
+
+## 1.4.2
+
+### Patch Changes
+
+- 91850fbf8: fixed TypeScript typings for react wrappers
+
+## 1.4.1
+
+### Patch Changes
+
+- 1924229ea: Generate TypeScript typings for React wrapper components
+
+## 1.4.0
+
+### Minor Changes
+
+- f4a7ae7d7: **React**: adds `@patternfly/pfe-tools/react/generate-wrappers.js`
+
+  Use this to generate React component wrappers for Lit custom elements,
+  based on their `custom-elements.json` manifest.
+
+  ```js
+  import { generateReactWrappers } from "@patternfly/pfe-tools/react/generate-wrappers.js";
+
+  const inURL = new URL("../elements/custom-elements.json", import.meta.url);
+  const outURL = new URL("../elements/react/", import.meta.url);
+
+  await generateReactWrappers(inURL, outURL);
+  ```
+
+### Patch Changes
+
+- 699a812bf: `11ty`: prevent duplicate IDs on code pages when multiple elements are documented
+
+## 1.3.2
+
+### Patch Changes
+
+- cdd1d4232: `DocsPage`: renders headings as markdown ([PR](https://github.com/patternfly/patternfly-elements/pull/2516))
+- d7dd0353b: `dev-server`: Corrects aliased elements redirects
+
+## 1.3.1
+
+### Patch Changes
+
+- d5c6c199f: **Dev Server**: fixes `*-lightdom.css` support in config
+
+## 1.3.0
+
+### Minor Changes
+
+- 4832b29ab: **Test Helpers**: Added `allUpdates` test helper, which waits until an element
+  completely finishes updating.
+
+  ```js
+  const element = await fixture(html`<my-el></my-el>`);
+  await allUpdates(element);
+  ```
+
+### Patch Changes
+
+- a4c20b70d: **Dev Server**: updates router to use project subpath configuration
+
+## 1.2.0
+
+### Minor Changes
+
+- 69e7f5b9e: Added `site.componentSubpath` config to `.pfe.config.json`, representing the
+  site subpath for component pages and demos. Default is `'components'`.
+
+## 1.1.1
+
+### Patch Changes
+
+- 90b3ade12: Removes special characters from component slugs ie. `special (characters)` becomes `special-characters`
+
+## 1.1.0
+
+### Minor Changes
+
+- 79f30b8f6: `11ty/plugins/custom-elements-manifest.cjs`: added `renderTitleInOverview`
+  option, a boolean flag which defaults to `true`.
+
+  When true, this option renders an `<h1>` in the element's docs page's "Overview"
+  section.
+
+  Note: the next major release will switch this option to `false` by default, so
+  to prepare your docs pages, add your own headings:
+
+  BEFORE:
+
+  ```md
+  {% renderOverview %}
+  <pf-jazz-hands></pf-jazz-hands>
+  {% endrenderOverview %}
+  ```
+
+  AFTER:
+
+  ```md
+  <section class="band">
+    <h1 id="jazz-hands">Jazz Hands</h1>
+  </section>
+
+  {% renderOverview %}
+  <pf-jazz-hands></pf-jazz-hands>
+  {% endrenderOverview %}
+  ```
+
+## 1.0.1
+
+### Patch Changes
+
+- cfc5913c6: `pfe-tools`:
+  - Updated dev server header styles to match look and feel of 11ty documentation site
+  - Added `repoHost` to `PfeConfig` which enables customizing the dev server repository host name and icon
+
+## 1.0.0
+
+### Major Changes
+
+- d01c7e067: Removed and deprecated esbuild and cem/a features
+
+  ### Breaking Changes
+
+  - ❌ Removed esbuild helpers
+  - 💱 Moved custom-elements-manifest config helper to `custom-elements-manifest/config.js`
+  - 💱 Moved dev-server config helper to `dev-server/config.js`
+  - 💱 Moved test-runner config helper to `test-runner/config.js`
+  - ⚠️ Deprecated custom-elements-manifest helpers
+
+### Minor Changes
+
+- c76a65b93: ✨ Added `minify` option to `@patternfly/pfe-tools/typescript/transformers/css-imports.cjs`
+- 99db432f4: ✨ Added `anchors` 11ty plugin, based on [@orchidjs/eleventy-plugin-ids][npm]
+
+  [npm]: https://npm.im/@orchidjs/eleventy-plugin-ids
+
+- d4a99f6c2: ✨ Added `@patternfly/pfe-tools` package
+
+  - ✨ Added dev server and test runner configs
+  - ✨ Added custom-elements-manifest analyzer configs and plugins
+  - ✨ Added typescript transform to inline css imports
+  - ✨ Added 11ty plugins to render custom element manifests, etc.
+  - ✨ Added test helpers like `a11ySnapshot`
+  - ✨ Added `Logger` stub for quieter tests
+  - ✨ Added `colored(colorString)` assertion to chai when using `createFixture`
+    ```js
+    expect("rgba(0,0,0,0)").to.be.colored("transparent");
+    ```
+  - ✨ Added an optional unified config file for custom elements manifest, dev
+    server, and docs pages
+
+    Create a `.pfe.config.json` file at the root of your project to customize the
+    pfe tools builds.
+
+    The default values are:
+
+    ```json
+    {
+      "tagPrefix": "pfe",
+      "demoURLPrefix": "https://patternflyelements.org/",
+      "sourceControlURLPrefix": "https://github.com/patternfly/patternfly-elements/tree/main/",
+      "aliases": {},
+      "site": {
+        "title": "PatternFly Elements",
+        "description": "PatternFly Elements: A set of community-created web components based on PatternFly design.",
+        "favicon": "/brand/logo/svg/pfe-icon-blue.svg",
+        "logoUrl": "/brand/logo/svg/pfe-icon-white-shaded.svg",
+        "stylesheets": []
+      }
+    }
+    ```
+
+    See `@patternfly/pfe-tools/config.d.ts` for more information.
+
+### Patch Changes
+
+- 0a22a3375: `dev-server`: refresh element css when files change
+- 3ab1de179: Allowed TypeScript modules to import multiple CSS modules when inlining CSS.
+- f03a41941: 11ty plugin: calculate path to demo files in more circumstances
+- 42d5cd9fb: `a11ySnapshot`: fixed typescript types
+- 5d3315fd4: Prepared release candidate
+- b3b472ef6: update 11ty
+- 3035d9163: analyzer: find demos in different repo setups
+- 66b025d86: dev-server: fixed demo script import and styles
+
+## 1.0.0-rc.8
+
+### Patch Changes
+
+- 0a22a3375: `dev-server`: refresh element css when files change
+- f03a41941: 11ty plugin: calculate path to demo files in more circumstances
+- 42d5cd9fb: `a11ySnapshot`: fixed typescript types
+
+## 1.0.0-rc.7
+
+### Patch Changes
+
+- b3b472ef6: update 11ty
+
+## 1.0.0-rc.6
+
+### Patch Changes
+
+- 66b025d86: dev-server: fixed demo script import and styles
+
+## 1.0.0-rc.5
+
+### Patch Changes
+
+- 3035d9163: analyzer: find demos in different repo setups
+
+## 1.0.0-rc.4
+
+### Minor Changes
+
+- c76a65b93: ✨ Added `minify` option to `@patternfly/pfe-tools/typescript/transformers/css-imports.cjs`
+
+### Patch Changes
+
+- 3ab1de179: Allowed TypeScript modules to import multiple CSS modules when inlining CSS.
+
+## 1.0.0-rc.3
+
+### Minor Changes
+
+- 99db432f4: ✨ Added `anchors` 11ty plugin, based on [@orchidjs/eleventy-plugin-ids][npm]
+
+  [npm]: https://npm.im/@orchidjs/eleventy-plugin-ids
+
+## 1.0.0-rc.2
+
+### Major Changes
+
+- d01c7e067: Removed and deprecated esbuild and cem/a features
+
+  ### Breaking Changes
+
+  - ❌ Removed esbuild helpers
+  - 💱 Moved custom-elements-manifest config helper to `custom-elements-manifest/config.js`
+  - 💱 Moved dev-server config helper to `dev-server/config.js`
+  - 💱 Moved test-runner config helper to `test-runner/config.js`
+  - ⚠️ Deprecated custom-elements-manifest helpers
+
+## 1.0.0-rc.1
+
+### Patch Changes
+
+- 5d3315fd: Prepared release candidate
+
+## 1.0.0-next.41
+
+### Patch Changes
+
+- 457eaa9d0: `pfe-tools`: Set typescript compilerOptions `composite: true`
+
+  `pfe-tooltip`: Added return type for anonymous function for content in constructor
+
+## 1.0.0-next.40
+
+### Patch Changes
+
+- 6369ee00d: load elementinternals polyfill in dev server
+- fb96c92ed: Added `disabled` property to a11y snapshot type
+- b841afe40: tools: made `a11ySnapshot` helper a bit more ergonomic
+- 0fe6c52db: Added constructible stylesheets polyfill to dev server
+- b841afe40: tools: fixed demo server hamburger buttons
+
+## 1.0.0-next.39
+
+### Minor Changes
+
+- d47ecddf: Added `A11ySnapshot` type to pfe-tools
+
+## 1.0.0-next.38
+
+### Patch Changes
+
+- 8294d385: Fixed package publishing automation scripts.
+
+## 1.0.0-next.37
+
+### Patch Changes
+
+- 6b6e2617: Updates use of pfe-button
+
+## 1.0.0-next.36
+
+### Patch Changes
+
+- fcdcc274: Removing pfe-page-status
+
+## 1.0.0-next.35
+
+### Patch Changes
+
+- 0ef73073: Removing pfe-collapse
+
+## 1.0.0-next.34
+
+### Minor Changes
+
+- 4400866a: Adds a11y tree testing to test runner config
+
+### Patch Changes
+
+- 9d10155b: Update element internals polyfill, fixes clicking on label in safari
+- 4400866a: update dependencies
+
+## 1.0.0-next.33
+
+### Minor Changes
+
+- daba8a53: Changing from pfe-datetime to pfe-timestamp
+
+## 1.0.0-next.32
+
+### Minor Changes
+
+- 07ad1d3d: Adds testing utilities to stub Logger methods
+
+## 1.0.0-next.31
+
+### Patch Changes
+
+- b1c439d5: Removed esbuild target configuration relying on tsconfig.json for configuration options.
+
+## 1.0.0-next.30
+
+### Minor Changes
+
+- dcb85646: Adds tsconfig option to dev server config
+- 4ccd1ff8: Adds `deslugify` function to config module
+  Fixes demo manifest utility functions - gets the correct path by deslugifying the demo url.
+
+### Patch Changes
+
+- 29c0b6cd: Update the TS target in dev server
+- eeebb45d: Replace `<pfe-progress-indicator>` with `<pfe-spinner>`
+
+## 1.0.0-next.29
+
+### Minor Changes
+
+- 3f0c6ca2: Adds an optional unified config file for custom elements manifest, dev server, and docs pages
+
+  Create a `.pfe.config.json` file at the root of your project to customize the pfe tools builds.
+
+  The default values are:
+
+  ```json
+  {
+    "tagPrefix": "pfe",
+    "demoURLPrefix": "https://patternflyelements.org/",
+    "sourceControlURLPrefix": "https://github.com/patternfly/patternfly-elements/tree/main/",
+    "aliases": {},
+    "site": {
+      "title": "PatternFly Elements",
+      "description": "PatternFly Elements: A set of community-created web components based on PatternFly design.",
+      "favicon": "/brand/logo/svg/pfe-icon-blue.svg",
+      "logoUrl": "/brand/logo/svg/pfe-icon-white-shaded.svg",
+      "stylesheets": []
+    }
+  }
+  ```
+
+  See `@patternfly/pfe-tools/config.d.ts` for more information.
+
+## 1.0.0-next.28
+
+### Patch Changes
+
+- bfad8b4b: Updates dependencies
+- bfad8b4b: fix local module resolution in dev server
+- a423b010: fix typescript config and update dependencies
+- bfad8b4b: dev server: Resolve local elements from their source files
+
+## 1.0.0-next.27
+
+### Patch Changes
+
+- c625b329: Store nav state
+- a44b5484: Serve changes to TypeScript sources
+
+## 1.0.0-next.26
+
+### Patch Changes
+
+- 58fe3a75: Include dev server webfonts in npm tarball
+
+## 1.0.0-next.25
+
+### Patch Changes
+
+- 4ff704d4: Add html template to npm tarball
+
+## 1.0.0-next.24
+
+### Major Changes
+
+- 654a9489: Remove `githubUrl` site option - uses sourceControlPrefixURL instead
+- e3de6bde: Adds `site.stylesheets` option to dev server config. REMOVES `site.tagPrefix` option in favor of `tagPrefix` option
+
+## 1.0.0-next.23
+
+### Patch Changes
+
+- 017bcb52: Fixes use of custom elements manifest and related 11ty plugins in daughter repos
+
+## 1.0.0-next.22
+
+### Major Changes
+
+- c2f867fd: Rename cssCustomPropertyDefaultPlugin to jsdocDescriptionDefaultPlugin and render colour swatches on docs site
+
+### Minor Changes
+
+- fce3a836: Allow for multiple demos.
+
+  Elements can now have multiple demos, and the demos now load their scripts using script tags,
+  instead of inlining them via nunjucks using filename conventions.
+
+  BREAKING CHANGES: dev server urls now use `/components` instead of `/demo`
+
+- fce3a836: Adds demo plugin for custom-elements-manifests
+- 05a4fab9: Add custom-elements-manifest plugins to mark ECMAScript private fields and to read the version number from package.json
+
+## 1.0.0-next.21
+
+### Patch Changes
+
+- 921e7999: Remove pfe-specific styles from demo pages
+
+## 1.0.0-next.20
+
+### Minor Changes
+
+- b8da03e8: `singleFileBuild` now scans `node_modules` for installed
+  `@patternfly/pfe-*` packages (except `core`, `tools`, `sass`, and
+  `styles`) and generates an entrypoint file for them.
+
+  Users can alternatively pass `componentsEntryPointsContent`, which is
+  the string contents of a javascript module that exports the desired
+  components.
+
+  These changes make using `singleFileBuild` more useful and ergonomic for
+  daughter repositories (e.g. RHDS)
+
+  ```js
+  const elements = await readdir(new URL("../elements", import.meta.url));
+
+  /**
+   * @example
+   * export * from '/path/to/redhat-ux/red-hat-design-system/elements/rh-alert/rh-alert.js';
+   * export * from '/path/to/redhat-ux/red-hat-design-system/elements/rh-table/rh-table.js';
+   */
+  const componentsEntryPointContents = elements.reduce(
+    (acc, x) => `${acc}
+  export * from '${fileURLToPath(
+      new URL(`../elements/${x}/${x}.js`, import.meta.url)
+    )}';`,
+    ""
+  );
+
+  await singleFileBuild({
+    componentsEntryPointContents,
+    outfile: "rhds.min.js",
+  });
+  ```
+
+## 1.0.0-next.19
+
+### Patch Changes
+
+- f2ffb072: pass user options to dev server
+
+## 1.0.0-next.18
+
+### Major Changes
+
+- d7128af3: Use declarative shadow DOM for dev server, remove SPA code, calculate demo variables on the server side
+
+### Minor Changes
+
+- 2b2aeb57: Adds `colored(colorString)` assertion to chai when using `createFixture`
+
+  ```js
+  expect("rgba(0,0,0,0)").to.be.colored("transparent");
+  ```
+
+- 15051be0: Use web-dev-server-plugin-lit-css.
+  By default, config will transform all .scss files using `dart-sass`.
+  Users may customize the options for lit-css:
+
+  ```js
+  export default pfeDevServerConfig({
+    litcssOptions: {
+      include: ["**/elements/*/*.css"],
+    },
+  });
+  ```
+
+### Patch Changes
+
+- 4a597fed: Add package exports for test helpers
+- b4ac6f24: Updates dependencies
+
+## 1.0.0-next.17
+
+### Patch Changes
+
+- b595cafb: corrects passing options to `nunjucksSPAMiddleware(_options)` for repo demo configuration
+
+## 1.0.0-next.16
+
+### Minor Changes
+
+- bb5b6265: Add `additionalPackages` option to `singleFileBundle`
+- effe009a: Adds a maximize toggle to the dev SPA
+
+### Patch Changes
+
+- 4997735b: update dependencies
+
+## 1.0.0-next.15
+
+### Patch Changes
+
+- c10f6783: Publish 11ty plugin files
+
+## 1.0.0-next.14
+
+### Minor Changes
+
+- 621fcb38: Adds table-of-contents 11ty plugin
+  Fixes bugs in 11ty plugins
+- cd04ae82: Adds 11ty plugins to pfe-tools
+
+## 1.0.0-next.13
+
+### Patch Changes
+
+- dd9b1128: Include dev server assets in the package bundle
+
+## 1.0.0-next.12
+
+### Minor Changes
+
+- 9a957683: Moves development server wholly into pfe-tools, and exposes some customization properties so daughter repos can customize the page
+
+## 1.0.0-next.11
+
+### Minor Changes
+
+- 6c39715c: Automatically replaces `process.env.NODE_ENV` with `production` both in the development server and in the production bundles.
+
+### Patch Changes
+
+- f1e4d5a9: Correctly resolve all node_modules sources in dev server
+
+## 1.0.0-next.10
+
+### Major Changes
+
+- 447b2d75: Remove support for custom `esbuild` export condition
+
+  Previously, the dev-server config would try to import typescript sources using
+  the `esbuild` export condition, but this proved awkward when daughter repos
+  would try to import the same packages by the esbuild condition, only to
+  discover that there was no typescript source file because it was compiled away
+  before hitting NPM
+
+  Therefore, removed export conditions entirely and now rely on a hacky mod to
+  the built-in web dev server node-resolution algorithm
+
+  In our tests, this appeared to work in both primary cases:
+
+  1. Developing local packages in `patternfly/patternfly-elements`
+  2. Developing local packages in a 'daughter' repo which installed
+     `@patternfly/pfe-tools`
+
+  If you find that you're getting 404 errors to modules you're sure exist, or
+  other such weird behaviour when resolving js sources from your monorepo, please
+  open a [new
+  issue](https://github.com/patternfly/patternfly-elements/issues/new/choose)
+
+### Patch Changes
+
+- f26d5ab5: fail gracefully when dev server can't find workspace packages
+- f71bfa9c: update dependencies
+
+## 0.1.0-next.9
+
+### Patch Changes
+
+- b5d40799: try to guess repository root dir when computing dev server config
+
+## 0.1.0-next.8
+
+### Minor Changes
+
+- f726d147: Add `reporter` option to test runner config factory
+
+## 0.1.0-next.7
+
+### Patch Changes
+
+- d9df3236: Update dependencies
+
+## 0.1.0-next.6
+
+### Patch Changes
+
+- 0f235f7e: Update documentation
+
+## 0.1.0-next.5
+
+### Patch Changes
+
+- 049aaca6: Update dependencies
+
+## 0.1.0-next.4
+
+### Minor Changes
+
+- cd6ca2f0: minify lit-html template literals in builds
+
+### Patch Changes
+
+- a6253d3c: Generate the single-file bundle entrypoint at runtime
+
+## 0.1.0-next.3
+
+### Minor Changes
+
+- cfd010ff: add `singleFileBuild` to esbuild helpers
+
+## 0.1.0-next.2
+
+### Patch Changes
+
+- cbf0c490: Update dependencies
+
+## 0.1.0-next.1
+
+### Minor Changes
+
+- a1da0422: export `transformSass` helper from esbuild.js
+
+## 0.0.2-next.0
+
+### Patch Changes
+
+- 9765268c: Ship built files instead of sources
diff --git a/node_modules/@patternfly/pfe-tools/package/README.md b/node_modules/@patternfly/pfe-tools/package/README.md
new file mode 100644
index 0000000..9638f2a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/README.md
@@ -0,0 +1,47 @@
+# `@patternfly/pfe-tools`
+
+Tools and utilities for building PatternFly Elements and other design systems.
+
+## Config
+
+Repos using pfe-tools can customize the docs pages, dev server, and custom-elements manifest
+generator by adding a `.pfe.config.json` file to the repository root.
+
+See [config.ts](./config.ts) for info on what that file can contain.
+
+## 11ty Helpers
+
+- Helpers for collating and rendering [custom-elements manifests][cem] in 11ty
+  sites.
+- Various 11ty utility plugins
+
+## test
+
+Helpers for testing web components using [web test runner][wtr]
+
+## dev-server
+
+Preset [web-dev-server][wds] configuration.
+
+### Troubleshooting
+
+> I ran `npm start` but get `404 not found` when the dev server launches the browser
+
+The dev server config in pfe-tools tries its best to find the root directory of your project,
+but there are cases where this may not work. If you get a 404 error to index.html, 
+
+1. Confirm that you have an `index.html` file in your repository root
+2. Set the `rootDir` option to `pfeDevServerConfig`, e.g.
+    ```js
+    import { pfeDevServerConfig } from '@patternfly/pfe-tools/dev-server/config.js';
+
+    export default pfeDevServerConfig({
+      rootDir: '.',
+    });
+    ```
+
+Make sure to do the same in `web-test-runner.config.js` as well, for your unit tests
+
+[cem]: https://github.com/webcomponents/custom-elements-manifest/
+[wds]: https://modern-web.dev/docs/dev-server/overview/
+[wtr]: https://modern-web.dev/docs/test-runner/overview/
diff --git a/node_modules/@patternfly/pfe-tools/package/config.d.ts b/node_modules/@patternfly/pfe-tools/package/config.d.ts
new file mode 100644
index 0000000..e86cbf9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/config.d.ts
@@ -0,0 +1,41 @@
+export interface SiteOptions {
+    /** The site's default page description */
+    description?: string;
+    /** URL to the site's favicon */
+    favicon?: string;
+    /** URL to the demo page's main brand logo */
+    logoUrl?: string;
+    /** URLs to stylesheets to add to the demo (absolute from cwd) */
+    stylesheets?: string[];
+    /** Title for main page of the demo */
+    title?: string;
+    /** Site subpath for components. default: 'components' i.e. 'https://patternflyelements.org/components' */
+    componentSubpath?: string;
+}
+export interface PfeConfig {
+    /** rootDir of the package. Default process.cwd() */
+    rootDir?: string;
+    /** object mapping custom element name to page title */
+    aliases?: Record<string, string>;
+    /** Directory containing the custom elements, defaults to `elements` */
+    elementsDir?: string;
+    /** absolute URL to the web page representing the repo root in source control, with trailing slash. default 'https://github.com/patternfly/patternfly-elements/tree/main/' */
+    sourceControlURLPrefix?: string;
+    /** absolute URL prefix for demos, with trailing slash. Default 'https://patternflyelements.org/' */
+    demoURLPrefix?: string;
+    /** custom elements namespace. Default 'pf' */
+    tagPrefix?: string;
+    /** Dev Server site options */
+    site?: SiteOptions;
+}
+/**
+ * Get a normalized pfe config for the repo
+ * @param [rootDir=process.cwd()] repo root
+ */
+export declare function getPfeConfig(rootDir?: string): Required<PfeConfig>;
+/**
+ * Returns the prefixed custom element name for a given slug
+ * @param slug element slug e.g. `jazz-hands` for `pf-jazz-hands`
+ * @param [rootDir=process.cwd()] repo root
+ */
+export declare function deslugify(slug: string, rootDir?: string): string;
diff --git a/node_modules/@patternfly/pfe-tools/package/config.js b/node_modules/@patternfly/pfe-tools/package/config.js
new file mode 100644
index 0000000..0892177
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/config.js
@@ -0,0 +1,64 @@
+/* globals process */
+import { readFileSync } from 'node:fs';
+import { join } from 'node:path';
+import slugify from 'slugify';
+const SITE_DEFAULTS = {
+    description: `PatternFly Elements: A set of community-created web components based on PatternFly design.`,
+    favicon: '/docs/images/logo/pf-logo-small.svg',
+    logoUrl: '/docs/images/logo/pf-logo-small.svg',
+    stylesheets: [],
+    title: 'PatternFly Elements',
+    componentSubpath: 'components',
+};
+const DEFAULT_CONFIG = {
+    demoURLPrefix: 'https://patternflyelements.org/',
+    sourceControlURLPrefix: 'https://github.com/patternfly/patternfly-elements/tree/main/',
+    elementsDir: 'elements',
+    tagPrefix: 'pf',
+    aliases: {},
+};
+function tryJson(path) {
+    try {
+        return JSON.parse(readFileSync(path, 'utf8'));
+    }
+    catch {
+        return {};
+    }
+}
+/**
+ * Get a normalized pfe config for the repo
+ * @param [rootDir=process.cwd()] repo root
+ */
+export function getPfeConfig(rootDir = process.cwd()) {
+    const jsonConfig = tryJson(join(rootDir, '.pfe.config.json'));
+    return {
+        ...DEFAULT_CONFIG,
+        rootDir,
+        ...jsonConfig,
+        site: {
+            ...SITE_DEFAULTS,
+            ...jsonConfig.site ?? {},
+        },
+    };
+}
+const slugsConfigMap = new Map();
+const reverseSlugifyObject = ([k, v]) => [slugify(v, { lower: true }), k];
+function getSlugsMap(rootDir) {
+    if (!slugsConfigMap.get(rootDir)) {
+        const config = getPfeConfig(rootDir);
+        const slugs = new Map(Object.entries(config.aliases).map(reverseSlugifyObject));
+        slugsConfigMap.set(rootDir, { slugs, config });
+    }
+    return slugsConfigMap.get(rootDir);
+}
+/**
+ * Returns the prefixed custom element name for a given slug
+ * @param slug element slug e.g. `jazz-hands` for `pf-jazz-hands`
+ * @param [rootDir=process.cwd()] repo root
+ */
+export function deslugify(slug, rootDir = process.cwd()) {
+    const { slugs, config } = getSlugsMap(rootDir);
+    const prefixedSlug = (slug.startsWith(`${config.tagPrefix}-`)) ? slug : `${config.tagPrefix}-${slug}`;
+    return slugs.get(slug) ?? prefixedSlug;
+}
+//# sourceMappingURL=config.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/config.js.map b/node_modules/@patternfly/pfe-tools/package/config.js.map
new file mode 100644
index 0000000..c5b217a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/config.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"AAAA,qBAAqB;AAErB,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,OAAO,MAAM,SAAS,CAAC;AAkC9B,MAAM,aAAa,GAA0B;IAC3C,WAAW,EAAE,4FAA4F;IACzG,OAAO,EAAE,qCAAqC;IAC9C,OAAO,EAAE,qCAAqC;IAC9C,WAAW,EAAE,EAAE;IACf,KAAK,EAAE,qBAAqB;IAC5B,gBAAgB,EAAE,YAAY;CAC/B,CAAC;AAEF,MAAM,cAAc,GAAc;IAChC,aAAa,EAAE,iCAAiC;IAChD,sBAAsB,EAAE,8DAA8D;IACtF,WAAW,EAAE,UAAU;IACvB,SAAS,EAAE,IAAI;IACf,OAAO,EAAE,EAAE;CACZ,CAAC;AAEF,SAAS,OAAO,CAAC,IAAY;IAC3B,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAChD,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,YAAY,CAAC,UAAkB,OAAO,CAAC,GAAG,EAAE;IAC1D,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC,CAAC;IAC9D,OAAO;QACL,GAAG,cAAc;QACjB,OAAO;QACP,GAAG,UAAU;QACb,IAAI,EAAE;YACJ,GAAG,aAAa;YAChB,GAAG,UAAU,CAAC,IAAI,IAAI,EAAE;SACzB;KACF,CAAC;AACJ,CAAC;AAED,MAAM,cAAc,GAAG,IAAI,GAAG,EAA6D,CAAC;AAC5F,MAAM,oBAAoB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAmB,EAAoB,EAAE,CAC1E,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAEnC,SAAS,WAAW,CAAC,OAAe;IAClC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;QACrC,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC;QAChF,cAAc,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,OAAO,cAAc,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;AACtC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,SAAS,CACvB,IAAY,EACZ,UAAkB,OAAO,CAAC,GAAG,EAAE;IAE/B,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;IAC/C,MAAM,YAAY,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,SAAS,IAAI,IAAI,EAAE,CAAC;IACtG,OAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC;AACzC,CAAC","sourcesContent":["/* globals process */\n\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\nimport slugify from 'slugify';\n\nexport interface SiteOptions {\n  /** The site's default page description */\n  description?: string;\n  /** URL to the site's favicon */\n  favicon?: string;\n  /** URL to the demo page's main brand logo */\n  logoUrl?: string;\n  /** URLs to stylesheets to add to the demo (absolute from cwd) */\n  stylesheets?: string[];\n  /** Title for main page of the demo */\n  title?: string;\n  /** Site subpath for components. default: 'components' i.e. 'https://patternflyelements.org/components' */\n  componentSubpath?: string;\n}\n\nexport interface PfeConfig {\n  /** rootDir of the package. Default process.cwd() */\n  rootDir?: string;\n  /** object mapping custom element name to page title */\n  aliases?: Record<string, string> ;\n  /** Directory containing the custom elements, defaults to `elements` */\n  elementsDir?: string;\n  /** absolute URL to the web page representing the repo root in source control, with trailing slash. default 'https://github.com/patternfly/patternfly-elements/tree/main/' */\n  sourceControlURLPrefix?: string ;\n  /** absolute URL prefix for demos, with trailing slash. Default 'https://patternflyelements.org/' */\n  demoURLPrefix?: string ;\n  /** custom elements namespace. Default 'pf' */\n  tagPrefix?: string;\n  /** Dev Server site options */\n  site?: SiteOptions;\n}\n\nconst SITE_DEFAULTS: Required<SiteOptions> = {\n  description: `PatternFly Elements: A set of community-created web components based on PatternFly design.`,\n  favicon: '/docs/images/logo/pf-logo-small.svg',\n  logoUrl: '/docs/images/logo/pf-logo-small.svg',\n  stylesheets: [],\n  title: 'PatternFly Elements',\n  componentSubpath: 'components',\n};\n\nconst DEFAULT_CONFIG: PfeConfig = {\n  demoURLPrefix: 'https://patternflyelements.org/',\n  sourceControlURLPrefix: 'https://github.com/patternfly/patternfly-elements/tree/main/',\n  elementsDir: 'elements',\n  tagPrefix: 'pf',\n  aliases: {},\n};\n\nfunction tryJson(path: string) {\n  try {\n    return JSON.parse(readFileSync(path, 'utf8'));\n  } catch {\n    return {};\n  }\n}\n\n/**\n * Get a normalized pfe config for the repo\n * @param [rootDir=process.cwd()] repo root\n */\nexport function getPfeConfig(rootDir: string = process.cwd()): Required<PfeConfig> {\n  const jsonConfig = tryJson(join(rootDir, '.pfe.config.json'));\n  return {\n    ...DEFAULT_CONFIG,\n    rootDir,\n    ...jsonConfig,\n    site: {\n      ...SITE_DEFAULTS,\n      ...jsonConfig.site ?? {},\n    },\n  };\n}\n\nconst slugsConfigMap = new Map<string, { config: PfeConfig; slugs: Map<string, string> }>();\nconst reverseSlugifyObject = ([k, v]: [string, string]): [string, string] =>\n  [slugify(v, { lower: true }), k];\n\nfunction getSlugsMap(rootDir: string) {\n  if (!slugsConfigMap.get(rootDir)) {\n    const config = getPfeConfig(rootDir);\n    const slugs = new Map(Object.entries(config.aliases).map(reverseSlugifyObject));\n    slugsConfigMap.set(rootDir, { slugs, config });\n  }\n\n  return slugsConfigMap.get(rootDir)!;\n}\n\n/**\n * Returns the prefixed custom element name for a given slug\n * @param slug element slug e.g. `jazz-hands` for `pf-jazz-hands`\n * @param [rootDir=process.cwd()] repo root\n */\nexport function deslugify(\n  slug: string,\n  rootDir: string = process.cwd(),\n): string {\n  const { slugs, config } = getSlugsMap(rootDir);\n  const prefixedSlug = (slug.startsWith(`${config.tagPrefix}-`)) ? slug : `${config.tagPrefix}-${slug}`;\n  return slugs.get(slug) ?? prefixedSlug;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.d.ts
new file mode 100644
index 0000000..fa20917
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.d.ts
@@ -0,0 +1,12 @@
+import type { Config } from '@custom-elements-manifest/analyzer';
+import { type PfeConfig } from '../config.js';
+type Options = Config & Pick<PfeConfig, 'sourceControlURLPrefix' | 'demoURLPrefix'> & {
+    rootDir?: string;
+};
+/**
+ * PFE Default custom-elements-manifest analyzer config
+ * @param options plugin options
+ * @deprecated this config relies on an old version of cem-a, roll your own
+ */
+export declare function pfeCustomElementsManifestConfig(options?: Options): Config;
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js
new file mode 100644
index 0000000..c97c31b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js
@@ -0,0 +1,47 @@
+import { moduleFileExtensionsPlugin } from 'cem-plugin-module-file-extensions';
+import { readonlyPlugin } from 'cem-plugin-readonly';
+import { dedentDescriptionsPlugin } from './dedent-descriptions.js';
+import { demosPlugin } from './demos.js';
+import { deprecatedDescriptionInlineTagPlugin } from './deprecated-description-inline-tag.js';
+import { sanitizeEventsPlugin } from './sanitize-events.js';
+import { summaryPlugin } from './summary.js';
+import { ecmaPrivateClassMembersPlugin } from './ecma-private-class-members.js';
+import { versionStaticFieldPlugin } from './version-static-field.js';
+import { getPfeConfig } from '../config.js';
+import Chalk from 'chalk';
+/**
+ * PFE Default custom-elements-manifest analyzer config
+ * @param options plugin options
+ * @deprecated this config relies on an old version of cem-a, roll your own
+ */
+export function pfeCustomElementsManifestConfig(options) {
+    // eslint-disable-next-line no-console
+    console.log(`${Chalk.yellow(`pfeCustomElementsManifestConfig is ${Chalk.bold('deprecated')}`)}`);
+    const config = getPfeConfig(options?.rootDir);
+    const { demoURLPrefix, sourceControlURLPrefix, dev } = { ...config, ...options ?? {} };
+    return {
+        globs: options?.globs ?? ['src/**/*.ts'],
+        dev,
+        exclude: [
+            '**/*.{spec,test}.{js,ts}',
+            '**/*.d.ts',
+            '**/_temp',
+            ...options?.exclude ?? [],
+        ],
+        litelement: true,
+        plugins: [
+            readonlyPlugin(),
+            moduleFileExtensionsPlugin(),
+            moduleFileExtensionsPlugin({ from: 'src/', to: '' }),
+            sanitizeEventsPlugin(),
+            deprecatedDescriptionInlineTagPlugin(),
+            dedentDescriptionsPlugin(),
+            summaryPlugin(),
+            demosPlugin({ ...options, demoURLPrefix, sourceControlURLPrefix }),
+            ecmaPrivateClassMembersPlugin(),
+            versionStaticFieldPlugin(),
+            ...options?.plugins ?? [],
+        ],
+    };
+}
+//# sourceMappingURL=config.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js.map
new file mode 100644
index 0000000..2f0d975
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/config.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,0BAA0B,EAAE,MAAM,mCAAmC,CAAC;AAC/E,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,wBAAwB,EAAE,MAAM,0BAA0B,CAAC;AACpE,OAAO,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;AACzC,OAAO,EAAE,oCAAoC,EAAE,MAAM,wCAAwC,CAAC;AAC9F,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAC;AAChF,OAAO,EAAE,wBAAwB,EAAE,MAAM,2BAA2B,CAAC;AACrE,OAAO,EAAE,YAAY,EAAkB,MAAM,cAAc,CAAC;AAE5D,OAAO,KAAK,MAAM,OAAO,CAAC;AAM1B;;;;GAIG;AACH,MAAM,UAAU,+BAA+B,CAAC,OAAiB;IAC/D,sCAAsC;IACtC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,sCAAsC,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACjG,MAAM,MAAM,GAAG,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAC9C,MAAM,EAAE,aAAa,EAAE,sBAAsB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,EAAE,GAAG,OAAO,IAAI,EAAE,EAAE,CAAC;IACvF,OAAO;QACL,KAAK,EAAE,OAAO,EAAE,KAAK,IAAI,CAAC,aAAa,CAAC;QACxC,GAAG;QACH,OAAO,EAAE;YACP,0BAA0B;YAC1B,WAAW;YACX,UAAU;YACV,GAAG,OAAO,EAAE,OAAO,IAAI,EAAE;SAC1B;QACD,UAAU,EAAE,IAAI;QAChB,OAAO,EAAE;YACP,cAAc,EAAE;YAChB,0BAA0B,EAAE;YAC5B,0BAA0B,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;YACpD,oBAAoB,EAAE;YACtB,oCAAoC,EAAE;YACtC,wBAAwB,EAAE;YAC1B,aAAa,EAAE;YACf,WAAW,CAAC,EAAE,GAAG,OAAO,EAAE,aAAa,EAAE,sBAAsB,EAAE,CAAC;YAClE,6BAA6B,EAAE;YAC/B,wBAAwB,EAAE;YAE1B,GAAG,OAAO,EAAE,OAAO,IAAI,EAAE;SAC1B;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { Config } from '@custom-elements-manifest/analyzer';\n\nimport { moduleFileExtensionsPlugin } from 'cem-plugin-module-file-extensions';\nimport { readonlyPlugin } from 'cem-plugin-readonly';\nimport { dedentDescriptionsPlugin } from './dedent-descriptions.js';\nimport { demosPlugin } from './demos.js';\nimport { deprecatedDescriptionInlineTagPlugin } from './deprecated-description-inline-tag.js';\nimport { sanitizeEventsPlugin } from './sanitize-events.js';\nimport { summaryPlugin } from './summary.js';\nimport { ecmaPrivateClassMembersPlugin } from './ecma-private-class-members.js';\nimport { versionStaticFieldPlugin } from './version-static-field.js';\nimport { getPfeConfig, type PfeConfig } from '../config.js';\n\nimport Chalk from 'chalk';\n\ntype Options = Config\n  & Pick<PfeConfig, 'sourceControlURLPrefix' | 'demoURLPrefix'>\n  & { rootDir?: string };\n\n/**\n * PFE Default custom-elements-manifest analyzer config\n * @param options plugin options\n * @deprecated this config relies on an old version of cem-a, roll your own\n */\nexport function pfeCustomElementsManifestConfig(options?: Options): Config {\n  // eslint-disable-next-line no-console\n  console.log(`${Chalk.yellow(`pfeCustomElementsManifestConfig is ${Chalk.bold('deprecated')}`)}`);\n  const config = getPfeConfig(options?.rootDir);\n  const { demoURLPrefix, sourceControlURLPrefix, dev } = { ...config, ...options ?? {} };\n  return {\n    globs: options?.globs ?? ['src/**/*.ts'],\n    dev,\n    exclude: [\n      '**/*.{spec,test}.{js,ts}',\n      '**/*.d.ts',\n      '**/_temp',\n      ...options?.exclude ?? [],\n    ],\n    litelement: true,\n    plugins: [\n      readonlyPlugin(),\n      moduleFileExtensionsPlugin(),\n      moduleFileExtensionsPlugin({ from: 'src/', to: '' }),\n      sanitizeEventsPlugin(),\n      deprecatedDescriptionInlineTagPlugin(),\n      dedentDescriptionsPlugin(),\n      summaryPlugin(),\n      demosPlugin({ ...options, demoURLPrefix, sourceControlURLPrefix }),\n      ecmaPrivateClassMembersPlugin(),\n      versionStaticFieldPlugin(),\n\n      ...options?.plugins ?? [],\n    ],\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.d.ts
new file mode 100644
index 0000000..7f9f44a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.d.ts
@@ -0,0 +1,7 @@
+import { Manifest } from './lib/Manifest.js';
+/**
+ * Get all package manifests in the working dir
+ * @param rootDir defaults to cwd
+ */
+export declare function getAllManifests(rootDir?: string): Manifest[];
+export type { DemoRecord } from './lib/Manifest.js';
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js
new file mode 100644
index 0000000..619d5a2
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js
@@ -0,0 +1,9 @@
+import { Manifest } from './lib/Manifest.js';
+/**
+ * Get all package manifests in the working dir
+ * @param rootDir defaults to cwd
+ */
+export function getAllManifests(rootDir) {
+    return Manifest.getAll(rootDir);
+}
+//# sourceMappingURL=custom-elements-manifest.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js.map
new file mode 100644
index 0000000..87bcd92
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/custom-elements-manifest.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"custom-elements-manifest.js","sourceRoot":"","sources":["custom-elements-manifest.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,OAAgB;IAC9C,OAAO,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC","sourcesContent":["import { Manifest } from './lib/Manifest.js';\n\n/**\n * Get all package manifests in the working dir\n * @param rootDir defaults to cwd\n */\nexport function getAllManifests(rootDir?: string): Manifest[] {\n  return Manifest.getAll(rootDir);\n}\n\nexport type { DemoRecord } from './lib/Manifest.js';\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.d.ts
new file mode 100644
index 0000000..c1a7794
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.d.ts
@@ -0,0 +1,6 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * Traverse sources for PFElement.create() calls
+ * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js
+ */
+export declare function dedentDescriptionsPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js
new file mode 100644
index 0000000..c55e27f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js
@@ -0,0 +1,37 @@
+import dedent from 'dedent';
+const DESCRIBABLES = [
+    'members',
+    'events',
+    'slots',
+    'cssProperties',
+    'cssParts',
+    'fields',
+];
+/**
+ * Traverse sources for PFElement.create() calls
+ * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js
+ */
+export function dedentDescriptionsPlugin() {
+    return {
+        name: 'dedent-descriptions-plugin',
+        moduleLinkPhase({ moduleDoc }) {
+            moduleDoc.description &&= dedent(moduleDoc.description);
+            for (const decl of moduleDoc.declarations ?? []) {
+                decl.description &&= dedent(decl.description);
+                switch (decl.kind) {
+                    case 'class':
+                    case 'mixin':
+                        for (const key of DESCRIBABLES) {
+                            const collection = decl[key];
+                            if (Array.isArray(collection)) {
+                                for (const item of collection) {
+                                    item.description &&= dedent(item.description);
+                                }
+                            }
+                        }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=dedent-descriptions.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js.map
new file mode 100644
index 0000000..664eebf
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/dedent-descriptions.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"dedent-descriptions.js","sourceRoot":"","sources":["dedent-descriptions.ts"],"names":[],"mappings":"AAGA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,YAAY,GAAG;IACnB,SAAS;IACT,QAAQ;IACR,OAAO;IACP,eAAe;IACf,UAAU;IACV,QAAQ;CACT,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,wBAAwB;IACtC,OAAO;QACL,IAAI,EAAE,4BAA4B;QAClC,eAAe,CAAC,EAAE,SAAS,EAAE;YAC3B,SAAS,CAAC,WAAW,KAAK,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACxD,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;gBAChD,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9C,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;oBAClB,KAAK,OAAO,CAAC;oBACb,KAAK,OAAO;wBACV,KAAK,MAAM,GAAG,IAAI,YAAqC,EAAE,CAAC;4BACxD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;gCAC9B,KAAK,MAAM,IAAI,IAAI,UAA2B,EAAE,CAAC;oCAC/C,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gCAChD,CAAC;4BACH,CAAC;wBACH,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { ClassMember } from 'custom-elements-manifest/schema';\nimport type { Plugin } from '@custom-elements-manifest/analyzer';\n\nimport dedent from 'dedent';\n\nconst DESCRIBABLES = [\n  'members',\n  'events',\n  'slots',\n  'cssProperties',\n  'cssParts',\n  'fields',\n];\n\n/**\n * Traverse sources for PFElement.create() calls\n * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js\n */\nexport function dedentDescriptionsPlugin(): Plugin {\n  return {\n    name: 'dedent-descriptions-plugin',\n    moduleLinkPhase({ moduleDoc }) {\n      moduleDoc.description &&= dedent(moduleDoc.description);\n      for (const decl of moduleDoc.declarations ?? []) {\n        decl.description &&= dedent(decl.description);\n        switch (decl.kind) {\n          case 'class':\n          case 'mixin':\n            for (const key of DESCRIBABLES as (keyof typeof decl)[]) {\n              const collection = decl[key];\n              if (Array.isArray(collection)) {\n                for (const item of collection as ClassMember[]) {\n                  item.description &&= dedent(item.description);\n                }\n              }\n            }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.d.ts
new file mode 100644
index 0000000..9317c81
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.d.ts
@@ -0,0 +1,23 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+import type { PfeConfig } from '../config.js';
+/**
+ * Adds demo entries to element declarations
+ *
+ * Tries to determine a custom element manifest module's 'primary' element by:
+ * - in a single-package-repo: taking the path part after `/elements`
+ * - in a monorepo: reading the package JSON of the local package and taking the part after the scope
+ *
+ * The primary element's demo is it's own tag name, e.g.
+ * `/elements/pf-jazz-hands/demo/pf-jazz-hands.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-hands.js`.
+ *
+ * Demo files which match any tag name in the manifest will be associated with that tag, e.g.
+ * `/elements/pf-jazz-hands/demo/pf-jazz-shimmy.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-shimmy.js`.
+ *
+ * Any remaining demos will all be added to the primary element's list, e.g.
+ * `/elements/pf-jazz-hands/demo/accessibility.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-hands.js`
+ * @param options pfe config
+ */
+export declare function demosPlugin(options?: PfeConfig): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js
new file mode 100644
index 0000000..098bd22
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js
@@ -0,0 +1,82 @@
+import { isCustomElement } from './lib/Manifest.js';
+import { readdirSync, existsSync } from 'node:fs';
+import { join } from 'node:path';
+import { getPfeConfig } from '../config.js';
+import slugify from 'slugify';
+/**
+ * Adds demo entries to element declarations
+ *
+ * Tries to determine a custom element manifest module's 'primary' element by:
+ * - in a single-package-repo: taking the path part after `/elements`
+ * - in a monorepo: reading the package JSON of the local package and taking the part after the scope
+ *
+ * The primary element's demo is it's own tag name, e.g.
+ * `/elements/pf-jazz-hands/demo/pf-jazz-hands.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-hands.js`.
+ *
+ * Demo files which match any tag name in the manifest will be associated with that tag, e.g.
+ * `/elements/pf-jazz-hands/demo/pf-jazz-shimmy.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-shimmy.js`.
+ *
+ * Any remaining demos will all be added to the primary element's list, e.g.
+ * `/elements/pf-jazz-hands/demo/accessibility.html` would be associated with
+ * `/elements/pf-jazz-hands/pf-jazz-hands.js`
+ * @param options pfe config
+ */
+export function demosPlugin(options) {
+    const fileOptions = getPfeConfig(options?.rootDir);
+    const config = { ...fileOptions, ...options };
+    const subpath = config.site.componentSubpath ?? 'components';
+    const { rootDir, demoURLPrefix, sourceControlURLPrefix } = config;
+    return {
+        name: 'demos-plugin',
+        packageLinkPhase({ customElementsManifest }) {
+            const allTagNames = customElementsManifest.modules.flatMap(x => !x.declarations ? []
+                : x.declarations.flatMap(y => y.tagName)).filter(Boolean);
+            for (const moduleDoc of customElementsManifest.modules) {
+                const primaryElementName = moduleDoc.path.split('/').find(x => x !== 'elements') ?? '';
+                let demoPath = join(rootDir, 'elements', primaryElementName, 'demo');
+                if (!existsSync(demoPath)) {
+                    demoPath = join('elements', primaryElementName, 'demo');
+                }
+                if (primaryElementName && existsSync(demoPath)) {
+                    const alias = config.aliases[primaryElementName] ?? primaryElementName.replace(/^\w+-/, '');
+                    const allDemos = readdirSync(demoPath).filter(x => x.endsWith('.html'));
+                    for (const decl of moduleDoc.declarations ?? []) {
+                        if (isCustomElement(decl) && decl.tagName) {
+                            decl.demos ??= [];
+                            const { tagName } = decl;
+                            for (const demo of allDemos) {
+                                const demoName = demo.replace(/\.html$/, '');
+                                const slug = slugify(alias, { strict: true, lower: true });
+                                const href = new URL(`elements/${primaryElementName}/demo/${demo}/`, sourceControlURLPrefix || '/').href.replace(/\/$/, '');
+                                if (demoName === tagName && demoName === primaryElementName) {
+                                    // case: elements/pf-jazz-hands/demo/pf-jazz-hands.html
+                                    const { href: url } = new URL(`/${subpath}/${slug}/demo/`, demoURLPrefix || '/');
+                                    decl.demos.push({ url, source: { href } });
+                                }
+                                else if (allTagNames.includes(demoName) && demoName === tagName) {
+                                    // case: elements/pf-jazz-hands/demo/pf-jazz-shimmy.html
+                                    const { href: url } = new URL(`/${subpath}/${slug}/demo/${demoName}/`, demoURLPrefix || '/');
+                                    decl.demos.push({ url, source: { href } });
+                                }
+                                else if (tagName === primaryElementName && !allTagNames.includes(demoName)) {
+                                    // case: elements/pf-jazz-hands/demo/ack.html
+                                    const { href: url } = new URL(`/${subpath}/${slug}/demo/${demoName}/`, demoURLPrefix || '/');
+                                    decl.demos.push({ url, source: { href } });
+                                }
+                            }
+                            if (!decl.demos.length) {
+                                delete decl.demos;
+                            }
+                            else {
+                                decl.demos.sort(a => a.url.endsWith('/demo/') ? -1 : 0);
+                            }
+                        }
+                    }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=demos.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js.map
new file mode 100644
index 0000000..7a34865
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/demos.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"demos.js","sourceRoot":"","sources":["demos.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Plugin } from '@custom-elements-manifest/analyzer';\nimport type { PfeConfig } from '../config.js';\n\nimport { isCustomElement } from './lib/Manifest.js';\nimport { readdirSync, existsSync } from 'node:fs';\nimport { join } from 'node:path';\nimport { getPfeConfig } from '../config.js';\nimport slugify from 'slugify';\n\n/**\n * Adds demo entries to element declarations\n *\n * Tries to determine a custom element manifest module's 'primary' element by:\n * - in a single-package-repo: taking the path part after `/elements`\n * - in a monorepo: reading the package JSON of the local package and taking the part after the scope\n *\n * The primary element's demo is it's own tag name, e.g.\n * `/elements/pf-jazz-hands/demo/pf-jazz-hands.html` would be associated with\n * `/elements/pf-jazz-hands/pf-jazz-hands.js`.\n *\n * Demo files which match any tag name in the manifest will be associated with that tag, e.g.\n * `/elements/pf-jazz-hands/demo/pf-jazz-shimmy.html` would be associated with\n * `/elements/pf-jazz-hands/pf-jazz-shimmy.js`.\n *\n * Any remaining demos will all be added to the primary element's list, e.g.\n * `/elements/pf-jazz-hands/demo/accessibility.html` would be associated with\n * `/elements/pf-jazz-hands/pf-jazz-hands.js`\n * @param options pfe config\n */\nexport function demosPlugin(options?: PfeConfig): Plugin {\n  const fileOptions = getPfeConfig(options?.rootDir);\n  const config = { ...fileOptions, ...options };\n  const subpath = config.site.componentSubpath ?? 'components';\n  const { rootDir, demoURLPrefix, sourceControlURLPrefix } = config;\n  return {\n    name: 'demos-plugin',\n    packageLinkPhase({ customElementsManifest }) {\n      const allTagNames = customElementsManifest.modules.flatMap(x => !x.declarations ? []\n        : x.declarations.flatMap(y => (y as { tagName: string }).tagName)).filter(Boolean);\n\n      for (const moduleDoc of customElementsManifest.modules) {\n        const primaryElementName = moduleDoc.path.split('/').find(x => x !== 'elements') ?? '';\n        let demoPath = join(rootDir, 'elements', primaryElementName, 'demo');\n\n        if (!existsSync(demoPath)) {\n          demoPath = join('elements', primaryElementName, 'demo');\n        }\n\n        if (primaryElementName && existsSync(demoPath)) {\n          const alias =\n            config.aliases[primaryElementName] ?? primaryElementName.replace(/^\\w+-/, '');\n          const allDemos = readdirSync(demoPath).filter(x => x.endsWith('.html'));\n          for (const decl of moduleDoc.declarations ?? []) {\n            if (isCustomElement(decl) && decl.tagName) {\n              decl.demos ??= [];\n              const { tagName } = decl;\n              for (const demo of allDemos) {\n                const demoName = demo.replace(/\\.html$/, '');\n                const slug = slugify(alias, { strict: true, lower: true });\n                const href = new URL(`elements/${primaryElementName}/demo/${demo}/`, sourceControlURLPrefix || '/').href.replace(/\\/$/, '');\n                if (demoName === tagName && demoName === primaryElementName) {\n                // case: elements/pf-jazz-hands/demo/pf-jazz-hands.html\n                  const { href: url } = new URL(`/${subpath}/${slug}/demo/`, demoURLPrefix || '/');\n                  decl.demos.push({ url, source: { href } });\n                } else if (allTagNames.includes(demoName) && demoName === tagName) {\n                // case: elements/pf-jazz-hands/demo/pf-jazz-shimmy.html\n                  const { href: url } = new URL(`/${subpath}/${slug}/demo/${demoName}/`, demoURLPrefix || '/');\n                  decl.demos.push({ url, source: { href } });\n                } else if (tagName === primaryElementName && !allTagNames.includes(demoName)) {\n                // case: elements/pf-jazz-hands/demo/ack.html\n                  const { href: url } = new URL(`/${subpath}/${slug}/demo/${demoName}/`, demoURLPrefix || '/');\n                  decl.demos.push({ url, source: { href } });\n                }\n              }\n              if (!decl.demos.length) {\n                delete decl.demos;\n              } else {\n                decl.demos.sort(a => a.url.endsWith('/demo/') ? -1 : 0);\n              }\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.d.ts
new file mode 100644
index 0000000..e289989
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.d.ts
@@ -0,0 +1,6 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * Traverse sources for PFElement.create() calls
+ * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js
+ */
+export declare function deprecatedDescriptionInlineTagPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js
new file mode 100644
index 0000000..626062d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js
@@ -0,0 +1,43 @@
+import dedent from 'dedent';
+const DESCRIBABLES = [
+    'members',
+    'events',
+    'slots',
+    'cssProperties',
+    'cssParts',
+    'fields',
+];
+/**
+ * Traverse sources for PFElement.create() calls
+ * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js
+ */
+export function deprecatedDescriptionInlineTagPlugin() {
+    return {
+        name: 'deprecated-description-inline-tag-plugin',
+        moduleLinkPhase({ moduleDoc }) {
+            moduleDoc.description &&= dedent(moduleDoc.description);
+            for (const decl of moduleDoc.declarations ?? []) {
+                decl.description &&= dedent(decl.description);
+                switch (decl.kind) {
+                    case 'class':
+                    case 'mixin':
+                        for (const key of DESCRIBABLES) {
+                            const collection = decl[key];
+                            if (Array.isArray(collection)) {
+                                for (const item of collection) {
+                                    const DEPRECATED_RE = /{@deprecated(.*)}/;
+                                    const match = item.description?.match?.(DEPRECATED_RE);
+                                    if (match) {
+                                        const [, reason] = match;
+                                        item.deprecated = reason?.trim?.() || true;
+                                        item.description = item.description?.replace(DEPRECATED_RE, '') ?? '';
+                                    }
+                                }
+                            }
+                        }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=deprecated-description-inline-tag.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js.map
new file mode 100644
index 0000000..393f6b5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/deprecated-description-inline-tag.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"deprecated-description-inline-tag.js","sourceRoot":"","sources":["deprecated-description-inline-tag.ts"],"names":[],"mappings":"AAGA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,MAAM,YAAY,GAAG;IACnB,SAAS;IACT,QAAQ;IACR,OAAO;IACP,eAAe;IACf,UAAU;IACV,QAAQ;CACT,CAAC;AAEF;;;GAGG;AACH,MAAM,UAAU,oCAAoC;IAClD,OAAO;QACL,IAAI,EAAE,0CAA0C;QAChD,eAAe,CAAC,EAAE,SAAS,EAAE;YAC3B,SAAS,CAAC,WAAW,KAAK,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YACxD,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;gBAChD,IAAI,CAAC,WAAW,KAAK,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC9C,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;oBAClB,KAAK,OAAO,CAAC;oBACb,KAAK,OAAO;wBACV,KAAK,MAAM,GAAG,IAAI,YAAqC,EAAE,CAAC;4BACxD,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;4BAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;gCAC9B,KAAK,MAAM,IAAI,IAAI,UAA2B,EAAE,CAAC;oCAC/C,MAAM,aAAa,GAAG,mBAAmB,CAAC;oCAE1C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC;oCAEvD,IAAI,KAAK,EAAE,CAAC;wCACV,MAAM,CAAC,EAAE,MAAM,CAAC,GAAG,KAAK,CAAC;wCACzB,IAAI,CAAC,UAAU,GAAG,MAAM,EAAE,IAAI,EAAE,EAAE,IAAI,IAAI,CAAC;wCAC3C,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;oCACxE,CAAC;gCACH,CAAC;4BACH,CAAC;wBACH,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { ClassMember } from 'custom-elements-manifest/schema';\nimport type { Plugin } from '@custom-elements-manifest/analyzer';\n\nimport dedent from 'dedent';\n\nconst DESCRIBABLES = [\n  'members',\n  'events',\n  'slots',\n  'cssProperties',\n  'cssParts',\n  'fields',\n];\n\n/**\n * Traverse sources for PFElement.create() calls\n * @see https://github.com/open-wc/custom-elements-manifest/blob/master/packages/analyzer/src/features/analyse-phase/custom-elements-define-calls.js\n */\nexport function deprecatedDescriptionInlineTagPlugin(): Plugin {\n  return {\n    name: 'deprecated-description-inline-tag-plugin',\n    moduleLinkPhase({ moduleDoc }) {\n      moduleDoc.description &&= dedent(moduleDoc.description);\n      for (const decl of moduleDoc.declarations ?? []) {\n        decl.description &&= dedent(decl.description);\n        switch (decl.kind) {\n          case 'class':\n          case 'mixin':\n            for (const key of DESCRIBABLES as (keyof typeof decl)[]) {\n              const collection = decl[key];\n              if (Array.isArray(collection)) {\n                for (const item of collection as ClassMember[]) {\n                  const DEPRECATED_RE = /{@deprecated(.*)}/;\n\n                  const match = item.description?.match?.(DEPRECATED_RE);\n\n                  if (match) {\n                    const [, reason] = match;\n                    item.deprecated = reason?.trim?.() || true;\n                    item.description = item.description?.replace(DEPRECATED_RE, '') ?? '';\n                  }\n                }\n              }\n            }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.d.ts
new file mode 100644
index 0000000..1cf05d8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.d.ts
@@ -0,0 +1,5 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * cem plugin to mark ecma #private members as private
+ */
+export declare function ecmaPrivateClassMembersPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js
new file mode 100644
index 0000000..a17378a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js
@@ -0,0 +1,21 @@
+/**
+ * cem plugin to mark ecma #private members as private
+ */
+export function ecmaPrivateClassMembersPlugin() {
+    return {
+        name: 'ecma-private-class-members-plugin',
+        analyzePhase({ ts, node, moduleDoc }) {
+            if (!ts.isClassElement(node)) {
+                return;
+            }
+            const className = ts.isClassDeclaration(node?.parent) && node.parent.name?.getText();
+            const classDoc = moduleDoc?.declarations?.find(declaration => declaration.name === className);
+            const memberName = node?.name?.getText();
+            const memberDoc = classDoc?.members?.find(member => member.name === memberName);
+            if (memberName?.startsWith('#') && memberDoc) {
+                memberDoc.privacy = 'private';
+            }
+        },
+    };
+}
+//# sourceMappingURL=ecma-private-class-members.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js.map
new file mode 100644
index 0000000..20a0cfa
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/ecma-private-class-members.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ecma-private-class-members.js","sourceRoot":"","sources":["ecma-private-class-members.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,UAAU,6BAA6B;IAC3C,OAAO;QACL,IAAI,EAAE,mCAAmC;QACzC,YAAY,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,IAAI,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC7B,OAAO;YACT,CAAC;YACD,MAAM,SAAS,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;YACrF,MAAM,QAAQ,GAAG,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,EAAE,CAC3D,WAAW,CAAC,IAAI,KAAK,SAAS,CAAkB,CAAC;YAEnD,MAAM,UAAU,GAAG,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;YACzC,MAAM,SAAS,GAAG,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CACjD,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;YAE9B,IAAI,UAAU,EAAE,UAAU,CAAC,GAAG,CAAC,IAAI,SAAS,EAAE,CAAC;gBAC7C,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC;YAChC,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { CustomElement } from 'custom-elements-manifest/schema';\nimport type { Plugin } from '@custom-elements-manifest/analyzer';\n\n/**\n * cem plugin to mark ecma #private members as private\n */\nexport function ecmaPrivateClassMembersPlugin(): Plugin {\n  return {\n    name: 'ecma-private-class-members-plugin',\n    analyzePhase({ ts, node, moduleDoc }) {\n      if (!ts.isClassElement(node)) {\n        return;\n      }\n      const className = ts.isClassDeclaration(node?.parent) && node.parent.name?.getText();\n      const classDoc = moduleDoc?.declarations?.find(declaration =>\n        declaration.name === className) as CustomElement;\n\n      const memberName = node?.name?.getText();\n      const memberDoc = classDoc?.members?.find(member =>\n        member.name === memberName);\n\n      if (memberName?.startsWith('#') && memberDoc) {\n        memberDoc.privacy = 'private';\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.d.ts
new file mode 100644
index 0000000..d11151e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.d.ts
@@ -0,0 +1,123 @@
+import type { PfeConfig } from '@patternfly/pfe-tools/config.js';
+import type { Attribute, ClassField, ClassMember, ClassMethod, CssCustomProperty, CssPart, CustomElementDeclaration, Declaration, Demo, Event, Export, Module, Package, Slot } from 'custom-elements-manifest/schema';
+export interface PackageJSON {
+    customElements?: string;
+    name: string;
+    version: string;
+    private?: boolean;
+    contributors?: string[];
+    author?: string;
+    workspaces?: string[];
+}
+export interface DemoRecord extends Demo {
+    tagName: string;
+    primaryElementName: string;
+    permalink: string;
+    slug: string;
+    title: string;
+    filePath?: string;
+    manifest: Manifest;
+}
+export declare const isField: (x: ClassMember) => x is ClassField;
+export declare const isMethod: (x: ClassMember) => x is ClassMethod;
+export declare const isStatic: (x: ClassMember) => x is ClassMethod & {
+    static: true;
+};
+export declare const isPublic: (x: ClassMember) => boolean;
+export declare const isPublicInstanceField: (x: ClassMember) => x is ClassField;
+export declare const isPublicInstanceMethod: (x: ClassMember) => x is ClassMethod;
+export declare const isCustomElement: (x: Declaration) => x is CustomElementDeclaration;
+export declare const isTheField: (x: ClassField) => (y: Attribute) => boolean;
+declare class ManifestCustomElement {
+    declaration: CustomElementDeclaration;
+    module: Module;
+    manifest: Manifest;
+    /** The element's name */
+    tagName?: string;
+    /** The element's attributes */
+    attributes: Attribute[];
+    /** The element's cssCustomProperties */
+    cssCustomProperties: CssCustomProperty[];
+    /** The element's cssParts */
+    cssParts: CssPart[];
+    /** The element's description */
+    description: string;
+    /** The element's events */
+    events: Event[];
+    /** The element's methods */
+    methods: ClassMethod[];
+    /** The element's properties */
+    properties: ClassField[];
+    /** The element's slots */
+    slots: Slot[];
+    /** The element's summary */
+    summary: string;
+    /** The export for the element */
+    export?: Export;
+    /** The demos for the element */
+    demos?: Demo[];
+    constructor(declaration: CustomElementDeclaration, module: Module, manifest: Manifest);
+}
+export declare class Manifest {
+    #private;
+    manifest: Package | null;
+    packageJson: PackageJSON | null;
+    location?: string | undefined;
+    static empty(): Manifest;
+    static from({ package: packageJson, location, }: {
+        package: PackageJSON;
+        location: string;
+    }): Manifest;
+    static getAll(rootDir?: string): Manifest[];
+    static prettyTag: (tagName: string, aliases?: Record<string, string>) => string;
+    declarations: Map<string, ManifestCustomElement>;
+    /** file path to the custom elements manifest */
+    path: string;
+    constructor(manifest: Package | null, packageJson: PackageJSON | null, location?: string | undefined);
+    /**
+     */
+    getTagNames(): string[];
+    /**
+     * @param tagName tag to get attributes for
+     */
+    getAttributes(tagName: string): undefined | Attribute[];
+    /**
+     * @param tagName tag to get css props for
+     */
+    getCssCustomProperties(tagName: string): undefined | CssCustomProperty[];
+    /**
+     * @param tagName tag to get css parts for
+     */
+    getCssParts(tagName: string): undefined | CssPart[];
+    /**
+     * @param tagName tag to get description for
+     */
+    getDescription(tagName: string): undefined | string;
+    /**
+     * @param tagName tag to get events for
+     */
+    getEvents(tagName: string): undefined | Event[];
+    /**
+     * @param tagName tag to get methods for
+     */
+    getMethods(tagName: string): undefined | ClassMethod[];
+    /**
+     * @param tagName tag to get properties for
+     */
+    getProperties(tagName: string): undefined | ClassField[];
+    /**
+     * @param tagName tag to get summary for
+     */
+    getSummary(tagName: string): undefined | string;
+    /**
+     * @param tagName tag to get slots for
+     */
+    getSlots(tagName: string): undefined | Slot[];
+    /**
+     * @param tagName tag to get demos for
+     */
+    getDemos(tagName: string): Demo[];
+    getAllDemos(): Demo[];
+    getDemoMetadata(tagName: string, options: Required<PfeConfig>): DemoRecord[];
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js
new file mode 100644
index 0000000..ae0c9c2
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js
@@ -0,0 +1,202 @@
+import { join, normalize } from 'node:path';
+import { readFileSync } from 'node:fs';
+import { getAllPackages } from './get-all-packages.js';
+import slugify from 'slugify';
+import { deslugify } from '@patternfly/pfe-tools/config.js';
+const all = (...ps) => (x) => ps.every(p => p(x));
+const not = (p) => (x) => !p(x);
+const and = (p, q) => (x) => p(x) && q(x);
+export const isField = (x) => x.kind === 'field';
+export const isMethod = (x) => x.kind === 'method';
+export const isStatic = (x) => !!x.static;
+export const isPublic = (x) => !x.privacy || !x.privacy?.match?.(/private|protected/);
+export const isPublicInstanceField = all(isField, not(isStatic), isPublic);
+export const isPublicInstanceMethod = all(isMethod, not(isStatic), isPublic);
+export const isCustomElement = (x) => 'tagName' in x;
+export const isTheField = (x) => (y) => y.fieldName === x.name;
+const readJsonSync = (path) => {
+    try {
+        return JSON.parse(readFileSync(path, 'utf8'));
+    }
+    catch {
+        return null;
+    }
+};
+class ManifestCustomElement {
+    constructor(declaration, module, manifest) {
+        this.declaration = declaration;
+        this.module = module;
+        this.manifest = manifest;
+        const isAnAttr = (x) => !this.declaration?.attributes?.some?.(isTheField(x));
+        this.tagName = this.declaration.tagName;
+        this.attributes = this.declaration?.attributes ?? [];
+        this.cssCustomProperties = this.declaration?.cssProperties ?? [];
+        this.cssParts = this.declaration?.cssParts ?? [];
+        this.description = this.declaration?.description ?? '';
+        this.events = this.declaration?.events ?? [];
+        this.methods = this.declaration?.members?.filter?.(isPublicInstanceMethod) ?? [];
+        this.properties = this.declaration?.members?.filter?.(and(isPublicInstanceField, isAnAttr)) ?? [];
+        this.slots = this.declaration?.slots ?? [];
+        this.demos = this.declaration?.demos ?? [];
+        this.summary = this.declaration?.summary ?? '';
+        this.export = manifest.manifest
+            ?.modules
+            ?.flatMap(x => x.exports ?? [])
+            ?.find(z => z.declaration.name === this.declaration.name);
+    }
+}
+export class Manifest {
+    static #instances = new WeakMap();
+    static empty() {
+        return new Manifest(null, null);
+    }
+    static from({ package: packageJson, location, }) {
+        if (!Manifest.#instances.has(packageJson)) {
+            const manifestPath = join(location, packageJson?.customElements ?? '');
+            const json = readJsonSync(normalize(manifestPath));
+            Manifest.#instances.set(packageJson, new Manifest(json, packageJson, location));
+        }
+        return Manifest.#instances.get(packageJson);
+    }
+    static getAll(rootDir = process.cwd()) {
+        return getAllPackages(rootDir).flatMap(x => !x.package.customElements ? [] : [Manifest.from(x)]);
+    }
+    static { this.prettyTag = (tagName, aliases) => aliases?.[tagName] ?? tagName
+        .replace(/^\w+-/, '')
+        .toLowerCase()
+        .replace(/(?:^|[-/\s])\w/g, x => x.toUpperCase())
+        .replace(/-/g, ' '); }
+    constructor(manifest, packageJson, location) {
+        this.manifest = manifest;
+        this.packageJson = packageJson;
+        this.location = location;
+        this.declarations = new Map();
+        /** file path to the custom elements manifest */
+        this.path = '';
+        if (manifest && packageJson && location && packageJson.customElements) {
+            this.path = join(location, packageJson.customElements);
+        }
+        for (const mod of manifest?.modules ?? []) {
+            for (const declaration of mod.declarations ?? []) {
+                if (isCustomElement(declaration) && declaration.tagName) {
+                    this.declarations.set(declaration.tagName, new ManifestCustomElement(declaration, mod, this));
+                }
+            }
+        }
+    }
+    #tag(tagName) {
+        return this.declarations?.get(tagName) ?? null;
+    }
+    /**
+     */
+    getTagNames() {
+        return this.manifest?.modules
+            ?.flatMap?.(m => m.exports
+            ?.filter?.(x => x.kind === 'custom-element-definition')
+            ?.map?.(x => x.name)) ?? [];
+    }
+    /**
+     * @param tagName tag to get attributes for
+     */
+    getAttributes(tagName) {
+        return this.#tag(tagName)?.attributes;
+    }
+    /**
+     * @param tagName tag to get css props for
+     */
+    getCssCustomProperties(tagName) {
+        return this.#tag(tagName)?.cssCustomProperties;
+    }
+    /**
+     * @param tagName tag to get css parts for
+     */
+    getCssParts(tagName) {
+        return this.#tag(tagName)?.cssParts;
+    }
+    /**
+     * @param tagName tag to get description for
+     */
+    getDescription(tagName) {
+        return this.#tag(tagName)?.description;
+    }
+    /**
+     * @param tagName tag to get events for
+     */
+    getEvents(tagName) {
+        return this.#tag(tagName)?.events;
+    }
+    /**
+     * @param tagName tag to get methods for
+     */
+    getMethods(tagName) {
+        return this.#tag(tagName)?.methods;
+    }
+    /**
+     * @param tagName tag to get properties for
+     */
+    getProperties(tagName) {
+        return this.#tag(tagName)?.properties;
+    }
+    /**
+     * @param tagName tag to get summary for
+     */
+    getSummary(tagName) {
+        return this.#tag(tagName)?.summary;
+    }
+    /**
+     * @param tagName tag to get slots for
+     */
+    getSlots(tagName) {
+        return this.#tag(tagName)?.slots;
+    }
+    /**
+     * @param tagName tag to get demos for
+     */
+    getDemos(tagName) {
+        return this.#tag(tagName)?.demos ?? [];
+    }
+    getAllDemos() {
+        return this.manifest?.modules
+            ?.flatMap?.(m => m.declarations)
+            ?.filter?.((x) => !!x && isCustomElement(x))
+            ?.flatMap?.(x => x?.demos ?? []) ?? [];
+    }
+    getDemoMetadata(tagName, options) {
+        // eslint-disable-next-line @typescript-eslint/no-this-alias
+        const manifest = this;
+        const { prettyTag } = Manifest;
+        return this.getDemos(tagName).map(demo => {
+            const permalink = demo.url.replace(options.demoURLPrefix, '/');
+            /**
+             * `/components/`
+             * capture group 1:
+             * > **ANY** (_>= 0x_)
+             * `/demo`
+             */
+            const DEMO_PATH_RE = new RegExp(`/${options.site.componentSubpath}/(.*)/demo`);
+            let [, slug = ''] = permalink.match(DEMO_PATH_RE) ?? [];
+            // strict removes all special characters from slug
+            slug = slugify(slug, { strict: true, lower: true });
+            const primaryElementName = deslugify(slug, options.rootDir);
+            const filePath = demo.source?.href.replace(options.sourceControlURLPrefix, `${options.rootDir}/`) ?? '';
+            const [last = ''] = filePath.split('/').reverse();
+            const filename = last.replace('.html', '');
+            const isMainElementDemo = this.getTagNames().includes(filename);
+            const title = isMainElementDemo ? options.aliases[tagName] ?? prettyTag(tagName) : last
+                .replace(/(?:^|[-/\s])\w/g, x => x.toUpperCase())
+                .replace(/-/g, ' ')
+                .replace('.html', '');
+            return {
+                tagName,
+                primaryElementName,
+                permalink,
+                slug,
+                title,
+                filePath,
+                manifest,
+                ...demo,
+            };
+        });
+    }
+}
+//# sourceMappingURL=Manifest.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js.map
new file mode 100644
index 0000000..c331591
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/Manifest.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"Manifest.js","sourceRoot":"","sources":["Manifest.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PfeConfig } from '@patternfly/pfe-tools/config.js';\nimport type {\n  Attribute,\n  ClassField,\n  ClassMember,\n  ClassMethod,\n  CssCustomProperty,\n  CssPart,\n  CustomElementDeclaration,\n  Declaration,\n  Demo,\n  Event,\n  Export,\n  Module,\n  Package,\n  Slot,\n} from 'custom-elements-manifest/schema';\n\nimport { join, normalize } from 'node:path';\nimport { readFileSync } from 'node:fs';\n\nimport { getAllPackages } from './get-all-packages.js';\nimport slugify from 'slugify';\nimport { deslugify } from '@patternfly/pfe-tools/config.js';\n\ntype PredicateFn = (x: unknown) => boolean;\n\nexport interface PackageJSON {\n  customElements?: string;\n  name: string;\n  version: string;\n  private?: boolean;\n  contributors?: string[];\n  author?: string;\n  workspaces?: string[];\n}\n\nexport interface DemoRecord extends Demo {\n  tagName: string;\n  primaryElementName: string;\n  permalink: string;\n  slug: string;\n  title: string;\n  filePath?: string;\n  manifest: Manifest;\n}\n\nconst all = (...ps: PredicateFn[]) => (x: unknown) => ps.every(p => p(x));\nconst not = (p: PredicateFn) => (x: unknown) => !p(x);\nconst and = (p: PredicateFn, q: PredicateFn) => (x: unknown) => p(x) && q(x);\n\nexport const isField = (x: ClassMember): x is ClassField => x.kind === 'field';\nexport const isMethod = (x: ClassMember): x is ClassMethod => x.kind === 'method';\nexport const isStatic = (x: ClassMember): x is ClassMethod & { static: true } => !!x.static;\nexport const isPublic = (x: ClassMember): boolean =>\n  !x.privacy || !x.privacy?.match?.(/private|protected/);\n\nexport const isPublicInstanceField: (x: ClassMember) => x is ClassField =\n  all(\n    isField as PredicateFn,\n    not(isStatic as PredicateFn),\n    isPublic as PredicateFn,\n  ) as (x: ClassMember) => x is ClassField;\n\nexport const isPublicInstanceMethod: (x: ClassMember) => x is ClassMethod =\n  all(\n    isMethod as PredicateFn,\n    not(isStatic as PredicateFn),\n    isPublic as PredicateFn,\n  ) as (x: ClassMember) => x is ClassMethod;\n\nexport const isCustomElement = (x: Declaration): x is CustomElementDeclaration => 'tagName' in x;\nexport const isTheField =\n  (x: ClassField): (y: Attribute) => boolean =>\n    (y: Attribute): boolean =>\n      y.fieldName === x.name;\n\nconst readJsonSync = (path: string) => {\n  try {\n    return JSON.parse(readFileSync(path, 'utf8'));\n  } catch {\n    return null;\n  }\n};\n\nclass ManifestCustomElement {\n  /** The element's name */\n  declare tagName?: string;\n\n  /** The element's attributes */\n  declare attributes: Attribute[];\n\n  /** The element's cssCustomProperties */\n  declare cssCustomProperties: CssCustomProperty[];\n\n  /** The element's cssParts */\n  declare cssParts: CssPart[];\n\n  /** The element's description */\n  declare description: string;\n\n  /** The element's events */\n  declare events: Event[];\n\n  /** The element's methods */\n  declare methods: ClassMethod[];\n\n  /** The element's properties */\n  declare properties: ClassField[];\n\n  /** The element's slots */\n  declare slots: Slot[];\n\n  /** The element's summary */\n  declare summary: string;\n\n  /** The export for the element */\n  declare export?: Export;\n\n  /** The demos for the element */\n  declare demos?: Demo[];\n\n  constructor(\n    public declaration: CustomElementDeclaration,\n    public module: Module,\n    public manifest: Manifest\n  ) {\n    const isAnAttr = (x: ClassField) => !this.declaration?.attributes?.some?.(isTheField(x));\n\n    this.tagName = this.declaration.tagName;\n    this.attributes = this.declaration?.attributes ?? [];\n    this.cssCustomProperties = this.declaration?.cssProperties ?? [];\n    this.cssParts = this.declaration?.cssParts ?? [];\n    this.description = this.declaration?.description ?? '';\n    this.events = this.declaration?.events ?? [];\n    this.methods = this.declaration?.members?.filter?.(isPublicInstanceMethod) ?? [];\n    this.properties = this.declaration?.members?.filter?.(and(\n      isPublicInstanceField as PredicateFn,\n      isAnAttr as PredicateFn,\n    ) as (typeof isField)) ?? [];\n    this.slots = this.declaration?.slots ?? [];\n    this.demos = this.declaration?.demos ?? [];\n    this.summary = this.declaration?.summary ?? '';\n    this.export = manifest.manifest\n        ?.modules\n        ?.flatMap(x => x.exports ?? [])\n        ?.find(z => z.declaration.name === this.declaration.name);\n  }\n}\n\nexport class Manifest {\n  static #instances = new WeakMap<PackageJSON, Manifest>();\n\n  public static empty(): Manifest {\n    return new Manifest(null, null);\n  }\n\n  public static from({\n    package: packageJson,\n    location,\n  }: { package: PackageJSON; location: string }): Manifest {\n    if (!Manifest.#instances.has(packageJson)) {\n      const manifestPath = join(location, packageJson?.customElements ?? '');\n      const json = readJsonSync(normalize(manifestPath));\n      Manifest.#instances.set(packageJson, new Manifest(json as Package, packageJson, location));\n    }\n    return Manifest.#instances.get(packageJson) as Manifest;\n  }\n\n  public static getAll(rootDir: string = process.cwd()): Manifest[] {\n    return getAllPackages(rootDir).flatMap(x =>\n      !x.package.customElements ? [] : [Manifest.from(x)]);\n  }\n\n  public static prettyTag = (\n    tagName: string,\n    aliases?: Record<string, string>,\n  ): string => aliases?.[tagName] ?? tagName\n      .replace(/^\\w+-/, '')\n      .toLowerCase()\n      .replace(/(?:^|[-/\\s])\\w/g, x => x.toUpperCase())\n      .replace(/-/g, ' ');\n\n  declarations: Map<string, ManifestCustomElement> = new Map<string, ManifestCustomElement>();\n\n  /** file path to the custom elements manifest */\n  path = '';\n\n  constructor(\n    public manifest: Package | null,\n    public packageJson: PackageJSON | null,\n    public location?: string\n  ) {\n    if (manifest && packageJson && location && packageJson.customElements) {\n      this.path = join(location, packageJson.customElements);\n    }\n    for (const mod of manifest?.modules ?? []) {\n      for (const declaration of mod.declarations ?? []) {\n        if (isCustomElement(declaration) && declaration.tagName) {\n          this.declarations.set(\n            declaration.tagName,\n            new ManifestCustomElement(declaration, mod, this),\n          );\n        }\n      }\n    }\n  }\n\n  #tag(tagName: string): ManifestCustomElement | null {\n    return this.declarations?.get(tagName) ?? null;\n  }\n\n  /**\n   */\n  getTagNames(): string[] {\n    return this.manifest?.modules\n        ?.flatMap?.(m => m.exports\n            ?.filter?.(x => x.kind === 'custom-element-definition')\n            ?.map?.(x => x.name)) as string[] ?? [];\n  }\n\n  /**\n   * @param tagName tag to get attributes for\n   */\n  getAttributes(tagName: string): undefined | Attribute[] {\n    return this.#tag(tagName)?.attributes;\n  }\n\n  /**\n   * @param tagName tag to get css props for\n   */\n  getCssCustomProperties(tagName: string): undefined | CssCustomProperty[] {\n    return this.#tag(tagName)?.cssCustomProperties;\n  }\n\n  /**\n   * @param tagName tag to get css parts for\n   */\n  getCssParts(tagName: string): undefined | CssPart[] {\n    return this.#tag(tagName)?.cssParts;\n  }\n\n  /**\n   * @param tagName tag to get description for\n   */\n  getDescription(tagName: string): undefined | string {\n    return this.#tag(tagName)?.description;\n  }\n\n  /**\n   * @param tagName tag to get events for\n   */\n  getEvents(tagName: string): undefined | Event[] {\n    return this.#tag(tagName)?.events;\n  }\n\n  /**\n   * @param tagName tag to get methods for\n   */\n  getMethods(tagName: string): undefined | ClassMethod[] {\n    return this.#tag(tagName)?.methods;\n  }\n\n  /**\n   * @param tagName tag to get properties for\n   */\n  getProperties(tagName: string): undefined | ClassField[] {\n    return this.#tag(tagName)?.properties;\n  }\n\n  /**\n   * @param tagName tag to get summary for\n   */\n  getSummary(tagName: string): undefined | string {\n    return this.#tag(tagName)?.summary;\n  }\n\n  /**\n   * @param tagName tag to get slots for\n   */\n  getSlots(tagName: string): undefined | Slot[] {\n    return this.#tag(tagName)?.slots;\n  }\n\n  /**\n   * @param tagName tag to get demos for\n   */\n  getDemos(tagName: string): Demo[] {\n    return this.#tag(tagName)?.demos ?? [];\n  }\n\n  getAllDemos(): Demo[] {\n    return this.manifest?.modules\n        ?.flatMap?.(m => m.declarations)\n        ?.filter?.((x): x is CustomElementDeclaration => !!x && isCustomElement(x))\n        ?.flatMap?.(x => x?.demos ?? []) ?? [];\n  }\n\n  getDemoMetadata(tagName: string, options: Required<PfeConfig>): DemoRecord[] {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const manifest = this;\n    const { prettyTag } = Manifest;\n    return this.getDemos(tagName).map(demo => {\n      const permalink = demo.url.replace(options.demoURLPrefix, '/');\n\n      /**\n       * `/components/`\n       * capture group 1:\n       * > **ANY** (_>= 0x_)\n       * `/demo`\n       */\n      const DEMO_PATH_RE = new RegExp(`/${options.site.componentSubpath}/(.*)/demo`);\n      let [, slug = ''] = permalink.match(DEMO_PATH_RE) ?? [];\n      // strict removes all special characters from slug\n      slug = slugify(slug, { strict: true, lower: true });\n      const primaryElementName = deslugify(slug, options.rootDir);\n      const filePath = demo.source?.href.replace(options.sourceControlURLPrefix, `${options.rootDir}/`) ?? '';\n      const [last = ''] = filePath.split('/').reverse();\n      const filename = last.replace('.html', '');\n      const isMainElementDemo = this.getTagNames().includes(filename);\n      const title = isMainElementDemo ? options.aliases[tagName] ?? prettyTag(tagName) : last\n          .replace(/(?:^|[-/\\s])\\w/g, x => x.toUpperCase())\n          .replace(/-/g, ' ')\n          .replace('.html', '');\n      return {\n        tagName,\n        primaryElementName,\n        permalink,\n        slug,\n        title,\n        filePath,\n        manifest,\n        ...demo,\n      };\n    });\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.d.ts
new file mode 100644
index 0000000..ef9f480
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.d.ts
@@ -0,0 +1,17 @@
+/**
+ * Adapted from `get-monorepo-packages` by Lucas Azzola
+ * @license MIT
+ * @see https://github.com/azz/get-monorepo-packages/
+ */
+import type { PackageJSON } from './Manifest';
+interface PackageRecord {
+    location: string;
+    package: PackageJSON;
+}
+/**
+ * get all the package json manifests in a repo,
+ * whether a single package repo, or a monorepo.
+ * @param rootDir path to the root package of the monorepo, or the package
+ */
+export declare function getAllPackages(rootDir: string): PackageRecord[];
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js
new file mode 100644
index 0000000..d5dd045
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js
@@ -0,0 +1,49 @@
+/**
+ * Adapted from `get-monorepo-packages` by Lucas Azzola
+ * @license MIT
+ * @see https://github.com/azz/get-monorepo-packages/
+ */
+import { join } from 'node:path';
+import { existsSync, readFileSync } from 'node:fs';
+import { globSync, hasMagic } from 'glob';
+const readJsonSync = (path) => {
+    try {
+        return JSON.parse(readFileSync(path, 'utf8'));
+    }
+    catch {
+        return null;
+    }
+};
+function loadPackage(packagePath) {
+    const pkgJsonPath = join(packagePath, 'package.json');
+    if (existsSync(pkgJsonPath)) {
+        return readJsonSync(pkgJsonPath);
+    }
+}
+function findPackages(packageSpecs, rootDirectory) {
+    return packageSpecs
+        .flatMap(pkgGlob => (hasMagic(pkgGlob) ?
+        globSync(join(rootDirectory, pkgGlob), { nodir: false })
+        : [join(rootDirectory, pkgGlob)]))
+        .map(location => ({ location, package: loadPackage(location) }))
+        .filter((x) => !!x.package?.name);
+}
+/**
+ * get all the package json manifests in a repo,
+ * whether a single package repo, or a monorepo.
+ * @param rootDir path to the root package of the monorepo, or the package
+ */
+export function getAllPackages(rootDir) {
+    const rootPackagePath = join(rootDir, 'package.json');
+    const rootPackage = readJsonSync(rootPackagePath);
+    if (Array.isArray(rootPackage?.workspaces)) {
+        return findPackages(rootPackage.workspaces, rootDir);
+    }
+    else if (rootPackage) {
+        return [{ package: rootPackage, location: rootDir }];
+    }
+    else {
+        return [];
+    }
+}
+//# sourceMappingURL=get-all-packages.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js.map
new file mode 100644
index 0000000..dafe29d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/lib/get-all-packages.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-all-packages.js","sourceRoot":"","sources":["get-all-packages.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AAIH,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AACjC,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AAO1C,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,EAAE;IACpC,IAAI,CAAC;QACH,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAChD,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC,CAAC;AAEF,SAAS,WAAW,CAAC,WAAmB;IACtC,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;IACtD,IAAI,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC;QAC5B,OAAO,YAAY,CAAC,WAAW,CAAC,CAAC;IACnC,CAAC;AACH,CAAC;AAED,SAAS,YAAY,CAAC,YAAsB,EAAE,aAAqB;IACjE,OAAO,YAAY;SACd,OAAO,CAAC,OAAO,CAAC,EAAE,CACjB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;QAClB,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;QACxD,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;SACrC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;SAC/D,MAAM,CAAC,CAAC,CAAC,EAAsB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC5D,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,cAAc,CAAC,OAAe;IAC5C,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACtD,MAAM,WAAW,GAAG,YAAY,CAAC,eAAe,CAAC,CAAC;IAClD,IAAI,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,EAAE,CAAC;QAC3C,OAAO,YAAY,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;SAAM,IAAI,WAAW,EAAE,CAAC;QACvB,OAAO,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;IACvD,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC","sourcesContent":["/**\n * Adapted from `get-monorepo-packages` by Lucas Azzola\n * @license MIT\n * @see https://github.com/azz/get-monorepo-packages/\n */\n\nimport type { PackageJSON } from './Manifest';\n\nimport { join } from 'node:path';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { globSync, hasMagic } from 'glob';\n\ninterface PackageRecord {\n  location: string;\n  package: PackageJSON;\n}\n\nconst readJsonSync = (path: string) => {\n  try {\n    return JSON.parse(readFileSync(path, 'utf8'));\n  } catch {\n    return null;\n  }\n};\n\nfunction loadPackage(packagePath: string): PackageJSON | void {\n  const pkgJsonPath = join(packagePath, 'package.json');\n  if (existsSync(pkgJsonPath)) {\n    return readJsonSync(pkgJsonPath);\n  }\n}\n\nfunction findPackages(packageSpecs: string[], rootDirectory: string): PackageRecord[] {\n  return packageSpecs\n      .flatMap(pkgGlob =>\n        (hasMagic(pkgGlob) ?\n          globSync(join(rootDirectory, pkgGlob), { nodir: false })\n          : [join(rootDirectory, pkgGlob)]))\n      .map(location => ({ location, package: loadPackage(location) }))\n      .filter((x): x is PackageRecord => !!x.package?.name);\n}\n\n/**\n * get all the package json manifests in a repo,\n * whether a single package repo, or a monorepo.\n * @param rootDir path to the root package of the monorepo, or the package\n */\nexport function getAllPackages(rootDir: string): PackageRecord[] {\n  const rootPackagePath = join(rootDir, 'package.json');\n  const rootPackage = readJsonSync(rootPackagePath);\n  if (Array.isArray(rootPackage?.workspaces)) {\n    return findPackages(rootPackage.workspaces, rootDir);\n  } else if (rootPackage) {\n    return [{ package: rootPackage, location: rootDir }];\n  } else {\n    return [];\n  }\n}\n\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.d.ts
new file mode 100644
index 0000000..35fc88b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.d.ts
@@ -0,0 +1,5 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * For reasons unknown, some events come back without a name
+ */
+export declare function sanitizeEventsPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js
new file mode 100644
index 0000000..66419ce
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js
@@ -0,0 +1,23 @@
+/**
+ * For reasons unknown, some events come back without a name
+ */
+export function sanitizeEventsPlugin() {
+    return {
+        name: 'sanitize-events-plugin',
+        moduleLinkPhase({ moduleDoc }) {
+            for (const decl of moduleDoc.declarations ?? []) {
+                switch (decl.kind) {
+                    case 'class':
+                    case 'mixin':
+                        for (const event of decl.events ?? []) {
+                            if (!event.name) {
+                                decl.events =
+                                    decl.events?.filter(x => x !== event);
+                            }
+                        }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=sanitize-events.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js.map
new file mode 100644
index 0000000..1a27100
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/sanitize-events.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"sanitize-events.js","sourceRoot":"","sources":["sanitize-events.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,UAAU,oBAAoB;IAClC,OAAO;QACL,IAAI,EAAE,wBAAwB;QAC9B,eAAe,CAAC,EAAE,SAAS,EAAE;YAC3B,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;gBAChD,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;oBAClB,KAAK,OAAO,CAAC;oBACb,KAAK,OAAO;wBACV,KAAK,MAAM,KAAK,IAAK,IAAsB,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;4BACzD,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;gCACf,IAAsB,CAAC,MAAM;oCAC3B,IAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;4BAC7D,CAAC;wBACH,CAAC;gBACL,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { Plugin } from '@custom-elements-manifest/analyzer';\nimport type { CustomElement } from 'custom-elements-manifest/schema';\n\n/**\n * For reasons unknown, some events come back without a name\n */\nexport function sanitizeEventsPlugin(): Plugin {\n  return {\n    name: 'sanitize-events-plugin',\n    moduleLinkPhase({ moduleDoc }) {\n      for (const decl of moduleDoc.declarations ?? []) {\n        switch (decl.kind) {\n          case 'class':\n          case 'mixin':\n            for (const event of (decl as CustomElement).events ?? []) {\n              if (!event.name) {\n                (decl as CustomElement).events =\n                  (decl as CustomElement).events?.filter(x => x !== event);\n              }\n            }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.d.ts
new file mode 100644
index 0000000..8ec64a6
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.d.ts
@@ -0,0 +1,5 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * provides the summary field on classes
+ */
+export declare function summaryPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js
new file mode 100644
index 0000000..115fd54
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js
@@ -0,0 +1,27 @@
+/**
+ * provides the summary field on classes
+ */
+export function summaryPlugin() {
+    return {
+        name: 'summary-plugin',
+        analyzePhase({ ts, node, moduleDoc }) {
+            if (ts.isClassDeclaration(node)) {
+                const name = node.name?.getText();
+                if (name) {
+                    const decl = moduleDoc.declarations?.find?.(x => x.name === name);
+                    if (decl && !decl.summary) {
+                        const summary = node
+                            ?.jsDoc
+                            ?.tags
+                            ?.find?.(x => x.tagName.getText() === 'summary')
+                            ?.comment;
+                        if (summary) {
+                            decl.summary = summary.toString();
+                        }
+                    }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=summary.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js.map
new file mode 100644
index 0000000..761d2e1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/summary.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"summary.js","sourceRoot":"","sources":["summary.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,UAAU,aAAa;IAC3B,OAAO;QACL,IAAI,EAAE,gBAAgB;QACtB,YAAY,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;YAClC,IAAI,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC;gBAClC,IAAI,IAAI,EAAE,CAAC;oBACT,MAAM,IAAI,GAAG,SAAS,CAAC,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;oBAClE,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;wBAC1B,MAAM,OAAO,GAAI,IAAuC;4BACpD,EAAE,KAAK;4BACP,EAAE,IAAI;4BACN,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC;4BAChD,EAAE,OAAO,CAAC;wBACd,IAAI,OAAO,EAAE,CAAC;4BACZ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;wBACpC,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { Plugin } from '@custom-elements-manifest/analyzer';\nimport type { JSDoc } from 'typescript';\n\n/**\n * provides the summary field on classes\n */\nexport function summaryPlugin(): Plugin {\n  return {\n    name: 'summary-plugin',\n    analyzePhase({ ts, node, moduleDoc }) {\n      if (ts.isClassDeclaration(node)) {\n        const name = node.name?.getText();\n        if (name) {\n          const decl = moduleDoc.declarations?.find?.(x => x.name === name);\n          if (decl && !decl.summary) {\n            const summary = (node as typeof node & { jsDoc: JSDoc })\n                ?.jsDoc\n                ?.tags\n                ?.find?.(x => x.tagName.getText() === 'summary')\n                ?.comment;\n            if (summary) {\n              decl.summary = summary.toString();\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.d.ts b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.d.ts
new file mode 100644
index 0000000..6e9a39e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.d.ts
@@ -0,0 +1,5 @@
+import type { Plugin } from '@custom-elements-manifest/analyzer';
+/**
+ * Add the static `version` field to custom element class declarations
+ */
+export declare function versionStaticFieldPlugin(): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js
new file mode 100644
index 0000000..86d4e47
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js
@@ -0,0 +1,37 @@
+import { readFileSync } from 'node:fs';
+import { join } from 'node:path';
+function isClassDeclaration(decl) {
+    return decl.kind === 'class';
+}
+function isVersionStatic(member) {
+    return !!member.static && member.name === 'version';
+}
+/**
+ * Add the static `version` field to custom element class declarations
+ */
+export function versionStaticFieldPlugin() {
+    return {
+        name: 'version-static-field-plugin',
+        packageLinkPhase({ customElementsManifest }) {
+            for (const mod of customElementsManifest.modules) {
+                for (const decl of mod.declarations ?? []) {
+                    if (isClassDeclaration(decl)) {
+                        const versionField = decl.members?.find(isVersionStatic);
+                        if (versionField) {
+                            try {
+                                const { version, } = JSON.parse(readFileSync(join(process.cwd(), 'package.json'), 'utf-8'));
+                                versionField.default = version;
+                            }
+                            catch (e) {
+                                // eslint-disable-next-line no-console
+                                console.error(e);
+                                delete versionField.default;
+                            }
+                        }
+                    }
+                }
+            }
+        },
+    };
+}
+//# sourceMappingURL=version-static-field.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js.map b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js.map
new file mode 100644
index 0000000..aea5010
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/custom-elements-manifest/version-static-field.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"version-static-field.js","sourceRoot":"","sources":["version-static-field.ts"],"names":[],"mappings":"AAQA,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAC;AAEjC,SAAS,kBAAkB,CAAC,IAAiB;IAC3C,OAAO,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;AAC/B,CAAC;AAED,SAAS,eAAe,CAAC,MAAmB;IAC1C,OAAO,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC;AACtD,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB;IACtC,OAAO;QACL,IAAI,EAAE,6BAA6B;QACnC,gBAAgB,CAAC,EAAE,sBAAsB,EAAE;YACzC,KAAK,MAAM,GAAG,IAAI,sBAAsB,CAAC,OAAO,EAAE,CAAC;gBACjD,KAAK,MAAM,IAAI,IAAI,GAAG,CAAC,YAAY,IAAI,EAAE,EAAE,CAAC;oBAC1C,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;wBACzD,IAAI,YAAY,EAAE,CAAC;4BACjB,IAAI,CAAC;gCACH,MAAM,EACJ,OAAO,GACR,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;gCAC3E,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;4BACjC,CAAC;4BAAC,OAAO,CAAC,EAAE,CAAC;gCACX,sCAAsC;gCACtC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gCACjB,OAAO,YAAY,CAAC,OAAO,CAAC;4BAC9B,CAAC;wBACH,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type {\n  Declaration,\n  ClassField,\n  ClassDeclaration,\n  ClassMember,\n} from 'custom-elements-manifest/schema';\nimport type { Plugin } from '@custom-elements-manifest/analyzer';\n\nimport { readFileSync } from 'node:fs';\nimport { join } from 'node:path';\n\nfunction isClassDeclaration(decl: Declaration): decl is ClassDeclaration {\n  return decl.kind === 'class';\n}\n\nfunction isVersionStatic(member: ClassMember): member is ClassField {\n  return !!member.static && member.name === 'version';\n}\n\n/**\n * Add the static `version` field to custom element class declarations\n */\nexport function versionStaticFieldPlugin(): Plugin {\n  return {\n    name: 'version-static-field-plugin',\n    packageLinkPhase({ customElementsManifest }) {\n      for (const mod of customElementsManifest.modules) {\n        for (const decl of mod.declarations ?? []) {\n          if (isClassDeclaration(decl)) {\n            const versionField = decl.members?.find(isVersionStatic);\n            if (versionField) {\n              try {\n                const {\n                  version,\n                } = JSON.parse(readFileSync(join(process.cwd(), 'package.json'), 'utf-8'));\n                versionField.default = version;\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n                delete versionField.default;\n              }\n            }\n          }\n        }\n      }\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/config.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/config.d.ts
new file mode 100644
index 0000000..8671397
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/config.d.ts
@@ -0,0 +1,28 @@
+import type { Plugin } from '@web/dev-server-core';
+import type { DevServerConfig } from '@web/dev-server';
+import { type LitCSSOptions } from 'web-dev-server-plugin-lit-css';
+import { type PfeConfig } from '../config.js';
+import { type Options as ImportMapOptions } from './plugins/import-map-generator.js';
+type BaseConfig = DevServerConfig & PfeConfig;
+export interface PfeDevServerConfigOptions extends BaseConfig {
+    hostname?: string;
+    litcssOptions?: LitCSSOptions;
+    tsconfig?: string;
+    /** Extra dev server plugins */
+    loadDemo?: boolean;
+    plugins?: Plugin[];
+    watchFiles?: string;
+    importMapOptions?: ImportMapOptions;
+}
+/**
+ * Creates a default config for PFE's dev server.
+ * @param options dev server config
+ */
+export declare function pfeDevServerConfig(options?: PfeDevServerConfigOptions): DevServerConfig;
+/**
+ * Returns an import map `imports` section containing the entire
+ * `@patternfly/icons` collection, pointing to node_modules
+ * @param rootUrl repository root
+ */
+export declare function getPatternflyIconNodemodulesImports(rootUrl: string): Promise<Record<string, string>>;
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/config.js b/node_modules/@patternfly/pfe-tools/package/dev-server/config.js
new file mode 100644
index 0000000..47f47fb
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/config.js
@@ -0,0 +1,153 @@
+import { readdir, stat } from 'node:fs/promises';
+import { fileURLToPath } from 'node:url';
+import rollupReplace from '@rollup/plugin-replace';
+import { litCss } from 'web-dev-server-plugin-lit-css';
+import { fromRollup } from '@web/dev-server-rollup';
+import { esbuildPlugin } from '@web/dev-server-esbuild';
+import { getPfeConfig } from '../config.js';
+import { importMapGeneratorPlugin, } from './plugins/import-map-generator.js';
+import { pfeDevServerPlugin } from './plugins/pfe-dev-server.js';
+import { join } from 'node:path';
+const replace = fromRollup(rollupReplace);
+function normalizeOptions(options) {
+    const config = {
+        ...getPfeConfig(),
+        ...options ?? {},
+    };
+    /**
+     * Plain case: this file is running from `/node_modules/@patternfly/pfe-tools`.
+     *             two dirs up from here is `node_modules`, so we just shear it clean off the path string
+     * Other case: this file is running in the `patternfly/patternfly-elements` monorepo
+     *             two dirs up from here is the project root. There is no `/node_modules$` to replace,
+     *             so we get the correct path
+     * Edge/Corner cases: all other cases must set the `rootDir` option themselves so as to avoid 404s
+     */
+    config.rootDir = options?.rootDir ?? fileURLToPath(new URL('../../..', import.meta.url))
+        .replace(/node_modules\/$/, '/')
+        .replace(/\/node_modules$/, '/')
+        .replace('//', '/');
+    config.importMapOptions ??= {};
+    config.importMapOptions.providers ??= {};
+    config.site = { ...config.site, ...options?.site ?? {} };
+    config.loadDemo ??= true;
+    config.watchFiles ??= '{elements,core}/**/*.{css,html}';
+    config.litcssOptions ??= {
+        include: /\.css$/,
+        exclude: /(?:@patternfly\/pfe-tools\/dev-server\/(?:fonts|demo).css)|-lightdom(?:-shim)?\.css$/,
+    };
+    return config;
+}
+/**
+ * CORS middleware
+ * @param ctx koa context
+ * @param next middleware
+ */
+function cors(ctx, next) {
+    ctx.set('Access-Control-Allow-Origin', '*');
+    return next();
+}
+async function cacheBusterMiddleware(ctx, next) {
+    await next();
+    if (ctx.path.match(/(elements|pfe-core)\/.*\.js$/)) {
+        const stats = await stat(join(process.cwd(), ctx.path));
+        const mtime = stats.mtime.getTime();
+        const etag = `modified-${mtime}`;
+        ctx.response.set('Cache-Control', 'no-store, no-cache, must-revalidate');
+        ctx.response.set('Pragma', 'no-cache');
+        ctx.response.set('Last-Modified', mtime.toString());
+        ctx.response.etag = etag;
+    }
+}
+function liveReloadTsChangesMiddleware(config) {
+    /**
+     * capture group 1:
+     *   Either config.elementsDir or `pfe-core`
+     * `/`
+     * **ANY** (_>= 0x_)
+     * `.js`
+     */
+    const TYPESCRIPT_SOURCES_RE = new RegExp(`(${config.elementsDir}|pfe-core)/.*\\.js`);
+    return function (ctx, next) {
+        if (!ctx.path.includes('node_modules') && ctx.path
+            .match(TYPESCRIPT_SOURCES_RE)) {
+            ctx.redirect(ctx.path.replace('.js', '.ts'));
+        }
+        else {
+            return next();
+        }
+    };
+}
+/**
+ * Creates a default config for PFE's dev server.
+ * @param options dev server config
+ */
+export function pfeDevServerConfig(options) {
+    const config = normalizeOptions(options);
+    const tsconfig = config?.tsconfig;
+    return {
+        ...options ?? {},
+        rootDir: config.rootDir,
+        middleware: [
+            cors,
+            cacheBusterMiddleware,
+            liveReloadTsChangesMiddleware(config),
+            ...config?.middleware ?? [],
+        ],
+        plugins: [
+            // Dev server app which loads component demo files
+            pfeDevServerPlugin(config),
+            // serve typescript sources as javascript
+            esbuildPlugin({
+                ts: true,
+                tsconfig,
+            }),
+            replace({
+                'preventAssignment': true,
+                'process.env.NODE_ENV': '"production"',
+            }),
+            // load .css files as lit CSSResult modules
+            litCss(config.litcssOptions),
+            importMapGeneratorPlugin({
+                ...config.importMapOptions,
+                providers: {
+                    'construct-style-sheets-polyfill': 'nodemodules',
+                    'element-internals-polyfill': 'nodemodules',
+                    'lit-html': 'nodemodules',
+                    'lit': 'nodemodules',
+                    '@lit/reactive-element': 'nodemodules',
+                    '@lit/context': 'nodemodules',
+                    ...config.importMapOptions?.providers,
+                },
+                resolveHtmlUrl(fileUrl, rootUrl) {
+                    const override = config.importMapOptions.resolveHtmlUrl?.(fileUrl, rootUrl);
+                    if (override) {
+                        return override;
+                    }
+                    else {
+                        return fileUrl.replace('/components/', '/elements/pf-');
+                    }
+                },
+            }),
+            ...config?.plugins ?? [],
+        ],
+    };
+}
+/**
+ * Returns an import map `imports` section containing the entire
+ * `@patternfly/icons` collection, pointing to node_modules
+ * @param rootUrl repository root
+ */
+export async function getPatternflyIconNodemodulesImports(rootUrl) {
+    const files = await readdir(new URL('./node_modules/@patternfly/icons', rootUrl));
+    const dirs = [];
+    for (const dir of files) {
+        if (!dir.startsWith('.') && (await stat(new URL(`./node_modules/@patternfly/icons/${dir}`, rootUrl))).isDirectory()) {
+            dirs.push(dir);
+        }
+    }
+    const specs = await Promise.all(dirs.flatMap(dir => readdir(new URL(`./node_modules/@patternfly/icons/${dir}`, rootUrl))
+        .then(files => files.filter(x => x.endsWith('.js')))
+        .then(icons => icons.flatMap(icon => `@patternfly/icons/${dir}/${icon}`))));
+    return Object.fromEntries(specs.flat().map(spec => [spec, `./node_modules/${spec}`]));
+}
+//# sourceMappingURL=config.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/config.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/config.js.map
new file mode 100644
index 0000000..de61a2d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/config.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Plugin } from '@web/dev-server-core';\nimport type { DevServerConfig } from '@web/dev-server';\nimport type { Middleware, Context, Next } from 'koa';\n\nimport { readdir, stat } from 'node:fs/promises';\nimport { fileURLToPath } from 'node:url';\n\nimport rollupReplace from '@rollup/plugin-replace';\n\nimport { litCss, type LitCSSOptions } from 'web-dev-server-plugin-lit-css';\nimport { fromRollup } from '@web/dev-server-rollup';\nimport { esbuildPlugin } from '@web/dev-server-esbuild';\n\nimport { getPfeConfig, type PfeConfig } from '../config.js';\nimport {\n  importMapGeneratorPlugin,\n  type Options as ImportMapOptions,\n} from './plugins/import-map-generator.js';\n\nimport { pfeDevServerPlugin } from './plugins/pfe-dev-server.js';\nimport { join } from 'node:path';\n\nconst replace = fromRollup(rollupReplace);\n\ntype BaseConfig = DevServerConfig & PfeConfig;\nexport interface PfeDevServerConfigOptions extends BaseConfig {\n  hostname?: string;\n  litcssOptions?: LitCSSOptions;\n  tsconfig?: string;\n  /** Extra dev server plugins */\n  loadDemo?: boolean;\n  plugins?: Plugin[];\n  watchFiles?: string;\n  importMapOptions?: ImportMapOptions;\n}\n\nfunction normalizeOptions(options?: PfeDevServerConfigOptions) {\n  const config: PfeDevServerConfigOptions = {\n    ...getPfeConfig(),\n    ...options ?? {},\n  };\n  /**\n   * Plain case: this file is running from `/node_modules/@patternfly/pfe-tools`.\n   *             two dirs up from here is `node_modules`, so we just shear it clean off the path string\n   * Other case: this file is running in the `patternfly/patternfly-elements` monorepo\n   *             two dirs up from here is the project root. There is no `/node_modules$` to replace,\n   *             so we get the correct path\n   * Edge/Corner cases: all other cases must set the `rootDir` option themselves so as to avoid 404s\n   */\n  config.rootDir = options?.rootDir ?? fileURLToPath(new URL('../../..', import.meta.url))\n      .replace(/node_modules\\/$/, '/')\n      .replace(/\\/node_modules$/, '/')\n      .replace('//', '/');\n  config.importMapOptions ??= {} as PfeDevServerConfigOptions['importMapOptions'];\n  config.importMapOptions!.providers ??= {};\n  config.site = { ...config.site, ...options?.site ?? {} };\n  config.loadDemo ??= true;\n  config.watchFiles ??= '{elements,core}/**/*.{css,html}';\n  config.litcssOptions ??= {\n    include: /\\.css$/,\n    exclude: /(?:@patternfly\\/pfe-tools\\/dev-server\\/(?:fonts|demo).css)|-lightdom(?:-shim)?\\.css$/,\n  };\n  return config as Required<PfeDevServerConfigOptions> & { site: Required<PfeConfig['site']> };\n}\n\n/**\n * CORS middleware\n * @param ctx koa context\n * @param next middleware\n */\nfunction cors(ctx: Context, next: Next) {\n  ctx.set('Access-Control-Allow-Origin', '*');\n  return next();\n}\n\nasync function cacheBusterMiddleware(ctx: Context, next: Next) {\n  await next();\n  if (ctx.path.match(/(elements|pfe-core)\\/.*\\.js$/)) {\n    const stats = await stat(join(process.cwd(), ctx.path));\n    const mtime = stats.mtime.getTime();\n    const etag = `modified-${mtime}`;\n    ctx.response.set('Cache-Control', 'no-store, no-cache, must-revalidate');\n    ctx.response.set('Pragma', 'no-cache');\n    ctx.response.set('Last-Modified', mtime.toString());\n    ctx.response.etag = etag;\n  }\n}\n\nfunction liveReloadTsChangesMiddleware(\n  config: ReturnType<typeof normalizeOptions>,\n): Middleware {\n  /**\n   * capture group 1:\n   *   Either config.elementsDir or `pfe-core`\n   * `/`\n   * **ANY** (_>= 0x_)\n   * `.js`\n   */\n  const TYPESCRIPT_SOURCES_RE = new RegExp(`(${config.elementsDir}|pfe-core)/.*\\\\.js`);\n\n  return function(ctx, next) {\n    if (!ctx.path.includes('node_modules') && ctx.path\n        .match(TYPESCRIPT_SOURCES_RE)) {\n      ctx.redirect(ctx.path.replace('.js', '.ts'));\n    } else {\n      return next();\n    }\n  };\n}\n\n/**\n * Creates a default config for PFE's dev server.\n * @param options dev server config\n */\nexport function pfeDevServerConfig(options?: PfeDevServerConfigOptions): DevServerConfig {\n  const config = normalizeOptions(options);\n\n  const tsconfig = config?.tsconfig;\n\n  return {\n    ...options ?? {},\n\n    rootDir: config.rootDir,\n\n    middleware: [\n      cors,\n      cacheBusterMiddleware,\n      liveReloadTsChangesMiddleware(config),\n      ...config?.middleware ?? [],\n    ],\n\n    plugins: [\n      // Dev server app which loads component demo files\n      pfeDevServerPlugin(config),\n\n      // serve typescript sources as javascript\n      esbuildPlugin({\n        ts: true,\n        tsconfig,\n      }),\n\n      replace({\n        'preventAssignment': true,\n        'process.env.NODE_ENV': '\"production\"',\n      }),\n\n      // load .css files as lit CSSResult modules\n      litCss(config.litcssOptions),\n\n      importMapGeneratorPlugin({\n        ...config.importMapOptions,\n        providers: {\n          'construct-style-sheets-polyfill': 'nodemodules',\n          'element-internals-polyfill': 'nodemodules',\n          'lit-html': 'nodemodules',\n          'lit': 'nodemodules',\n          '@lit/reactive-element': 'nodemodules',\n          '@lit/context': 'nodemodules',\n          ...config.importMapOptions?.providers,\n        },\n        resolveHtmlUrl(fileUrl, rootUrl) {\n          const override = config.importMapOptions.resolveHtmlUrl?.(fileUrl, rootUrl);\n          if (override) {\n            return override;\n          } else {\n            return fileUrl.replace('/components/', '/elements/pf-');\n          }\n        },\n      }),\n\n      ...config?.plugins ?? [],\n\n    ],\n  };\n}\n\n/**\n * Returns an import map `imports` section containing the entire\n * `@patternfly/icons` collection, pointing to node_modules\n * @param rootUrl repository root\n */\nexport async function getPatternflyIconNodemodulesImports(\n  rootUrl: string,\n): Promise<Record<string, string>> {\n  const files = await readdir(new URL('./node_modules/@patternfly/icons', rootUrl));\n  const dirs = [];\n\n  for (const dir of files) {\n    if (!dir.startsWith('.') && (await stat(new URL(`./node_modules/@patternfly/icons/${dir}`, rootUrl))).isDirectory()) {\n      dirs.push(dir);\n    }\n  }\n\n  const specs = await Promise.all(dirs.flatMap(dir =>\n    readdir(new URL(`./node_modules/@patternfly/icons/${dir}`, rootUrl))\n        .then(files => files.filter(x => x.endsWith('.js')))\n        .then(icons => icons.flatMap(icon => `@patternfly/icons/${dir}/${icon}`))\n  ));\n\n  return Object.fromEntries(specs.flat().map(spec => [spec, `./node_modules/${spec}`]));\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/demo.css b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.css
new file mode 100644
index 0000000..4b86971
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.css
@@ -0,0 +1,607 @@
+:root {
+  --pf-demo-header-height: 60px;
+  --pf-theme--font-family: "Red Hat Text", "Overpass", Helvetica, Arial, sans-serif;
+  --pf-theme--font-family--heading: "Red Hat Display", "Overpass", Helvetica, Arial, sans-serif;
+  --pf-navigation--Height--actual: 60px;
+}
+
+*, *::before, *::after {
+  box-sizing: border-box;
+}
+
+[hidden] {
+  display: none !important;
+}
+
+html[unresolved] {
+  opacity: 0;
+}
+
+html, body {
+  margin: 0;
+  font-family: var(--pf-global--FontFamily--sans-serif, "RedHatText", "Overpass", overpass, helvetica, arial, sans-serif);
+  font-size: var(--pf-global--FontSize--md, 1rem);
+  font-weight: var(--pf-global--FontWeight--normal, 400);
+  line-height: var(--pf-global--LineHeight--md, 1.5);
+  text-align: left;
+  background-color: var(--pf-global--BackgroundColor--100, #fff);
+  min-height: 100vh;
+}
+
+body {
+  display: grid;
+  grid-template-rows: var(--pf-demo-header-height, 4.375rem) auto;
+  grid-template-columns: 100vw;
+  grid-template-areas:
+    'head'
+    'body';
+}
+
+body.menu-open {
+  grid-template-columns: 280px 1fr;
+  grid-template-areas:
+    'head head'
+    'menu body';
+}
+
+#main-header {
+  grid-area: head;
+  display: block;
+}
+
+.logo-bar {
+  display: flex;
+  height: var(--pf-demo-header-height, 4.375rem);
+  align-items: center;
+  gap: 1rem;
+  padding-inline-start: var(--pf-c-masthead--PaddingLeft, var(--pf-c-masthead--inset, 24px));
+  padding-inline-end: var(--pf-c-masthead--PaddingRight, var(--pf-c-masthead--inset, 24px));
+  padding-block: 8px;
+  color: white;
+  background: black;
+}
+
+.logo-bar > a {
+  display: flex;
+  align-items: center;
+  color: white;
+  text-decoration: none;
+  font-size: 1.25rem;
+  font-weight: bold;
+  height: 100%;
+}
+
+.logo-bar > a img {
+  height: 100%;
+}
+
+.logo-bar svg {
+  height: 100%;
+}
+
+.logo-bar #hamburger {
+  --pf-c-button--m-plain--Color: #fff;
+  --pf-c-button--m-plain--active--Color: #fff;
+  --pf-c-button--m-plain--focus--Color: #fff;
+  --pf-c-button--m-plain--hover--Color: #fff;
+}
+
+#source-control {
+  display: flex;
+  gap: 0.5rem;
+  font-size: 1rem;
+  font-weight: 400;
+  margin-inline-start: auto;
+}
+
+#source-control:hover {
+  text-decoration: underline;
+}
+
+#source-control svg {
+  height: var(	--pf-global--icon--FontSize--lg, 1.5rem);
+}
+
+#components {
+  display: grid;
+  padding: 1em;
+  gap: 1em;
+  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
+}
+
+#components img {
+  width: 100%;
+  height: auto;
+}
+
+#components a {
+  display: block;
+}
+
+#components a:is(:focus, :hover) {
+  outline: 2px solid var(--pf-global--primary-color--200, #004080);
+}
+
+#components ul {
+  padding: 0;
+}
+
+#components li {
+  list-style-type: none;
+}
+
+@media (max-width: 640px) {
+  body.menu-open {
+    grid-template-columns: 100vw 0;
+  }
+
+  #source-control span {
+    /* Hide the text on small screens */
+    position: absolute;
+    width: 1px;
+    height: 1px;
+    padding: 0;
+    margin: -1px;
+    overflow: hidden;
+    clip: rect(0, 0, 0, 0);
+    white-space: nowrap;
+    border: 0;
+  }
+
+  #sidebar {
+    width: 100%;
+  }
+}
+
+#sidebar {
+  grid-area: menu;
+}
+
+#sidebar[aria-expanded=false] {
+  display: none;
+}
+
+#nav {
+  width: 100%;
+  height: calc(100vh - var(--pf-demo-header-height, 4.375rem));
+  overflow-y: auto;
+  color: #151515;
+  background: #fff;
+  border-right: .0625rem solid #d2d2d2;
+  padding-block-start: 1rem;
+}
+
+#nav ul {
+  margin: 0;
+  padding: 0;
+  list-style: none;
+}
+
+#nav li ul {
+  padding-left: 2rem;
+}
+
+#nav > ul > li {
+  line-height: 2.25rem;
+}
+
+#nav summary {
+  display: block;
+  text-decoration: none;
+  transition: background-color .25s;
+  font-size: 1.125rem;
+  padding: .25em 2rem;
+  color: #151515;
+}
+
+#nav details>summary::-webkit-details-marker {
+  display: none;
+}
+
+#nav summary {
+  cursor: pointer;
+}
+
+#nav summary::after {
+  content: "";
+  color: #151515;
+  width: .5625rem;
+  height: .5625rem;
+  transform: rotate(45deg);
+  border-right: .1875rem solid #151515;
+  border-top: .1875rem solid #151515;
+  display: flex;
+  float: right;
+  top: .8125rem;
+  position: relative;
+}
+
+#nav details[open] summary::after {
+  transform: rotate(135deg);
+}
+
+#nav a {
+  font-size: 1rem;
+  line-height: 1.5rem;
+  padding-left: 1rem;
+  display: block;
+  text-decoration: none;
+  transition: background-color .25s;
+  font-size: 1.125rem;
+  padding: .5em 2rem;
+  color: #151515;
+}
+
+#nav :is(summary, a):is(:focus, :hover) {
+  color: #151515;
+  background: #f5f5f5;
+  box-shadow: inset 0.1875rem 0 0 0 #d2d2d2;
+}
+
+#nav a:active {
+  background: #f5f5f5;
+  box-shadow: inset 0.1875rem 0 0 0 var(--pf-theme--color--surface--accent, #004080);
+  color: #151515;
+}
+
+@media(max-width: 640px) {
+  #sidebar {
+    grid-area: body;
+    position: fixed;
+    min-width: 50vw;
+    top: var(--pf-demo-header-height, 4.375rem);
+    z-index: 2;
+  }
+
+  html {
+    grid-template-areas: 'head' 'body';
+    grid-template-columns: 1fr;
+  }
+}
+
+main {
+  grid-area: body;
+  display: grid;
+  height: 100%;
+  width: 100%;
+  max-height: calc(100vh - var(--pf-demo-header-height));
+}
+
+[slot=header] fieldset {
+  border: 0;
+  margin: 0;
+  padding: 0;
+}
+
+[slot=header] button {
+  vertical-align: bottom;
+  background: none;
+  border: none;
+  width: 40px;
+  height: 40px;
+  padding: 0;
+  margin: 0;
+}
+
+#component-header:not(:defined) {
+  display: grid;
+  grid-row: span 2;
+  place-items: center;
+}
+
+#component-header::part(header) {
+  display: flex;
+  gap: 1em;
+  justify-content: space-between;
+  align-items: center;
+}
+
+summary :is(h1,h2,h3,h4,h5,h6) {
+  margin: 0;
+  display: inline-block;
+}
+
+:is(h1, h2, h3):not([slot]),
+p.subtitle {
+  font-weight: 400;
+  font-family: 'Red Hat Display', sans-serif;
+}
+
+h1:not([slot]) {
+  font-size: 2rem;
+}
+
+h3:not([slot]),
+p.subtitle {
+  margin-top: 0.83em;
+  font-weight: 500;
+}
+
+p.subtitle {
+  font-size: 1.17em;
+}
+
+strong {
+  font-weight: bold;
+}
+
+header.band h1 {
+  margin: 0;
+}
+
+.band > h2[id]:not(.no-header-styles) {
+  font-size: 1.5rem;
+  line-height: 1.9375rem;
+  font-weight: bold;
+  margin-top: 2em;
+}
+
+.band > h3[id] {
+  font-size: 1.3rem;
+  font-weight: bold;
+  margin-top: 2em;
+}
+
+.band > h2 + h3[id],
+.band > p + h3[id] {
+  margin-top: 0;
+}
+
+.band > h1+p,
+.band > h2+p,
+.band > h3+p,
+.band > h4+p {
+  margin-top: 0;
+}
+
+main.basic,
+main.blog {
+  margin-top: 3.75rem;
+  margin-bottom: 3.75rem;
+  flex-grow: 1;
+}
+
+#home-title img {
+  width: 6rem;
+  display: block;
+  margin: auto;
+}
+
+.tagline {
+  font-size: 18px;
+}
+
+.header-ctas {
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  flex-direction: column;
+}
+
+.framework-logos img {
+  width: 125px;
+  margin: 8px;
+}
+
+.framework-logos img.react-logo {
+  width: 200px;
+}
+
+.component-preview {
+  margin-bottom: 64px !important;
+}
+
+.component-preview--container {
+  position: relative;
+}
+
+.component-preview h3 {
+  margin-bottom: 0;
+}
+
+.component-preview:hover .overlay {
+  display: flex;
+}
+
+.overlay {
+  display: none;
+
+  position: absolute;
+  top: 0;
+  left: 0;
+  width: 100%;
+  height: 100%;
+  background-color: #eeeeeecc;
+
+  /* display: flex; */
+  flex-direction: column;
+  justify-content: flex-end;
+  align-items: center;
+}
+
+.overlay > a {
+  margin-bottom: 16px;
+}
+
+.preview-image {
+  height: 250px;
+  background-size: 90%;
+  background-repeat: no-repeat;
+  background-position: center;
+  border: 1px solid #d2d2d2;
+  border-radius: 3px;
+}
+
+.element-invisible {
+  position: absolute;
+  width: .0625rem;
+  height: .0625rem;
+  padding: 0;
+  overflow: hidden;
+  clip: rect(0, 0, 0, 0);
+  white-space: nowrap;
+  -webkit-clip-path: inset(50%);
+  clip-path: inset(50%);
+  border: 0;
+  grid-gap: 1rem;
+}
+
+.l-header__mobile-menu-toggle,
+[id=mobile-menu-toggle][id] {
+  position: fixed;
+  top: 0;
+  left: 0;
+}
+
+.l-header__mobile-menu-toggle {
+  width: 1.5rem;
+  height: 3.75rem;
+  margin-right: 16px;
+  color: #fff;
+  z-index: 200;
+  position: fixed;
+  top: 0;
+  left: 16px;
+}
+
+.menu-toggle__button {
+  display: block;
+  cursor: pointer;
+  border: 0;
+  overflow: hidden;
+  background: transparent;
+  -webkit-appearance: none;
+  -moz-appearance: none;
+  appearance: none;
+  -webkit-user-select: none;
+  -moz-user-select: none;
+  -ms-user-select: none;
+  user-select: none;
+}
+
+.l-header__burger-icon {
+  display: block;
+  position: absolute;
+  top: 50%;
+  left: calc(50% - .75rem);
+  transform: scale(.25);
+  transform-origin: left top;
+}
+
+.l-header__burger-icon::before,
+.l-header__burger-icon::after {
+  content: "";
+  position: absolute;
+  top: 0;
+  left: 0;
+  box-sizing: border-box;
+  display: block;
+  width: 6rem;
+}
+
+.l-header__burger-icon::before {
+  height: 0;
+  border-top: .5rem solid #fff;
+  background: #fff;
+  transform: translateY(-2rem);
+  transform-origin: left top;
+  transition: transform .3s cubic-bezier(.55, .085, 0, .99);
+}
+
+.l-header__burger-icon::after {
+  height: 2.5rem;
+  border: .5rem solid #fff;
+  border-width: .5rem 0;
+  transition: border .3s cubic-bezier(.55, .085, 0, .99), transform .3s cubic-bezier(.55, .085, 0, .99);
+  transform-origin: left bottom;
+}
+
+[id=mobile-menu-toggle]~.menu-toggle__toggleable {
+  visibility: hidden;
+  transition: visibility 0s .4s, width .25s ease-in-out;
+  width: 0;
+  overflow: hidden;
+  background: #fff;
+}
+
+[id=mobile-menu-toggle]:checked~.menu-toggle__toggleable {
+  visibility: visible;
+  transition: visibility 0s 0s, width .25s ease-in-out;
+  width: 17.5rem;
+}
+
+.faux-band {
+  padding: 16px;
+}
+
+.color-preview {
+  display: inline-block;
+  width: 1em;
+  height: 1em;
+  vertical-align: middle;
+  background-color: var(--bg, #fff);
+  border: 1px solid #444;
+}
+
+th {
+  text-align: left;
+}
+
+th, td {
+  border-bottom: 1px solid #eee;
+  padding: 16px;
+}
+
+code:not([class*="language-"]) {
+  background-color: rgba(27,31,35,.05);
+  padding: .2em .4em;
+  border-radius: 6px;
+  font-family: "Overpass Mono", monospace;
+}
+
+footer h3 {
+  margin: 0;
+}
+
+footer ul {
+  list-style-type: none;
+  padding: 0;
+  margin-top: 0;
+}
+
+@media (min-width: 820px) {
+  main.basic,
+  main.blog,
+  body:not(.layout-base) footer.basic {
+    padding-left: 17.5rem;
+  }
+
+  #nav {
+    visibility: visible;
+  }
+
+  .l-header__mobile-menu-toggle,
+  [id=mobile-menu-toggle][id] {
+    display: none;
+  }
+
+  .menu-toggle__toggleable.js-menu-toggle__toggleable,
+  [id=mobile-menu-toggle]~.menu-toggle__toggleable {
+    overflow: visible;
+    visibility: visible;
+  }
+
+  #home-title img {
+    display: inline-block;
+    position: relative;
+    top: 2rem;
+  }
+}
+
+strong.noscript {
+  background-color: var(--pf-global--danger-color--100, #c9190b);
+  color: white;
+  border-radius: 4px;
+  padding: 4px 12px;
+  display: inline-block;
+}
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/demo.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.d.ts
new file mode 100644
index 0000000..b1a8ea3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.d.ts
@@ -0,0 +1,9 @@
+declare const hamburger: HTMLElement;
+declare const sidebar: HTMLElement;
+declare const list: MediaQueryList;
+declare const LS_KEY = "pfe-tools-dev-server-maximized";
+declare function toggleNav(force?: boolean): void;
+declare function attachShadowRoots(root: Document | ShadowRoot): void;
+declare function onClick(): void;
+declare function onKeydown(event: KeyboardEvent): void;
+declare function onMediaChange(): void;
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js
new file mode 100644
index 0000000..6d0a649
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js
@@ -0,0 +1,57 @@
+"use strict";
+const hamburger = document.getElementById('hamburger');
+const sidebar = document.getElementById('sidebar');
+const list = matchMedia('(max-width: 640px)');
+const LS_KEY = 'pfe-tools-dev-server-maximized';
+function toggleNav(force) {
+    const old = sidebar?.getAttribute('aria-expanded') === 'true';
+    const next = force ?? !old;
+    sidebar?.setAttribute('aria-expanded', String(next));
+    document.body.classList.toggle('menu-open', next);
+}
+function attachShadowRoots(root) {
+    root.querySelectorAll('template[shadowroot]').forEach(template => {
+        if (template instanceof HTMLTemplateElement) {
+            const mode = template.getAttribute('shadowroot');
+            const shadowRoot = template.parentNode.attachShadow({ mode });
+            shadowRoot.appendChild(template.content);
+            template.remove();
+            attachShadowRoots(shadowRoot);
+        }
+    });
+}
+function onClick() {
+    const next = sidebar?.getAttribute('aria-expanded') !== 'true';
+    if (next) {
+        localStorage.removeItem(LS_KEY);
+    }
+    else {
+        localStorage.setItem(LS_KEY, 'true');
+    }
+    toggleNav();
+}
+function onKeydown(event) {
+    if (sidebar?.getAttribute('aria-expanded') === 'true') {
+        switch (event.key) {
+            case 'Escape':
+                event.preventDefault();
+                event.stopPropagation();
+                toggleNav(false);
+        }
+    }
+}
+function onMediaChange() {
+    toggleNav(!list.matches);
+}
+sidebar?.addEventListener('keydown', onKeydown);
+hamburger?.addEventListener('click', onClick);
+document.documentElement.removeAttribute('unresolved');
+list.addEventListener('change', onMediaChange);
+onMediaChange();
+if (!Object.prototype.hasOwnProperty.call(HTMLTemplateElement.prototype, 'shadowRoot')) {
+    attachShadowRoots(document);
+}
+if (localStorage.getItem(LS_KEY)) {
+    toggleNav(false);
+}
+//# sourceMappingURL=demo.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js.map
new file mode 100644
index 0000000..ac438ee
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/demo.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"demo.js","sourceRoot":"","sources":["demo.ts"],"names":[],"mappings":";AAAA,MAAM,SAAS,GAAgB,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAE,CAAC;AACrE,MAAM,OAAO,GAAgB,QAAQ,CAAC,cAAc,CAAC,SAAS,CAAE,CAAC;AACjE,MAAM,IAAI,GAAmB,UAAU,CAAC,oBAAoB,CAAC,CAAC;AAC9D,MAAM,MAAM,GAAG,gCAAgC,CAAC;AAEhD,SAAS,SAAS,CAAC,KAAe;IAChC,MAAM,GAAG,GAAG,OAAO,EAAE,YAAY,CAAC,eAAe,CAAC,KAAK,MAAM,CAAC;IAC9D,MAAM,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC;IAC3B,OAAO,EAAE,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,iBAAiB,CAAC,IAA2B;IACpD,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QAC/D,IAAI,QAAQ,YAAY,mBAAmB,EAAE,CAAC;YAC5C,MAAM,IAAI,GAAG,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAW,CAAC;YAC3D,MAAM,UAAU,GAAgB,QAAQ,CAAC,UAA0B,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YAC3F,UAAU,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACzC,QAAQ,CAAC,MAAM,EAAE,CAAC;YAClB,iBAAiB,CAAC,UAAU,CAAC,CAAC;QAChC,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,SAAS,OAAO;IACd,MAAM,IAAI,GAAG,OAAO,EAAE,YAAY,CAAC,eAAe,CAAC,KAAK,MAAM,CAAC;IAC/D,IAAI,IAAI,EAAE,CAAC;QACT,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;SAAM,CAAC;QACN,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IACD,SAAS,EAAE,CAAC;AACd,CAAC;AAED,SAAS,SAAS,CAAC,KAAoB;IACrC,IAAI,OAAO,EAAE,YAAY,CAAC,eAAe,CAAC,KAAK,MAAM,EAAE,CAAC;QACtD,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;YAClB,KAAK,QAAQ;gBACX,KAAK,CAAC,cAAc,EAAE,CAAC;gBACvB,KAAK,CAAC,eAAe,EAAE,CAAC;gBACxB,SAAS,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;IACH,CAAC;AACH,CAAC;AAED,SAAS,aAAa;IACpB,SAAS,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC3B,CAAC;AAED,OAAO,EAAE,gBAAgB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAChD,SAAS,EAAE,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC9C,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;AAEvD,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;AAE/C,aAAa,EAAE,CAAC;AAEhB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC,EAAE,CAAC;IACvF,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAC9B,CAAC;AAED,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;IACjC,SAAS,CAAC,KAAK,CAAC,CAAC;AACnB,CAAC","sourcesContent":["const hamburger: HTMLElement = document.getElementById('hamburger')!;\nconst sidebar: HTMLElement = document.getElementById('sidebar')!;\nconst list: MediaQueryList = matchMedia('(max-width: 640px)');\nconst LS_KEY = 'pfe-tools-dev-server-maximized';\n\nfunction toggleNav(force?: boolean): void {\n  const old = sidebar?.getAttribute('aria-expanded') === 'true';\n  const next = force ?? !old;\n  sidebar?.setAttribute('aria-expanded', String(next));\n  document.body.classList.toggle('menu-open', next);\n}\n\nfunction attachShadowRoots(root: Document | ShadowRoot): void {\n  root.querySelectorAll('template[shadowroot]').forEach(template => {\n    if (template instanceof HTMLTemplateElement) {\n      const mode = template.getAttribute('shadowroot') as 'open';\n      const shadowRoot: ShadowRoot = (template.parentNode as HTMLElement).attachShadow({ mode });\n      shadowRoot.appendChild(template.content);\n      template.remove();\n      attachShadowRoots(shadowRoot);\n    }\n  });\n}\n\nfunction onClick(): void {\n  const next = sidebar?.getAttribute('aria-expanded') !== 'true';\n  if (next) {\n    localStorage.removeItem(LS_KEY);\n  } else {\n    localStorage.setItem(LS_KEY, 'true');\n  }\n  toggleNav();\n}\n\nfunction onKeydown(event: KeyboardEvent): void {\n  if (sidebar?.getAttribute('aria-expanded') === 'true') {\n    switch (event.key) {\n      case 'Escape':\n        event.preventDefault();\n        event.stopPropagation();\n        toggleNav(false);\n    }\n  }\n}\n\nfunction onMediaChange(): void {\n  toggleNav(!list.matches);\n}\n\nsidebar?.addEventListener('keydown', onKeydown);\nhamburger?.addEventListener('click', onClick);\ndocument.documentElement.removeAttribute('unresolved');\n\nlist.addEventListener('change', onMediaChange);\n\nonMediaChange();\n\nif (!Object.prototype.hasOwnProperty.call(HTMLTemplateElement.prototype, 'shadowRoot')) {\n  attachShadowRoots(document);\n}\n\nif (localStorage.getItem(LS_KEY)) {\n  toggleNav(false);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts.css b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts.css
new file mode 100644
index 0000000..b63ee3a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts.css
@@ -0,0 +1,275 @@
+@font-face {
+  font-family: "RedHatDisplay";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-Regular.woff2) format("woff2"), url(/v4/fonts/RedHatDisplay-Regular.woff) format("woff");
+  font-style: normal;
+  font-weight: 300;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatDisplay";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-Medium.woff2) format("woff2"), url(/v4/fonts/RedHatDisplay-Medium.woff) format("woff");
+  font-style: normal;
+  font-weight: 400;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatDisplay";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-Bold.woff2) format("woff2"), url(/v4/fonts/RedHatDisplay-Bold.woff) format("woff");
+  font-style: normal;
+  font-weight: 700;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatText";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatText-Regular.woff2) format("woff2"), url(/v4/fonts/RedHatText-Regular.woff) format("woff");
+  font-style: normal;
+  font-weight: 400;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatText";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatText-Medium.woff2) format("woff2"), url(/v4/fonts/RedHatText-Medium.woff) format("woff");
+  font-style: normal;
+  font-weight: 700;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatDisplayUpdated";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-updated-Regular.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 300;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatDisplayUpdated";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-updated-Medium.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 400;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatDisplayUpdated";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplay-updated-Bold.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 700;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatTextUpdated";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatText-updated-Regular.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 400;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatTextUpdated";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatText-updated-Medium.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 700;
+  text-rendering: optimizeLegibility;
+}
+
+@font-face {
+  font-family: "RedHatMono";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatMono-updated-Regular.woff2) format("woff2");
+  font-style: normal;
+  font-weight: 400;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatDisplayVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplayVFModified-updated.woff2) format("woff2-variations");
+  font-style: normal;
+  font-weight: 300 900;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatDisplayVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatDisplayVF-updated-ItalicModified.woff2) format("woff2-variations");
+  font-style: italic;
+  font-weight: 300 900;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatTextVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatTextVFModified-updated.woff2) format("woff2-variations");
+  font-style: normal;
+  font-weight: 400 500;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatTextVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatTextVF-updated-ItalicModified.woff2) format("woff2-variations");
+  font-style: italic;
+  font-weight: 400 500;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatMonoVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatMonoVF-updated.woff2) format("woff2-variations");
+  font-style: normal;
+  font-weight: 300 700;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "RedHatMonoVF";
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/RedHatMonoVF-updated-Italic.woff2) format("woff2-variations");
+  font-style: italic;
+  font-weight: 300 700;
+  font-display: fallback;
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 200;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-thin.woff2) format("woff2"), url(/v4/fonts/overpass-thin.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 200;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-thin-italic.woff2) format("woff2"), url(/v4/fonts/overpass-thin-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 300;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-extralight.woff2) format("woff2"), url(/v4/fonts/overpass-extralight.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 300;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-extralight-italic.woff2) format("woff2"), url(/v4/fonts/overpass-extralight-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 400;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-light.woff2) format("woff2"), url(/v4/fonts/overpass-light.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 400;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-light-italic.woff2) format("woff2"), url(/v4/fonts/overpass-light-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 500;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-regular.woff2) format("woff2"), url(/v4/fonts/overpass-regular.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 500;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-italic.woff2) format("woff2"), url(/v4/fonts/overpass-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 600;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-semibold.woff2) format("woff2"), url(/v4/fonts/overpass-semibold.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 600;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-semibold-italic.woff2) format("woff2"), url(/v4/fonts/overpass-semibold-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 700;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-bold.woff2) format("woff2"), url(/v4/fonts/overpass-bold.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 700;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-bold-italic.woff2) format("woff2"), url(/v4/fonts/overpass-bold-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 800;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-extrabold.woff2) format("woff2"), url(/v4/fonts/overpass-extrabold.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 800;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-extrabold-italic.woff2) format("woff2"), url(/v4/fonts/overpass-extrabold-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: normal;
+  font-weight: 900;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-heavy.woff2) format("woff2"), url(/v4/fonts/overpass-heavy.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass";
+  font-style: italic;
+  font-weight: 900;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-heavy-italic.woff2) format("woff2"), url(/v4/fonts/overpass-heavy-italic.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass-mono";
+  font-style: normal;
+  font-weight: 300;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-mono-light.woff2) format("woff2"), url(/v4/fonts/overpass-mono-light.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass-mono";
+  font-style: normal;
+  font-weight: 400;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-mono-regular.woff2) format("woff2"), url(/v4/fonts/overpass-mono-regular.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass-mono";
+  font-style: normal;
+  font-weight: 500;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-mono-semibold.woff2) format("woff2"), url(/v4/fonts/overpass-mono-semibold.woff) format("woff");
+}
+
+@font-face {
+  font-family: "overpass-mono";
+  font-style: normal;
+  font-weight: 600;
+  src: url(/node_modules/@patternfly/pfe-tools/dev-server/fonts/overpass-mono-bold.woff2) format("woff2"), url(/v4/fonts/overpass-mono-bold.woff) format("woff");
+}
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff
new file mode 100644
index 0000000..2b40e89
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff2
new file mode 100644
index 0000000..e04af6f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Black.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff
new file mode 100644
index 0000000..55bcc7d
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff2
new file mode 100644
index 0000000..5cef339
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BlackItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff
new file mode 100644
index 0000000..c7fa1f3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff2
new file mode 100644
index 0000000..99e9430
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff
new file mode 100644
index 0000000..5f33eab
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff2
new file mode 100644
index 0000000..141a8a8
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-BoldItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff
new file mode 100644
index 0000000..48c4c0c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff2
new file mode 100644
index 0000000..5bf78c6
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff
new file mode 100644
index 0000000..7a88f9d
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff2
new file mode 100644
index 0000000..ad059b9
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Medium.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff
new file mode 100644
index 0000000..e0dd071
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff2
new file mode 100644
index 0000000..64e92a9
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-MediumItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff
new file mode 100644
index 0000000..c9a84dc
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff2
new file mode 100644
index 0000000..6dd719d
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-Regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Black.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Black.woff2
new file mode 100644
index 0000000..301256b
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Black.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BlackItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BlackItalic.woff2
new file mode 100644
index 0000000..b310f4f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BlackItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Bold.woff2
new file mode 100644
index 0000000..6c6f907
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BoldItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BoldItalic.woff2
new file mode 100644
index 0000000..43865a0
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-BoldItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Italic.woff2
new file mode 100644
index 0000000..23e2cd0
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Light.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Light.woff2
new file mode 100644
index 0000000..303b91e
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Light.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-LightItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-LightItalic.woff2
new file mode 100644
index 0000000..a4bf579
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-LightItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Medium.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Medium.woff2
new file mode 100644
index 0000000..dbd8935
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Medium.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-MediumItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-MediumItalic.woff2
new file mode 100644
index 0000000..b92a191
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-MediumItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Regular.woff2
new file mode 100644
index 0000000..c5697a6
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplay-updated-Regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-Italic.woff2
new file mode 100644
index 0000000..47426d0
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-ItalicModified.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-ItalicModified.woff2
new file mode 100644
index 0000000..61004b3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated-ItalicModified.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated.woff2
new file mode 100644
index 0000000..f95286e
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVF-updated.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVFModified-updated.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVFModified-updated.woff2
new file mode 100644
index 0000000..17ad213
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatDisplayVFModified-updated.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Bold.woff2
new file mode 100644
index 0000000..01b917e
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-BoldItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-BoldItalic.woff2
new file mode 100644
index 0000000..72b5586
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-BoldItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Italic.woff2
new file mode 100644
index 0000000..24b9ffa
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Light.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Light.woff2
new file mode 100644
index 0000000..d060640
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Light.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-LightItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-LightItalic.woff2
new file mode 100644
index 0000000..d3f9a43
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-LightItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Medium.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Medium.woff2
new file mode 100644
index 0000000..2b383d3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Medium.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-MediumItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-MediumItalic.woff2
new file mode 100644
index 0000000..a708d7a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-MediumItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Regular.woff2
new file mode 100644
index 0000000..5d974e5
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMono-updated-Regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated-Italic.woff2
new file mode 100644
index 0000000..754bced
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated.woff2
new file mode 100644
index 0000000..137f2fd
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatMonoVF-updated.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff
new file mode 100644
index 0000000..c8809fc
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff2
new file mode 100644
index 0000000..f005a6c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff
new file mode 100644
index 0000000..6fe3b72
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff2
new file mode 100644
index 0000000..65c1728
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-BoldItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff
new file mode 100644
index 0000000..b85c88f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff2
new file mode 100644
index 0000000..2e95810
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff
new file mode 100644
index 0000000..76dd613
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff2
new file mode 100644
index 0000000..c030e8f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Medium.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff
new file mode 100644
index 0000000..eb173f3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff2
new file mode 100644
index 0000000..b754187
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-MediumItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff
new file mode 100644
index 0000000..b0e94af
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff2
new file mode 100644
index 0000000..b8adb0d
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-Regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Bold.woff2
new file mode 100644
index 0000000..2838de7
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-BoldItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-BoldItalic.woff2
new file mode 100644
index 0000000..edce0f9
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-BoldItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Italic.woff2
new file mode 100644
index 0000000..3c8f73f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Light.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Light.woff2
new file mode 100644
index 0000000..e7cfd15
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Light.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-LightItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-LightItalic.woff2
new file mode 100644
index 0000000..0d7c644
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-LightItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Medium.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Medium.woff2
new file mode 100644
index 0000000..519fe4e
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Medium.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-MediumItalic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-MediumItalic.woff2
new file mode 100644
index 0000000..100c010
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-MediumItalic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Regular.woff2
new file mode 100644
index 0000000..7428f92
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatText-updated-Regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-Italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-Italic.woff2
new file mode 100644
index 0000000..1542bb4
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-Italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-ItalicModified.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-ItalicModified.woff2
new file mode 100644
index 0000000..e0dc2b1
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated-ItalicModified.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated.woff2
new file mode 100644
index 0000000..c442dc6
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVF-updated.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVFModified-updated.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVFModified-updated.woff2
new file mode 100644
index 0000000..93d4cf8
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/RedHatTextVFModified-updated.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff
new file mode 100644
index 0000000..4484e52
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff2
new file mode 100644
index 0000000..f0b9b0c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/fa-solid-900.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff
new file mode 100644
index 0000000..4c182e3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff2
new file mode 100644
index 0000000..9d413a4
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff
new file mode 100644
index 0000000..e71c04c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff2
new file mode 100644
index 0000000..ebc48ba
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff
new file mode 100644
index 0000000..099aa4f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff2
new file mode 100644
index 0000000..d0a1184
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff
new file mode 100644
index 0000000..b964cc6
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff2
new file mode 100644
index 0000000..72e7ced
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extrabold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff
new file mode 100644
index 0000000..d44ec1a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff2
new file mode 100644
index 0000000..142ae0a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff
new file mode 100644
index 0000000..f300387
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff2
new file mode 100644
index 0000000..ee55194
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-extralight.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff
new file mode 100644
index 0000000..679e7c3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff2
new file mode 100644
index 0000000..ed1dfd8
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff
new file mode 100644
index 0000000..14db22c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff2
new file mode 100644
index 0000000..dbb499f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-heavy.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff
new file mode 100644
index 0000000..95bda4c
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff2
new file mode 100644
index 0000000..d76da75
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff
new file mode 100644
index 0000000..d2b01bc
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff2
new file mode 100644
index 0000000..5703d8f
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff
new file mode 100644
index 0000000..1f2e380
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff2
new file mode 100644
index 0000000..5c73220
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-light.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff
new file mode 100644
index 0000000..9101baa
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff2
new file mode 100644
index 0000000..f1f90e0
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-bold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff
new file mode 100644
index 0000000..88ab3a0
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff2
new file mode 100644
index 0000000..fadfa01
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-light.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff
new file mode 100644
index 0000000..313d044
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff2
new file mode 100644
index 0000000..6e1bed6
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff
new file mode 100644
index 0000000..11639d3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff2
new file mode 100644
index 0000000..b1431d3
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-mono-semibold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff
new file mode 100644
index 0000000..0c5c51a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff2
new file mode 100644
index 0000000..d1310df
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-regular.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff
new file mode 100644
index 0000000..e021632
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff2
new file mode 100644
index 0000000..f96da3b
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff
new file mode 100644
index 0000000..8c931c4
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff2
new file mode 100644
index 0000000..3b242ed
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-semibold.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff
new file mode 100644
index 0000000..f61d749
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff2
new file mode 100644
index 0000000..23af05a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin-italic.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff
new file mode 100644
index 0000000..4ddc55a
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff2 b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff2
new file mode 100644
index 0000000..82b5c85
Binary files /dev/null and b/node_modules/@patternfly/pfe-tools/package/dev-server/fonts/overpass-thin.woff2 differ
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.d.ts
new file mode 100644
index 0000000..ffad03a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.d.ts
@@ -0,0 +1,7 @@
+import type { PfeDevServerInternalConfig } from './pfe-dev-server.js';
+import Router from '@koa/router';
+/**
+ * Creates a router Koa middleware for PFE dev server
+ * @param config Normalized dev server options
+ */
+export declare function pfeDevServerRouterMiddleware(config: PfeDevServerInternalConfig): Router.Middleware;
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js
new file mode 100644
index 0000000..bff0cd8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js
@@ -0,0 +1,99 @@
+import Router, {} from '@koa/router';
+import { makeDemoEnv } from '../../environment.js';
+import { deslugify } from '../../config.js';
+/**
+ * The environment file contains information from the serverside
+ * which is useful on the client side, for example the list of all elements
+ * or a list of all icons. Typically, the information in the environment file
+ * is data which requires access to the filesystem.
+ * @see environment.js
+ * @param config normalized PFE dev server config
+ */
+const environmentMiddleware = config => async (ctx) => {
+    ctx.body = await makeDemoEnv(config.rootDir);
+    ctx.type = 'application/javascript';
+};
+/**
+ * Redirects pfe-core files to their typescript sources, in the case where
+ * the request is relative to the `@patternfly/elements` monorepo root
+ * FROM `core/pfe-core/controllers/thingy.js`
+ *  TO: `core/pfe-core/controllers/thingy.ts`
+ */
+const coreMiddleware = () => ctx => ctx.redirect(`/core/pfe-core/${ctx.params.splatPath}.ts`);
+/**
+ * Invalidate the browser cache for element css / js / html subresources on every request
+ * in order that the user always receive the file on disk
+ */
+const cacheBustingMiddleware = () => async function (ctx, next) {
+    ctx.response.etag = performance.now().toString();
+    return next();
+};
+/**
+ * Loads the typescript sources for element declaration source requests
+ * This is useful when the typescript build runs in parallel.
+ * FROM: `components/jazz-hands/*.js`
+ *   TO: `elements/pf-jazz-hands/*.ts`
+ * @param config normalized PFE dev server config
+ */
+const elementDeclarationTypeScriptMiddleware = config => async (ctx) => {
+    const { unprefixedElementSlug, moduleName } = ctx.params;
+    const tagName = deslugify(unprefixedElementSlug);
+    return ctx.redirect(`/${config.elementsDir}/${tagName}/${moduleName}.ts`);
+};
+/**
+ * Redirects to lightdom shim files, in the element definition dir
+ * FROM: `components/jazz-hands/pf-jazz-hands-lightdom.css`
+ *   TO: `elements/pf-jazz-hands/pf-jazz-hands-lightdom.css`
+ * @param config normalized PFE dev server config
+ */
+const lightdomShimMiddleware = config => (ctx, next) => {
+    const { unprefixedElementSlug, sheetName, suffix } = ctx.params;
+    const tagName = deslugify(unprefixedElementSlug);
+    const redirect = `/${config.elementsDir}/${tagName}/${sheetName}-lightdom${suffix ?? ''}.css`;
+    if (ctx.path !== redirect) {
+        return ctx.redirect(redirect);
+    }
+    else {
+        return next();
+    }
+};
+/**
+ * Redirects to subresources in /demo/ from pretty urls
+ * FROM: `components/jazz-hands/demo/**\/*`
+ *   TO: `elements/pf-jazz-hands/demo/*.*`
+ * @param config normalized PFE dev server config
+ */
+const demoSubresourceMiddleware = config => (ctx, next) => {
+    const { unprefixedElementSlug, fileName, ext } = ctx.params;
+    const tagName = deslugify(unprefixedElementSlug);
+    const redirect = `/${config.elementsDir}/${tagName}/demo/${fileName}.${ext}`;
+    if (ctx.path !== redirect) {
+        return ctx.redirect(redirect);
+    }
+    else {
+        return next();
+    }
+};
+/**
+ * Creates a router Koa middleware for PFE dev server
+ * @param config Normalized dev server options
+ */
+export function pfeDevServerRouterMiddleware(config) {
+    const { elementsDir, site: { componentSubpath } } = config;
+    const router = new Router();
+    const shim = lightdomShimMiddleware(config);
+    const demo = demoSubresourceMiddleware(config);
+    return router
+        .get('/tools/pfe-tools/environment.js(.js)?', environmentMiddleware(config))
+        .get(`/core/pfe-core/:splatPath*.js`, coreMiddleware(config))
+        .get(`/${elementsDir}/:tagName/:splat.(css|html|js)`, cacheBustingMiddleware(config))
+        .get(`/${componentSubpath}/:unprefixedElementSlug/:moduleName*.js`, elementDeclarationTypeScriptMiddleware(config))
+        .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:sheetName-lightdom:suffix.css`, shim)
+        .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:sheetName-lightdom.css`, shim)
+        .get(`/${componentSubpath}/:unprefixedElementSlug/:sheetName-lightdom:suffix.css`, shim)
+        .get(`/${componentSubpath}/:unprefixedElementSlug/:sheetName-lightdom.css`, shim)
+        .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:demoName/:fileName.:ext`, demo)
+        .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:fileName.:ext`, demo)
+        .routes();
+}
+//# sourceMappingURL=dev-server-router.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js.map
new file mode 100644
index 0000000..158b91f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-router.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"dev-server-router.js","sourceRoot":"","sources":["dev-server-router.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PfeDevServerInternalConfig } from './pfe-dev-server.js';\n\nimport Router, { type Middleware } from '@koa/router';\n\nimport { makeDemoEnv } from '../../environment.js';\nimport { deslugify } from '../../config.js';\n\ntype PfeMiddleware = (config: PfeDevServerInternalConfig) => Middleware;\n\n/**\n * The environment file contains information from the serverside\n * which is useful on the client side, for example the list of all elements\n * or a list of all icons. Typically, the information in the environment file\n * is data which requires access to the filesystem.\n * @see environment.js\n * @param config normalized PFE dev server config\n */\nconst environmentMiddleware: PfeMiddleware = config => async ctx => {\n  ctx.body = await makeDemoEnv(config.rootDir);\n  ctx.type = 'application/javascript';\n};\n\n/**\n * Redirects pfe-core files to their typescript sources, in the case where\n * the request is relative to the `@patternfly/elements` monorepo root\n * FROM `core/pfe-core/controllers/thingy.js`\n *  TO: `core/pfe-core/controllers/thingy.ts`\n */\nconst coreMiddleware: PfeMiddleware = () => ctx =>\n  ctx.redirect(`/core/pfe-core/${ctx.params.splatPath}.ts`);\n\n/**\n * Invalidate the browser cache for element css / js / html subresources on every request\n * in order that the user always receive the file on disk\n */\nconst cacheBustingMiddleware: PfeMiddleware = () => async function(ctx, next) {\n  ctx.response.etag = performance.now().toString();\n  return next();\n};\n\n/**\n * Loads the typescript sources for element declaration source requests\n * This is useful when the typescript build runs in parallel.\n * FROM: `components/jazz-hands/*.js`\n *   TO: `elements/pf-jazz-hands/*.ts`\n * @param config normalized PFE dev server config\n */\nconst elementDeclarationTypeScriptMiddleware: PfeMiddleware = config => async ctx => {\n  const { unprefixedElementSlug, moduleName } = ctx.params;\n  const tagName = deslugify(unprefixedElementSlug);\n  return ctx.redirect(`/${config.elementsDir}/${tagName}/${moduleName}.ts`);\n};\n\n/**\n * Redirects to lightdom shim files, in the element definition dir\n * FROM: `components/jazz-hands/pf-jazz-hands-lightdom.css`\n *   TO: `elements/pf-jazz-hands/pf-jazz-hands-lightdom.css`\n * @param config normalized PFE dev server config\n */\nconst lightdomShimMiddleware: PfeMiddleware = config => (ctx, next) => {\n  const { unprefixedElementSlug, sheetName, suffix } = ctx.params;\n  const tagName = deslugify(unprefixedElementSlug);\n  const redirect = `/${config.elementsDir}/${tagName}/${sheetName}-lightdom${suffix ?? ''}.css`;\n  if (ctx.path !== redirect) {\n    return ctx.redirect(redirect);\n  } else {\n    return next();\n  }\n};\n\n/**\n * Redirects to subresources in /demo/ from pretty urls\n * FROM: `components/jazz-hands/demo/**\\/*`\n *   TO: `elements/pf-jazz-hands/demo/*.*`\n * @param config normalized PFE dev server config\n */\nconst demoSubresourceMiddleware: PfeMiddleware = config => (ctx, next) => {\n  const { unprefixedElementSlug, fileName, ext } = ctx.params;\n  const tagName = deslugify(unprefixedElementSlug);\n  const redirect = `/${config.elementsDir}/${tagName}/demo/${fileName}.${ext}`;\n  if (ctx.path !== redirect) {\n    return ctx.redirect(redirect);\n  } else {\n    return next();\n  }\n};\n\n/**\n * Creates a router Koa middleware for PFE dev server\n * @param config Normalized dev server options\n */\nexport function pfeDevServerRouterMiddleware(\n  config: PfeDevServerInternalConfig,\n): Router.Middleware {\n  const { elementsDir, site: { componentSubpath } } = config;\n  const router = new Router();\n  const shim = lightdomShimMiddleware(config);\n  const demo = demoSubresourceMiddleware(config);\n  return router\n      .get('/tools/pfe-tools/environment.js(.js)?', environmentMiddleware(config))\n      .get(`/core/pfe-core/:splatPath*.js`, coreMiddleware(config))\n      .get(`/${elementsDir}/:tagName/:splat.(css|html|js)`, cacheBustingMiddleware(config))\n      .get(`/${componentSubpath}/:unprefixedElementSlug/:moduleName*.js`, elementDeclarationTypeScriptMiddleware(config))\n      .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:sheetName-lightdom:suffix.css`, shim)\n      .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:sheetName-lightdom.css`, shim)\n      .get(`/${componentSubpath}/:unprefixedElementSlug/:sheetName-lightdom:suffix.css`, shim)\n      .get(`/${componentSubpath}/:unprefixedElementSlug/:sheetName-lightdom.css`, shim)\n      .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:demoName/:fileName.:ext`, demo)\n      .get(`/${componentSubpath}/:unprefixedElementSlug/demo/:fileName.:ext`, demo)\n      .routes();\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.d.ts
new file mode 100644
index 0000000..19c784c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.d.ts
@@ -0,0 +1,7 @@
+import type { PfeDevServerInternalConfig } from './pfe-dev-server.js';
+import type { Context, Next } from 'koa';
+/**
+ * Render the demo page whenever there's a trailing slash
+ * @param config Normalized dev server options
+ */
+export declare function pfeDevServerTemplateMiddleware(config: PfeDevServerInternalConfig): (ctx: Context, next: Next) => Promise<void>;
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js
new file mode 100644
index 0000000..791fbd3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js
@@ -0,0 +1,67 @@
+import { readFile } from 'node:fs/promises';
+import { dirname, join } from 'node:path';
+import { fileURLToPath } from 'node:url';
+import nunjucks from 'nunjucks';
+import { Manifest } from '../../custom-elements-manifest/lib/Manifest.js';
+function isPFEManifest(x) {
+    return x.packageJson?.name === '@patternfly/elements';
+}
+/**
+ * cludge to ensure the dev server starts up only after the manifests are generated
+ * @param config Normalized dev server options
+ */
+async function waitForManifestFileThenReadIt(config) {
+    let count = 0;
+    let manifests = Manifest.getAll(config.rootDir);
+    while (count < 1000 && manifests.find(isPFEManifest)?.manifest === null) {
+        await new Promise(r => setTimeout(r, 50));
+        count++;
+        manifests = Manifest.getAll(config.rootDir);
+    }
+    return manifests;
+}
+async function getDemos(config) {
+    const manifests = await waitForManifestFileThenReadIt(config);
+    return manifests
+        .flatMap(manifest => manifest
+        .getTagNames()
+        .flatMap(tagName => manifest.getDemoMetadata(tagName, config)));
+}
+async function getTemplateContent(demo) {
+    if (typeof demo?.filePath === 'string') {
+        return readFile(demo.filePath, 'utf8');
+    }
+    else {
+        return undefined;
+    }
+}
+/**
+ * Render the demo page whenever there's a trailing slash
+ * @param config Normalized dev server options
+ */
+export function pfeDevServerTemplateMiddleware(config) {
+    const env = nunjucks.configure(join(dirname(fileURLToPath(import.meta.url)), 'templates'));
+    return async function (ctx, next) {
+        const { method, path } = ctx;
+        if (config.loadDemo && !(method !== 'HEAD' && method !== 'GET' || path.includes('.'))) {
+            const url = new URL(ctx.request.url, `http://${ctx.request.headers.host}`);
+            const demos = await getDemos(config);
+            const demo = demos.find(x => x.permalink === url.pathname);
+            const manifest = demo?.manifest;
+            const templateContent = await getTemplateContent(demo);
+            ctx.cwd = process.cwd();
+            ctx.type = 'html';
+            ctx.status = 200;
+            ctx.body = env.render('index.html', {
+                context: ctx,
+                options: config,
+                demo,
+                demos,
+                manifest,
+                templateContent,
+            });
+        }
+        return next();
+    };
+}
+//# sourceMappingURL=dev-server-templates.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js.map
new file mode 100644
index 0000000..2dc90f9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/dev-server-templates.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"dev-server-templates.js","sourceRoot":"","sources":["dev-server-templates.ts"],"names":[],"mappings":"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","sourcesContent":["import type { PfeDevServerInternalConfig } from './pfe-dev-server.js';\nimport type { DemoRecord } from '../../custom-elements-manifest/lib/Manifest.js';\nimport type { Context, Next } from 'koa';\n\nimport { readFile } from 'node:fs/promises';\nimport { dirname, join } from 'node:path';\nimport { fileURLToPath } from 'node:url';\n\nimport nunjucks from 'nunjucks';\n\nimport { Manifest } from '../../custom-elements-manifest/lib/Manifest.js';\n\nfunction isPFEManifest(x: Manifest) {\n  return x.packageJson?.name === '@patternfly/elements';\n}\n\n/**\n * cludge to ensure the dev server starts up only after the manifests are generated\n * @param config Normalized dev server options\n */\nasync function waitForManifestFileThenReadIt(config: PfeDevServerInternalConfig) {\n  let count = 0;\n  let manifests = Manifest.getAll(config.rootDir);\n  while (count < 1000 && manifests.find(isPFEManifest)?.manifest === null) {\n    await new Promise(r => setTimeout(r, 50));\n    count++;\n    manifests = Manifest.getAll(config.rootDir);\n  }\n  return manifests;\n}\n\nasync function getDemos(config: PfeDevServerInternalConfig) {\n  const manifests = await waitForManifestFileThenReadIt(config);\n  return manifests\n      .flatMap(manifest =>\n        manifest\n            .getTagNames()\n            .flatMap(tagName =>\n              manifest.getDemoMetadata(tagName, config as PfeDevServerInternalConfig)));\n}\n\nasync function getTemplateContent(demo?: DemoRecord) {\n  if (typeof demo?.filePath === 'string') {\n    return readFile(demo.filePath, 'utf8');\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Render the demo page whenever there's a trailing slash\n * @param config Normalized dev server options\n */\nexport function pfeDevServerTemplateMiddleware(config: PfeDevServerInternalConfig) {\n  const env = nunjucks.configure(join(dirname(fileURLToPath(import.meta.url)), 'templates'));\n  return async function(ctx: Context, next: Next): Promise<void> {\n    const { method, path } = ctx;\n    if (config.loadDemo && !(method !== 'HEAD' && method !== 'GET' || path.includes('.'))) {\n      const url = new URL(ctx.request.url, `http://${ctx.request.headers.host}`);\n      const demos = await getDemos(config);\n      const demo = demos.find(x => x.permalink === url.pathname);\n      const manifest = demo?.manifest;\n      const templateContent = await getTemplateContent(demo);\n      ctx.cwd = process.cwd();\n      ctx.type = 'html';\n      ctx.status = 200;\n      ctx.body = env.render('index.html', {\n        context: ctx,\n        options: config,\n        demo,\n        demos,\n        manifest,\n        templateContent,\n      });\n    }\n    return next();\n  };\n}\n\n\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.d.ts
new file mode 100644
index 0000000..a3e4cdd
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.d.ts
@@ -0,0 +1,9 @@
+import type { Plugin } from '@web/dev-server-core';
+import type { GeneratorOptions } from '@jspm/generator';
+export interface Options extends GeneratorOptions {
+    resolveHtmlUrl?: (fileUrl: string, rootUrl: string) => string;
+}
+/**
+ * @param options plugin options
+ */
+export declare function importMapGeneratorPlugin(options?: Partial<Options>): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js
new file mode 100644
index 0000000..09b9f85
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js
@@ -0,0 +1,101 @@
+import { readFile, stat } from 'node:fs/promises';
+import { join } from 'node:path';
+import { Generator } from '@jspm/generator';
+import { glob } from 'glob';
+const exists = async (path) => {
+    try {
+        await stat(path);
+        return true;
+    }
+    catch {
+        return false;
+    }
+};
+async function resolveMonorepoPackages() {
+    const cwd = process.cwd();
+    const { workspaces } = JSON.parse(await readFile(join(cwd, 'package.json'), 'utf-8'));
+    const potentialPackageDirs = (await Promise.all((workspaces ?? []).map((x) => glob(x, { cwd })))).flat();
+    const packages = new Map();
+    for (const dir of ['.', ...potentialPackageDirs]) {
+        const pkgDir = join(cwd, dir);
+        const pkgJsonPath = join(pkgDir, 'package.json');
+        if (await exists(pkgJsonPath)) {
+            const { name } = JSON.parse(await readFile(pkgJsonPath, 'utf-8'));
+            packages.set(name, pkgDir);
+        }
+    }
+    return packages;
+}
+function getProvider(packages) {
+    return {
+        async pkgToUrl({ name }) {
+            const pkgPath = packages.get(name);
+            if (!pkgPath) {
+                throw new Error(`could not resolve ${name}`);
+            }
+            return `file://${pkgPath}/`;
+        },
+        // @ts-expect-error: types vs docs
+        parseUrlPkg(url) {
+            for (const [name, dir] of packages) {
+                if (url.startsWith(dir)) {
+                    return {
+                        name,
+                        registry: 'monorepotypescript',
+                        version: '*',
+                    };
+                }
+            }
+        },
+        async resolveLatestTarget(target) {
+            return { ...target, version: '*' };
+        },
+    };
+}
+function generatorMiddleware(generator, options) {
+    return async function injectMiddleware(ctx, next) {
+        if (ctx.path.endsWith('.html') || ctx.path.endsWith('/')) {
+            if (ctx.body?.length) {
+                const rootUrl = `file://${process.cwd()}/`;
+                const fileUrl = `${rootUrl.replace(/\/$/, '')}${ctx.url}`;
+                const htmlUrl = options?.resolveHtmlUrl?.(fileUrl, rootUrl) ?? fileUrl;
+                try {
+                    ctx.body = await generator.htmlInject(ctx.body, {
+                        htmlUrl,
+                        rootUrl,
+                        trace: true,
+                        whitespace: true,
+                        esModuleShims: true,
+                    });
+                }
+                catch (e) {
+                    // eslint-disable-next-line no-console
+                    console.error(e);
+                }
+            }
+        }
+        return next();
+    };
+}
+/**
+ * @param options plugin options
+ */
+export function importMapGeneratorPlugin(options) {
+    return {
+        name: 'import-map-inject',
+        async serverStart(args) {
+            const monorepotypescript = getProvider(await resolveMonorepoPackages());
+            args.app.use(generatorMiddleware(new Generator({
+                defaultProvider: 'nodemodules',
+                env: ['development', 'production', 'browser', 'module'],
+                providers: options?.providers,
+                inputMap: options?.inputMap,
+                customProviders: { monorepotypescript },
+                resolutions: options?.resolutions,
+                ignore: options?.ignore,
+                typeScript: options?.typeScript,
+            }), options));
+        },
+    };
+}
+//# sourceMappingURL=import-map-generator.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js.map
new file mode 100644
index 0000000..4926843
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/import-map-generator.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"import-map-generator.js","sourceRoot":"","sources":["import-map-generator.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Middleware } from 'koa';\nimport type { Plugin } from '@web/dev-server-core';\nimport type { GeneratorOptions, Provider } from '@jspm/generator';\n\nimport { readFile, stat } from 'node:fs/promises';\n\nimport { join } from 'node:path';\n\nimport { Generator } from '@jspm/generator';\n\nimport { glob } from 'glob';\n\nexport interface Options extends GeneratorOptions {\n  resolveHtmlUrl?: (fileUrl: string, rootUrl: string) => string;\n}\n\nconst exists = async (path: string) => {\n  try {\n    await stat(path); return true;\n  } catch {\n    return false;\n  }\n};\n\nasync function resolveMonorepoPackages() {\n  const cwd = process.cwd();\n\n  const { workspaces } = JSON.parse(await readFile(join(cwd, 'package.json'), 'utf-8'));\n\n  const potentialPackageDirs =\n    (await Promise.all((workspaces ?? []).map((x: string) =>\n      glob(x, { cwd })))).flat();\n\n  const packages = new Map();\n\n  for (const dir of ['.', ...potentialPackageDirs]) {\n    const pkgDir = join(cwd, dir);\n    const pkgJsonPath = join(pkgDir, 'package.json');\n    if (await exists(pkgJsonPath)) {\n      const { name } = JSON.parse(await readFile(pkgJsonPath, 'utf-8'));\n      packages.set(name, pkgDir);\n    }\n  }\n\n  return packages;\n}\n\nfunction getProvider(packages: Map<string, string>): Provider {\n  return {\n    async pkgToUrl({ name }) {\n      const pkgPath = packages.get(name);\n      if (!pkgPath) {\n        throw new Error(`could not resolve ${name}`);\n      }\n      return `file://${pkgPath}/`;\n    },\n    // @ts-expect-error: types vs docs\n    parseUrlPkg(url: string) {\n      for (const [name, dir] of packages) {\n        if (url.startsWith(dir)) {\n          return {\n            name,\n            registry: 'monorepotypescript',\n            version: '*',\n          };\n        }\n      }\n    },\n    async resolveLatestTarget(target) {\n      return { ...target, version: '*' };\n    },\n  };\n}\n\nfunction generatorMiddleware(generator: Generator, options?: Partial<Options>): Middleware {\n  return async function injectMiddleware(ctx, next) {\n    if (ctx.path.endsWith('.html') || ctx.path.endsWith('/')) {\n      if (ctx.body?.length) {\n        const rootUrl = `file://${process.cwd()}/`;\n        const fileUrl = `${rootUrl.replace(/\\/$/, '')}${ctx.url}`;\n        const htmlUrl = options?.resolveHtmlUrl?.(fileUrl, rootUrl) ?? fileUrl;\n        try {\n          ctx.body = await generator.htmlInject(ctx.body, {\n            htmlUrl,\n            rootUrl,\n            trace: true,\n            whitespace: true,\n            esModuleShims: true,\n          });\n        } catch (e) {\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n      }\n    }\n    return next();\n  };\n}\n\n/**\n * @param options plugin options\n */\nexport function importMapGeneratorPlugin(options?: Partial<Options>): Plugin {\n  return {\n    name: 'import-map-inject',\n    async serverStart(args) {\n      const monorepotypescript = getProvider(await resolveMonorepoPackages());\n      args.app.use(generatorMiddleware(new Generator({\n        defaultProvider: 'nodemodules',\n        env: ['development', 'production', 'browser', 'module'],\n        providers: options?.providers,\n        inputMap: options?.inputMap,\n        customProviders: { monorepotypescript },\n        resolutions: options?.resolutions,\n        ignore: options?.ignore,\n        typeScript: options?.typeScript,\n      }), options));\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.d.ts b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.d.ts
new file mode 100644
index 0000000..101694f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.d.ts
@@ -0,0 +1,15 @@
+import type { Plugin } from '@web/dev-server-core';
+import type { PfeDevServerConfigOptions } from '../config.js';
+import type { SiteOptions } from '../../config.js';
+export type PfeDevServerInternalConfig = Required<PfeDevServerConfigOptions> & {
+    site: Required<SiteOptions>;
+};
+/**
+ * PFE dev server plugin generates a component dev server for patternfly tools projects
+ * @see config.ts for information on the .pfe.config.js file
+ * - Generates HTML for each component by rendering a nunjucks template
+ * - redirect demo html files to pretty URLs
+ * - Watch repository source files and reload the page when they change
+ * @param config Normalized PFE dev server config
+ */
+export declare function pfeDevServerPlugin(config: PfeDevServerInternalConfig): Plugin;
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js
new file mode 100644
index 0000000..9c84232
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js
@@ -0,0 +1,20 @@
+import { pfeDevServerRouterMiddleware } from './dev-server-router.js';
+import { pfeDevServerTemplateMiddleware } from './dev-server-templates.js';
+/**
+ * PFE dev server plugin generates a component dev server for patternfly tools projects
+ * @see config.ts for information on the .pfe.config.js file
+ * - Generates HTML for each component by rendering a nunjucks template
+ * - redirect demo html files to pretty URLs
+ * - Watch repository source files and reload the page when they change
+ * @param config Normalized PFE dev server config
+ */
+export function pfeDevServerPlugin(config) {
+    return {
+        name: 'pfe-dev-server',
+        async serverStart({ app }) {
+            app.use(pfeDevServerTemplateMiddleware(config));
+            app.use(pfeDevServerRouterMiddleware(config));
+        },
+    };
+}
+//# sourceMappingURL=pfe-dev-server.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js.map b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js.map
new file mode 100644
index 0000000..db13717
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/pfe-dev-server.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"pfe-dev-server.js","sourceRoot":"","sources":["pfe-dev-server.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,4BAA4B,EAAE,MAAM,wBAAwB,CAAC;AACtE,OAAO,EAAE,8BAA8B,EAAE,MAAM,2BAA2B,CAAC;AAM3E;;;;;;;GAOG;AACH,MAAM,UAAU,kBAAkB,CAAC,MAAkC;IACnE,OAAO;QACL,IAAI,EAAE,gBAAgB;QACtB,KAAK,CAAC,WAAW,CAAC,EAAE,GAAG,EAAE;YACvB,GAAG,CAAC,GAAG,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC,CAAC;YAChD,GAAG,CAAC,GAAG,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import type { Plugin } from '@web/dev-server-core';\nimport type { PfeDevServerConfigOptions } from '../config.js';\nimport type { SiteOptions } from '../../config.js';\n\nimport { pfeDevServerRouterMiddleware } from './dev-server-router.js';\nimport { pfeDevServerTemplateMiddleware } from './dev-server-templates.js';\n\nexport type PfeDevServerInternalConfig = Required<PfeDevServerConfigOptions> & {\n  site: Required<SiteOptions>;\n};\n\n/**\n * PFE dev server plugin generates a component dev server for patternfly tools projects\n * @see config.ts for information on the .pfe.config.js file\n * - Generates HTML for each component by rendering a nunjucks template\n * - redirect demo html files to pretty URLs\n * - Watch repository source files and reload the page when they change\n * @param config Normalized PFE dev server config\n */\nexport function pfeDevServerPlugin(config: PfeDevServerInternalConfig): Plugin {\n  return {\n    name: 'pfe-dev-server',\n    async serverStart({ app }) {\n      app.use(pfeDevServerTemplateMiddleware(config));\n      app.use(pfeDevServerRouterMiddleware(config));\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/templates/index.html b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/templates/index.html
new file mode 100644
index 0000000..df77100
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/dev-server/plugins/templates/index.html
@@ -0,0 +1,142 @@
+<!DOCTYPE html>
+<html lang="en" dir="ltr" unresolved>
+
+{% set groupeddemos = demos | sort(false, false, 'permalink') | groupby('primaryElementName') %}
+{% if demo.title %}
+  {% set title = demo.title + ' | ' + options.site.title %}
+{% else %}
+  {% set title = options.site.title %}
+{% endif %}
+
+{% if options.sourceControlURLPrefix %}
+  {% if options.sourceControlURLPrefix.toLowerCase().includes('github') %}
+    {% set repoHost = 'GitHub' %}
+  {% elseif options.sourceControlURLPrefix.toLowerCase().includes('bitbucket') %}
+    {% set repoHost = 'BitBucket' %}
+  {% elseif options.sourceControlURLPrefix.toLowerCase().includes('gitlab') %}
+    {% set repoHost = 'GitLab' %}
+  {% else %}
+    {% set repoHost = '' %}
+  {% endif %}
+{% endif %}
+
+<head>
+  <meta charset="utf-8">
+  <meta name="viewport" content="width=device-width, initial-scale=1">
+  <meta name="description" content="{{ options.site.description }}">
+  <meta name="pf-track-performance" content="true">
+  <link href="{{ options.site.favicon }}" rel="shortcut icon">
+  <title>{{ title }}</title>
+  <link rel="stylesheet" href="/node_modules/@patternfly/pfe-tools/dev-server/fonts.css">
+  <link rel="stylesheet" href="/node_modules/@patternfly/pfe-tools/dev-server/demo.css">
+  <noscript><style>html[unresolved] { opacity: 1; }</style></noscript>
+  {% for sheet in options.site.stylesheets %}
+  <link rel="stylesheet" href="{{ sheet }}">
+  {% endfor %}
+  <script type="module">
+    import 'construct-style-sheets-polyfill';
+    import 'element-internals-polyfill';
+    import '@patternfly/elements/pf-button/pf-button.js';
+    import '@patternfly/elements/pf-card/pf-card.js';
+    import '@patternfly/pfe-tools/dev-server/demo.js';
+  </script>
+</head>
+
+<body class="menu-open">
+  <header id="main-header">
+    <div class="logo-bar">
+      <pf-button id="hamburger"
+                 plain
+                 aria-controls="sidebar"
+                 label="Expand Main Navigation">
+        <pf-icon icon="bars" size="lg"></pf-icon>
+      </pf-button>
+      <a href="/" aria-label="{{ title }} Home">
+        <img src="{{ options.site.logoUrl }}" alt="{{ title }}">
+      </a>
+
+      <noscript><strong class="noscript">JavaScript is disabled</strong></noscript>
+
+      <a id="source-control" href="{{
+            options.sourceControlURLPrefix.replace('tree/main/', '')
+          }}{{
+            (
+              'tree/main' +
+              manifest.path.replace(context.cwd, '')
+                .replace('/custom-elements.json', '/')
+            ) if manifest else ''
+          }}">
+
+        {% if options.sourceControlURLPrefix %}<span>Contribute on {{ repoHost }}</span>{% endif %}
+        {% if repoHost === 'GitHub' %}
+        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512">
+          <!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
+          <title>GitHub</title>
+          <path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"/>
+        </svg>
+        {% elseif repoHost === 'GitLab' %}
+          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
+            <title>GitLab</title>
+            <!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
+            <path fill="currentColor" d="M503.5 204.6L502.8 202.8L433.1 21.02C431.7 17.45 429.2 14.43 425.9 12.38C423.5 10.83 420.8 9.865 417.9 9.57C415 9.275 412.2 9.653 409.5 10.68C406.8 11.7 404.4 13.34 402.4 15.46C400.5 17.58 399.1 20.13 398.3 22.9L351.3 166.9H160.8L113.7 22.9C112.9 20.13 111.5 17.59 109.6 15.47C107.6 13.35 105.2 11.72 102.5 10.7C99.86 9.675 96.98 9.295 94.12 9.587C91.26 9.878 88.51 10.83 86.08 12.38C82.84 14.43 80.33 17.45 78.92 21.02L9.267 202.8L8.543 204.6C-1.484 230.8-2.72 259.6 5.023 286.6C12.77 313.5 29.07 337.3 51.47 354.2L51.74 354.4L52.33 354.8L158.3 434.3L210.9 474L242.9 498.2C246.6 500.1 251.2 502.5 255.9 502.5C260.6 502.5 265.2 500.1 268.9 498.2L300.9 474L353.5 434.3L460.2 354.4L460.5 354.1C482.9 337.2 499.2 313.5 506.1 286.6C514.7 259.6 513.5 230.8 503.5 204.6z"/>
+          </svg>
+        {% elseif repoHost === 'BitBucket' %}
+          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
+            <title>BitBucket</title>
+            <!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
+            <path fill="currentColor" d="M22.2 32A16 16 0 0 0 6 47.8a26.35 26.35 0 0 0 .2 2.8l67.9 412.1a21.77 21.77 0 0 0 21.3 18.2h325.7a16 16 0 0 0 16-13.4L505 50.7a16 16 0 0 0-13.2-18.3 24.58 24.58 0 0 0-2.8-.2L22.2 32zm285.9 297.8h-104l-28.1-147h157.3l-25.2 147z"/>
+          </svg>
+        {% elseif repoHost | trim === '' %}
+          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
+            <title>Git Repository</title>
+            <!--! Font Awesome Pro 6.3.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2023 Fonticons, Inc. -->
+            <path fill="currentColor" d="M439.55 236.05L244 40.45a28.87 28.87 0 0 0-40.81 0l-40.66 40.63 51.52 51.52c27.06-9.14 52.68 16.77 43.39 43.68l49.66 49.66c34.23-11.8 61.18 31 35.47 56.69-26.49 26.49-70.21-2.87-56-37.34L240.22 199v121.85c25.3 12.54 22.26 41.85 9.08 55a34.34 34.34 0 0 1-48.55 0c-17.57-17.6-11.07-46.91 11.25-56v-123c-20.8-8.51-24.6-30.74-18.64-45L142.57 101 8.45 235.14a28.86 28.86 0 0 0 0 40.81l195.61 195.6a28.86 28.86 0 0 0 40.8 0l194.69-194.69a28.86 28.86 0 0 0 0-40.81z"/>
+          </svg>
+        {% endif %}
+      </a>
+    </div>
+  </header>
+  <aside id="sidebar" aria-expanded="true">
+    <nav id="nav" aria-label="Main Navigation">
+      <ul id="elements-container">
+        {% for primary, group in groupeddemos %}
+        {% set first = group['0'] %}
+        {% if group.length > 1 %}
+        <li>
+          <details {{ 'open' if demo.primaryElementName == primary }}>
+            <summary>{{ first.title }}</summary>
+            <ul>{% for d in group %}
+              <li>
+                <a href="{{ d.permalink | replace(demoURLPrefix, '/') }}">{{ d.title }}</a>
+              </li>{% endfor %}
+            </ul>
+          </details>
+        </li>{% else %}
+        <li>
+          <a href="{{ first.permalink | replace(demoURLPrefix, '/') }}">{{ first.title }} </a>
+        </li>{% endif %}{% endfor %}
+      </ul>
+    </nav>
+  </aside>
+  <main>{% if templateContent %}
+    <div data-demo="{{ demo.tagName }}">{{ templateContent | safe }}</div>{% else %}
+    <section id="components">
+        {% for primary, group in groupeddemos %}
+        {% set first = group['0'] %}
+        <pf-card rounded compact>
+          <h2 slot="header">{{ first.title }}</h2>
+          <a href="{{ first.permalink | replace(demoURLPrefix, '/') }}">
+            <img src="/elements/{{ primary }}/docs/screenshot.png" alt="{{ primary }}">
+          </a>
+          <ul>{% for d in group %}{% if not loop.first %}
+            <li>
+              <a href="{{ d.permalink | replace(demoURLPrefix, '/') }}">{{ d.title }}</a>
+            </li>{% endif %}{% endfor %}
+          </ul>
+        </pf-card>{% endfor %}
+    </section>
+    {% endif %}
+  </main>
+</body>
+
+</html>
diff --git a/node_modules/@patternfly/pfe-tools/package/environment.d.ts b/node_modules/@patternfly/pfe-tools/package/environment.d.ts
new file mode 100644
index 0000000..356383c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/environment.d.ts
@@ -0,0 +1,7 @@
+/**
+ * Generate and write a demo environment file
+ * this is used to pass filesystem information to the client,
+ * e.g. the list of directories under `elements/`
+ * @param [cwd=process.cwd()] cwd
+ */
+export declare function makeDemoEnv(cwd?: string): Promise<string>;
diff --git a/node_modules/@patternfly/pfe-tools/package/environment.js b/node_modules/@patternfly/pfe-tools/package/environment.js
new file mode 100644
index 0000000..2894354
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/environment.js
@@ -0,0 +1,33 @@
+/* globals process */
+import { readdir, stat } from 'fs/promises';
+import { join } from 'path';
+/**
+ * Generate and write a demo environment file
+ * this is used to pass filesystem information to the client,
+ * e.g. the list of directories under `elements/`
+ * @param [cwd=process.cwd()] cwd
+ */
+export async function makeDemoEnv(cwd = process.cwd()) {
+    const iconsDir = join(cwd, 'node_modules', '@patternfly', 'icons');
+    const dirContents = await readdir(iconsDir);
+    const dirNamesOrNulls = await Promise.all(dirContents.map(async (x) => {
+        const stats = await stat(join(iconsDir, x));
+        if (!x.startsWith('.') && stats.isDirectory()) {
+            return x;
+        }
+        else {
+            return null;
+        }
+    }));
+    const iconSetNames = dirNamesOrNulls.filter((x) => x != null);
+    const iconSets = await Promise.all(iconSetNames.reverse().map(async (set) => {
+        const files = await readdir(join(iconsDir, set));
+        return [set, [...new Set(files.map(x => x.replace(/\..*$/, '')))]];
+    }));
+    return `
+export const elements = ${JSON.stringify(await readdir(join(cwd, 'elements')))};
+export const core = ${JSON.stringify(await readdir(join(cwd, 'core')))};
+export const iconSets = new Map(${JSON.stringify(iconSets)});
+`;
+}
+//# sourceMappingURL=environment.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/environment.js.map b/node_modules/@patternfly/pfe-tools/package/environment.js.map
new file mode 100644
index 0000000..591aeae
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/environment.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"environment.js","sourceRoot":"","sources":["environment.ts"],"names":[],"mappings":"AAAA,qBAAqB;AACrB,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAE5B;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,MAAc,OAAO,CAAC,GAAG,EAAE;IAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,cAAc,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;IACnE,MAAM,WAAW,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC5C,MAAM,eAAe,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,EAAC,CAAC,EAAC,EAAE;QAClE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5C,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC;YAC9C,OAAO,CAAC,CAAC;QACX,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC,CAAC,CAAC,CAAC;IACJ,MAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAe,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC;IAC3E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC,KAAK,EAAC,GAAG,EAAC,EAAE;QACxE,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QACjD,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC,CAAC,CAAC,CAAC;IACJ,OAAO;0BACiB,IAAI,CAAC,SAAS,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;sBACxD,IAAI,CAAC,SAAS,CAAC,MAAM,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC,CAAC;kCACpC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;CACzD,CAAC;AACF,CAAC","sourcesContent":["/* globals process */\nimport { readdir, stat } from 'fs/promises';\nimport { join } from 'path';\n\n/**\n * Generate and write a demo environment file\n * this is used to pass filesystem information to the client,\n * e.g. the list of directories under `elements/`\n * @param [cwd=process.cwd()] cwd\n */\nexport async function makeDemoEnv(cwd: string = process.cwd()): Promise<string> {\n  const iconsDir = join(cwd, 'node_modules', '@patternfly', 'icons');\n  const dirContents = await readdir(iconsDir);\n  const dirNamesOrNulls = await Promise.all(dirContents.map(async x => {\n    const stats = await stat(join(iconsDir, x));\n    if (!x.startsWith('.') && stats.isDirectory()) {\n      return x;\n    } else {\n      return null;\n    }\n  }));\n  const iconSetNames = dirNamesOrNulls.filter((x): x is string => x != null);\n  const iconSets = await Promise.all(iconSetNames.reverse().map(async set => {\n    const files = await readdir(join(iconsDir, set));\n    return [set, [...new Set(files.map(x => x.replace(/\\..*$/, '')))]];\n  }));\n  return `\nexport const elements = ${JSON.stringify(await readdir(join(cwd, 'elements')))};\nexport const core = ${JSON.stringify(await readdir(join(cwd, 'core')))};\nexport const iconSets = new Map(${JSON.stringify(iconSets)});\n`;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/package.json b/node_modules/@patternfly/pfe-tools/package/package.json
new file mode 100644
index 0000000..638714c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/package.json
@@ -0,0 +1,128 @@
+{
+  "name": "@patternfly/pfe-tools",
+  "version": "4.0.3",
+  "type": "module",
+  "description": "Development and build tools for PatternFly Elements and related projects",
+  "keywords": [
+    "web-components",
+    "html"
+  ],
+  "repository": {
+    "type": "git",
+    "url": "github:patternfly/patternfly-elements",
+    "directory": "tools/pfe-tools"
+  },
+  "publishConfig": {
+    "access": "public",
+    "registry": "https://registry.npmjs.org/"
+  },
+  "engines": {
+    "node": ">=18"
+  },
+  "exports": {
+    "./config.js": "./config.js",
+    "./custom-elements-manifest/config.js": "./custom-elements-manifest/config.js",
+    "./custom-elements-manifest/custom-elements-manifest.js": "./custom-elements-manifest/custom-elements-manifest.js",
+    "./dev-server/config.js": "./dev-server/config.js",
+    "./dev-server/demo.js": "./dev-server/demo.js",
+    "./environment.js": "./environment.js",
+    "./11ty/DocsPage.js": "./11ty/DocsPage.js",
+    "./11ty/plugins/anchors.cjs": "./11ty/plugins/anchors.cjs",
+    "./11ty/plugins/custom-elements-manifest.cjs": "./11ty/plugins/custom-elements-manifest.cjs",
+    "./11ty/plugins/order-tags.cjs": "./11ty/plugins/order-tags.cjs",
+    "./11ty/plugins/table-of-contents.cjs": "./11ty/plugins/table-of-contents.cjs",
+    "./11ty/plugins/todos.cjs": "./11ty/plugins/todos.cjs",
+    "./react/generate-wrappers.js": "./react/generate-wrappers.js",
+    "./ssr/*": "./ssr/*",
+    "./test/a11y-snapshot.js": "./test/a11y-snapshot.js",
+    "./test/config.js": "./test/config.js",
+    "./test/create-fixture.js": "./test/create-fixture.js",
+    "./test/get-composed-text.js": "./test/get-composed-text.js",
+    "./test/hex-to-rgb.js": "./test/hex-to-rgb.js",
+    "./test/render-to-string.js": "./test/render-to-string.js",
+    "./test/stub-logger.js": "./test/stub-logger.js",
+    "./test/utils.js": "./test/utils.js",
+    "./typescript/transformers/css-imports.cjs": "./typescript/transformers/css-imports.cjs",
+    "./typescript/transformers/static-version.cjs": "./typescript/transformers/static-version.cjs"
+  },
+  "contributors": [
+    "Kyle Buchanan <kylebuch8@gmail.com> (https://github.com/kylebuch8)",
+    "Benny Powers <bennyp@redhat.com>",
+    "Arathy Kumar <ask6295@gmail.com>"
+  ],
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/patternfly/patternfly-elements/issues"
+  },
+  "files": [
+    "!*.ts",
+    "demo/**/*",
+    "custom-elements.json",
+    "**/*.LEGAL.txt",
+    "**/*.{njk,html,md,css,woff,woff2}",
+    "**/*.{js,cjs,d.ts,map}"
+  ],
+  "peerDependencies": {
+    "@11ty/eleventy": "^2.0.1 || ^3.0.0",
+    "@11ty/eleventy-plugin-directory-output": "^1.0.1",
+    "@11ty/eleventy-plugin-syntaxhighlight": "^5.0.0",
+    "@changesets/cli": "^2.28.1",
+    "@custom-elements-manifest/analyzer": "^0.5.7",
+    "@jspm/generator": "^2.0.1",
+    "@koa/router": "^12.0.1",
+    "@lit-labs/ssr": "^3.3.0",
+    "@open-wc/testing": "^4.0.0",
+    "@playwright/test": "^1.44.0",
+    "@rollup/plugin-replace": "^5.0.5",
+    "@web/dev-server": "^0.4.4",
+    "@web/dev-server-esbuild": "^1.0.2",
+    "@web/dev-server-import-maps": "^0.2.0",
+    "@web/dev-server-rollup": "^0.6.1",
+    "@web/test-runner": "^0.18.3",
+    "@web/test-runner-commands": "^0.9.0",
+    "@web/test-runner-junit-reporter": "^0.7.1",
+    "@web/test-runner-playwright": "^0.11.0",
+    "cem-plugin-module-file-extensions": "^0.0.5",
+    "cem-plugin-readonly": "^0.0.5",
+    "chalk": "^5.3.0",
+    "clean-css": "^5.3.3",
+    "colorjs.io": "^0.5.2",
+    "compression": "^1.7.4",
+    "construct-style-sheets-polyfill": "^3.1.0",
+    "dedent": "^1.5.1",
+    "dotenv": "^16.4.5",
+    "element-internals-polyfill": "^1.3.10",
+    "eleventy-plugin-toc": "^1.1.5",
+    "es-module-shims": "^1.9.0",
+    "esbuild": "^0.20.2",
+    "esbuild-plugin-lit-css": "^3.0.0",
+    "esbuild-plugin-minify-html-literals": "^2.0.0",
+    "eslint": "^9.0.0",
+    "execa": "^9.3.0",
+    "glob": "^10.3.12",
+    "lit": "^3.2.1",
+    "markdown-it-anchor": "^8.6.7",
+    "nunjucks": "^3.2.4",
+    "patch-package": "^8.0.0",
+    "playwright": "^1.43.0",
+    "rollup-plugin-lit-css": "^5.0.0",
+    "sinon": "^17.0.1",
+    "ts-lit-plugin": "^2.0.2",
+    "ts-patch": "^3.2.1",
+    "typescript": "^5.4.4",
+    "urlpattern-polyfill": "^10.0.0",
+    "web-dev-server-plugin-lit-css": "^3.0.0"
+  },
+  "devDependencies": {
+    "@types/dedent": "^0.7.2",
+    "@types/estree": "^1.0.5",
+    "@types/glob": "^8.1.0",
+    "@types/koa-send": "^4.1.6",
+    "@types/mocha": "^10.0.7",
+    "@types/node": "^22.4.1",
+    "@types/nunjucks": "^3.2.6",
+    "@types/sinon": "^17.0.3",
+    "@types/yargs": "^17.0.33",
+    "custom-elements-manifest": "^2.1.0"
+  }
+}
diff --git a/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.d.ts b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.d.ts
new file mode 100644
index 0000000..a3b35f9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.d.ts
@@ -0,0 +1,11 @@
+import type * as CEM from 'custom-elements-manifest';
+/**
+ * Given a custom elements manifest (or a path to its file),
+ * generate a suite of react wrapper components
+ * @param customElementsManifestOrPathOrURL manifest object; or string or url path
+ * @param outDirPathOrURL directory to write wrapper components to
+ * @param packageName npm package name of the manifest
+ * @param elPrefix element tag prefix e.g. `pf`
+ * @param classPrefix e.g. `Pf`
+ */
+export declare function generateReactWrappers(customElementsManifestOrPathOrURL: CEM.Package | string | URL, outDirPathOrURL: string | URL, packageName?: string, elPrefix?: string, classPrefix?: string): Promise<void>;
diff --git a/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js
new file mode 100644
index 0000000..c049523
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js
@@ -0,0 +1,165 @@
+import { dirname, join, relative } from 'node:path';
+import { fileURLToPath } from 'node:url';
+import { readFile, writeFile, mkdir } from 'node:fs/promises';
+import Chalk from 'chalk';
+const javascript = String.raw;
+const typescript = String.raw;
+function isCustomElementDeclaration(declaration) {
+    return !!declaration.customElement;
+}
+function isExported(exports) {
+    return function (declaration) {
+        return !!exports?.some(exp => exp.kind === 'js' && exp.declaration.name === declaration.name);
+    };
+}
+/**
+ * Remove a prefix from a class name
+ * @param className ecmascript class name e.g. PfJazzHands
+ * @param prefix class name prefix e.g. Pf
+ */
+function getDeprefixedClassName(className, prefix) {
+    const [fst, ...tail] = className.replace(prefix, '');
+    return `${fst.toUpperCase()}${tail.join('')}`;
+}
+/**
+ * simple function to convert string from dash to camel case
+ * @param str string to convert to camelcase
+ */
+function camel(str) {
+    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
+}
+function getEventReactPropName(event) {
+    return camel(`on-${event.name}`);
+}
+class NonCriticalError extends Error {
+}
+function isPackage(manifest) {
+    const maybeManifest = manifest;
+    return Array.isArray(maybeManifest?.modules) && !!maybeManifest.schemaVersion;
+}
+const getReactWrapperData = (module, classPrefix, elPrefix) => (decl) => {
+    const ceExport = module.exports?.find(ex => ex.declaration.name === decl.name);
+    if (!ceExport) {
+        throw new Error(`module ${module.path} does not export custom element class: ${decl.name}`);
+    }
+    if (!decl.tagName) {
+        throw new NonCriticalError(`declaration does not have a tag name: ${decl.name}`);
+    }
+    const { tagName, name: Class } = decl;
+    const events = decl.events ?? [];
+    const reactComponentName = getDeprefixedClassName(Class, classPrefix);
+    const eventsMap = `{${events.map(event => `
+    ${getEventReactPropName(event)}: '${event.name}'`).join(',')}${events.length ? `,
+  ` : ''}}`;
+    const eventsInterface = eventsMap
+        .replace(/\s+/g, ' ')
+        .replaceAll(',', ';')
+        .replace('; }', ' }');
+    return {
+        Class: decl.name,
+        reactComponentName,
+        eventsMap,
+        eventsInterface,
+        elPrefix,
+        tagName,
+    };
+};
+function genJavascriptModule(module, pkgName, data) {
+    return javascript `// ${module.path}
+import { createComponent } from '@lit/react';
+import react from 'react';${data.map(x => javascript `
+import { ${x.Class} } from '${pkgName}/${module.path}';`).join('')}${data.map(x => javascript `
+export const ${x.reactComponentName} = createComponent({
+  tagName: '${x.tagName}',
+  elementClass: ${x.Class},
+  react,
+  events: ${x.eventsMap},
+});`).join('\n')}
+`;
+}
+function genTypescriptModule(module, pkgName, data) {
+    return typescript `// ${module.path}
+import type { ReactWebComponent } from '@lit/react';${data.map(x => typescript `
+import type { ${x.Class} } from '${pkgName}/${module.path}';`).join('')}${data.map(x => typescript `
+export const ${x.reactComponentName}: ReactWebComponent<${x.Class}, ${x.eventsInterface}>;`).join('\n')}
+  `;
+}
+function genWrapperModules(module, pkgName, elPrefix, classPrefix) {
+    const data = (module.declarations ?? [])
+        .filter(isCustomElementDeclaration)
+        .filter(isExported(module.exports))
+        .map(getReactWrapperData(module, classPrefix, elPrefix));
+    const js = genJavascriptModule(module, pkgName, data);
+    const ts = genTypescriptModule(module, pkgName, data);
+    const tagNames = data.map(x => x.tagName);
+    return { js, ts, tagNames };
+}
+async function writeReactWrappers(js, ts, tagNames, path, outDirPathOrURL) {
+    const outDirPath = typeof outDirPathOrURL === 'string' ? outDirPathOrURL
+        : fileURLToPath(outDirPathOrURL);
+    const outPath = join(outDirPath, path);
+    await mkdir(dirname(outPath), { recursive: true });
+    await writeFile(outPath, js, 'utf8');
+    await writeFile(outPath.replace('.js', '.d.ts'), ts, 'utf8');
+    return { tagNames, outPath };
+}
+async function parseManifest(maybeManifest) {
+    let manifest;
+    if (maybeManifest instanceof URL
+        || typeof maybeManifest === 'string') {
+        manifest = JSON.parse(await readFile(maybeManifest, 'utf-8'));
+    }
+    else {
+        manifest = maybeManifest;
+    }
+    if (!isPackage(manifest)) {
+        throw new Error('could not parse manifest');
+    }
+    else {
+        return manifest;
+    }
+}
+/**
+ * Given a custom elements manifest (or a path to its file),
+ * generate a suite of react wrapper components
+ * @param customElementsManifestOrPathOrURL manifest object; or string or url path
+ * @param outDirPathOrURL directory to write wrapper components to
+ * @param packageName npm package name of the manifest
+ * @param elPrefix element tag prefix e.g. `pf`
+ * @param classPrefix e.g. `Pf`
+ */
+export async function generateReactWrappers(customElementsManifestOrPathOrURL, outDirPathOrURL, packageName = '@patternfly/elements', elPrefix = 'pf', classPrefix = `${elPrefix.charAt(0).toUpperCase()}${elPrefix.slice(1)}`) {
+    /* eslint-disable no-console */
+    const manifest = await parseManifest(customElementsManifestOrPathOrURL);
+    const written = [];
+    console.group(Chalk.green `Writing React Wrappers`);
+    try {
+        for (const module of manifest.modules) {
+            if (!module.exports) {
+                throw new Error(`module has no exports: ${module.path}`);
+            }
+            const { js, ts, tagNames } = genWrapperModules(module, packageName, elPrefix, classPrefix);
+            written.push(await writeReactWrappers(js, ts, tagNames, module.path, outDirPathOrURL));
+        }
+    }
+    catch (error) {
+        if (error instanceof NonCriticalError) {
+            console.info(`⚠️ ${error.message}`);
+        }
+        else {
+            throw error;
+        }
+    }
+    finally {
+        console.groupEnd();
+    }
+    console.group(Chalk.greenBright `Wrote React Wrappers`);
+    for (const { tagNames, outPath } of written) {
+        const names = tagNames.map(x => Chalk.blue `${x}`).join().replace(', ', '');
+        const path = relative(process.cwd(), outPath);
+        console.log(`${names}: ${path}`);
+    }
+    console.groupEnd();
+    /* eslint-enable no-console */
+}
+//# sourceMappingURL=generate-wrappers.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js.map b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js.map
new file mode 100644
index 0000000..1167639
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/react/generate-wrappers.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"generate-wrappers.js","sourceRoot":"","sources":["generate-wrappers.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as CEM from 'custom-elements-manifest';\nimport { dirname, join, relative } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { readFile, writeFile, mkdir } from 'node:fs/promises';\n\nimport Chalk from 'chalk';\n\ninterface ReactWrapperData {\n  Class: string;\n  reactComponentName: string;\n  eventsMap: string;\n  eventsInterface: string;\n  tagName: string;\n}\n\nconst javascript = String.raw;\nconst typescript = String.raw;\n\nfunction isCustomElementDeclaration(\n  declaration: CEM.Declaration,\n): declaration is CEM.CustomElementDeclaration {\n  return !!(declaration as CEM.CustomElementDeclaration).customElement;\n}\n\nfunction isExported(exports: CEM.Export[] | undefined) {\n  return function(declaration: CEM.Declaration): boolean {\n    return !!exports?.some(exp => exp.kind === 'js' && exp.declaration.name === declaration.name);\n  };\n}\n\n/**\n * Remove a prefix from a class name\n * @param className ecmascript class name e.g. PfJazzHands\n * @param prefix class name prefix e.g. Pf\n */\nfunction getDeprefixedClassName(className: string, prefix: string) {\n  const [fst, ...tail] = className.replace(prefix, '');\n  return `${fst.toUpperCase()}${tail.join('')}`;\n}\n\n/**\n * simple function to convert string from dash to camel case\n * @param str string to convert to camelcase\n */\nfunction camel(str: string): string {\n  return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());\n}\n\nfunction getEventReactPropName(event: CEM.Event) {\n  return camel(`on-${event.name}`);\n}\n\nclass NonCriticalError extends Error { }\n\nfunction isPackage(manifest: unknown): manifest is CEM.Package {\n  const maybeManifest = (manifest as CEM.Package);\n  return Array.isArray(maybeManifest?.modules) && !!maybeManifest.schemaVersion;\n}\n\nconst getReactWrapperData = (\n  module: CEM.Module,\n  classPrefix: string,\n  elPrefix: string,\n) =>\n  (decl: CEM.CustomElementDeclaration) => {\n    const ceExport = module.exports?.find(ex => ex.declaration.name === decl.name);\n    if (!ceExport) {\n      throw new Error(`module ${module.path} does not export custom element class: ${decl.name}`);\n    }\n    if (!decl.tagName) {\n      throw new NonCriticalError(`declaration does not have a tag name: ${decl.name}`);\n    }\n    const { tagName, name: Class } = decl;\n    const events = decl.events ?? [];\n    const reactComponentName = getDeprefixedClassName(Class, classPrefix);\n    const eventsMap = `{${events.map(event => `\n    ${getEventReactPropName(event)}: '${event.name}'`).join(',')}${events.length ? `,\n  ` : ''}}`;\n    const eventsInterface = eventsMap\n        .replace(/\\s+/g, ' ')\n        .replaceAll(',', ';')\n        .replace('; }', ' }');\n    return {\n      Class: decl.name,\n      reactComponentName,\n      eventsMap,\n      eventsInterface,\n      elPrefix,\n      tagName,\n    };\n  };\n\nfunction genJavascriptModule(module: CEM.Module, pkgName: string, data: ReactWrapperData[]) {\n  return javascript`// ${module.path}\nimport { createComponent } from '@lit/react';\nimport react from 'react';${data.map(x => javascript`\nimport { ${x.Class} } from '${pkgName}/${module.path}';`).join('')}${data.map(x => javascript`\nexport const ${x.reactComponentName} = createComponent({\n  tagName: '${x.tagName}',\n  elementClass: ${x.Class},\n  react,\n  events: ${x.eventsMap},\n});`).join('\\n')}\n`;\n}\n\nfunction genTypescriptModule(module: CEM.Module, pkgName: string, data: ReactWrapperData[]) {\n  return typescript`// ${module.path}\nimport type { ReactWebComponent } from '@lit/react';${data.map(x => typescript`\nimport type { ${x.Class} } from '${pkgName}/${module.path}';`).join('')}${data.map(x => typescript`\nexport const ${x.reactComponentName}: ReactWebComponent<${x.Class}, ${x.eventsInterface}>;`).join('\\n')}\n  `;\n}\n\nfunction genWrapperModules(\n  module: CEM.Module,\n  pkgName: string,\n  elPrefix: string,\n  classPrefix: string,\n) {\n  const data: ReactWrapperData[] = (module.declarations ?? [])\n      .filter(isCustomElementDeclaration)\n      .filter(isExported(module.exports))\n      .map(getReactWrapperData(module, classPrefix, elPrefix));\n  const js = genJavascriptModule(module, pkgName, data);\n  const ts = genTypescriptModule(module, pkgName, data);\n  const tagNames = data.map(x => x.tagName);\n  return { js, ts, tagNames };\n}\n\nasync function writeReactWrappers(\n  js: string,\n  ts: string,\n  tagNames: string[],\n  path: string,\n  outDirPathOrURL: string | URL,\n) {\n  const outDirPath =\n      typeof outDirPathOrURL === 'string' ? outDirPathOrURL\n    : fileURLToPath(outDirPathOrURL);\n  const outPath = join(outDirPath, path);\n  await mkdir(dirname(outPath), { recursive: true });\n  await writeFile(outPath, js, 'utf8');\n  await writeFile(outPath.replace('.js', '.d.ts'), ts, 'utf8');\n  return { tagNames, outPath };\n}\n\nasync function parseManifest(maybeManifest: unknown): Promise<CEM.Package> {\n  let manifest;\n  if (maybeManifest instanceof URL\n    || typeof maybeManifest === 'string') {\n    manifest = JSON.parse(await readFile(maybeManifest, 'utf-8'));\n  } else {\n    manifest = maybeManifest;\n  }\n  if (!isPackage(manifest)) {\n    throw new Error('could not parse manifest');\n  } else {\n    return manifest;\n  }\n}\n\n/**\n * Given a custom elements manifest (or a path to its file),\n * generate a suite of react wrapper components\n * @param customElementsManifestOrPathOrURL manifest object; or string or url path\n * @param outDirPathOrURL directory to write wrapper components to\n * @param packageName npm package name of the manifest\n * @param elPrefix element tag prefix e.g. `pf`\n * @param classPrefix e.g. `Pf`\n */\nexport async function generateReactWrappers(\n  customElementsManifestOrPathOrURL: CEM.Package | string | URL,\n  outDirPathOrURL: string | URL,\n  packageName = '@patternfly/elements',\n  elPrefix = 'pf',\n  classPrefix = `${elPrefix.charAt(0).toUpperCase()}${elPrefix.slice(1)}`,\n): Promise<void> {\n  /* eslint-disable no-console */\n  const manifest = await parseManifest(customElementsManifestOrPathOrURL);\n  const written = [];\n  console.group(Chalk.green`Writing React Wrappers`);\n  try {\n    for (const module of manifest.modules) {\n      if (!module.exports) {\n        throw new Error(`module has no exports: ${module.path}`);\n      }\n      const { js, ts, tagNames } = genWrapperModules(module, packageName, elPrefix, classPrefix);\n      written.push(await writeReactWrappers(js, ts, tagNames, module.path, outDirPathOrURL));\n    }\n  } catch (error) {\n    if (error instanceof NonCriticalError) {\n      console.info(`⚠️ ${error.message}`);\n    } else {\n      throw error;\n    }\n  } finally {\n    console.groupEnd();\n  }\n  console.group(Chalk.greenBright`Wrote React Wrappers`);\n  for (const { tagNames, outPath } of written) {\n    const names = tagNames.map(x => Chalk.blue`${x}`).join().replace(', ', '');\n    const path = relative(process.cwd(), outPath);\n    console.log(`${names}: ${path}`);\n  }\n  console.groupEnd();\n  /* eslint-enable no-console */\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/global.d.ts b/node_modules/@patternfly/pfe-tools/package/ssr/global.d.ts
new file mode 100644
index 0000000..6b10cd2
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/global.d.ts
@@ -0,0 +1,7 @@
+/**
+ * Renders a string of HTML,
+ * first importing the provided component defintions into nodejs' global scope.
+ * @param html string to render
+ * @param importSpecifiers list of web component definition module import specifiers
+ */
+export declare function renderGlobal(html: string, importSpecifiers: string[]): Promise<string>;
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/global.js b/node_modules/@patternfly/pfe-tools/package/ssr/global.js
new file mode 100644
index 0000000..6b9e762
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/global.js
@@ -0,0 +1,15 @@
+/**
+ * Renders a string of HTML,
+ * first importing the provided component defintions into nodejs' global scope.
+ * @param html string to render
+ * @param importSpecifiers list of web component definition module import specifiers
+ */
+export async function renderGlobal(html, importSpecifiers) {
+    // hack to avoid circular typescript project reference
+    const spec = '@patternfly/pfe-core/ssr-shims.js';
+    await import(spec);
+    const { ssr } = await import('./ssr.js');
+    await Promise.all(importSpecifiers.map(x => import(x)));
+    return ssr(html);
+}
+//# sourceMappingURL=global.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/global.js.map b/node_modules/@patternfly/pfe-tools/package/ssr/global.js.map
new file mode 100644
index 0000000..62547b0
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/global.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"global.js","sourceRoot":"","sources":["global.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,YAAY,CAChC,IAAY,EACZ,gBAA0B;IAE1B,sDAAsD;IACtD,MAAM,IAAI,GAAG,mCAAmC,CAAC;IACjD,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;IACnB,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC;IACzC,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxD,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;AACnB,CAAC","sourcesContent":["/**\n * Renders a string of HTML,\n * first importing the provided component defintions into nodejs' global scope.\n * @param html string to render\n * @param importSpecifiers list of web component definition module import specifiers\n */\nexport async function renderGlobal(\n  html: string,\n  importSpecifiers: string[],\n): Promise<string> {\n  // hack to avoid circular typescript project reference\n  const spec = '@patternfly/pfe-core/ssr-shims.js';\n  await import(spec);\n  const { ssr } = await import('./ssr.js');\n  await Promise.all(importSpecifiers.map(x => import(x)));\n  return ssr(html);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/ssr.d.ts b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.d.ts
new file mode 100644
index 0000000..f4fa234
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.d.ts
@@ -0,0 +1,5 @@
+/**
+ * composes the `unsafeHTML`, `html`, `render`, and `collectResult` functions from lit ssr
+ * @param input html partial
+ */
+export declare function ssr(input: string): Promise<string>;
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js
new file mode 100644
index 0000000..112545a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js
@@ -0,0 +1,11 @@
+import { render, html } from '@lit-labs/ssr';
+import { collectResult } from '@lit-labs/ssr/lib/render-result.js';
+import { unsafeHTML } from 'lit/directives/unsafe-html.js';
+/**
+ * composes the `unsafeHTML`, `html`, `render`, and `collectResult` functions from lit ssr
+ * @param input html partial
+ */
+export async function ssr(input) {
+    return collectResult(render(html `${unsafeHTML(input)}`));
+}
+//# sourceMappingURL=ssr.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js.map b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js.map
new file mode 100644
index 0000000..de18fcd
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/ssr/ssr.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ssr.js","sourceRoot":"","sources":["ssr.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAC;AACnE,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAE3D;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,GAAG,CAAC,KAAa;IACrC,OAAO,aAAa,CAAC,MAAM,CAAC,IAAI,CAAA,GAAG,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3D,CAAC","sourcesContent":["import { render, html } from '@lit-labs/ssr';\nimport { collectResult } from '@lit-labs/ssr/lib/render-result.js';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\n\n/**\n * composes the `unsafeHTML`, `html`, `render`, and `collectResult` functions from lit ssr\n * @param input html partial\n */\nexport async function ssr(input: string): Promise<string> {\n  return collectResult(render(html`${unsafeHTML(input)}`));\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.d.ts b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.d.ts
new file mode 100644
index 0000000..f1937df
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.d.ts
@@ -0,0 +1,87 @@
+import { a11ySnapshot as snap } from '@web/test-runner-commands';
+export interface A11yTreeSnapshot {
+    name: string;
+    role: string;
+    children?: A11yTreeSnapshot[];
+    checked?: boolean;
+    disabled?: boolean;
+    description?: string;
+    expanded?: boolean;
+    focused?: boolean;
+    haspopup?: string;
+    level?: number;
+    selected?: boolean;
+    value?: number;
+    valuetext?: string;
+    valuemin?: number;
+    valuemax?: number;
+}
+/**
+ * @param payload e.g. { selector: 'pf-select' }
+ */
+export declare function a11ySnapshot(payload?: Parameters<typeof snap>[0]): Promise<A11yTreeSnapshot>;
+type SnapshotQuery = Partial<Record<keyof A11yTreeSnapshot, string | boolean | number | RegExp>>;
+/**
+ * Deeply search an accessibility tree snapshot for an object matching your query
+ * @param snapshot the snapshot root to recurse through
+ * @param query object with properties matching the snapshot child you seek
+ */
+export declare function querySnapshot(snapshot: A11yTreeSnapshot, query: SnapshotQuery): A11yTreeSnapshot | null;
+/**
+ * Deeply search an accessibility tree snapshot for all objects matching your query
+ * @param snapshot the snapshot root to recurse through
+ * @param query object with properties matching the snapshot children you seek
+ */
+export declare function querySnapshotAll(snapshot: A11yTreeSnapshot, query: SnapshotQuery): A11yTreeSnapshot[];
+/** @see https://w3c.github.io/aria/#ref-for-dom-ariamixin-ariaactivedescendantelement-1 */
+declare global {
+    interface ARIAMixin {
+        ariaActiveDescendantElement: Element | null;
+        ariaControlsElements: readonly Element[] | null;
+        ariaDescribedByElements: readonly Element[] | null;
+        ariaDetailsElements: readonly Element[] | null;
+        ariaErrorMessageElements: readonly Element[] | null;
+        ariaFlowToElements: readonly Element[] | null;
+        ariaLabelledByElements: readonly Element[] | null;
+        ariaOwnsElements: readonly Element[] | null;
+    }
+}
+declare global {
+    namespace Chai {
+        interface Assertion {
+            /** Assert that the a11ySnapshot contains a node with the given name */
+            axContainName(name: string, msg?: string): Assertion;
+            /** Assert that a given role exists in the ax tree */
+            axContainRole(role: string, msg?: string): Assertion;
+            /** Assert that a node matching a given query object exists in the ax tree */
+            axContainQuery(query: SnapshotQuery, msg?: string): Assertion;
+            /**
+             * Assert that an AX Tree node that matches the query object exists in the tre
+             */
+            axQuery(query: SnapshotQuery, msg?: string): Assertion;
+            /**
+             * Assert that the a11ySnapshot shows that a given element has focus.
+             * This assertion ultimately matches on the accessible name of the given element,
+             * so test authors must ensure that every element has a unique accessible name
+             * (i.e. aria-label or textContent).
+             */
+            axTreeFocusOn(element?: Element | null, msg?: string): Assertion;
+            /**
+             * Assert that the a11ySnapshot shows that a given element has focus.
+             * This assertion ultimately matches on the accessible name of the given element,
+             * so test authors must ensure that every element has a unique accessible name
+             * (i.e. aria-label or textContent).
+             */
+            axTreeFocusedNode: Assertion;
+            /** Assert that an AX Tree node has a given role */
+            axRole(role: string, msg?: string): Assertion;
+            /** Assert that an AX Tree node has a given name */
+            axName(role: string, msg?: string): Assertion;
+            /** Assert that an AX Tree node has a given description */
+            axDescription(description: string, msg?: string): Assertion;
+            /** Assert that an AX Tree node has a given property with a given value */
+            axProperty(propName: keyof A11yTreeSnapshot, value: A11yTreeSnapshot[keyof A11yTreeSnapshot], msg?: string): Assertion;
+        }
+    }
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js
new file mode 100644
index 0000000..8fd2cea
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js
@@ -0,0 +1,175 @@
+import { chai } from '@open-wc/testing';
+import { a11ySnapshot as snap } from '@web/test-runner-commands';
+const { Assertion, AssertionError, util, } = chai;
+/**
+ * @param payload e.g. { selector: 'pf-select' }
+ */
+export async function a11ySnapshot(payload) {
+    let snapshot;
+    let tries = -1;
+    do {
+        await new Promise(requestAnimationFrame);
+        snapshot = await snap(payload ?? {}).catch(() => false);
+        tries++;
+    } while (!snapshot && tries < 10);
+    return snapshot;
+}
+function matches(snapshot, query) {
+    return Object.entries(query).every(([key, value]) => value instanceof RegExp ? value.test(snapshot[key])
+        : JSON.stringify(snapshot[key]) === JSON.stringify(value));
+}
+function doQuery(snapshot, query, items) {
+    if (matches(snapshot, query)) {
+        if (items) {
+            items.add(snapshot);
+        }
+        else {
+            return snapshot;
+        }
+    }
+    else if (!snapshot.children) {
+        return null;
+    }
+    else {
+        for (const kid of snapshot.children) {
+            const result = doQuery(kid, query, items);
+            if (result) {
+                return result;
+            }
+        }
+    }
+    return null;
+}
+/**
+ * Deeply search an accessibility tree snapshot for an object matching your query
+ * @param snapshot the snapshot root to recurse through
+ * @param query object with properties matching the snapshot child you seek
+ */
+export function querySnapshot(snapshot, query) {
+    return doQuery(snapshot, query);
+}
+/**
+ * Deeply search an accessibility tree snapshot for all objects matching your query
+ * @param snapshot the snapshot root to recurse through
+ * @param query object with properties matching the snapshot children you seek
+ */
+export function querySnapshotAll(snapshot, query) {
+    const items = new Set();
+    doQuery(snapshot, query, items);
+    return [...items];
+}
+const internalsMap = new WeakMap();
+const attachInternalsOrig = HTMLElement.prototype.attachInternals;
+HTMLElement.prototype.attachInternals = function () {
+    const internals = attachInternalsOrig.call(this);
+    internalsMap.set(this, internals);
+    return internals;
+};
+function getElementLabelText(element) {
+    if (element.ariaLabel) {
+        return element.ariaLabel;
+    }
+    else {
+        const ariaLabelledByElements = element.ariaLabelledByElements
+            ?? internalsMap.get(element)?.ariaLabelledByElements;
+        return Array.from(ariaLabelledByElements ?? [], x => getElementLabelText(x) || x.textContent || '')
+            .join() || element.textContent || '';
+    }
+}
+function isSnapshot(obj) {
+    return obj instanceof Object && obj !== null && 'role' in obj;
+}
+function axTreeFocusOn(element, msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = this._obj;
+    if (!isSnapshot(snapshot)) {
+        throw new AssertionError(`axTreeFocusOn can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+    }
+    if (element == null || element === document.body) {
+        const focused = querySnapshot(snapshot, { focused: true });
+        this.assert(focused === null, `expected no element to have assistive technology focus`, `expected any element to have assistive technology focus`, null, focused);
+    }
+    else if (element instanceof Element) {
+        const focused = querySnapshot(snapshot, { focused: true });
+        const actualAXName = getElementLabelText(element).trim();
+        const [nodeSnapshotItem, ...others] = querySnapshotAll(snapshot, { name: actualAXName });
+        if (others.length) {
+            throw new AssertionError(`More than one ax tree node has name "${actualAXName}". axTreeFocusOn cannot produce a definitive assertion`, undefined, util.flag(this, 'ssfi'));
+        }
+        const focusedAXName = focused?.name;
+        const printable = util.inspect(element);
+        this.assert(focusedAXName?.trim() === actualAXName, `expected ${printable} to have assistive technology focus`, `expected ${printable} to not have assistive technology focus`, focused, nodeSnapshotItem);
+    }
+    else {
+        this.assert(false, `expected ${element} to be an Element`, `expected ${element} to not have assistive technology focus`, element);
+    }
+}
+function axTreeFocusedNode(msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = util.flag(this, 'object');
+    const focused = querySnapshot(snapshot, { focused: true });
+    this.assert(focused != null, `expected an element to have focus`, `expected no element to have focus`, null, focused);
+    util.flag(this, 'object', focused);
+}
+function makeAxPropCallback(propName, testName) {
+    return function (value, msg) {
+        util.flag(this, 'message', msg);
+        const snapshot = this._obj;
+        if (!isSnapshot(snapshot)) {
+            throw new AssertionError(`${testName} can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+        }
+        this.assert(snapshot[propName] === value, `expected element to have ${propName} "${value}"`, `expected element to not have ${propName} "${value}"`, value, snapshot[propName]);
+    };
+}
+function axProperty(propName, value, msg) {
+    makeAxPropCallback(propName, 'axProperty').call(this, value, msg);
+}
+function axContainName(name, msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = this._obj;
+    if (!isSnapshot(snapshot)) {
+        throw new AssertionError(`axContainName can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+    }
+    const named = querySnapshot(snapshot, { name });
+    this.assert(!!named, `expected to find element with assistive technology name ${name}`, `expected to not find element with assistive technology name ${name}`, name, named);
+}
+function axContainRole(role, msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = this._obj;
+    if (!isSnapshot(snapshot)) {
+        throw new AssertionError(`axRoleInTree can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+    }
+    const needle = querySnapshot(snapshot, { role });
+    this.assert(!!needle, `expected to find element with role "${role}"`, `expected to not find element with role "${role}"`, role, needle);
+}
+function axContainQuery(query, msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = this._obj;
+    if (!isSnapshot(snapshot)) {
+        throw new AssertionError(`axContainQuery can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+    }
+    const needle = querySnapshot(snapshot, query);
+    this.assert(!!needle, `expected to find element matching query "${util.inspect(query)}"`, `expected to not find element matching query "${util.inspect(query)}"`, query, snapshot);
+}
+function axQuery(query, msg) {
+    util.flag(this, 'message', msg);
+    const snapshot = this._obj;
+    if (!isSnapshot(snapshot)) {
+        throw new AssertionError(`axQuery can only assert on A11yTreeSnapshots`, undefined, util.flag(this, 'ssfi'));
+    }
+    const needle = querySnapshot(snapshot, query);
+    this.assert(!!needle, `expected to find element matching ${util.inspect(query)}`, `expected to not find element with role ${util.inspect(query)}`, query, needle);
+}
+chai.use(function () {
+    Assertion.addMethod('axContainName', axContainName);
+    Assertion.addMethod('axContainRole', axContainRole);
+    Assertion.addMethod('axContainQuery', axContainQuery);
+    Assertion.addMethod('axDescription', makeAxPropCallback('name', 'axDescription'));
+    Assertion.addMethod('axName', makeAxPropCallback('name', 'axName'));
+    Assertion.addMethod('axProperty', axProperty);
+    Assertion.addMethod('axQuery', axQuery);
+    Assertion.addMethod('axRole', makeAxPropCallback('role', 'axRole'));
+    Assertion.addMethod('axTreeFocusOn', axTreeFocusOn);
+    Assertion.addProperty('axTreeFocusedNode', axTreeFocusedNode);
+});
+//# sourceMappingURL=a11y-snapshot.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js.map b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js.map
new file mode 100644
index 0000000..cd81fbf
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/a11y-snapshot.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"a11y-snapshot.js","sourceRoot":"","sources":["a11y-snapshot.ts"],"names":[],"mappings":"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","sourcesContent":["import { chai } from '@open-wc/testing';\nimport { a11ySnapshot as snap } from '@web/test-runner-commands';\n\nconst {\n  Assertion,\n  AssertionError,\n  util,\n} = chai;\n\nexport interface A11yTreeSnapshot {\n  name: string;\n  role: string;\n  children?: A11yTreeSnapshot[];\n  checked?: boolean;\n  disabled?: boolean;\n  description?: string;\n  expanded?: boolean;\n  focused?: boolean;\n  haspopup?: string;\n  level?: number;\n  selected?: boolean;\n  value?: number;\n  valuetext?: string;\n  valuemin?: number;\n  valuemax?: number;\n}\n\n/**\n * @param payload e.g. { selector: 'pf-select' }\n */\nexport async function a11ySnapshot(\n  payload?: Parameters<typeof snap>[0]\n): Promise<A11yTreeSnapshot> {\n  let snapshot;\n  let tries = -1;\n  do {\n    await new Promise(requestAnimationFrame);\n    snapshot = await snap(payload ?? {}).catch(() => false) as unknown as A11yTreeSnapshot;\n    tries++;\n  } while (!snapshot && tries < 10);\n  return snapshot;\n}\n\ntype SnapshotQuery = Partial<Record<keyof A11yTreeSnapshot, string | boolean | number | RegExp>>;\n\nfunction matches(snapshot: A11yTreeSnapshot, query: SnapshotQuery) {\n  return Object.entries(query).every(([key, value]) =>\n      value instanceof RegExp ? value.test(snapshot[key as keyof typeof snapshot] as string)\n    : JSON.stringify(snapshot[key as keyof typeof snapshot]) === JSON.stringify(value));\n}\n\nfunction doQuery(\n  snapshot: A11yTreeSnapshot,\n  query: SnapshotQuery,\n  items?: Set<A11yTreeSnapshot>,\n): A11yTreeSnapshot | null {\n  if (matches(snapshot, query)) {\n    if (items) {\n      items.add(snapshot);\n    } else {\n      return snapshot;\n    }\n  } else if (!snapshot.children) {\n    return null;\n  } else {\n    for (const kid of snapshot.children) {\n      const result = doQuery(kid, query, items);\n      if (result) {\n        return result;\n      }\n    }\n  }\n  return null;\n}\n\n/**\n * Deeply search an accessibility tree snapshot for an object matching your query\n * @param snapshot the snapshot root to recurse through\n * @param query object with properties matching the snapshot child you seek\n */\nexport function querySnapshot(\n  snapshot: A11yTreeSnapshot,\n  query: SnapshotQuery,\n): A11yTreeSnapshot | null {\n  return doQuery(snapshot, query);\n}\n\n/**\n * Deeply search an accessibility tree snapshot for all objects matching your query\n * @param snapshot the snapshot root to recurse through\n * @param query object with properties matching the snapshot children you seek\n */\nexport function querySnapshotAll(\n  snapshot: A11yTreeSnapshot,\n  query: SnapshotQuery,\n): A11yTreeSnapshot[] {\n  const items = new Set<A11yTreeSnapshot>();\n  doQuery(snapshot, query, items);\n  return [...items];\n}\n\n/** @see https://w3c.github.io/aria/#ref-for-dom-ariamixin-ariaactivedescendantelement-1 */\ndeclare global {\n  interface ARIAMixin {\n    ariaActiveDescendantElement: Element | null;\n    ariaControlsElements: readonly Element[] | null;\n    ariaDescribedByElements: readonly Element[] | null;\n    ariaDetailsElements: readonly Element[] | null;\n    ariaErrorMessageElements: readonly Element[] | null;\n    ariaFlowToElements: readonly Element[] | null;\n    ariaLabelledByElements: readonly Element[] | null;\n    ariaOwnsElements: readonly Element[] | null;\n  }\n}\n\nconst internalsMap = new WeakMap();\nconst attachInternalsOrig = HTMLElement.prototype.attachInternals;\nHTMLElement.prototype.attachInternals = function() {\n  const internals = attachInternalsOrig.call(this);\n  internalsMap.set(this, internals);\n  return internals;\n};\n\nfunction getElementLabelText(element: Element): string {\n  if (element.ariaLabel) {\n    return element.ariaLabel;\n  } else {\n    const ariaLabelledByElements: Element[] = element.ariaLabelledByElements\n                        ?? internalsMap.get(element)?.ariaLabelledByElements;\n    return Array.from(ariaLabelledByElements ?? [], x =>\n      getElementLabelText(x) || x.textContent || '')\n        .join() || element.textContent || '';\n  }\n}\n\nfunction isSnapshot(obj: unknown): obj is A11yTreeSnapshot {\n  return obj instanceof Object && obj !== null && 'role' in obj;\n}\n\nfunction axTreeFocusOn(\n  this: Chai.AssertionPrototype,\n  element: Element,\n  msg?: string,\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = this._obj as A11yTreeSnapshot;\n  if (!isSnapshot(snapshot)) {\n    throw new AssertionError(`axTreeFocusOn can only assert on A11yTreeSnapshots`,\n                             undefined,\n                             util.flag(this, 'ssfi'));\n  }\n  if (element == null || element === document.body) {\n    const focused = querySnapshot(snapshot, { focused: true });\n    this.assert(\n      focused === null,\n      `expected no element to have assistive technology focus`,\n      `expected any element to have assistive technology focus`,\n      null,\n      focused,\n    );\n  } else if (element instanceof Element) {\n    const focused = querySnapshot(snapshot, { focused: true });\n    const actualAXName = getElementLabelText(element).trim();\n    const [nodeSnapshotItem, ...others] = querySnapshotAll(snapshot, { name: actualAXName });\n    if (others.length) {\n      throw new AssertionError(\n        `More than one ax tree node has name \"${actualAXName}\". axTreeFocusOn cannot produce a definitive assertion`,\n        undefined,\n        util.flag(this, 'ssfi')\n      );\n    }\n    const focusedAXName = focused?.name;\n    const printable = util.inspect(element);\n    this.assert(\n      focusedAXName?.trim() === actualAXName,\n      `expected ${printable} to have assistive technology focus`,\n      `expected ${printable} to not have assistive technology focus`,\n      focused,\n      nodeSnapshotItem,\n    );\n  } else {\n    this.assert(\n      false,\n      `expected ${element} to be an Element`,\n      `expected ${element} to not have assistive technology focus`,\n      element\n    );\n  }\n}\n\nfunction axTreeFocusedNode(\n  this: Chai.AssertionPrototype,\n  msg?: string,\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = util.flag(this, 'object') as A11yTreeSnapshot;\n  const focused = querySnapshot(snapshot, { focused: true });\n  this.assert(\n    focused != null,\n    `expected an element to have focus`,\n    `expected no element to have focus`,\n    null,\n    focused,\n  );\n  util.flag(this, 'object', focused);\n}\n\nfunction makeAxPropCallback(\n  propName: keyof A11yTreeSnapshot,\n  testName: `ax${string}`,\n) {\n  return function(\n    this: Chai.AssertionPrototype,\n    value: A11yTreeSnapshot[keyof A11yTreeSnapshot],\n    msg?: string,\n  ) {\n    util.flag(this, 'message', msg);\n    const snapshot = this._obj as A11yTreeSnapshot;\n    if (!isSnapshot(snapshot)) {\n      throw new AssertionError(`${testName} can only assert on A11yTreeSnapshots`,\n                               undefined,\n                               util.flag(this, 'ssfi'));\n    }\n    this.assert(snapshot[propName] === value,\n                `expected element to have ${propName} \"${value}\"`,\n                `expected element to not have ${propName} \"${value}\"`,\n                value,\n                snapshot[propName],\n    );\n  };\n}\n\nfunction axProperty(\n  this: Chai.AssertionPrototype,\n  propName: keyof A11yTreeSnapshot,\n  value: A11yTreeSnapshot[keyof A11yTreeSnapshot],\n  msg?: string\n) {\n  makeAxPropCallback(propName, 'axProperty').call(this, value, msg);\n}\n\nfunction axContainName(\n  this: Chai.AssertionPrototype,\n  name: string,\n  msg?: string\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = this._obj as A11yTreeSnapshot;\n  if (!isSnapshot(snapshot)) {\n    throw new AssertionError(`axContainName can only assert on A11yTreeSnapshots`,\n                             undefined,\n                             util.flag(this, 'ssfi'));\n  }\n  const named = querySnapshot(snapshot, { name });\n  this.assert(\n    !!named,\n    `expected to find element with assistive technology name ${name}`,\n    `expected to not find element with assistive technology name ${name}`,\n    name,\n    named,\n  );\n}\n\nfunction axContainRole(\n  this: Chai.AssertionPrototype,\n  role: string,\n  msg?: string\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = this._obj as A11yTreeSnapshot;\n  if (!isSnapshot(snapshot)) {\n    throw new AssertionError(`axRoleInTree can only assert on A11yTreeSnapshots`,\n                             undefined,\n                             util.flag(this, 'ssfi'));\n  }\n  const needle = querySnapshot(snapshot, { role });\n  this.assert(!!needle,\n              `expected to find element with role \"${role}\"`,\n              `expected to not find element with role \"${role}\"`,\n              role, needle);\n}\n\nfunction axContainQuery(\n  this: Chai.AssertionPrototype,\n  query: SnapshotQuery,\n  msg?: string\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = this._obj as A11yTreeSnapshot;\n  if (!isSnapshot(snapshot)) {\n    throw new AssertionError(`axContainQuery can only assert on A11yTreeSnapshots`,\n                             undefined,\n                             util.flag(this, 'ssfi'));\n  }\n  const needle = querySnapshot(snapshot, query);\n  this.assert(!!needle,\n              `expected to find element matching query \"${util.inspect(query)}\"`,\n              `expected to not find element matching query \"${util.inspect(query)}\"`,\n              query, snapshot);\n}\n\nfunction axQuery(\n  this: Chai.AssertionPrototype,\n  query: SnapshotQuery,\n  msg?: string\n) {\n  util.flag(this, 'message', msg);\n  const snapshot = this._obj as A11yTreeSnapshot;\n  if (!isSnapshot(snapshot)) {\n    throw new AssertionError(`axQuery can only assert on A11yTreeSnapshots`,\n                             undefined,\n                             util.flag(this, 'ssfi'));\n  }\n  const needle = querySnapshot(snapshot, query);\n  this.assert(!!needle,\n              `expected to find element matching ${util.inspect(query)}`,\n              `expected to not find element with role ${util.inspect(query)}`,\n              query, needle);\n}\n\nchai.use(function() {\n  Assertion.addMethod('axContainName', axContainName);\n  Assertion.addMethod('axContainRole', axContainRole);\n  Assertion.addMethod('axContainQuery', axContainQuery);\n  Assertion.addMethod('axDescription', makeAxPropCallback('name', 'axDescription'));\n  Assertion.addMethod('axName', makeAxPropCallback('name', 'axName'));\n  Assertion.addMethod('axProperty', axProperty);\n  Assertion.addMethod('axQuery', axQuery);\n  Assertion.addMethod('axRole', makeAxPropCallback('role', 'axRole'));\n  Assertion.addMethod('axTreeFocusOn', axTreeFocusOn);\n  Assertion.addProperty('axTreeFocusedNode', axTreeFocusedNode);\n});\n\n\ndeclare global {\n  // That's just the way the chai boils\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Chai {\n    interface Assertion {\n      /** Assert that the a11ySnapshot contains a node with the given name */\n      axContainName(name: string, msg?: string): Assertion;\n      /** Assert that a given role exists in the ax tree */\n      axContainRole(role: string, msg?: string): Assertion;\n      /** Assert that a node matching a given query object exists in the ax tree */\n      axContainQuery(query: SnapshotQuery, msg?: string): Assertion;\n      /**\n       * Assert that an AX Tree node that matches the query object exists in the tre\n       */\n      axQuery(query: SnapshotQuery, msg?: string): Assertion;\n      /**\n       * Assert that the a11ySnapshot shows that a given element has focus.\n       * This assertion ultimately matches on the accessible name of the given element,\n       * so test authors must ensure that every element has a unique accessible name\n       * (i.e. aria-label or textContent).\n       */\n      axTreeFocusOn(element?: Element | null, msg?: string): Assertion;\n      /**\n       * Assert that the a11ySnapshot shows that a given element has focus.\n       * This assertion ultimately matches on the accessible name of the given element,\n       * so test authors must ensure that every element has a unique accessible name\n       * (i.e. aria-label or textContent).\n       */\n      axTreeFocusedNode: Assertion;\n      /** Assert that an AX Tree node has a given role */\n      axRole(role: string, msg?: string): Assertion;\n      /** Assert that an AX Tree node has a given name */\n      axName(role: string, msg?: string): Assertion;\n      /** Assert that an AX Tree node has a given description */\n      axDescription(description: string, msg?: string): Assertion;\n      /** Assert that an AX Tree node has a given property with a given value */\n      axProperty(\n        propName: keyof A11yTreeSnapshot,\n        value: A11yTreeSnapshot[keyof A11yTreeSnapshot],\n        msg?: string,\n      ): Assertion;\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/config.d.ts b/node_modules/@patternfly/pfe-tools/package/test/config.d.ts
new file mode 100644
index 0000000..806bce0
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/config.d.ts
@@ -0,0 +1,10 @@
+import type { TestRunnerConfig } from '@web/test-runner';
+import { type PfeDevServerConfigOptions } from '../dev-server/config.js';
+export interface PfeTestRunnerConfigOptions extends PfeDevServerConfigOptions {
+    files?: string[];
+    reporter?: 'summary' | 'junit' | 'default';
+}
+/**
+ * @param opts test runner options
+ */
+export declare function pfeTestRunnerConfig(opts: PfeTestRunnerConfigOptions): TestRunnerConfig;
diff --git a/node_modules/@patternfly/pfe-tools/package/test/config.js b/node_modules/@patternfly/pfe-tools/package/test/config.js
new file mode 100644
index 0000000..257d18b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/config.js
@@ -0,0 +1,109 @@
+import { stat } from 'node:fs/promises';
+import { playwrightLauncher } from '@web/test-runner-playwright';
+import { summaryReporter, defaultReporter } from '@web/test-runner';
+import { junitReporter } from '@web/test-runner-junit-reporter';
+import { a11ySnapshotPlugin } from '@web/test-runner-commands/plugins';
+import { pfeDevServerConfig } from '../dev-server/config.js';
+import { getPfeConfig } from '../config.js';
+const isWatchMode = process.argv.some(x => x.match(/-w|--watch/));
+const testRunnerHtml = testFramework => /* html */ `
+  <html>
+    <head>
+      <meta name="viewport" content="width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes">
+      <script type="importmap">
+      {
+        "imports": {
+          "@patternfly/icons/": "/node_modules/@patternfly/icons/"
+        }
+      }
+      </script>
+    </head>
+    <body>
+      <script type="module" src="${testFramework}"></script>
+    </body>
+  </html>
+`;
+const exists = async (path) => {
+    try {
+        await stat(path);
+        return true;
+    }
+    catch {
+        return false;
+    }
+};
+/**
+ * @param opts test runner options
+ */
+export function pfeTestRunnerConfig(opts) {
+    const { open, ...devServerConfig } = pfeDevServerConfig({ ...opts, loadDemo: false });
+    const { elementsDir, tagPrefix } = getPfeConfig();
+    const configuredReporter = opts.reporter ?? 'default';
+    const reporters = configuredReporter === 'summary' && isWatchMode ? [
+        summaryReporter({ flatten: !!process.env.CI }),
+        defaultReporter(),
+    ] : configuredReporter === 'summary' ? [
+        summaryReporter({ flatten: !!process.env.CI }),
+    ] : [
+        defaultReporter(),
+    ];
+    if (process.env.CI) {
+        reporters.push(junitReporter({
+            outputPath: './test-results/test-results.xml',
+            reportLogs: true,
+        }));
+    }
+    return {
+        ...devServerConfig,
+        nodeResolve: {
+            exportConditions: ['production'],
+        },
+        files: [
+            '**/*.spec.ts',
+            '!**/*.e2e.ts',
+            ...opts.files ?? [],
+            '!**/node_modules/**/*',
+            '!**/_site/**/*',
+        ],
+        browsers: [
+            playwrightLauncher({
+                createBrowserContext: async ({ browser }) => {
+                    const context = await browser.newContext();
+                    // grant permissions to access the users clipboard
+                    await context.grantPermissions(['clipboard-read', 'clipboard-write']);
+                    return context;
+                },
+            }),
+        ],
+        testFramework: {
+            config: {
+                ui: 'bdd',
+            },
+        },
+        testRunnerHtml,
+        reporters,
+        plugins: [
+            ...devServerConfig.plugins ?? [],
+            ...opts.plugins ?? [],
+            a11ySnapshotPlugin(),
+        ],
+        middleware: [
+            /**
+             * redirect `.js` to `.ts` when the typescript source exists
+             * @param ctx koa context
+             * @param next next middleware
+             */
+            async function (ctx, next) {
+                if (ctx.path.endsWith('.js')
+                    && ctx.path.startsWith(`/${elementsDir}/${tagPrefix}-`)
+                    && await exists(`./${ctx.path}`.replace('.js', '.ts').replace('//', '/'))) {
+                    ctx.redirect(ctx.path.replace('.js', '.ts'));
+                }
+                else {
+                    return next();
+                }
+            },
+        ],
+    };
+}
+//# sourceMappingURL=config.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/config.js.map b/node_modules/@patternfly/pfe-tools/package/test/config.js.map
new file mode 100644
index 0000000..a54d1cd
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/config.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"config.js","sourceRoot":"","sources":["config.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TestRunnerConfig } from '@web/test-runner';\n\nimport { stat } from 'node:fs/promises';\nimport { playwrightLauncher } from '@web/test-runner-playwright';\nimport { summaryReporter, defaultReporter } from '@web/test-runner';\nimport { junitReporter } from '@web/test-runner-junit-reporter';\nimport { a11ySnapshotPlugin } from '@web/test-runner-commands/plugins';\n\nimport { pfeDevServerConfig, type PfeDevServerConfigOptions } from '../dev-server/config.js';\nimport { getPfeConfig } from '../config.js';\n\nexport interface PfeTestRunnerConfigOptions extends PfeDevServerConfigOptions {\n  files?: string[];\n  reporter?: 'summary' | 'junit' | 'default';\n}\n\nconst isWatchMode = process.argv.some(x => x.match(/-w|--watch/));\n\nconst testRunnerHtml: TestRunnerConfig['testRunnerHtml'] = testFramework => /* html */`\n  <html>\n    <head>\n      <meta name=\"viewport\" content=\"width=device-width, minimum-scale=1.0, initial-scale=1.0, user-scalable=yes\">\n      <script type=\"importmap\">\n      {\n        \"imports\": {\n          \"@patternfly/icons/\": \"/node_modules/@patternfly/icons/\"\n        }\n      }\n      </script>\n    </head>\n    <body>\n      <script type=\"module\" src=\"${testFramework}\"></script>\n    </body>\n  </html>\n`;\n\nconst exists = async (path: string | URL) => {\n  try {\n    await stat(path);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * @param opts test runner options\n */\nexport function pfeTestRunnerConfig(opts: PfeTestRunnerConfigOptions): TestRunnerConfig {\n  const { open, ...devServerConfig } = pfeDevServerConfig({ ...opts, loadDemo: false });\n\n  const { elementsDir, tagPrefix } = getPfeConfig();\n\n  const configuredReporter = opts.reporter ?? 'default';\n\n  const reporters = configuredReporter === 'summary' && isWatchMode ? [\n    summaryReporter({ flatten: !!process.env.CI }),\n    defaultReporter(),\n  ] : configuredReporter === 'summary' ? [\n    summaryReporter({ flatten: !!process.env.CI }),\n  ] : [\n    defaultReporter(),\n  ];\n\n  if (process.env.CI) {\n    reporters.push(\n      junitReporter({\n        outputPath: './test-results/test-results.xml',\n        reportLogs: true,\n      })\n    );\n  }\n\n  return {\n    ...devServerConfig,\n    nodeResolve: {\n      exportConditions: ['production'],\n    },\n    files: [\n      '**/*.spec.ts',\n      '!**/*.e2e.ts',\n      ...opts.files ?? [],\n      '!**/node_modules/**/*',\n      '!**/_site/**/*',\n    ],\n    browsers: [\n      playwrightLauncher({\n        createBrowserContext: async ({ browser }) => {\n          const context = await browser.newContext();\n          // grant permissions to access the users clipboard\n          await context.grantPermissions(['clipboard-read', 'clipboard-write']);\n          return context;\n        },\n      }),\n    ],\n    testFramework: {\n      config: {\n        ui: 'bdd',\n      },\n    },\n    testRunnerHtml,\n    reporters,\n    plugins: [\n      ...devServerConfig.plugins ?? [],\n      ...opts.plugins ?? [],\n      a11ySnapshotPlugin(),\n    ],\n    middleware: [\n      /**\n       * redirect `.js` to `.ts` when the typescript source exists\n       * @param ctx koa context\n       * @param next next middleware\n       */\n      async function(ctx, next) {\n        if (ctx.path.endsWith('.js')\n            && ctx.path.startsWith(`/${elementsDir}/${tagPrefix}-`)\n            && await exists(`./${ctx.path}`.replace('.js', '.ts').replace('//', '/'))) {\n          ctx.redirect(ctx.path.replace('.js', '.ts'));\n        } else {\n          return next();\n        }\n      },\n    ],\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/create-fixture.d.ts b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.d.ts
new file mode 100644
index 0000000..e8d6a66
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.d.ts
@@ -0,0 +1,21 @@
+import type { TemplateResult } from 'lit';
+/**
+ * Creates a new testing fixture.
+ *
+ * - If React is available the fixture will be wrapped in a React app.
+ * - By default standard a fixture will be created using lit html.
+ * @param code The element code you'd like to generate a fixture for.
+ * @returns  Returns the new web component fixture rendered and ready for tests.
+ */
+export declare function createFixture<T extends Element = HTMLElement>(code: string | TemplateResult): Promise<T>;
+declare global {
+    namespace Chai {
+        interface Assertion {
+            /**
+             * Given a CSS color string, assert that it matches the expected value.
+             * Color strings are normalized using colorjs.io
+             */
+            colored(expected: string, msg?: string): void;
+        }
+    }
+}
diff --git a/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js
new file mode 100644
index 0000000..ae2c69d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js
@@ -0,0 +1,26 @@
+import { chai, fixtureCleanup, fixture } from '@open-wc/testing';
+import Color from 'colorjs.io';
+/**
+ * Creates a new testing fixture.
+ *
+ * - If React is available the fixture will be wrapped in a React app.
+ * - By default standard a fixture will be created using lit html.
+ * @param code The element code you'd like to generate a fixture for.
+ * @returns  Returns the new web component fixture rendered and ready for tests.
+ */
+export async function createFixture(code) {
+    beforeEach(fixtureCleanup);
+    return fixture(code);
+}
+chai.use(function (_chai) {
+    _chai.Assertion.addMethod('colored', function (expected, msg) {
+        const actual = this._obj;
+        const actualParsed = new Color(actual);
+        const expectParsed = new Color(expected);
+        const actualNormalized = actualParsed.toString({ format: 'hex' });
+        const expectNormalized = expectParsed.toString({ format: 'hex' });
+        const message = msg ? `${msg} ` : '';
+        this.assert(actualNormalized === expectNormalized, `expected ${message}#{act} to be the same color as #{exp}`, `expected ${message}#{act} to be a different color than #{exp}`, expectNormalized, actualNormalized);
+    });
+});
+//# sourceMappingURL=create-fixture.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js.map b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js.map
new file mode 100644
index 0000000..97692c5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/create-fixture.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-fixture.js","sourceRoot":"","sources":["create-fixture.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AACjE,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CACjC,IAA6B;IAE7B,UAAU,CAAC,cAAc,CAAC,CAAC;IAC3B,OAAO,OAAO,CAAI,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,IAAI,CAAC,GAAG,CAAC,UAAS,KAAK;IACrB,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,EAAE,UAEnC,QAAQ,EACR,GAAY;QAEZ,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC;QACzB,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAClE,MAAM,gBAAgB,GAAG,YAAY,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAClE,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QACrC,IAAI,CAAC,MAAM,CACT,gBAAgB,KAAK,gBAAgB,EACrC,YAAY,OAAO,uCAAuC,EAC1D,YAAY,OAAO,4CAA4C,EAC/D,gBAAgB,EAChB,gBAAgB,CACjB,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import type { TemplateResult } from 'lit';\nimport { chai, fixtureCleanup, fixture } from '@open-wc/testing';\nimport Color from 'colorjs.io';\n\n/**\n * Creates a new testing fixture.\n *\n * - If React is available the fixture will be wrapped in a React app.\n * - By default standard a fixture will be created using lit html.\n * @param code The element code you'd like to generate a fixture for.\n * @returns  Returns the new web component fixture rendered and ready for tests.\n */\nexport async function createFixture<T extends Element = HTMLElement>(\n  code: string | TemplateResult\n): Promise<T> {\n  beforeEach(fixtureCleanup);\n  return fixture<T>(code);\n}\n\nchai.use(function(_chai) {\n  _chai.Assertion.addMethod('colored', function(\n    this: Chai.AssertionPrototype,\n    expected,\n    msg?: string,\n  ) {\n    const actual = this._obj;\n    const actualParsed = new Color(actual);\n    const expectParsed = new Color(expected);\n    const actualNormalized = actualParsed.toString({ format: 'hex' });\n    const expectNormalized = expectParsed.toString({ format: 'hex' });\n    const message = msg ? `${msg} ` : '';\n    this.assert(\n      actualNormalized === expectNormalized,\n      `expected ${message}#{act} to be the same color as #{exp}`,\n      `expected ${message}#{act} to be a different color than #{exp}`,\n      expectNormalized,\n      actualNormalized\n    );\n  });\n});\n\n\ndeclare global {\n  // That's just the way the chai boils\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  namespace Chai {\n    interface Assertion {\n      /**\n       * Given a CSS color string, assert that it matches the expected value.\n       * Color strings are normalized using colorjs.io\n       */\n      colored(expected: string, msg?: string): void;\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.d.ts b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.d.ts
new file mode 100644
index 0000000..35963ef
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.d.ts
@@ -0,0 +1,6 @@
+/**
+ * Gets the composed text content of an element via the Selection API
+ * WARNING: this is not reliable, should be improved with a treewalker
+ * @param node node to get text
+ */
+export declare function getComposedText(node: Node): string;
diff --git a/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js
new file mode 100644
index 0000000..216be11
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js
@@ -0,0 +1,11 @@
+/**
+ * Gets the composed text content of an element via the Selection API
+ * WARNING: this is not reliable, should be improved with a treewalker
+ * @param node node to get text
+ */
+export function getComposedText(node) {
+    const range = new Range();
+    range.selectNodeContents(node);
+    return range.toString();
+}
+//# sourceMappingURL=get-composed-text.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js.map b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js.map
new file mode 100644
index 0000000..a0ad6ba
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/get-composed-text.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-composed-text.js","sourceRoot":"","sources":["get-composed-text.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAAC,IAAU;IACxC,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;IAC1B,KAAK,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAC/B,OAAO,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * Gets the composed text content of an element via the Selection API\n * WARNING: this is not reliable, should be improved with a treewalker\n * @param node node to get text\n */\nexport function getComposedText(node: Node): string {\n  const range = new Range();\n  range.selectNodeContents(node);\n  return range.toString();\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.d.ts b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.d.ts
new file mode 100644
index 0000000..457d04d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.d.ts
@@ -0,0 +1,13 @@
+type RGBTuple = [R: number, G: number, B: number, A?: number];
+/**
+ * Converts a hex value to RGBA
+ * @param hex css hex value e.g. #c0f3f300
+ */
+export declare const hexToRgb: (hex: string) => RGBTuple;
+/**
+ * Gets the rgba value from an element's css property
+ * @param el element to query
+ * @param prop css property on the element
+ */
+export declare const getColor: (el: Element, prop: string) => RGBTuple;
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js
new file mode 100644
index 0000000..6effed1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js
@@ -0,0 +1,28 @@
+/**
+ * Converts a hex value to RGBA
+ * @param hex css hex value e.g. #c0f3f300
+ */
+export const hexToRgb = (hex) => {
+    const [, r, g, b, a] = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?/.exec(hex) ?? [];
+    const NOTHING = Symbol();
+    const values = [
+        parseInt(r, 16),
+        parseInt(g, 16),
+        parseInt(b, 16),
+        (typeof a === 'string' && a.length) ? parseInt(a, 16) : NOTHING,
+    ];
+    return values.filter(x => x !== NOTHING);
+};
+/**
+ * Gets the rgba value from an element's css property
+ * @param el element to query
+ * @param prop css property on the element
+ */
+export const getColor = (el, prop) => {
+    const [, r, g, b] = (getComputedStyle(el, null)
+        .getPropertyValue(prop)
+        .match(/rgba?\((\d+),\s+(\d+),\s+(\d+).*\)/) ?? [])
+        .map(n => +n);
+    return [r, g, b];
+};
+//# sourceMappingURL=hex-to-rgb.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js.map b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js.map
new file mode 100644
index 0000000..27b7a1f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/hex-to-rgb.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"hex-to-rgb.js","sourceRoot":"","sources":["hex-to-rgb.ts"],"names":[],"mappings":"AAEA;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,GAAW,EAAY,EAAE;IAChD,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,sDAAsD,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;IAC9F,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC;IACzB,MAAM,MAAM,GAAsD;QAChE,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;QACf,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;QACf,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;QACf,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO;KAChE,CAAC;IACF,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,OAAO,CAAa,CAAC;AACvD,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,EAAW,EAAE,IAAY,EAAY,EAAE;IAC9D,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC;SAC1C,gBAAgB,CAAC,IAAI,CAAC;SACtB,KAAK,CAAC,oCAAoC,CAAC,IAAI,EAAE,CAAC;SAClD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACnB,CAAC,CAAC","sourcesContent":["type RGBTuple = [R: number, G: number, B: number, A?: number];\n\n/**\n * Converts a hex value to RGBA\n * @param hex css hex value e.g. #c0f3f300\n */\nexport const hexToRgb = (hex: string): RGBTuple => {\n  const [, r, g, b, a] = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?/.exec(hex) ?? [];\n  const NOTHING = Symbol();\n  const values: [number, number, number, number | typeof NOTHING] = [\n    parseInt(r, 16),\n    parseInt(g, 16),\n    parseInt(b, 16),\n    (typeof a === 'string' && a.length) ? parseInt(a, 16) : NOTHING,\n  ];\n  return values.filter(x => x !== NOTHING) as RGBTuple;\n};\n\n/**\n * Gets the rgba value from an element's css property\n * @param el element to query\n * @param prop css property on the element\n */\nexport const getColor = (el: Element, prop: string): RGBTuple => {\n  const [, r, g, b] = (getComputedStyle(el, null)\n      .getPropertyValue(prop)\n      .match(/rgba?\\((\\d+),\\s+(\\d+),\\s+(\\d+).*\\)/) ?? [])\n      .map(n => +n);\n  return [r, g, b];\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.d.ts b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.d.ts
new file mode 100644
index 0000000..f571b36
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.d.ts
@@ -0,0 +1,36 @@
+import type { Page } from '@playwright/test';
+interface NavigateOptions {
+    selector: string;
+}
+export declare class PfeDemoPage {
+    readonly page: Page;
+    readonly tagName: string;
+    readonly workspace: string;
+    private origin;
+    constructor(page: Page, tagName?: string, workspace?: string);
+    navigate({ selector }?: NavigateOptions): Promise<void>;
+    navigate(pathname?: string): Promise<void>;
+    /**
+     * Focus the first instance of the element, or a given selector,
+     * then wait for the element's updateComplete
+     * @param [selector=this.tagName]
+     */
+    focus(selector?: string): Promise<void>;
+    /**
+     * Click the first instance of the element, or a given selector,
+     * then wait for the element's updateComplete
+     * @param [selector=this.tagName]
+     */
+    click(selector?: string): Promise<void>;
+    /**
+     * Wait for the element, or a given selector, to update
+     * @param [selector=this.tagName]
+     */
+    updateComplete(selector?: string): Promise<void>;
+    /**
+     * Take a snapshot and save it to disk
+     * @param name optional snapshot name
+     */
+    snapshot(name?: string): Promise<void>;
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js
new file mode 100644
index 0000000..e29a423
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js
@@ -0,0 +1,74 @@
+import { URL } from 'url';
+import { expect } from '@playwright/test';
+export class PfeDemoPage {
+    constructor(page, tagName = '', workspace = 'components') {
+        this.page = page;
+        this.tagName = tagName;
+        this.workspace = workspace;
+        this.origin = process.env.VISUAL_REGRESSION_ORIGIN ?? 'http://localhost:8080';
+    }
+    async navigate(pathnameOrOptions) {
+        const selectorOverride = typeof pathnameOrOptions === 'string' ? undefined
+            : pathnameOrOptions?.selector;
+        const pathname = typeof pathnameOrOptions === 'string' ? pathnameOrOptions
+            : `${this.workspace}/${this.tagName.replace('pf-', '')}/demo`;
+        const url = new URL(pathname, this.origin).toString();
+        // eslint-disable-next-line no-console
+        console.log(`NAVIGATING to ${url}`);
+        await this.page.goto(url, { waitUntil: 'networkidle' });
+        while (await this.page.innerText('body') === 'Not Found') {
+            await this.page.goto(url, { waitUntil: 'networkidle' });
+        }
+        await this.page.waitForLoadState('domcontentloaded');
+        await this.page.$$eval('*', async (els) => await Promise.all(Array.from(els)
+            .filter(x => x.localName.startsWith('pf-'))
+            .map(x => customElements.whenDefined(x.localName)
+            .then(() => x?.updateComplete))));
+        await this.updateComplete(selectorOverride);
+        await this.page.waitForTimeout(100);
+    }
+    /**
+     * Focus the first instance of the element, or a given selector,
+     * then wait for the element's updateComplete
+     * @param [selector=this.tagName]
+     */
+    async focus(selector = this.tagName) {
+        await this.page.$eval(selector, el => el.focus());
+        await this.updateComplete(selector);
+    }
+    /**
+     * Click the first instance of the element, or a given selector,
+     * then wait for the element's updateComplete
+     * @param [selector=this.tagName]
+     */
+    async click(selector = this.tagName) {
+        await this.page.$eval(selector, (el) => el.click());
+        await this.updateComplete(selector);
+    }
+    /**
+     * Wait for the element, or a given selector, to update
+     * @param [selector=this.tagName]
+     */
+    async updateComplete(selector = this.tagName) {
+        await this.page.waitForLoadState('domcontentloaded');
+        await this.page.waitForLoadState('networkidle');
+        if (selector) {
+            try {
+                await this.page.$eval(selector, async (el) => el.updateComplete);
+            }
+            catch {
+                // eslint-disable-next-line no-console
+                console.log(await this.page.innerHTML('body'));
+            }
+        }
+    }
+    /**
+     * Take a snapshot and save it to disk
+     * @param name optional snapshot name
+     */
+    async snapshot(name) {
+        const snapshotName = `${this.tagName}${name ? `-${name}` : ''}`;
+        expect(await this.page.screenshot({ fullPage: true })).toMatchSnapshot(`${snapshotName}.png`);
+    }
+}
+//# sourceMappingURL=PfeDemoPage.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js.map b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js.map
new file mode 100644
index 0000000..f7ccae2
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/PfeDemoPage.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"PfeDemoPage.js","sourceRoot":"","sources":["PfeDemoPage.ts"],"names":[],"mappings":"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","sourcesContent":["import type { LitElement } from 'lit';\nimport type { Page } from '@playwright/test';\n\nimport { URL } from 'url';\nimport { expect } from '@playwright/test';\n\ninterface NavigateOptions {\n  selector: string;\n}\n\nexport class PfeDemoPage {\n  private origin = process.env.VISUAL_REGRESSION_ORIGIN ?? 'http://localhost:8080';\n\n  constructor(\n    public readonly page: Page,\n    public readonly tagName = '',\n    public readonly workspace = 'components',\n  ) {\n  }\n\n  async navigate({ selector }?: NavigateOptions): Promise<void>;\n  async navigate(pathname?: string): Promise<void>;\n  async navigate(pathnameOrOptions?: string | NavigateOptions): Promise<void> {\n    const selectorOverride =\n        typeof pathnameOrOptions === 'string' ? undefined\n      : pathnameOrOptions?.selector;\n    const pathname =\n        typeof pathnameOrOptions === 'string' ? pathnameOrOptions\n      : `${this.workspace}/${this.tagName.replace('pf-', '')}/demo`;\n    const url = new URL(pathname, this.origin).toString();\n    // eslint-disable-next-line no-console\n    console.log(`NAVIGATING to ${url}`);\n    await this.page.goto(url, { waitUntil: 'networkidle' });\n    while (await this.page.innerText('body') === 'Not Found') {\n      await this.page.goto(url, { waitUntil: 'networkidle' });\n    }\n    await this.page.waitForLoadState('domcontentloaded');\n    await this.page.$$eval('*', async els =>\n      await Promise.all(Array.from(els)\n          .filter(x => x.localName.startsWith('pf-'))\n          .map(x => customElements.whenDefined(x.localName)\n              .then(() =>\n                (x as LitElement)?.updateComplete))));\n    await this.updateComplete(selectorOverride);\n    await this.page.waitForTimeout(100);\n  }\n\n  /**\n   * Focus the first instance of the element, or a given selector,\n   * then wait for the element's updateComplete\n   * @param [selector=this.tagName]\n   */\n  async focus(selector: string = this.tagName): Promise<void> {\n    await this.page.$eval(selector, el => el.focus());\n    await this.updateComplete(selector);\n  }\n\n  /**\n   * Click the first instance of the element, or a given selector,\n   * then wait for the element's updateComplete\n   * @param [selector=this.tagName]\n   */\n  async click(selector: string = this.tagName): Promise<void> {\n    await this.page.$eval(selector, (el: HTMLElement) => el.click());\n    await this.updateComplete(selector);\n  }\n\n  /**\n   * Wait for the element, or a given selector, to update\n   * @param [selector=this.tagName]\n   */\n  async updateComplete(selector: string = this.tagName): Promise<void> {\n    await this.page.waitForLoadState('domcontentloaded');\n    await this.page.waitForLoadState('networkidle');\n    if (selector) {\n      try {\n        await this.page.$eval(selector, async (el: LitElement) => el.updateComplete);\n      } catch {\n        // eslint-disable-next-line no-console\n        console.log(await this.page.innerHTML('body'));\n      }\n    }\n  }\n\n  /**\n   * Take a snapshot and save it to disk\n   * @param name optional snapshot name\n   */\n  async snapshot(name?: string): Promise<void> {\n    const snapshotName = `${this.tagName}${name ? `-${name}` : ''}`;\n    expect(await this.page.screenshot({ fullPage: true })).toMatchSnapshot(`${snapshotName}.png`);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.d.ts b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.d.ts
new file mode 100644
index 0000000..f0f1cc1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.d.ts
@@ -0,0 +1,36 @@
+import type { Browser, Page } from '@playwright/test';
+interface SSRPageConfig {
+    demoDir?: URL;
+    demoContent?: string;
+    importSpecifiers: string[];
+    tagName: string;
+    browser: Browser;
+}
+/**
+ * Creates a server which server-renders each html file in the `demoDir` directory,
+ * given a list of importSpecifiers.
+ */
+export declare class SSRPage {
+    private config;
+    private app;
+    private server;
+    private host;
+    private demoPaths;
+    page: Page;
+    constructor(config: SSRPageConfig);
+    private middleware;
+    private initPage;
+    private initServer;
+    private close;
+    /**
+     * Take a visual regression snapshot and save it to disk
+     * @param url url to the demo file
+     */
+    private snapshot;
+    /**
+     * Creates visual regression snapshots for each demo in the server's `demoDir`
+     */
+    snapshots(): Promise<void>;
+    updateCompleteFor(tagName: string): Promise<void>;
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js
new file mode 100644
index 0000000..f1a2c12
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js
@@ -0,0 +1,122 @@
+import { expect } from '@playwright/test';
+import { readFile, readdir } from 'node:fs/promises';
+import { fileURLToPath, resolve } from 'node:url';
+import { basename } from 'node:path';
+import { renderGlobal } from '@patternfly/pfe-tools/ssr/global.js';
+import Koa from 'koa';
+/**
+ * Creates a server which server-renders each html file in the `demoDir` directory,
+ * given a list of importSpecifiers.
+ */
+export class SSRPage {
+    constructor(config) {
+        this.config = config;
+        this.app = new Koa();
+        this.app.use(this.middleware(config));
+    }
+    middleware({ demoContent, demoDir, importSpecifiers }) {
+        return async (ctx, next) => {
+            if (ctx.method === 'GET') {
+                if (demoContent) {
+                    try {
+                        ctx.response.body = await renderGlobal(demoContent, importSpecifiers);
+                    }
+                    catch (e) {
+                        ctx.response.status = 500;
+                        ctx.response.body = e.stack;
+                    }
+                }
+                else if (demoDir) {
+                    const origPath = ctx.request.path.replace(/^\//, '');
+                    const { href } = demoDir;
+                    const fileUrl = resolve(href, origPath);
+                    if (ctx.request.path.endsWith('.html')) {
+                        try {
+                            const content = await readFile(fileURLToPath(fileUrl), 'utf-8');
+                            ctx.response.body = await renderGlobal(content, importSpecifiers);
+                        }
+                        catch (e) {
+                            ctx.response.status = 500;
+                            ctx.response.body = e.stack;
+                        }
+                    }
+                    else {
+                        try {
+                            ctx.response.body = await readFile(fileURLToPath(fileUrl));
+                        }
+                        catch (e) {
+                            ctx.throw(500, e);
+                        }
+                    }
+                }
+                else {
+                    throw new Error('SSRPage must either have a demoDir URL or a demoContent string');
+                }
+            }
+            else {
+                return next();
+            }
+        };
+    }
+    async initPage() {
+        this.page ??= await (await this.config.browser.newContext({
+            javaScriptEnabled: false,
+        }))
+            .newPage();
+        if (this.config.demoContent) {
+            await this.page.goto(`${this.host}test.html`);
+        }
+    }
+    async initServer() {
+        this.server ??= this.app.listen(0);
+        while (!this.server.listening) {
+            await new Promise(r => setTimeout(r));
+        }
+        const { address = 'localhost', port = 0 } = this.server.address();
+        this.host ??= `http://${address.replace('::', 'localhost')}:${port}/`;
+        this.demoPaths ??= !this.config.demoDir ? [] : (await readdir(this.config.demoDir))
+            .filter(x => x.endsWith('.html'))
+            .map(x => new URL(x, this.host).href);
+    }
+    async close() {
+        await new Promise((res, rej) => !this.server ? rej('no server') : this.server?.close(e => e ? rej(e) : res()));
+    }
+    /**
+     * Take a visual regression snapshot and save it to disk
+     * @param url url to the demo file
+     */
+    async snapshot(url) {
+        const response = await this.page.goto(url, { waitUntil: 'load' });
+        if (response?.status() === 404) {
+            throw new Error(`Not Found: ${url}`);
+        }
+        expect(response?.status(), await response?.text())
+            .toEqual(200);
+        const snapshot = await this.page.screenshot({ fullPage: true });
+        expect(snapshot, new URL(url).pathname)
+            .toMatchSnapshot(`${this.config.tagName}-${basename(url)}.png`);
+    }
+    /**
+     * Creates visual regression snapshots for each demo in the server's `demoDir`
+     */
+    async snapshots() {
+        try {
+            await Promise.all([
+                this.initServer(),
+                this.initPage(),
+            ]);
+            for (const path of this.demoPaths) {
+                await this.snapshot(path);
+            }
+        }
+        finally {
+            await this.close();
+        }
+    }
+    async updateCompleteFor(tagName) {
+        await this.initServer();
+        await this.initPage();
+        await this.page.$eval(tagName, el => el.updateComplete);
+    }
+}
+//# sourceMappingURL=SSRPage.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js.map b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js.map
new file mode 100644
index 0000000..4adfe87
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/playwright/SSRPage.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"SSRPage.js","sourceRoot":"","sources":["SSRPage.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect } from '@playwright/test';\nimport { readFile, readdir } from 'node:fs/promises';\nimport { fileURLToPath, resolve } from 'node:url';\nimport { basename } from 'node:path';\nimport { renderGlobal } from '@patternfly/pfe-tools/ssr/global.js';\n\nimport Koa from 'koa';\n\nimport type { Browser, Page } from '@playwright/test';\nimport type { Server } from 'node:http';\nimport type { AddressInfo } from 'node:net';\nimport type { LitElement } from 'lit';\n\ninterface SSRPageConfig {\n  demoDir?: URL;\n  demoContent?: string;\n  importSpecifiers: string[];\n  tagName: string;\n  browser: Browser;\n}\n\n/**\n * Creates a server which server-renders each html file in the `demoDir` directory,\n * given a list of importSpecifiers.\n */\nexport class SSRPage {\n  private app: Koa;\n  private server!: Server;\n  private host!: string;\n  private demoPaths!: string[];\n\n  public page!: Page;\n\n  constructor(private config: SSRPageConfig) {\n    this.app = new Koa();\n    this.app.use(this.middleware(config));\n  }\n\n  private middleware({ demoContent, demoDir, importSpecifiers }: SSRPageConfig) {\n    return async (ctx: Koa.Context, next: Koa.Next) => {\n      if (ctx.method === 'GET') {\n        if (demoContent) {\n          try {\n            ctx.response.body = await renderGlobal(\n              demoContent,\n              importSpecifiers,\n            );\n          } catch (e) {\n            ctx.response.status = 500;\n            ctx.response.body = (e as Error).stack;\n          }\n        } else if (demoDir) {\n          const origPath = ctx.request.path.replace(/^\\//, '');\n          const { href } = demoDir;\n          const fileUrl = resolve(href, origPath);\n          if (ctx.request.path.endsWith('.html')) {\n            try {\n              const content = await readFile(fileURLToPath(fileUrl), 'utf-8');\n              ctx.response.body = await renderGlobal(content, importSpecifiers);\n            } catch (e) {\n              ctx.response.status = 500;\n              ctx.response.body = (e as Error).stack;\n            }\n          } else {\n            try {\n              ctx.response.body = await readFile(fileURLToPath(fileUrl));\n            } catch (e) {\n              ctx.throw(500, e as Error);\n            }\n          }\n        } else {\n          throw new Error('SSRPage must either have a demoDir URL or a demoContent string');\n        }\n      } else {\n        return next();\n      }\n    };\n  }\n\n  private async initPage() {\n    this.page ??= await (await this.config.browser.newContext({\n      javaScriptEnabled: false,\n    }))\n        .newPage();\n    if (this.config.demoContent) {\n      await this.page.goto(`${this.host}test.html`);\n    }\n  }\n\n  private async initServer() {\n    this.server ??= this.app.listen(0);\n    while (!this.server.listening) {\n      await new Promise(r => setTimeout(r));\n    }\n    const { address = 'localhost', port = 0 } = this.server.address() as AddressInfo;\n    this.host ??= `http://${address.replace('::', 'localhost')}:${port}/`;\n    this.demoPaths ??= !this.config.demoDir ? [] : (await readdir(this.config.demoDir))\n        .filter(x => x.endsWith('.html'))\n        .map(x => new URL(x, this.host).href);\n  }\n\n  private async close() {\n    await new Promise<void>((res, rej) =>\n      !this.server ? rej('no server') : this.server?.close(e => e ? rej(e) : res()));\n  }\n\n  /**\n   * Take a visual regression snapshot and save it to disk\n   * @param url url to the demo file\n   */\n  private async snapshot(url: string) {\n    const response = await this.page.goto(url, { waitUntil: 'load' });\n    if (response?.status() === 404) {\n      throw new Error(`Not Found: ${url}`);\n    }\n    expect(response?.status(), await response?.text())\n        .toEqual(200);\n    const snapshot = await this.page.screenshot({ fullPage: true });\n    expect(snapshot, new URL(url).pathname)\n        .toMatchSnapshot(`${this.config.tagName}-${basename(url)}.png`);\n  }\n\n  /**\n   * Creates visual regression snapshots for each demo in the server's `demoDir`\n   */\n  async snapshots(): Promise<void> {\n    try {\n      await Promise.all([\n        this.initServer(),\n        this.initPage(),\n      ]);\n      for (const path of this.demoPaths) {\n        await this.snapshot(path);\n      }\n    } finally {\n      await this.close();\n    }\n  }\n\n  async updateCompleteFor(tagName: string): Promise<void> {\n    await this.initServer();\n    await this.initPage();\n    await this.page.$eval(tagName, el => (el as LitElement).updateComplete);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/render-to-string.d.ts b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.d.ts
new file mode 100644
index 0000000..c89cfc1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.d.ts
@@ -0,0 +1,6 @@
+import type { TemplateResult } from 'lit';
+/**
+ * Returns a string representing the innerHTML of the container this template is rendered to
+ * @param tpl lit-html template
+ */
+export declare function renderToString(tpl: TemplateResult): string;
diff --git a/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js
new file mode 100644
index 0000000..487848b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js
@@ -0,0 +1,12 @@
+import { render } from 'lit';
+/**
+ * Returns a string representing the innerHTML of the container this template is rendered to
+ * @param tpl lit-html template
+ */
+export function renderToString(tpl) {
+    const frag = new DocumentFragment();
+    frag.append(document.createElement('div'));
+    render(tpl, frag.firstElementChild);
+    return (frag.firstElementChild?.innerHTML ?? '').replace(/<!--[\s\S]*?-->/g, '');
+}
+//# sourceMappingURL=render-to-string.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js.map b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js.map
new file mode 100644
index 0000000..601ea28
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/render-to-string.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"render-to-string.js","sourceRoot":"","sources":["render-to-string.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,KAAK,CAAC;AAE7B;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,GAAmB;IAChD,MAAM,IAAI,GAAG,IAAI,gBAAgB,EAAE,CAAC;IACpC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3C,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,iBAAgC,CAAC,CAAC;IACnD,OAAO,CAAC,IAAI,CAAC,iBAAiB,EAAE,SAAS,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;AACnF,CAAC","sourcesContent":["import type { TemplateResult } from 'lit';\nimport { render } from 'lit';\n\n/**\n * Returns a string representing the innerHTML of the container this template is rendered to\n * @param tpl lit-html template\n */\nexport function renderToString(tpl: TemplateResult): string {\n  const frag = new DocumentFragment();\n  frag.append(document.createElement('div'));\n  render(tpl, frag.firstElementChild as HTMLElement);\n  return (frag.firstElementChild?.innerHTML ?? '').replace(/<!--[\\s\\S]*?-->/g, '');\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/stub-logger.d.ts b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js
new file mode 100644
index 0000000..7b576cf
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js
@@ -0,0 +1,17 @@
+import { Logger,
+// eslint-disable-next-line @typescript-eslint/ban-ts-comment
+// @ts-ignore: it's either this or break the whole monorepo
+ } from '@patternfly/pfe-core/controllers/logger.js';
+import { stub } from 'sinon';
+for (const method of ['log', 'warn', 'error']) {
+    before(function () {
+        stub(Logger, method);
+    });
+    after(function () {
+        Logger[method].restore?.();
+    });
+    afterEach(function () {
+        Logger[method].resetHistory?.();
+    });
+}
+//# sourceMappingURL=stub-logger.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js.map b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js.map
new file mode 100644
index 0000000..1456e1d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/stub-logger.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"stub-logger.js","sourceRoot":"","sources":["stub-logger.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,MAAM;AACR,6DAA6D;AAC7D,2DAA2D;EAC1D,MAAM,4CAA4C,CAAC;AAEpD,OAAO,EAAE,IAAI,EAAE,MAAM,OAAO,CAAC;AAE7B,KAAK,MAAM,MAAM,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAU,EAAE,CAAC;IACvD,MAAM,CAAC;QACL,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC;QACH,MAAM,CAAC,MAAM,CAAe,CAAC,OAAO,EAAE,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACP,MAAM,CAAC,MAAM,CAAe,CAAC,YAAY,EAAE,EAAE,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import type { SinonStub } from 'sinon';\n\nimport {\n  Logger,\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore: it's either this or break the whole monorepo\n} from '@patternfly/pfe-core/controllers/logger.js';\n\nimport { stub } from 'sinon';\n\nfor (const method of ['log', 'warn', 'error'] as const) {\n  before(function() {\n    stub(Logger, method);\n  });\n\n  after(function() {\n    (Logger[method] as SinonStub).restore?.();\n  });\n\n  afterEach(function() {\n    (Logger[method] as SinonStub).resetHistory?.();\n  });\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/utils.d.ts b/node_modules/@patternfly/pfe-tools/package/test/utils.d.ts
new file mode 100644
index 0000000..5a119ca
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/utils.d.ts
@@ -0,0 +1,29 @@
+import type { ReactiveElement } from 'lit';
+export type Position = [x: number, y: number];
+/**
+ * Get the center coords of an element.
+ * @param element get the center of this element's bounding box
+ */
+export declare function getElementCenterPosition(element: Element): Position;
+/**
+ * Click an element at approximate center, using playwright's sendMouse command
+ * @param element to click at it's center
+ */
+export declare function clickElementAtCenter(element: Element): Promise<void>;
+/**
+ * Click an element at an offset from it's top-left corner,
+ * using playwright's sendMouse command
+ * @param element to click
+ * @param relativeOffset x,y coords tuple
+ * @param [options] options
+ * @param [options.allowOutOfBounds] allow the browser to click outside of the element boundaries
+ */
+export declare function clickElementAtOffset(element: Element, relativeOffset: Position, options?: {
+    allowOutOfBounds?: true;
+}): Promise<void>;
+/**
+ * Waits for an element to completely finish updating, or throws after 100 attempts
+ * Will also throw if the element doesn't have an `updateComplete` promise
+ * @param element to wait on
+ */
+export declare function allUpdates(element: ReactiveElement): Promise<void>;
diff --git a/node_modules/@patternfly/pfe-tools/package/test/utils.js b/node_modules/@patternfly/pfe-tools/package/test/utils.js
new file mode 100644
index 0000000..80bd9d1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/utils.js
@@ -0,0 +1,66 @@
+import { sendMouse } from '@web/test-runner-commands';
+/**
+ * Get the center coords of an element.
+ * @param element get the center of this element's bounding box
+ */
+export function getElementCenterPosition(element) {
+    const { x, y, width, height } = element.getBoundingClientRect();
+    return [
+        Math.floor(x + window.pageXOffset + width / 2),
+        Math.floor(y + window.pageYOffset + height / 2),
+    ];
+}
+/**
+ * Click an element at approximate center, using playwright's sendMouse command
+ * @param element to click at it's center
+ */
+export async function clickElementAtCenter(element) {
+    const position = getElementCenterPosition(element);
+    await sendMouse({ type: 'click', position });
+}
+/**
+ * Click an element at an offset from it's top-left corner,
+ * using playwright's sendMouse command
+ * @param element to click
+ * @param relativeOffset x,y coords tuple
+ * @param [options] options
+ * @param [options.allowOutOfBounds] allow the browser to click outside of the element boundaries
+ */
+export async function clickElementAtOffset(element, relativeOffset, options) {
+    const { x, y, right, bottom } = element.getBoundingClientRect();
+    const [xOffset, yOffset] = relativeOffset;
+    const position = [
+        Math.round(xOffset + (xOffset < 0 ? right : x)),
+        Math.round(yOffset + (yOffset < 0 ? bottom : y)),
+    ];
+    const [xCoord, yCoord] = position;
+    // NOTE: this may fail in RTL situations?
+    if (!options?.allowOutOfBounds) {
+        if (xCoord > right) {
+            throw new Error('X offset is outside element boundaries');
+        }
+        if (yCoord > bottom) {
+            throw new Error('Y offset is outside element boundaries');
+        }
+    }
+    await sendMouse({ type: 'click', position });
+}
+/**
+ * Waits for an element to completely finish updating, or throws after 100 attempts
+ * Will also throw if the element doesn't have an `updateComplete` promise
+ * @param element to wait on
+ */
+export async function allUpdates(element) {
+    if (!(element.updateComplete instanceof Promise)) {
+        throw new Error(`${element.localName} does not appear to be a ReactiveElement`);
+    }
+    let count = 0;
+    do {
+        if (count > 100) {
+            throw new Error(`Too Many Updates: ${element.localName} did not finish updating after ${count - 1} tries.`);
+        }
+        await element.updateComplete;
+        count++;
+    } while (!await element.updateComplete);
+}
+//# sourceMappingURL=utils.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/test/utils.js.map b/node_modules/@patternfly/pfe-tools/package/test/utils.js.map
new file mode 100644
index 0000000..fa78d57
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/test/utils.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AAKtD;;;GAGG;AACH,MAAM,UAAU,wBAAwB,CAAC,OAAgB;IACvD,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;IAEhE,OAAO;QACL,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,MAAM,CAAC,WAAW,GAAG,MAAM,GAAG,CAAC,CAAC;KAChD,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,OAAgB;IACzD,MAAM,QAAQ,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;IACnD,MAAM,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC/C,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,OAAgB,EAChB,cAAwB,EACxB,OAEC;IAED,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;IAChE,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,cAAc,CAAC;IAC1C,MAAM,QAAQ,GAAG;QACf,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACtB,CAAC;IAC7B,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC;IAClC,yCAAyC;IACzC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,CAAC;QAC/B,IAAI,MAAM,GAAG,KAAK,EAAE,CAAC;YACnB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,IAAI,MAAM,GAAG,MAAM,EAAE,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;IACH,CAAC;IACD,MAAM,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;AAC/C,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,UAAU,CAAC,OAAwB;IACvD,IAAI,CAAC,CAAC,OAAO,CAAC,cAAc,YAAY,OAAO,CAAC,EAAE,CAAC;QACjD,MAAM,IAAI,KAAK,CAAC,GAAG,OAAO,CAAC,SAAS,0CAA0C,CAAC,CAAC;IAClF,CAAC;IACD,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,GAAG,CAAC;QACF,IAAI,KAAK,GAAG,GAAG,EAAE,CAAC;YAChB,MAAM,IAAI,KAAK,CAAC,qBAAqB,OAAO,CAAC,SAAS,kCAAkC,KAAK,GAAG,CAAC,SAAS,CAAC,CAAC;QAC9G,CAAC;QACD,MAAM,OAAO,CAAC,cAAc,CAAC;QAC7B,KAAK,EAAE,CAAC;IACV,CAAC,QAAQ,CAAC,MAAM,OAAO,CAAC,cAAc,EAAE;AAC1C,CAAC","sourcesContent":["import { sendMouse } from '@web/test-runner-commands';\nimport type { ReactiveElement } from 'lit';\n\nexport type Position = [x: number, y: number];\n\n/**\n * Get the center coords of an element.\n * @param element get the center of this element's bounding box\n */\nexport function getElementCenterPosition(element: Element): Position {\n  const { x, y, width, height } = element.getBoundingClientRect();\n\n  return [\n    Math.floor(x + window.pageXOffset + width / 2),\n    Math.floor(y + window.pageYOffset + height / 2),\n  ];\n}\n\n/**\n * Click an element at approximate center, using playwright's sendMouse command\n * @param element to click at it's center\n */\nexport async function clickElementAtCenter(element: Element): Promise<void> {\n  const position = getElementCenterPosition(element);\n  await sendMouse({ type: 'click', position });\n}\n\n/**\n * Click an element at an offset from it's top-left corner,\n * using playwright's sendMouse command\n * @param element to click\n * @param relativeOffset x,y coords tuple\n * @param [options] options\n * @param [options.allowOutOfBounds] allow the browser to click outside of the element boundaries\n */\nexport async function clickElementAtOffset(\n  element: Element,\n  relativeOffset: Position,\n  options?: {\n    allowOutOfBounds?: true;\n  }\n): Promise<void> {\n  const { x, y, right, bottom } = element.getBoundingClientRect();\n  const [xOffset, yOffset] = relativeOffset;\n  const position = [\n    Math.round(xOffset + (xOffset < 0 ? right : x)),\n    Math.round(yOffset + (yOffset < 0 ? bottom : y)),\n  ] satisfies [number, number];\n  const [xCoord, yCoord] = position;\n  // NOTE: this may fail in RTL situations?\n  if (!options?.allowOutOfBounds) {\n    if (xCoord > right) {\n      throw new Error('X offset is outside element boundaries');\n    }\n    if (yCoord > bottom) {\n      throw new Error('Y offset is outside element boundaries');\n    }\n  }\n  await sendMouse({ type: 'click', position });\n}\n\n/**\n * Waits for an element to completely finish updating, or throws after 100 attempts\n * Will also throw if the element doesn't have an `updateComplete` promise\n * @param element to wait on\n */\nexport async function allUpdates(element: ReactiveElement): Promise<void> {\n  if (!(element.updateComplete instanceof Promise)) {\n    throw new Error(`${element.localName} does not appear to be a ReactiveElement`);\n  }\n  let count = 0;\n  do {\n    if (count > 100) {\n      throw new Error(`Too Many Updates: ${element.localName} did not finish updating after ${count - 1} tries.`);\n    }\n    await element.updateComplete;\n    count++;\n  } while (!await element.updateComplete);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-tools/package/typescript/transformers/css-imports.cjs b/node_modules/@patternfly/pfe-tools/package/typescript/transformers/css-imports.cjs
new file mode 100644
index 0000000..e9de687
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/typescript/transformers/css-imports.cjs
@@ -0,0 +1,248 @@
+const ts = require('typescript');
+const fs = require('node:fs');
+const path = require('node:path');
+const { pathToFileURL } = require('node:url');
+
+const SEEN_SOURCES = new WeakSet();
+
+/**
+ * @param {ts.CoreTransformationContext} ctx
+ * @param {ts.SourceFile} sourceFile
+ */
+function createLitCssImportStatement(ctx, sourceFile) {
+  if (SEEN_SOURCES.has(sourceFile)) {
+    return;
+  }
+  for (const statement of sourceFile.statements) {
+    if (
+      ts.isImportDeclaration(statement)
+      && statement.moduleSpecifier.getText() === 'lit') {
+      for (const binding of statement.importClause?.namedBindings?.getChildren() ?? []) {
+        if (binding.getText() === 'css') {
+          SEEN_SOURCES.add(sourceFile);
+          return;
+        }
+      }
+    }
+  }
+  SEEN_SOURCES.add(sourceFile);
+  return ctx.factory.createImportDeclaration(
+    undefined,
+    ctx.factory.createImportClause(
+      false,
+      undefined,
+      ctx.factory.createNamedImports([
+        ctx.factory.createImportSpecifier(
+          false,
+          undefined,
+          ctx.factory.createIdentifier('css')
+        ),
+      ]),
+    ),
+    ctx.factory.createStringLiteral('lit'),
+  );
+}
+
+/**
+ * @param {ts.CoreTransformationContext} ctx
+ * @param {ts.SourceFile} stylesheet source file
+ * @param {string} [name]
+ */
+function createLitCssTaggedTemplateLiteral(ctx, stylesheet, name) {
+  return ctx.factory.createVariableStatement(
+    undefined,
+    ctx.factory.createVariableDeclarationList([
+      ctx.factory.createVariableDeclaration(
+        name ?? 'style',
+        undefined,
+        undefined,
+        ctx.factory.createTaggedTemplateExpression(
+          ctx.factory.createIdentifier('css'),
+          undefined,
+          ctx.factory.createNoSubstitutionTemplateLiteral(stylesheet),
+        )
+      ),
+    ], ts.NodeFlags.Const)
+  );
+}
+
+/**
+ * @param {string} stylesheet
+ * @param {string} filePath
+ */
+function minifyCss(stylesheet, filePath) {
+  const CleanCSS = require('clean-css');
+
+  try {
+    const clean = new CleanCSS({ returnPromise: false });
+    const { styles } = clean.minify(stylesheet);
+    return styles;
+  } catch (e) {
+    /* eslint-disable no-console */
+    console.log('Could not minify ', filePath);
+    console.error(e);
+    /* eslint-enable no-console */
+    return stylesheet;
+  }
+}
+
+/** @param {ts.ImportDeclaration} node */
+function getImportSpecifier(node) {
+  return node.moduleSpecifier.getText().replace(/^'(.*)'$/, '$1');
+}
+
+/**
+ * @param {ts.Node} node
+ * @returns {node is ts.ImportDeclaration}
+ */
+function isCssImportNode(node) {
+  if (ts.isImportDeclaration(node) && !node.importClause?.isTypeOnly) {
+    const specifier = getImportSpecifier(node);
+    return specifier.endsWith('.css');
+  } else {
+    return false;
+  }
+}
+
+/** map from (abspath to import spec) to (set of abspaths to importers) */
+const cssImportSpecImporterMap = new Map();
+
+/** map from (abspath to import spec) to (abspaths to manually written transformed module) */
+const cssImportFakeEmitMap = new Map();
+
+/** @param {ts.ImportDeclaration} node */
+function getImportAbsPathOrBareSpec(node) {
+  const specifier = getImportSpecifier(node);
+  if (!specifier.startsWith('.')) {
+    return specifier;
+  } else {
+    const { fileName } = node.getSourceFile();
+    const specifierRelative = path.resolve(path.dirname(fileName), specifier);
+    return specifierRelative;
+  }
+}
+
+/** @param {ts.SourceFile} sourceFile */
+function cacheCssImportSpecsAbsolute(sourceFile) {
+  sourceFile.forEachChild(node => {
+    if (isCssImportNode(node)) {
+      const specifierAbs = getImportAbsPathOrBareSpec(node);
+      cssImportSpecImporterMap.set(specifierAbs, new Set([
+        ...cssImportSpecImporterMap.get(specifierAbs) ?? [],
+        node.getSourceFile().fileName,
+      ]));
+    }
+  });
+}
+
+function getStylesheetContent(specifier, fileName, minify) {
+  let content; let pathname;
+  if (specifier.startsWith('.')) {
+    const dir = pathToFileURL(fileName);
+    const url = new URL(specifier, dir);
+    ({ pathname } = url);
+    content = fs.readFileSync(url, 'utf-8');
+  } else {
+    pathname = require.resolve(specifier);
+    content = fs.readFileSync(pathname, 'utf-8');
+  }
+  return minify ? minifyCss(content, pathname) : content;
+}
+
+/**
+ * Replace .css import specifiers with .css.js import specifiers
+ * If the inline option is set, remove the import specifier and print the css
+ * object in place, except if that module is imported elsewhere in the project,
+ * in which case leave a `.css.js` import
+ * @param {ts.Program} program
+ * @param opts
+ * @param {boolean} opts.inline
+ * @param {boolean} opts.minify
+ * @returns {ts.TransformerFactory<ts.SourceFile>}
+ */
+module.exports = function(program, {
+  inline = false,
+  minify = false,
+} = {}) {
+  return ctx => {
+    for (const sourceFileName of program.getRootFileNames()) {
+      const sourceFile = program.getSourceFile(sourceFileName);
+      if (sourceFile && !sourceFile.isDeclarationFile) {
+        cacheCssImportSpecsAbsolute(sourceFile);
+      }
+    }
+
+    /** @param {ts.Node} node */
+    function rewriteOrInlineVisitor(node) {
+      if (isCssImportNode(node)) {
+        const { fileName } = node.getSourceFile();
+        const specifier = getImportSpecifier(node);
+        const specifierAbs = getImportAbsPathOrBareSpec(node);
+        if (inline) {
+          const cached = cssImportSpecImporterMap.get(specifierAbs);
+          if (cached?.size === 1) {
+            const stylesheet = getStylesheetContent(specifier, fileName, minify);
+            return [
+              createLitCssImportStatement(ctx, node.getSourceFile()),
+              createLitCssTaggedTemplateLiteral(
+                ctx,
+                stylesheet,
+                node.importClause?.name?.getText(),
+              ),
+            ];
+          } else if (!cssImportFakeEmitMap.get(specifierAbs)) {
+            const outPath = `${specifierAbs}.js`;
+            const css = fs.readFileSync(specifierAbs, 'utf8');
+            const stylesheet = minify ? minifyCss(css, specifierAbs) : css;
+            fs.writeFileSync(outPath, `import { css } from 'lit';\nexport default css\`${stylesheet}\`;`, 'utf8');
+            cssImportFakeEmitMap.set(specifierAbs, outPath);
+          }
+        }
+        return ctx.factory.createImportDeclaration(
+          node.modifiers,
+          node.importClause,
+          ctx.factory.createStringLiteral(`${specifier}.js`)
+        );
+      }
+      return ts.visitEachChild(node, rewriteOrInlineVisitor, ctx);
+    }
+
+    return sourceFile => {
+      const children = sourceFile.getChildren();
+
+      // eslint-disable-next-line
+      /** @type {ts.ImportDeclaration} */
+      const litImportBindings =
+        (children.find(x =>
+          !ts.isTypeOnlyImportOrExportDeclaration(x)
+        && !ts.isNamespaceImport(x)
+        && ts.isImportDeclaration(x)
+        && x.moduleSpecifier.getText() === 'lit'
+        && x.importClause?.namedBindings
+        ))?.importClause?.namedBindings;
+
+      const hasStyleImports = children.find(x =>
+        ts.isImportDeclaration(x) && x.moduleSpecifier.getText().endsWith('.css'));
+
+      if (hasStyleImports) {
+        if (litImportBindings
+          && ts.isNamedImports(litImportBindings)
+          && !litImportBindings.elements?.some(x => x.getText() === 'css')) {
+          ctx.factory.updateNamedImports(
+            litImportBindings,
+            [
+              ...litImportBindings.elements,
+              ctx.factory.createImportSpecifier(
+                false,
+                undefined,
+                ctx.factory.createIdentifier('css'),
+              ),
+            ]
+          );
+        }
+      }
+      return ts.visitEachChild(sourceFile, rewriteOrInlineVisitor, ctx);
+    };
+  };
+};
+
diff --git a/node_modules/@patternfly/pfe-tools/package/typescript/transformers/static-version.cjs b/node_modules/@patternfly/pfe-tools/package/typescript/transformers/static-version.cjs
new file mode 100644
index 0000000..3f22141
--- /dev/null
+++ b/node_modules/@patternfly/pfe-tools/package/typescript/transformers/static-version.cjs
@@ -0,0 +1,84 @@
+const ts = require('typescript');
+const fs = require('node:fs');
+const path = require('node:path');
+
+/**
+ * @param {ts.ModifierLike} mod
+ * @returns {mod is ts.ExportKeyword}
+ */
+const isExportKeyword = mod =>
+  mod.kind === ts.SyntaxKind.ExportKeyword;
+
+/**
+ * @param {ts.ModifierLike} mod
+ * @returns {mod is ts.Decorator}
+ */
+const isCustomElementDecorator = mod =>
+  ts.isDecorator(mod)
+  && ts.isCallExpression(mod.expression)
+  && ts.isIdentifier(mod.expression.expression)
+  && mod.expression.expression.escapedText === 'customElement';
+
+/**
+ * @param {ts.Node} node
+ * @returns {node is ts.ClassDeclaration}
+ */
+const isExportCustomElementClass = node =>
+  ts.isClassDeclaration(node)
+  && !!node.modifiers?.some(isExportKeyword)
+  && !!node.modifiers?.some(isCustomElementDecorator);
+
+/** @param {string} dir */
+function findPackageDir(dir) {
+  if (fs.existsSync(path.join(dir, 'package.json'))) {
+    return dir;
+  }
+  const parentDir = path.resolve(dir, '..');
+  if (dir === parentDir) {
+    return null;
+  }
+  return findPackageDir(parentDir);
+}
+
+/** @param {string} filePath */
+function getNearestPackageJson(filePath) {
+  const parentDir = path.dirname(filePath);
+  const packageDir = findPackageDir(parentDir);
+  if (packageDir) {
+    const filePath = path.normalize(`${packageDir}/package.json`);
+    return require(filePath);
+  } else {
+    return null;
+  }
+}
+
+/** @returns {ts.TransformerFactory<ts.SourceFile>} */
+module.exports = () => ctx => {
+  return sourceFile => ts.visitEachChild(
+    sourceFile,
+    function addVersionVisitor(node) {
+      if (isExportCustomElementClass(node)) {
+        const { fileName } = node.getSourceFile();
+        const packageJson = getNearestPackageJson(fileName);
+        if (packageJson?.version) {
+          return ctx.factory.createClassDeclaration(
+            node.modifiers,
+            node.name,
+            node.typeParameters,
+            node.heritageClauses,
+            node.members.concat(ctx.factory.createPropertyDeclaration(
+              [ctx.factory.createModifier(ts.SyntaxKind.StaticKeyword)],
+              'version',
+              undefined,
+              undefined,
+              ctx.factory.createStringLiteral(packageJson.version)
+            ))
+          );
+        }
+      }
+      return node;
+    },
+    ctx
+  );
+};
+
