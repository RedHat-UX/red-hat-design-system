diff --git a/node_modules/@patternfly/pfe-core/CHANGELOG.md b/node_modules/@patternfly/pfe-core/CHANGELOG.md
new file mode 100644
index 0000000..8ac5b6e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/CHANGELOG.md
@@ -0,0 +1,667 @@
+# @patternfly/pfe-core
+
+## 4.0.4
+
+### Patch Changes
+
+- 4a03ced: SSR: add shim for `ResizeObserver`
+
+## 4.0.3
+
+### Patch Changes
+
+- 7c855a6: `TabsARIAController`: improve SSR compatibility
+
+## 4.0.2
+
+### Patch Changes
+
+- 0ec7338: `OverflowController`: prevent browser from locking up in some scenarios
+
+## 4.0.1
+
+### Patch Changes
+
+- 43b97bf: `InternalsController`: prevent Safari-detector from breaking SSR
+
+## 4.0.0
+
+### Major Changes
+
+- c9bd577: `RovingTabindexController`, `ListboxController`: constructor options were changed.
+  In particular, the `initItems(items: Item[])` and `setActiveItem(item: Item)` methods
+  were removed and replaced with the `getItems: () => Item[]` constructor option, and
+  the `atFocusedItemIndex` accessor.
+
+  **Before**:
+
+  ```ts
+  #tabindex = new RovingTabindexController(this);
+
+  firstUpdated() {
+    this.#tabindex.initItems(this.items);
+  }
+
+  updated(changed: PropertyValues<this>) {
+    if (changed.has('activeItem')) {
+      this.#tabindex.setActiveItem(this.activeItem);
+    }
+  }
+  ```
+
+  **After**:
+
+  ```ts
+  #tabindex = RovingTabindexController.of(this, {
+    getItems: () => this.items,
+  });
+
+  updated(changed: PropertyValues<this>) {
+    if (changed.has('activeItem')) {
+      this.#tabindex.atFocusedItemIndex = this.items.indexOf(this.activeItem);
+    }
+  }
+  ```
+
+  **For further migration guidance**, please see the [sources in `@patternfly/pfe-core`][sources],
+  especially:
+
+  - `ATFocusController.ts`,
+  - `RovingTabindexController.ts`, and
+  - `ListboxController.ts`.
+
+  [sources]: https://github.com/patternfly/patternfly-elements/tree/main/core/pfe-core/controllers/
+
+- c9bd577: Removed global `pfeLog` feature
+- c9bd577: Removed `window.PfeConfig` global config object
+- c9bd577: Removed global `auto-reveal` feature
+- c9bd577: **Decorators**: Added `@observes`. Use it to add property change callback by
+  decorating them with the name of the property to observe
+
+  ```ts
+  @customElement("custom-button")
+  class CustomButton extends LitElement {
+    #internals = this.attachInternals();
+
+    @property({ type: Boolean }) disabled = false;
+
+    @observes("disabled")
+    protected disabledChanged() {
+      this.#internals.ariaDisabled = this.disabled
+        ? "true"
+        : this.ariaDisabled ?? "false";
+    }
+  }
+  ```
+
+  Breaking change: This commit makes some changes to the internal APIs of the
+  pre-existing `@observed` observer, most notably it changes the constructor
+  signature of the `PropertyObserverController` and associated functions. Most
+  users should not have to make any changes, but if you directly import and use
+  those functions, check the commit log to see how to update your call sites.
+
+- c9bd577: Removed global `trackPerformance` feature
+
+### Minor Changes
+
+- c9bd577: ✨ Added `ActiveDescendantController`
+
+  This controller implements the [WAI-ARIA activedescendant pattern][pattern]
+  for keyboard and screen-reader accessibility.
+
+  ```ts
+  #activedescendant = ActivedescendantController.of(this, {
+    getItems: () => this.options,
+    getItemsContainer: () => this.#listbox,
+    getOrientation: () => "vertical",
+    getActiveDescendantContainer: () => this.#input,
+    getControlsElements: () => [this.#input, this.#button].filter((x) => !!x),
+    setItemActive: (item, active) => void (item.active = active),
+  });
+  ```
+
+  [pattern]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant
+
+- c9bd577: ✨ Added `ComboboxController`
+
+  This controller implements the [WAI-ARIA combobox pattern][pattern] for both
+  select-only and inline autocomplete comboboxes.
+
+  ```ts
+  #combobox = ComboboxController.of(this, {
+    multi: this.multi,
+    getItems: () => this.options,
+    getFallbackLabel: () => this.accessibleLabel,
+    getListboxElement: () => this._listbox ?? null,
+    getToggleButton: () => this._toggleButton ?? null,
+    getComboboxInput: () => this._toggleInput ?? null,
+    isExpanded: () => this.expanded,
+    requestShowListbox: () => void (this.expanded ||= true),
+    requestHideListbox: () => void (this.expanded &&= false),
+    setItemHidden: (item, hidden) => void (item.hidden = hidden),
+    isItem: (item) => item instanceof PfOption,
+    setItemActive: (item, active) => (item.active = active),
+    setItemSelected: (item, selected) => (item.selected = selected),
+  });
+  ```
+
+  [pattern]: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/
+
+- 6d9045e: `InternalsController`: added static `isSafari` boolean flag
+- c9bd577: **Decorators**: Added `@listen`. Use it to attach element event listeners to
+  class methods.
+
+  ```ts
+  @customElement("custom-input")
+  class CustomInput extends LitElement {
+    @property({ type: Boolean }) dirty = false;
+    @listen("keyup", { once: true })
+    protected onKeyup() {
+      this.dirty = true;
+    }
+  }
+  ```
+
+### Patch Changes
+
+- c9bd577: updated dependencies
+- c9bd577: `InternalsController`: corrected the types for aria IDL list attributes
+- c9bd577: Context: `makeContextRoot` no longer crashes SSR processes
+
+## 3.0.0
+
+### Major Changes
+
+- 1d89f73: `RovingTabindexController`: deprecate the `initItems` method and add `getItems` and `getItemContainer` instead
+
+  BEFORE:
+
+  ```ts
+  #tabindex = new RovingTabindexController(this);
+  constructor() {
+    super();
+    this.#tabindex.initItems(this.#items);
+  }
+  ```
+
+  AFTER:
+
+  ```ts
+  #tabindex = new RovingTabindexController(this, {
+    getItems: () => this.#items,
+  });
+  ```
+
+- 3766961: `@cascades`: deprecated `@cascades` decorator and `CascadeController`. Use context instead.
+
+  **BEFORE**: The element in charge of the context cascades data down to
+  specifically named children.
+
+  ```ts
+  import { LitElement } from "lit";
+  import { property } from "lit/decorators/property.js";
+  import { cascades } from "@patternfly/pfe-core/decorators/cascades.js";
+
+  class MyMood extends LitElement {
+    @cascades("my-eyes", "my-mouth")
+    @property()
+    mood: "happy" | "sad" | "mad" | "glad";
+  }
+  ```
+
+  **AFTER**: children subscribe to updates from the context provider.
+
+  ```ts
+  import { LitElement } from "lit";
+  import { property } from "lit/decorators/property.js";
+  import { provide } from "@lit/context";
+  import { createContextWithRoot } from "@patternfly/pfe-core/functions/context.js";
+
+  export type Mood = "happy" | "sad" | "mad" | "glad";
+
+  export const moodContext = createContextWithRoot<Mood>(Symbol("mood"));
+
+  class MyMood extends LitElement {
+    @provide({ context: moodContext })
+    @property()
+    mood: Mood;
+  }
+  ```
+
+  ```ts
+  import { LitElement } from "lit";
+  import { property } from "lit/decorators/property.js";
+  import { consume } from "@lit/context";
+  import { moodContext, type Mood } from "./my-mood.js";
+
+  class MyEyes extends LitElement {
+    @consume({ context: moodContext, subscribe: true })
+    @state()
+    private mood: Mood;
+  }
+  ```
+
+- 0d92145: `InternalsController`: made the constructor private. Use `InternalsController.of`
+
+  BEFORE:
+
+  ```js
+  class PfJazzHands extends LitElement {
+    #internals = new InternalsController(this);
+  }
+  ```
+
+  AFTER:
+
+  ```js
+  class PfJazzHands extends LitElement {
+    #internals = InternalsController.of(this);
+  }
+  ```
+
+- de4cfa4: Remove `deprecatedCustomEvent`
+
+### Minor Changes
+
+- ac0c376: `SlotController`: Add `isEmpty` method to check if a slot is empty. If no slot name is provided it will check the default slot. (#2603)
+  `SlotController`: `hasSlotted` method now returns default slot if no slot name is provided. (#2603)
+- d4e5411: **Context**: added `createContextWithRoot`. Use this when creating contexts that
+  are shared with child elements.
+- c71bbe5: `InternalsController`: added `computedLabelText` read-only property
+- c71bbe5: `InternalsController`: reflect all methods and properties from `ElementInternals`
+- fa50164: `Logger`: loosen the type of allowed controller hosts
+- fa50164: `OverflowController`: recalculate overflow when the window size changes and when tabs are dynamically created.
+- 0d92145: `RovingTabindexController`: keyboard navigation includes first-character navigation.
+- fa50164: `TabsAriaController`: Added TabsAriaController, used to manage the accesibility tree for tabs and panels.
+
+  ```ts
+  #tabs = new TabsAriaController(this, {
+    isTab: (x: Node): x is PfTab => x instanceof PfTab,
+    isPanel: (x: Node): x is PfTabPanel => x instanceof PfTabPanel,
+  });
+  ```
+
+  Please review the [Tabs 2.4 to 3.0 migration guide](https://patternflyelements.org/migration/3.0/tabs) for more
+  information.
+
+### Patch Changes
+
+- 24d43bd: `Logger`: add `Logger.info` and `Logger.debug`
+- e62244f: `InternalsController`: added missing `ariaDescription` defined by ARIAMixin
+- 24d43bd: `SlotController`: move debug logs to `Logger.debug`
+- 50f462c: Update dependencies, including Lit version 3
+
+## 2.4.1
+
+### Patch Changes
+
+- 5b16b3b04: `SlotController`: ensure first render is correct when used in certain javascript frameworks
+
+## 2.4.0
+
+### Minor Changes
+
+- a81bcb133: **Controllers**: Added timestamp controller
+
+### Patch Changes
+
+- 7055add74: `FloatingDOMController`: fixed an incorrect typescript import
+
+## 2.3.1
+
+### Patch Changes
+
+- c5d95880c: **roving-tabindex-controller**: fixes arrow keydown event listeners
+
+## 2.3.0
+
+### Minor Changes
+
+- 78c8e4416: Added `StringListConverter` for managing comma-separated list attributes.
+
+### Patch Changes
+
+- 37c23c398: `overflow-controller`:
+  - improves display calculations for overflow scroll buttons
+  - adds smooth scroll behavior
+
+## 2.2.0
+
+### Minor Changes
+
+- 83024fe5e: `roving-tabindex-controller`: notify the host when the focused item changes.
+- 83024fe5e: `roving-tabindex-controller`: allow component authors to specify the type of items.
+
+## 2.1.0
+
+### Minor Changes
+
+- e45f5eb5a: `roving-tabindex-controller`: enabled controller to be used by aria-expanded elements
+
+## 2.0.0
+
+### Major Changes
+
+- e8788c7214: Initial Release 🎉
+
+  `@patternfly/pfe-core` provides utilities for building PatternFly elements,
+  like [TypeScript decorators][decorators] and [Lit reactive controllers][controllers].
+  Core utilities replace the `PFElement` base class.
+
+  ### Before
+
+  ```js
+  export class PfeJazzHands extends PFElement {
+    static get tag() {
+      return "pfe-jazz-hands";
+    }
+
+    static get properties() {
+      return {
+        cool: {
+          type: Boolean,
+          observer: "_upgradeObserver",
+        },
+      };
+    }
+  }
+  PFElement.create(PfeJazzHands);
+  ```
+
+  ### After
+
+  ```ts
+  @customElement("pf-jazz-hands")
+  export class PfJazzHands extends LitElement {
+    @observed("_upgradeObserver")
+    @property({ type: Boolean })
+    cool = true;
+    _upgradeObserver() {
+      console.log("cool");
+    }
+  }
+  ```
+
+  ### Controllers
+
+  - ✨ Added `FloatingDOMController` for use with components that require popover
+    content. For example, in `BaseTooltip` we use the controller in this manner:
+
+    ```typescript
+    import { FloatingDOMController } from "@patternfly/pfe-core/controllers/floating-dom-controller.js";
+
+    export class BaseTooltip extends LitElement {
+      #domController = new FloatingDOMController(this);
+    }
+    ```
+
+  - ✨ Added `InternalsController`, providing preliminary facility for
+    ElementInternals
+  - ✨ Added `ScrollSpyController` which sets an attribute (`active` by default)
+    on one of it's children when that child's `href` attribute is to a hash
+    reference to an ID'd heading on the page.
+  - ✨ Added `RovingTabindexController` which implements roving tabindex, as
+    described in WAI-ARIA practices. Added `RovingTabindexController`.
+
+  See README and [the docs][docs] for more info.
+
+  [decorators]: https://www.typescriptlang.org/docs/handbook/decorators.html
+  [controllers]: https://lit.dev/docs/composition/controllers/
+  [docs]: https://patternflyelements.org/core/core/
+
+### Minor Changes
+
+- 530ef7155: ✨ Added `OverflowController`
+
+  When added to a container and given a child array of elements,
+  `OverflowController` checks to see if those elements exceed the bounds of the
+  container.
+
+- 2e1fb5705: `InternalsController`: added `labels` and `validity` getters; added `setFormValue`, `setValidity`, `checkValidity` and `reportValidity` methods
+
+### Patch Changes
+
+- 5d3315fd4: Prepared release candidate
+
+## 2.0.0-rc.2
+
+### Minor Changes
+
+- 530ef7155: ✨ Added `OverflowController`
+
+  When added to a container and given a child array of elements,
+  `OverflowController` checks to see if those elements exceed the bounds of the
+  container.
+
+- 2e1fb5705: `InternalsController`: added `labels` and `validity` getters; added `setFormValue`, `setValidity`, `checkValidity` and `reportValidity` methods
+
+## 2.0.0-rc.1
+
+### Patch Changes
+
+- 5d3315fd: Prepared release candidate
+
+## 2.0.0-next.14
+
+### Minor Changes
+
+- 82da44c11: ✨ Added `ScrollSpyController`
+  ✨ Added `RovingTabindexController`
+
+  - `ScrollSpyController` sets an attribute (`active` by default) on one of it's
+    children when that child's `href` attribute is to a hash reference to an IDd
+    heading on the page.
+  - `RovingTabindexController` implements roving tabindex, as described in WAI-ARIA practices.
+
+## 2.0.0-next.13
+
+### Major Changes
+
+- b841afe40: `FloatingDOMController`: Removed `popperjs` dependency and replaced it with
+  `floating-ui` dependency.
+
+  - removed the `initialized` property
+  - removed the `create` method
+  - added `show(options)` method with `placement` and `offset` options.
+  - added `arrow`, `flip`, `padding`, and `shift` options
+  - added read-only `alignment`, `anchor`, `placement`, and `styles` properties.
+  - made `open` property read-only.
+
+  Now, `FloatingDOMController`s constructor requires certain options, at least `content`, which is an `HTMLElement` or a function returning an `HTMLElement`.
+
+  Before:
+
+  ```ts
+  class MyElement extends LitElement {
+    #floating = new FloatingDOMController(this);
+  }
+  ```
+
+  After:
+
+  ```ts
+  class MyElement extends LitElement {
+    #floating = new FloatingDOMController(this, {
+      content: () => this.shadowRoot.getElementById('content');
+    });
+  }
+  ```
+
+### Minor Changes
+
+- 0fe6c52db: Added options to `InternalsController`. Use them to initialize `ARIA`
+  properties.
+
+  ```ts
+    role: 'listbox',
+  });
+  ```
+
+- 0fe6c52db: `InternalsController`: hook into host's `formDisabledCallback`
+
+## 2.0.0-next.12
+
+### Minor Changes
+
+- 6b6e2617: Add InternalsController, providing preliminary facility for ElementInternals
+
+## 2.0.0-next.11
+
+### Minor Changes
+
+- b6bb3818: ### pfe-tabs: Rewrites `<pfe-tabs>` to align with Patternfly v4.
+
+  With this change we are adding base class components `BaseTabs`, `BaseTab`, and `BaseTabPanel` which
+  can be extended for uses in other components in child repositories such as RHDS. Also aligns the API
+  and style closer to that of PatternFly v4.
+
+  ```html
+  <pfe-tabs>
+    <pfe-tab slot="tab" id="users">Users</pfe-tab>
+    <pfe-tab-panel>Users</pfe-tab-panel>
+    <pfe-tab slot="tab">Containers</pfe-tab>
+    <pfe-tab-panel>Containers <a href="#">Focusable element</a></pfe-tab-panel>
+    <pfe-tab slot="tab">Database</pfe-tab>
+    <pfe-tab-panel>
+      <pfe-icon slot="icon" icon="rh-atom"></pfe-icon>
+      <!-- <pfe-icon> or <svg> -->
+      Database
+    </pfe-tab-panel>
+    <pfe-tab slot="tab" disabled>Disabled</pfe-tab>
+    <pfe-tab-panel>Disabled</pfe-tab-panel>
+    <pfe-tab slot="tab" aria-disabled="true">Aria Disabled</pfe-tab>
+    <pfe-tab-panel>Aria Disabled</pfe-tab-panel>
+  </pfe-tabs>
+  ```
+
+  For now, does not implement:
+
+  - sub tabs feature
+  - nav element feature
+  - separate content (trigger) feature
+  - child tab-panel mounting features
+  - dynamic closable tabs feature
+  - loading a tab via external toggle
+
+  These feature sets can be added retroactively.
+
+  ### pfe-core: Adds `isElementInView.ts` function to pfe-core
+
+  The `isElementInView` function is borrowed from the [Patternfly React core helper utilities](https://github.com/patternfly/patternfly-react/blob/main/packages/react-core/src/helpers/util.ts).
+
+## 2.0.0-next.10
+
+### Patch Changes
+
+- 07ad1d3d: Updates use of `<pfe-icon>`
+
+## 2.0.0-next.9
+
+### Minor Changes
+
+- 166ecee1: Improves performance of floating DOM (tooltip) by lazily initializing
+
+## 2.0.0-next.8
+
+### Patch Changes
+
+- bfad8b4b: Updates dependencies
+
+## 2.0.0-next.7
+
+### Minor Changes
+
+- 7c9b85cc: Adds floating DOM controller into pfe-core for use with components that require popover content.
+
+  For example, in `BaseTooltip` we use the controller in this manner:
+
+  ```typescript
+  import { FloatingDOMController } from "@patternfly/pfe-core/controllers/floating-dom-controller.js";
+
+  export class BaseTooltip extends LitElement {
+    #domController = new FloatingDOMController(this);
+  }
+  ```
+
+## 2.0.0-next.6
+
+### Patch Changes
+
+- 34ecd410: `SlotController` now correctly initializes when given a single string slot name as config argument
+
+## 2.0.0-next.5
+
+### Patch Changes
+
+- 55e843c8: - If `on` attribute is set in HTML, it overrides color context from providers
+
+## 2.0.0-next.4
+
+### Major Changes
+
+- 6a2a0407: [View commit message here](https://gist.github.com/heyMP/200fc0b840690541475923facba393ab)
+
+## 2.0.0-next.3
+
+### Patch Changes
+
+- 447b2d75: Remove `esbuild` export condition, as this anyways was a runtime error
+
+## 2.0.0-next.2
+
+### Patch Changes
+
+- c84a4366: Explicitly adds each module to the export map
+
+## 2.0.0-next.1
+
+### Patch Changes
+
+- 999cdfdd: Register context providers even if they upgrade after the consumers
+
+## 2.0.0-next.0
+
+### Major Changes
+
+- e8788c72: Initial Release 🎉
+
+  `@patternfly/pfe-core` provides utilities for building PatternFly elements,
+  like [TypeScript decorators](https://www.typescriptlang.org/docs/handbook/decorators.html) and
+  [Lit reactive controllers](https://lit.dev/docs/composition/controllers/).
+  Core utilities replace the `PFElement` base class.
+
+  ### Before
+
+  ```js
+  export class PfeJazzHands extends PFElement {
+    static get tag() {
+      return "pfe-jazz-hands";
+    }
+
+    static get properties() {
+      return {
+        cool: {
+          type: Boolean,
+          observer: "_upgradeObserver",
+        },
+      };
+    }
+  }
+  PFElement.create(PfeJazzHands);
+  ```
+
+  ### After
+
+  ```ts
+  @customElement("pfe-jazz-hands")
+  @pfelement()
+  export class PfeJazzHands extends LitElement {
+    static readonly version = "{{version}}";
+
+    @observed("_upgradeObserver")
+    @property({ type: Boolean })
+    cool = true;
+  }
+  ```
+
+  See README and [the docs](https://patternflyelements.org/core/core/) for more info.
diff --git a/node_modules/@patternfly/pfe-core/controllers/activedescendant-controller.ts b/node_modules/@patternfly/pfe-core/controllers/activedescendant-controller.ts
new file mode 100644
index 0000000..a5d1e9a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/activedescendant-controller.ts
@@ -0,0 +1,273 @@
+import type { ReactiveControllerHost } from 'lit';
+
+import { type ATFocusControllerOptions, ATFocusController } from './at-focus-controller.js';
+
+import { isServer, nothing } from 'lit';
+import { getRandomId } from '../functions/random.js';
+import { bound } from '../decorators/bound.js';
+
+export interface ActivedescendantControllerOptions<
+  Item extends HTMLElement
+> extends ATFocusControllerOptions<Item> {
+  /**
+   * Returns a reference to the element which acts as the assistive technology container for
+   * the items. In the case of a combobox, this is the input element.
+   */
+  getActiveDescendantContainer(): HTMLElement | null;
+  /**
+   * Optional callback to control the assistive technology focus behavior of items.
+   * By default, ActivedescendantController will not do anything special to items when they receive
+   * assistive technology focus, and will only set the `activedescendant` property on the container.
+   * If you provide this callback, ActivedescendantController will call it on your item with the
+   * active state. You may use this to set active styles.
+   */
+  setItemActive?(item: Item, active: boolean): void;
+  /**
+   * Optional callback to retrieve the value from an option element.
+   * By default, retrieves the `value` attribute, or the text content.
+   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement
+   */
+  getItemValue?(item: Item): string;
+}
+
+/**
+ * Implements activedescendant pattern, as described in WAI-ARIA practices,
+ * [Managing Focus in Composites Using aria-activedescendant][ad]
+ *
+ * The steps for using the aria-activedescendant method of managing focus are as follows.
+ *
+ *  - When the container element that has a role that supports aria-activedescendant is loaded
+ *    or created, ensure that:
+ *    - The container element is included in the tab sequence as described in
+ *      Keyboard Navigation Between Components or is a focusable element of a composite
+ *      that implements a roving tabindex.
+ *    - It has aria-activedescendant="IDREF" where IDREF is the ID of the element within
+ *      the container that should be identified as active when the widget receives focus.
+ *      The referenced element needs to meet the DOM relationship requirements described below.
+ *  - When the container element receives DOM focus, draw a visual focus indicator on the active
+ *    element and ensure the active element is scrolled into view.
+ *  - When the composite widget contains focus and the user presses a navigation key that moves
+ *    focus within the widget, such as an arrow key:
+ *    - Change the value of aria-activedescendant on the container to refer to the element
+ *      that should be reported to assistive technologies as active.
+ *    - Move the visual focus indicator and, if necessary, scrolled the active element into view.
+ *  - If the design calls for a specific element to be focused the next time a user moves focus
+ *    into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to
+ *    that target element when the container loses focus. If it is not, set aria-activedescendant
+ *    to refer to the target element.
+ *
+ * The specification for aria-activedescendant places important restrictions on the
+ * DOM relationship between the focused element that has the aria-activedescendant attribute
+ * and the element referenced as active by the value of the attribute.
+ * One of the following three conditions must be met.
+ *
+ * 1. The element referenced as active is a DOM descendant of the focused referencing element.
+ * 2. The focused referencing element has a value specified for the aria-owns property that
+ *    includes the ID of the element referenced as active.
+ * 3. The focused referencing element has role of combobox, textbox, or searchbox
+ *    and has aria-controls property referring to an element with a role that supports
+ *    aria-activedescendant and either:
+ *   1. The element referenced as active is a descendant of the controlled element.
+ *   2. The controlled element has a value specified for the aria-owns property that includes
+ *      the ID of the element referenced as active.
+ *
+ * [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant
+ */
+export class ActivedescendantController<
+  Item extends HTMLElement = HTMLElement
+> extends ATFocusController<Item> {
+  /**
+   * When true, the browser supports cross-root ARIA such that the controller does not need
+   * to copy item nodes into the controlling nodes' root
+   */
+  public static get supportsCrossRootActiveDescendant(): boolean {
+    return !isServer && 'ariaActiveDescendantElement' in HTMLElement.prototype;
+  }
+
+  static of<Item extends HTMLElement>(
+    host: ReactiveControllerHost,
+    options: ActivedescendantControllerOptions<Item>,
+  ): ActivedescendantController<Item> {
+    return new ActivedescendantController(host, options);
+  }
+
+  /** Maps from original element to shadow DOM clone */
+  #lightToShadowMap = new WeakMap<Item, Item>();
+
+  /** Maps from shadow DOM clone to original element */
+  #shadowToLightMap = new WeakMap<Item, Item>();
+
+  /** Set of item which should not be cloned */
+  #noCloneSet = new WeakSet<Item>();
+
+  /** Element which controls the list i.e. combobox */
+  #controlsElements: HTMLElement[] = [];
+
+  #observing = false;
+
+  #listMO = new MutationObserver(records => this.#onItemsDOMChange(records));
+
+  #attrMO = new MutationObserver(records => this.#onItemAttributeChange(records));
+
+  #syncAttr(attributeName: string, fromNode: Item) {
+    const toNode = this.#shadowToLightMap.get(fromNode as Item)
+                ?? this.#lightToShadowMap.get(fromNode as Item);
+    const newVal = fromNode.getAttribute(attributeName);
+    const oldVal = toNode?.getAttribute(attributeName);
+    if (!fromNode.hasAttribute(attributeName)) {
+      toNode?.removeAttribute(attributeName);
+    } else if (oldVal !== newVal) {
+      toNode?.setAttribute(attributeName, newVal!);
+    }
+  }
+
+  get atFocusedItemIndex(): number {
+    return super.atFocusedItemIndex;
+  }
+
+  /**
+   * Rather than setting DOM focus, applies the `aria-activedescendant` attribute,
+   * using AriaIDLAttributes for cross-root aria, if supported by the browser
+   * @param item item
+   */
+  set atFocusedItemIndex(index: number) {
+    super.atFocusedItemIndex = index;
+    const item = this._items.at(this.atFocusedItemIndex);
+    for (const _item of this.items) {
+      this.options.setItemActive?.(_item, _item === item);
+    }
+    const container = this.options.getActiveDescendantContainer();
+    if (!ActivedescendantController.supportsCrossRootActiveDescendant) {
+      container?.setAttribute('aria-activedescendant', item?.id ?? '');
+    } else if (container) {
+      container.ariaActiveDescendantElement = item ?? null;
+    }
+    this.host.requestUpdate();
+  }
+
+  protected get controlsElements(): HTMLElement[] {
+    return this.#controlsElements;
+  }
+
+  protected set controlsElements(elements: HTMLElement[]) {
+    for (const old of this.#controlsElements) {
+      old?.removeEventListener('keydown', this.onKeydown);
+    }
+    this.#controlsElements = elements;
+    for (const element of this.#controlsElements) {
+      element.addEventListener('keydown', this.onKeydown);
+    }
+  }
+
+  /** All items */
+  get items() {
+    return this._items;
+  }
+
+  /**
+   * Sets the list of items and activates the next activatable item after the current one
+   * @param items tabindex items
+   */
+  override set items(items: Item[]) {
+    const container = this.options.getItemsContainer?.() ?? this.host;
+    if (!(container instanceof HTMLElement)) {
+      throw new Error('items container must be an HTMLElement');
+    }
+    this.itemsContainerElement = container;
+    const { supportsCrossRootActiveDescendant } = ActivedescendantController;
+    if (supportsCrossRootActiveDescendant
+        || [container] // all nodes are in the same root
+            .concat(this.controlsElements)
+            .concat(items)
+            .every((node, _, a) => node.getRootNode() === a[0].getRootNode())) {
+      this._items = items.map(x => {
+        if (!supportsCrossRootActiveDescendant) {
+          x.id ||= getRandomId();
+        }
+        return x;
+      });
+    } else {
+      this._items = items?.map((item: Item) => {
+        item.removeAttribute('tabindex');
+        if (container.contains(item)) {
+          item.id ||= getRandomId();
+          this.#noCloneSet.add(item);
+          this.#shadowToLightMap.set(item, item);
+          return item;
+        } else {
+          const clone = item.cloneNode(true) as Item;
+          clone.id = getRandomId();
+          this.#lightToShadowMap.set(item, clone);
+          this.#shadowToLightMap.set(clone, item);
+          // Though efforts were taken to disconnect
+          // this observer, it may still be a memory leak
+          this.#attrMO.observe(clone, { attributes: true });
+          this.#attrMO.observe(item, { attributes: true });
+          return clone;
+        }
+      });
+    }
+  }
+
+  private constructor(
+    public host: ReactiveControllerHost,
+    protected options: ActivedescendantControllerOptions<Item>,
+  ) {
+    super(host, options);
+    this.options.getItemValue ??= function(this: Item) {
+      return (this as unknown as HTMLOptionElement).value;
+    };
+  }
+
+  #onItemsDOMChange(records: MutationRecord[]) {
+    for (const { removedNodes } of records) {
+      for (const removed of removedNodes as NodeListOf<Item>) {
+        this.#lightToShadowMap.get(removed)?.remove();
+        this.#lightToShadowMap.delete(removed);
+      }
+    }
+  };
+
+  #onItemAttributeChange(records: MutationRecord[]) {
+    for (const { target, attributeName } of records) {
+      if (attributeName) {
+        this.#syncAttr(attributeName, target as Item);
+      }
+    }
+  };
+
+  protected override initItems(): void {
+    this.#attrMO.disconnect();
+    super.initItems();
+    this.controlsElements = this.options.getControlsElements?.() ?? [];
+    if (!this.#observing && this.itemsContainerElement && this.itemsContainerElement.isConnected) {
+      this.#listMO.observe(this.itemsContainerElement, { childList: true });
+      this.#observing = true;
+    }
+  }
+
+  hostDisconnected(): void {
+    this.controlsElements = [];
+    this.#observing = false;
+    this.#listMO.disconnect();
+    this.#attrMO.disconnect();
+  }
+
+  @bound
+  protected override onKeydown(event: KeyboardEvent): void {
+    if (!event.ctrlKey
+        && !event.altKey
+        && !event.metaKey
+        && !!this.atFocusableItems.length) {
+      super.onKeydown(event);
+    };
+  }
+
+  public renderItemsToShadowRoot(): typeof nothing | Node[] {
+    if (ActivedescendantController.supportsCrossRootActiveDescendant) {
+      return nothing;
+    } else {
+      return this.items?.filter(x => !this.#noCloneSet.has(x));
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/at-focus-controller.ts b/node_modules/@patternfly/pfe-core/controllers/at-focus-controller.ts
new file mode 100644
index 0000000..c8d099d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/at-focus-controller.ts
@@ -0,0 +1,209 @@
+import { isServer, type ReactiveControllerHost } from 'lit';
+import { bound } from '../decorators/bound.js';
+
+function isATFocusableItem(el: Element): el is HTMLElement {
+  return !!el
+      && el.ariaHidden !== 'true'
+      && !el.hasAttribute('inert')
+      && !el.hasAttribute('hidden');
+}
+
+export interface ATFocusControllerOptions<Item extends HTMLElement> {
+  /**
+   * Callback to return the list of items
+   */
+  getItems(): Item[];
+  /**
+   * Callback to return the listbox container element
+   */
+  getItemsContainer?(): HTMLElement | null;
+  /**
+   * Callback to return the direction of navigation in the list box.
+   */
+  getOrientation?(): 'horizontal' | 'vertical' | 'both' | 'undefined';
+  /**
+   * Function returning the DOM nodes which are accessibility controllers of item container
+   * e.g. the button toggle and combobox input which control a listbox.
+   */
+  getControlsElements?(): HTMLElement[];
+}
+
+export abstract class ATFocusController<Item extends HTMLElement> {
+  #itemsContainerElement: HTMLElement | null = null;
+
+  #atFocusedItemIndex = -1;
+
+  protected _items: Item[] = [];
+
+  /** All items */
+  abstract items: Item[];
+
+  /**
+   * Index of the Item which currently has assistive technology focus
+   * Set this to change focus. Setting to an out-of-bounds value will
+   * wrap around to the other side of the list.
+   */
+  get atFocusedItemIndex() {
+    return this.#atFocusedItemIndex;
+  }
+
+  set atFocusedItemIndex(index: number) {
+    const previousIndex = this.#atFocusedItemIndex;
+    const direction = index > previousIndex ? 1 : -1;
+    const { items, atFocusableItems } = this;
+    const itemsIndexOfLastATFocusableItem = items.indexOf(this.atFocusableItems.at(-1)!);
+    let itemToGainFocus = items.at(index);
+    let itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus!);
+    if (atFocusableItems.length) {
+      let count = 0;
+      while (!itemToGainFocus || !itemToGainFocusIsFocusable && count++ <= 1000) {
+        if (index < 0) {
+          index = itemsIndexOfLastATFocusableItem;
+        } else if (index >= itemsIndexOfLastATFocusableItem) {
+          index = 0;
+        } else {
+          index = index + direction;
+        }
+        itemToGainFocus = items.at(index);
+        itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus!);
+      }
+      if (count >= 1000) {
+        throw new Error('Could not atFocusedItemIndex');
+      }
+    }
+    this.#atFocusedItemIndex = index;
+  }
+
+  /** Elements which control the items container e.g. a combobox input */
+  protected get controlsElements(): HTMLElement[] {
+    return this.options.getControlsElements?.() ?? [];
+  }
+
+  /** All items which are able to receive assistive technology focus */
+  get atFocusableItems(): Item[] {
+    return this._items.filter(isATFocusableItem);
+  }
+
+  /** The element containing focusable items, e.g. a listbox */
+  get itemsContainerElement() {
+    return this.#itemsContainerElement ?? null;
+  }
+
+  set itemsContainerElement(container: HTMLElement | null) {
+    if (container !== this.#itemsContainerElement) {
+      this.#itemsContainerElement?.removeEventListener('keydown', this.onKeydown);
+      this.#itemsContainerElement = container;
+      this.#itemsContainerElement?.addEventListener('keydown', this.onKeydown);
+      this.host.requestUpdate();
+    }
+  }
+
+  constructor(
+    public host: ReactiveControllerHost,
+    protected options: ATFocusControllerOptions<Item>,
+  ) {
+    this.host.updateComplete.then(() => this.initItems());
+  }
+
+  /**
+   * Initialize the items and itemsContainerElement fields
+   */
+  protected initItems(): void {
+    this.items = this.options.getItems();
+    this.itemsContainerElement ??= this.#initContainer();
+  }
+
+  hostConnected(): void {
+    this.hostUpdate();
+  }
+
+  hostDisconnected(): void {
+    this.#itemsContainerElement?.removeEventListener('keydown', this.onKeydown);
+  }
+
+  hostUpdate(): void {
+    this.itemsContainerElement ??= this.#initContainer();
+  }
+
+  #initContainer() {
+    return this.options.getItemsContainer?.()
+      ?? (!isServer && this.host instanceof HTMLElement ? this.host : null);
+  }
+
+  /**
+   * Override and conditionally call `super.onKeydown` to filter out keyboard events
+   * which should not result in a focus change. Ensure that subclass' method is bound
+   * @param event keyboard event
+   */
+  protected onKeydown(event: KeyboardEvent): void {
+    const orientation = this.options.getOrientation?.() ?? this
+        .#itemsContainerElement
+        ?.getAttribute('aria-orientation') as
+            'horizontal' | 'vertical' | 'grid' | 'undefined';
+
+    const item = this._items.at(this.atFocusedItemIndex);
+
+    const horizontalOnly =
+        orientation === 'horizontal'
+        || item?.tagName === 'SELECT'
+        || item?.getAttribute('role') === 'spinbutton';
+
+    const verticalOnly = orientation === 'vertical';
+
+    switch (event.key) {
+      case 'ArrowLeft':
+        if (verticalOnly) {
+          return;
+        }
+        this.atFocusedItemIndex--;
+        event.stopPropagation();
+        event.preventDefault();
+        break;
+      case 'ArrowRight':
+        if (verticalOnly) {
+          return;
+        }
+        this.atFocusedItemIndex++;
+        event.stopPropagation();
+        event.preventDefault();
+        break;
+      case 'ArrowUp':
+        if (horizontalOnly) {
+          return;
+        }
+        this.atFocusedItemIndex--;
+        event.stopPropagation();
+        event.preventDefault();
+        break;
+      case 'ArrowDown':
+        if (horizontalOnly) {
+          return;
+        }
+        this.atFocusedItemIndex++;
+        event.stopPropagation();
+        event.preventDefault();
+        break;
+      case 'Home':
+        if (!(event.target instanceof HTMLElement
+            && (event.target.hasAttribute('aria-activedescendant')
+             || event.target.ariaActiveDescendantElement))) {
+          this.atFocusedItemIndex = 0;
+          event.stopPropagation();
+          event.preventDefault();
+        }
+        break;
+      case 'End':
+        if (!(event.target instanceof HTMLElement
+            && (event.target.hasAttribute('aria-activedescendant')
+             || event.target.ariaActiveDescendantElement))) {
+          this.atFocusedItemIndex = this.items.length - 1;
+          event.stopPropagation();
+          event.preventDefault();
+        }
+        break;
+      default:
+        break;
+    }
+    this.host.requestUpdate();
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/cascade-controller.ts b/node_modules/@patternfly/pfe-core/controllers/cascade-controller.ts
new file mode 100644
index 0000000..bde105c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/cascade-controller.ts
@@ -0,0 +1,169 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+
+import { bound } from '../decorators/bound.js';
+import { debounce } from '../functions/debounce.js';
+import { Logger } from './logger.js';
+
+/**
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export interface Options<E extends ReactiveElement> {
+  properties: Partial<Record<keyof E, string | string[]>>;
+  prefix?: string;
+}
+
+/**
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export class CascadeController<E extends ReactiveElement> implements ReactiveController {
+  private class: typeof ReactiveElement;
+
+  private logger: Logger;
+
+  static instances: WeakMap<ReactiveElement, CascadeController<ReactiveElement>> =
+    new WeakMap<ReactiveElement, CascadeController<ReactiveElement>>();
+
+  mo: MutationObserver = new MutationObserver(this.parse);
+
+  cache: Map<string, string[]> = new Map<string, string[]>();
+
+  constructor(public host: E, public options?: Options<E> | undefined) {
+    this.class = host.constructor as typeof ReactiveElement;
+    this.logger = new Logger(this.host);
+    CascadeController.instances.set(host, this);
+    const properties = this.options?.properties ?? {} as Options<E>['properties'];
+    for (const [propName, cascade] of Object.entries(properties)) {
+      this.initProp(propName, cascade);
+    }
+    host.addController(this);
+    this.cascadeProperties = debounce(this.cascadeProperties, 1);
+  }
+
+  hostUpdated(): void {
+    this.cascadeProperties();
+  }
+
+  hostConnected(): void {
+    this.mo.observe(this.host, { attributes: true, childList: true });
+    this.cascadeProperties();
+  }
+
+  hostDisconnected(): void {
+    this.mo.disconnect();
+  }
+
+  /**
+   * Handles the cascading of properties to nested components when new elements are added
+   * Attribute updates/additions are handled by the attribute callback
+   * @param [nodeList=this.host.children]
+   */
+  cascadeProperties(nodeList: HTMLCollection | NodeList = this.host.children): void {
+    if (this.host.isConnected) {
+      const selectors = this.cache.keys();
+
+      // Find out if anything in the nodeList matches any of the observed selectors for cacading properties
+      if (!nodeList) {
+        return this._cascadeAttributes(selectors, this.cache);
+      }
+
+
+      for (const node of nodeList) {
+        // if this node has a match function (i.e., it's an HTMLElement, not a text node),
+        if (node instanceof Element) {
+          // see if it matches one of the selectors, otherwise drop it (like it's hot).
+          for (const selector of selectors) {
+            // console.log('_copyAttribute', name, value, el.getAttribute(name));
+            if (node.matches(selector)) {
+              const attrNames = this.cache.get(selector);
+              // each selector can match multiple properties/attributes, so
+              // copy each of them
+              for (const attrName of attrNames ?? []) {
+                this._copyAttribute(attrName, node);
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  /**
+   * Gets the configured attribute name for the decorated property,
+   * falling back to the lowercased property name, and caches the attribute name
+   * with it's designated child selectors for value-propagation on change
+   * @param propName
+   * @param cascade
+   */
+  initProp(propName: string, cascade: string | string[]): void {
+    for (const nodeItem of [cascade].flat(Infinity).filter(Boolean) as string[]) {
+      const { attribute } = this.class.getPropertyOptions(propName);
+
+      const attr =
+          typeof attribute === 'string' ? attribute
+        : propName.toLowerCase();
+
+      // Create an object with the node as the key and an array of attributes
+      // that are to be cascaded down to it
+      if (!this.cache.get(nodeItem)) {
+        this.cache.set(nodeItem, [attr]);
+      } else {
+        this.cache.get(nodeItem)?.push(attr);
+      }
+    }
+  }
+
+  @bound private parse(mutations: MutationRecord[]) {
+    // Iterate over the mutation list, look for cascade updates
+    for (const mutation of mutations ?? []) {
+      // If a new node is added, attempt to cascade attributes to it
+      if (mutation.type === 'childList' && mutation.addedNodes.length) {
+        this.cascadeProperties(mutation.addedNodes);
+      } else if (mutation.type === 'attributes') {
+        this._cascadeAttributes(this.cache.keys(), this.cache);
+      }
+    }
+  }
+
+  /**
+   * Copy the named attribute to a target element.
+   * @param name attr name
+   * @param el element
+   */
+  private async _copyAttribute(name: string, el: Element) {
+    this.logger.log(`copying ${name} to ${el}`);
+    const value = this.host.getAttribute(name);
+    if (el.isConnected) {
+      if (value == null) {
+        el.removeAttribute(name);
+      } else {
+        el.setAttribute(name, value);
+      }
+    }
+  }
+
+  private _cascadeAttributes(selectors: IterableIterator<string>, set: this['cache']) {
+    for (const selector of selectors) {
+      for (const attr of set.get(selector) ?? []) {
+        this._cascadeAttribute(attr, selector);
+      }
+    }
+  }
+
+  /**
+   * Trigger a cascade of the named attribute to any child elements that match
+   * the `to` selector.  The selector can match elements in the light DOM and
+   * shadow DOM.
+   * @param  name The name of the attribute to cascade (not necessarily the same as the property name).
+   * @param  to A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.
+   */
+  private _cascadeAttribute(name: string, to: string) {
+    const recipients = [
+      ...this.host.querySelectorAll(to),
+      ...this.host.shadowRoot?.querySelectorAll(to) ?? [],
+    ];
+
+    for (const node of recipients) {
+      this._copyAttribute(name, node);
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/combobox-controller.ts b/node_modules/@patternfly/pfe-core/controllers/combobox-controller.ts
new file mode 100644
index 0000000..a156690
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/combobox-controller.ts
@@ -0,0 +1,762 @@
+import { nothing, type ReactiveController, type ReactiveControllerHost } from 'lit';
+import type { ActivedescendantControllerOptions } from './activedescendant-controller.js';
+import type { RovingTabindexControllerOptions } from './roving-tabindex-controller.js';
+import type { ATFocusController } from './at-focus-controller';
+import type { ListboxControllerOptions } from './listbox-controller.js';
+
+import { ListboxController, isItem, isItemDisabled } from './listbox-controller.js';
+import { RovingTabindexController } from './roving-tabindex-controller.js';
+import { ActivedescendantController } from './activedescendant-controller.js';
+import { InternalsController } from './internals-controller.js';
+import { getRandomId } from '../functions/random.js';
+import type { RequireProps } from '../core.js';
+
+type AllOptions<Item extends HTMLElement> =
+    ActivedescendantControllerOptions<Item>
+  & ListboxControllerOptions<Item>
+  & RovingTabindexControllerOptions<Item>;
+
+type Lang = typeof ComboboxController['langs'][number];
+
+function deepClosest(element: Element | null, selector: string) {
+  let closest = element?.closest(selector);
+  let root = element?.getRootNode();
+  let count = 0;
+  while (count < 500 && !closest && element) {
+    count++;
+    root = element.getRootNode();
+    if (root instanceof ShadowRoot) {
+      element = root.host;
+    } else if (root instanceof Document) {
+      element = document.documentElement;
+    } else {
+      return null;
+    }
+    closest = element.closest(selector);
+  }
+  return closest;
+}
+
+function getItemValue<Item extends HTMLElement>(item: Item): string {
+  if ('value' in item && typeof item.value === 'string') {
+    return item.value;
+  } else {
+    return '';
+  }
+}
+
+function isItemFiltered<Item extends HTMLElement>(item: Item, value: string): boolean {
+  return !getItemValue(item)
+      .toLowerCase()
+      .startsWith(value.toLowerCase());
+}
+
+function setItemHidden(item: HTMLElement, hidden: boolean) {
+  item.hidden = hidden;
+}
+
+function setComboboxValue(item: HTMLElement, value: string): void {
+  if (!('value' in item)) {
+    // eslint-disable-next-line no-console
+    return console.warn(`Cannot set value on combobox element ${item.localName}`);
+  } else {
+    item.value = value;
+  }
+}
+
+function getComboboxValue(combobox: HTMLElement): string {
+  if ('value' in combobox && typeof combobox.value === 'string') {
+    return combobox.value;
+  } else {
+    // eslint-disable-next-line no-console
+    return console.warn(`Cannot get value from combobox element ${combobox.localName}`), '';
+  }
+}
+
+export interface ComboboxControllerOptions<Item extends HTMLElement> extends
+  Omit<AllOptions<Item>,
+    | 'getATFocusedItem'
+    | 'getControlsElements'
+    | 'getActiveDescendantContainer'
+    | 'getItemsContainer'> {
+  /**
+   * Predicate which establishes whether the listbox is expanded
+   * e.g. `isExpanded: () => this.expanded`, if the host's `expanded` property
+   * should correspond to the listbox expanded state.
+   */
+  isExpanded(): boolean;
+  /**
+   * Callback which the host must implement to change the expanded state to true.
+   * Return or resolve false to prevent the change.
+   */
+  requestShowListbox(): void | boolean | Promise<boolean> | Promise<void>;
+  /**
+   * Callback which the host must implement to change the expanded to false.
+   * Return or resolve false to prevent the default.
+   */
+  requestHideListbox(): void | boolean | Promise<boolean> | Promise<void>;
+  /**
+   * Returns the listbox container element
+   */
+  getListboxElement(): HTMLElement | null;
+  /**
+   * Returns the toggle button, if it exists
+   */
+  getToggleButton(): HTMLElement | null;
+  /**
+   * Returns the combobox input, if it exists
+   */
+  getComboboxInput(): HTMLElement | null;
+  /**
+   * Returns the label for the toggle button, combobox input, and listbox.
+   * when `ariaLabelledByElements` is supported, the label elements associated with
+   * the host element are used instead, and this value is ignored.
+   */
+  getFallbackLabel(): string;
+  /**
+   * Called on an item to retrieve it's value string. By default, returns the `value` property
+   * of the item, as if it implemented the `<option>` element's interface.
+   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement
+   */
+  getItemValue?(item: Item): string;
+  /**
+   * Optional callback, called on the combobox input element to set its value.
+   * by default, returns the element's `value` DOM property.
+   */
+  getComboboxValue?(combobox: HTMLElement): string;
+  /**
+   * Optional callback, called on the combobox input element to set its value.
+   * by default, sets the element's `value` DOM property.
+   */
+  setComboboxValue?(item: HTMLElement, value: string): void;
+  /**
+   * Called on each item, with the combobox input, to determine if the item should be shown in the
+   * listbox or filtered out. Return false to hide the item. By default, checks whether the item's
+   * value starts with the input value (when both are lowercased).
+   */
+  isItemFiltered?(item: Item, value: string): boolean;
+  /**
+   * Called on each item when the filter changes.
+   * By default, toggles the `hidden` attribute on the item
+   */
+  setItemHidden?(item: Item, hidden: boolean): void;
+}
+
+/**
+ * @summary Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].
+ *
+ * Combobox with keyboard and pointer navigation, using the aria-activedescendant pattern.
+ *
+ * WARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users
+ * rely on the combobox input value being announced when navigating the listbox with the keyboard.
+ * We have erred on the side that it may be less-broken to avoid announcing disabled items in that
+ * case, rather than announcing the disabled items value without indicating that it is disabled.
+ * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)
+ *
+ * [pattern]: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-both/
+ */
+export class ComboboxController<
+  Item extends HTMLElement
+> implements ReactiveController {
+  public static of<T extends HTMLElement>(
+    host: ReactiveControllerHost,
+    options: ComboboxControllerOptions<T>,
+  ): ComboboxController<T> {
+    return new ComboboxController(host, options);
+  }
+
+  /**
+   * Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA.
+   */
+  public static get supportsCrossRootActiveDescendant(): boolean {
+    return ActivedescendantController.supportsCrossRootActiveDescendant;
+  }
+
+  static #alert?: HTMLElement;
+
+  static #alertTemplate = document.createElement('template');
+
+  private static langs = [
+    'en',
+    'es',
+    'de',
+    'fr',
+    'it',
+    'ja',
+    'zh',
+  ] as const;
+
+  private static langsRE = new RegExp(ComboboxController.langs.join('|'));
+
+  static {
+    // apply visually-hidden styles
+    this.#alertTemplate.innerHTML = `
+      <div role="alert" style="
+         border: 0;
+         clip: rect(0, 0, 0, 0);
+         block-size: 1px;
+         margin: -1px;
+         overflow: hidden;
+         padding: 0;
+         position: absolute;
+         white-space: nowrap;
+         inline-size: 1px;
+        "></div>
+      `;
+  }
+
+  private options: RequireProps<ComboboxControllerOptions<Item>,
+    | 'isItemDisabled'
+    | 'isItem'
+    | 'isItemFiltered'
+    | 'getItemValue'
+    | 'getOrientation'
+    | 'getComboboxValue'
+    | 'setComboboxValue'
+    | 'setItemHidden'
+  >;
+
+  #lb: ListboxController<Item>;
+  #fc?: ATFocusController<Item>;
+  #preventListboxGainingFocus = false;
+  #input: HTMLElement | null = null;
+  #button: HTMLElement | null = null;
+  #listbox: HTMLElement | null = null;
+  #buttonInitialRole: string | null = null;
+  #mo = new MutationObserver(() => this.#initItems());
+  #microcopy = new Map<string, Record<Lang, string>>(Object.entries({
+    dimmed: {
+      en: 'dimmed',
+      es: 'atenuada',
+      de: 'gedimmt',
+      it: 'oscurato',
+      fr: 'atténué',
+      ja: '暗くなった',
+      zh: '变暗',
+    },
+    selected: {
+      en: 'selected',
+      es: 'seleccionado',
+      de: 'ausgewählt',
+      fr: 'choisie',
+      it: 'selezionato',
+      ja: '選ばれた',
+      zh: '选',
+    },
+    of: {
+      en: 'of',
+      es: 'de',
+      de: 'von',
+      fr: 'sur',
+      it: 'di',
+      ja: '件目',
+      zh: '的',
+    },
+  }));
+
+  /** All items */
+  get items(): Item[] {
+    return this.#lb.items;
+  }
+
+  set items(value: Item[]) {
+    this.#lb.items = value;
+  }
+
+  /** Whether the combobox is disabled */
+  get disabled() {
+    return this.#lb.disabled;
+  }
+
+  set disabled(value: boolean) {
+    this.#lb.disabled = value;
+  }
+
+  /** Whether multiselect is enabled */
+  get multi() {
+    return this.#lb.multi;
+  }
+
+  set multi(value: boolean) {
+    this.#lb.multi = value;
+  }
+
+  /** The current selection: a list of items */
+  get selected() {
+    return this.#lb.selected;
+  }
+
+  set selected(value: Item[]) {
+    this.#lb.selected = value;
+  }
+
+  get #hasTextInput() {
+    return this.options.getComboboxInput();
+  }
+
+  get #focusedItem() {
+    return this.#fc?.items.at(Math.max(this.#fc?.atFocusedItemIndex ?? -1, 0)) ?? null;
+  }
+
+  get #element() {
+    if (this.host instanceof HTMLElement) {
+      return this.host;
+    } else if (this.options.getListboxElement() instanceof HTMLElement) {
+      return this.options.getListboxElement();
+    }
+  }
+
+  private constructor(
+    public host: ReactiveControllerHost,
+    options: ComboboxControllerOptions<Item>,
+  ) {
+    host.addController(this);
+    this.options = {
+      isItem,
+      getItemValue,
+      isItemFiltered,
+      isItemDisabled,
+      getComboboxValue,
+      setComboboxValue,
+      setItemHidden,
+      getOrientation: () => 'vertical',
+      ...options,
+    };
+    this.#lb = ListboxController.of(host, {
+      isItem: this.options.isItem,
+      getItemsContainer: this.options.getListboxElement,
+      getControlsElements: () => [
+        this.options.getToggleButton(),
+        this.options.getComboboxInput(),
+      ].filter(x => !!x),
+      getATFocusedItem: () => this.items[this.#fc?.atFocusedItemIndex ?? -1] ?? null,
+      isItemDisabled: this.options.isItemDisabled,
+      setItemSelected: this.options.setItemSelected,
+    });
+  }
+
+  async hostConnected(): Promise<void> {
+    await this.host.updateComplete;
+    this.hostUpdated();
+  }
+
+  hostUpdated(): void {
+    if (!this.#fc) {
+      this.#init();
+    }
+    const expanded = this.options.isExpanded();
+    this.#button?.setAttribute('aria-expanded', String(expanded));
+    this.#input?.setAttribute('aria-expanded', String(expanded));
+    if (this.#hasTextInput) {
+      this.#button?.setAttribute('tabindex', '-1');
+    } else {
+      this.#button?.removeAttribute('tabindex');
+    }
+    this.#initLabels();
+  }
+
+  hostDisconnected(): void {
+    this.#fc?.hostDisconnected();
+  }
+
+  /**
+   * Order of operations is important
+   */
+  async #init() {
+    await this.host.updateComplete;
+    this.#initListbox();
+    this.#initItems();
+    this.#initButton();
+    this.#initInput();
+    this.#initLabels();
+    this.#initController();
+  }
+
+  #initListbox() {
+    this.#mo.disconnect();
+    this.#listbox?.removeEventListener('focusout', this.#onFocusoutListbox);
+    this.#listbox?.removeEventListener('keydown', this.#onKeydownListbox);
+    this.#listbox?.removeEventListener('click', this.#onClickListbox);
+    this.#listbox = this.options.getListboxElement();
+    if (!this.#listbox) {
+      throw new Error('ComboboxController getListboxElement() option must return an element');
+    }
+    this.#listbox.addEventListener('focusout', this.#onFocusoutListbox);
+    this.#listbox.addEventListener('keydown', this.#onKeydownListbox);
+    this.#listbox.addEventListener('click', this.#onClickListbox);
+    this.#listbox.id ??= getRandomId();
+    this.#mo.observe(this.#listbox, { childList: true });
+  }
+
+  #initButton() {
+    this.#button?.removeEventListener('click', this.#onClickButton);
+    this.#button?.removeEventListener('keydown', this.#onKeydownButton);
+    this.#button = this.options.getToggleButton();
+    if (!this.#button) {
+      throw new Error('ComboboxController getToggleButton() option must return an element');
+    }
+    this.#buttonInitialRole = this.#button.role;
+    this.#button.role = 'combobox';
+    this.#button.setAttribute('aria-controls', this.#listbox?.id ?? '');
+    this.#button.addEventListener('click', this.#onClickButton);
+    this.#button.addEventListener('keydown', this.#onKeydownButton);
+  }
+
+  #initInput() {
+    this.#input?.removeEventListener('click', this.#onClickButton);
+    this.#input?.removeEventListener('keyup', this.#onKeyupInput);
+    this.#input?.removeEventListener('keydown', this.#onKeydownInput);
+
+    this.#input = this.options.getComboboxInput();
+    if (this.#input && !('value' in this.#input)) {
+      throw new Error(`ComboboxController getToggleInput() option must return an element with a value property`);
+    } else if (this.#input) {
+      this.#input.role = 'combobox';
+      this.#button!.role = this.#buttonInitialRole;
+      this.#input.setAttribute('aria-autocomplete', 'both');
+      this.#input.setAttribute('aria-controls', this.#listbox?.id ?? '');
+      this.#input.addEventListener('click', this.#onClickButton);
+      this.#input.addEventListener('keyup', this.#onKeyupInput);
+      this.#input.addEventListener('keydown', this.#onKeydownInput);
+    }
+  }
+
+  #initLabels() {
+    const labels = InternalsController.getLabels(this.host)
+                ?? this.#element?.ariaLabelledByElements
+                ?? [];
+    const label = this.options.getFallbackLabel()
+                  || this.#element?.ariaLabelledByElements?.map(x => x.textContent).join('')
+                  || null;
+
+    for (const element of [this.#button, this.#listbox, this.#input].filter(x => !!x)) {
+      if ('ariaLabelledByElements' in HTMLElement.prototype && labels.filter(x => !!x).length) {
+        element.ariaLabelledByElements = [...labels ?? []];
+      } else {
+        element.ariaLabel = label;
+      }
+    }
+  }
+
+  #initController() {
+    this.#fc?.hostDisconnected();
+    const { getOrientation } = this.options;
+    const getItems = () => this.items;
+    const getItemsContainer = () => this.#listbox;
+    if (this.#hasTextInput) {
+      this.#fc = ActivedescendantController.of(this.host, {
+        getItems, getItemsContainer, getOrientation,
+        getActiveDescendantContainer: () => this.#input,
+        getControlsElements: () => [
+          this.options.getToggleButton(),
+          this.options.getComboboxInput(),
+        ].filter(x => !!x),
+        setItemActive: this.options.setItemActive,
+      });
+    } else {
+      this.#fc = RovingTabindexController.of(this.host, {
+        getItems, getItemsContainer, getOrientation,
+        getControlsElements: () => [
+          this.options.getToggleButton(),
+        ].filter(x => !!x),
+      });
+    }
+  }
+
+  #initItems() {
+    if (this.#listbox) {
+      this.items = this.options.getItems();
+    }
+  }
+
+  async #show(): Promise<void> {
+    const success = await this.options.requestShowListbox();
+    this.#filterItems();
+    if (success !== false && !this.#hasTextInput) {
+      if (!this.#preventListboxGainingFocus) {
+        (this.#focusedItem ?? this.#fc?.items.at(0))?.focus();
+        this.#preventListboxGainingFocus = false;
+      }
+    }
+  }
+
+  async #hide(): Promise<void> {
+    await this.options.requestHideListbox();
+  }
+
+  async #toggle() {
+    if (this.options.isExpanded()) {
+      return this.#hide();
+    } else {
+      return this.#show();
+    }
+  }
+
+  #translate(key: string, lang: Lang) {
+    const strings = this.#microcopy.get(key);
+    return strings?.[lang] ?? key;
+  }
+
+  // TODO(bennypowers): perhaps move this to ActivedescendantController
+  #announce(item: Item) {
+    const value = this.options.getItemValue(item);
+    ComboboxController.#alert?.remove();
+    const fragment = ComboboxController.#alertTemplate.content.cloneNode(true) as DocumentFragment;
+    ComboboxController.#alert = fragment.firstElementChild as HTMLElement;
+    let text = value;
+    const lang = deepClosest(this.#listbox, '[lang]')?.getAttribute('lang') ?? 'en';
+    const langKey = lang?.match(ComboboxController.langsRE)?.at(0) as Lang ?? 'en';
+    if (this.options.isItemDisabled(item)) {
+      text += ` (${this.#translate('dimmed', langKey)})`;
+    }
+    if (this.#lb.isSelected(item)) {
+      text += `, (${this.#translate('selected', langKey)})`;
+    }
+    if (item.hasAttribute('aria-setsize') && item.hasAttribute('aria-posinset')) {
+      if (langKey === 'ja') {
+        text += `, (${item.getAttribute('aria-setsize')} 件中 ${item.getAttribute('aria-posinset')} 件目)`;
+      } else {
+        text += `, (${item.getAttribute('aria-posinset')} ${this.#translate('of', langKey)} ${item.getAttribute('aria-setsize')})`;
+      }
+    }
+    ComboboxController.#alert.lang = lang;
+    ComboboxController.#alert.innerText = text;
+    document.body.append(ComboboxController.#alert);
+  }
+
+  #filterItems() {
+    if (this.#input) {
+      let value: string;
+      for (const item of this.items) {
+        const hidden =
+          !!this.options.isExpanded()
+            && !!(value = this.options.getComboboxValue(this.#input))
+            && this.options.isItemFiltered?.(item, value)
+            || false;
+        this.options.setItemHidden(item, hidden);
+      }
+    }
+  }
+
+  #onClickButton = () => {
+    if (!this.options.isExpanded()) {
+      this.#show();
+    } else {
+      this.#hide();
+    }
+  };
+
+  #onClickListbox = (event: MouseEvent) => {
+    if (!this.multi && event.composedPath().some(this.options.isItem)) {
+      this.#hide();
+    }
+  };
+
+  /**
+   * Handle keypresses on the input
+   * ## `Down Arrow`
+   * - If the textbox is not empty and the listbox is displayed,
+   *   moves visual focus to the first suggested value.
+   * - If the textbox is empty and the listbox is not displayed,
+   *   opens the listbox and moves visual focus to the first option.
+   * - In both cases DOM focus remains on the textbox.
+   *
+   * ## `Alt + Down Arrow`
+   * Opens the listbox without moving focus or changing selection.
+   *
+   * ## `Up Arrow`
+   * - If the textbox is not empty and the listbox is displayed,
+   *   moves visual focus to the last suggested value.
+   * - If the textbox is empty, first opens the listbox if it is not already displayed
+   *   and then moves visual focus to the last option.
+   * - In both cases DOM focus remains on the textbox.
+   *
+   * ## `Enter`
+   * Closes the listbox if it is displayed.
+   *
+   * ## `Escape`
+   * - If the listbox is displayed, closes it.
+   * - If the listbox is not displayed, clears the textbox.
+   *
+   * ## Standard single line text editing keys
+   * - Keys used for cursor movement and text manipulation,
+   *   such as `Delete` and `Shift + Right Arrow`.
+   * - An HTML `input` with `type="text"` is used for the textbox so the browser will provide
+   *   platform-specific editing keys.
+   *
+   * @see https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list
+   * @param event keydown event
+   */
+  #onKeydownInput = (event: KeyboardEvent) => {
+    if (event.ctrlKey || event.shiftKey || !this.#input) {
+      return;
+    }
+    switch (event.key) {
+      case 'ArrowDown':
+      case 'ArrowUp':
+        if (!this.options.isExpanded()) {
+          this.#preventListboxGainingFocus = event.altKey;
+          this.#show();
+        }
+        break;
+      case 'Enter':
+        if (!this.multi) {
+          this.#hide();
+        }
+        break;
+      case 'Escape':
+        if (!this.options.isExpanded()) {
+          this.options.setComboboxValue(this.#input, '');
+          this.host.requestUpdate();
+        }
+        this.#hide();
+        break;
+      case 'Alt':
+      case 'AltGraph':
+      case 'Shift':
+      case 'Control':
+      case 'Fn':
+      case 'Symbol':
+      case 'Hyper':
+      case 'Super':
+      case 'Meta':
+      case 'CapsLock':
+      case 'FnLock':
+      case 'NumLock':
+      case 'Tab':
+      case 'ScrollLock':
+      case 'SymbolLock':
+      case ' ':
+        break;
+      default:
+        if (!this.options.isExpanded()) {
+          this.#show();
+        }
+    }
+  };
+
+  /**
+   * Populates the combobox input with the focused value when navigating the listbox,
+   * and filters the items when typing.
+   * @param event keyup event
+   */
+  #onKeyupInput = (event: KeyboardEvent) => {
+    if (!this.#input) {
+      return;
+    }
+    switch (event.key) {
+      case 'ArrowUp':
+      case 'ArrowDown':
+        /**
+         * Safari VoiceOver does not support aria-activedescendant, so we must.
+         * approximate the correct behaviour by constructing a visually-hidden alert role
+         * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)
+         */
+        if (this.#focusedItem
+            && this.options.getComboboxInput()
+            && InternalsController.isSafari) {
+          this.#announce(this.#focusedItem);
+        }
+        break;
+      default:
+        this.#filterItems();
+    }
+  };
+
+  #onKeydownButton = (event: KeyboardEvent) => {
+    if (this.#hasTextInput) {
+      return this.#onKeydownInput(event);
+    } else {
+      return this.#onKeydownToggleButton(event);
+    }
+  };
+
+  #onKeydownListbox = (event: KeyboardEvent) => {
+    if (!this.#hasTextInput) {
+      switch (event.key) {
+        case 'Home':
+        case 'End':
+          this.#onKeydownToggleButton(event);
+          break;
+        case 'Escape':
+          this.#hide();
+          this.#button?.focus();
+          break;
+        case 'Enter':
+        case ' ': {
+          const eventItem = event.composedPath().find(this.options.isItem);
+          if (eventItem
+              && !this.multi
+              && this.options.isExpanded()
+              && !this.options.isItemDisabled(eventItem)
+          ) {
+            this.#hide();
+            this.#button?.focus();
+          }
+        }
+      }
+    }
+  };
+
+  #onFocusoutListbox = (event: FocusEvent) => {
+    if (!this.#hasTextInput && this.options.isExpanded()) {
+      const root = this.#element?.getRootNode();
+      if ((root instanceof ShadowRoot || root instanceof Document)
+          && !this.items.includes(event.relatedTarget as Item)
+      ) {
+        this.#hide();
+      }
+    }
+  };
+
+  #onKeydownToggleButton = async (event: KeyboardEvent) => {
+    switch (event.key) {
+      case 'ArrowDown':
+      case 'ArrowUp':
+        if (!this.options.isExpanded()) {
+          this.#show();
+        }
+        break;
+      case 'Home':
+        if (!this.options.isExpanded()) {
+          await this.#show();
+        }
+        if (this.#fc) {
+          this.#fc.atFocusedItemIndex = 0;
+        }
+        break;
+      case 'End':
+        if (!this.options.isExpanded()) {
+          await this.#show();
+        }
+        if (this.#fc) {
+          this.#fc.atFocusedItemIndex = this.items.length - 1;
+        }
+        break;
+      case ' ':
+      case 'Enter':
+        // prevent scroll
+        event.preventDefault();
+        await this.#toggle();
+        await this.host.updateComplete;
+        if (!this.options.isExpanded()) {
+          this.#button?.focus();
+        }
+        break;
+    }
+  };
+
+  /**
+   * For Browsers which do not support `ariaActiveDescendantElement`, we must clone
+   * the listbox items into the same root as the combobox input
+   * Call this method to return either an array of (cloned) list box items, to be placed in your
+   * shadow template, or nothing in the case the browser supports cross-root aria.
+   */
+  public renderItemsToShadowRoot(): Node[] | typeof nothing {
+    if (this.#fc instanceof ActivedescendantController) {
+      return this.#fc.renderItemsToShadowRoot();
+    } else {
+      return nothing;
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.d.ts b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.d.ts
index 7b93c6b..7c0d971 100644
--- a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.d.ts
+++ b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.d.ts
@@ -1,9 +1,9 @@
 import type { ReactiveElement, ReactiveController } from 'lit';
 export declare class CssVariableController implements ReactiveController {
     host: ReactiveElement;
-    style: CSSStyleDeclaration;
+    style?: CSSStyleDeclaration;
     constructor(host: ReactiveElement);
     private parseProperty;
     getVariable(name: string): string | null;
-    hostConnected?(): void;
+    hostConnected(): void;
 }
diff --git a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js
index 0429f6c..62a9944 100644
--- a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js
@@ -1,13 +1,19 @@
 export class CssVariableController {
     constructor(host) {
         this.host = host;
-        this.style = window.getComputedStyle(host);
+        if (this.host.isConnected) {
+            this.hostConnected();
+        }
     }
     parseProperty(name) {
         return name.substring(0, 2) !== '--' ? `--${name}` : name;
     }
     getVariable(name) {
-        return this.style.getPropertyValue(this.parseProperty(name)).trim() || null;
+        return this.style?.getPropertyValue(this.parseProperty(name)).trim() || null;
     }
+    hostConnected() {
+        this.style = window.getComputedStyle(this.host);
+    }
+    ;
 }
 //# sourceMappingURL=css-variable-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js.map
index 197e9a6..578d0fd 100644
--- a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"css-variable-controller.js","sourceRoot":"","sources":["css-variable-controller.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,qBAAqB;IAGhC,YAAmB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;QACtC,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAEO,aAAa,CAAC,IAAY;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5D,CAAC;IAED,WAAW,CAAC,IAAY;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;IAC9E,CAAC;CAGF","sourcesContent":["import type { ReactiveElement, ReactiveController } from 'lit';\n\nexport class CssVariableController implements ReactiveController {\n  style: CSSStyleDeclaration;\n\n  constructor(public host: ReactiveElement) {\n    this.style = window.getComputedStyle(host);\n  }\n\n  private parseProperty(name: string) {\n    return name.substring(0, 2) !== '--' ? `--${name}` : name;\n  }\n\n  getVariable(name: string): string | null {\n    return this.style.getPropertyValue(this.parseProperty(name)).trim() || null;\n  }\n\n  hostConnected?(): void;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"css-variable-controller.js","sourceRoot":"","sources":["css-variable-controller.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,qBAAqB;IAGhC,YAAmB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;QACtC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,IAAY;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5D,CAAC;IAED,WAAW,CAAC,IAAY;QACtB,OAAO,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;IAC/E,CAAC;IAED,aAAa;QACX,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAAA,CAAC;CACH","sourcesContent":["import type { ReactiveElement, ReactiveController } from 'lit';\n\nexport class CssVariableController implements ReactiveController {\n  style?: CSSStyleDeclaration;\n\n  constructor(public host: ReactiveElement) {\n    if (this.host.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  private parseProperty(name: string) {\n    return name.substring(0, 2) !== '--' ? `--${name}` : name;\n  }\n\n  getVariable(name: string): string | null {\n    return this.style?.getPropertyValue(this.parseProperty(name)).trim() || null;\n  }\n\n  hostConnected(): void {\n    this.style = window.getComputedStyle(this.host);\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.ts b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.ts
new file mode 100644
index 0000000..acb5ae3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/css-variable-controller.ts
@@ -0,0 +1,23 @@
+import type { ReactiveElement, ReactiveController } from 'lit';
+
+export class CssVariableController implements ReactiveController {
+  style?: CSSStyleDeclaration;
+
+  constructor(public host: ReactiveElement) {
+    if (this.host.isConnected) {
+      this.hostConnected();
+    }
+  }
+
+  private parseProperty(name: string) {
+    return name.substring(0, 2) !== '--' ? `--${name}` : name;
+  }
+
+  getVariable(name: string): string | null {
+    return this.style?.getPropertyValue(this.parseProperty(name)).trim() || null;
+  }
+
+  hostConnected(): void {
+    this.style = window.getComputedStyle(this.host);
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/floating-dom-controller.ts b/node_modules/@patternfly/pfe-core/controllers/floating-dom-controller.ts
new file mode 100644
index 0000000..3bb9c76
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/floating-dom-controller.ts
@@ -0,0 +1,207 @@
+import type { Placement } from '@floating-ui/dom';
+import type { LitElement, ReactiveController, ReactiveControllerHost } from 'lit';
+import type { StyleInfo } from 'lit/directives/style-map.js';
+import type { OffsetOptions as Offset } from '@floating-ui/core';
+
+export type { Placement };
+
+import {
+  autoUpdate,
+  computePosition,
+  offset as offsetMiddleware,
+  shift as shiftMiddleware,
+  flip as flipMiddleware,
+  arrow as arrowMiddleware,
+} from '@floating-ui/dom';
+
+type Lazy<T> = T | (() => T | null | undefined);
+
+interface FloatingDOMControllerOptions {
+  content: Lazy<HTMLElement>;
+  invoker?: Lazy<HTMLElement>;
+  arrow?: Lazy<HTMLElement>;
+  shift?: boolean;
+  padding?: number;
+  fallbackPlacements?: Placement[];
+}
+
+interface ShowOptions {
+  offset?: Offset;
+  placement?: Placement;
+  flip?: boolean;
+  fallbackPlacements?: Placement[];
+}
+
+export type Anchor = '' | 'top' | 'left' | 'bottom' | 'right';
+export type Alignment = 'center' | 'start' | 'end';
+
+/**
+ * Controls floating DOM within a web component, e.g. tooltips and popovers
+ */
+export class FloatingDOMController implements ReactiveController {
+  #open = false;
+  #opening = false;
+  #cleanup?: () => void;
+  #anchor?: Anchor;
+  #alignment?: Alignment;
+  #styles?: StyleInfo;
+  #placement?: Placement;
+  #options: FloatingDOMControllerOptions;
+
+  get #invoker() {
+    const { invoker } = this.#options;
+    return typeof invoker === 'function' ? invoker() : invoker;
+  }
+
+  get #content() {
+    const { content } = this.#options;
+    return typeof content === 'function' ? content() : content;
+  }
+
+  get #arrow() {
+    const { arrow } = this.#options;
+    return typeof arrow === 'function' ? arrow() : arrow;
+  }
+
+  /** The crosswise alignment of the invoker on which to display the floating DOM */
+  get alignment(): Alignment {
+    return this.#alignment ?? 'center';
+  }
+
+  /** The side of the invoker on which to display the floating DOM */
+  get anchor(): Anchor {
+    return this.#anchor ?? '';
+  }
+
+  /**
+   * When true, the floating DOM is visible
+   */
+  get open(): boolean {
+    return this.#open;
+  }
+
+  /** The computed placement of the floating DOM */
+  get placement(): Placement {
+    return this.#placement ?? 'top';
+  }
+
+  /**
+   * Styles to apply to your element's container
+   *
+   * - `--_floating-content-translate`: translate to apply to floating content.
+   */
+  get styles(): StyleInfo {
+    return this.#styles ?? {};
+  }
+
+  constructor(
+    private host: ReactiveControllerHost,
+    options: FloatingDOMControllerOptions
+  ) {
+    host.addController(this);
+    this.#options = {
+      invoker: (() => host as LitElement),
+      shift: true,
+      ...options,
+    };
+  }
+
+  hostDisconnected(): void {
+    this.#cleanup?.();
+  }
+
+  async #update(
+    placement: Placement = 'top',
+    offset?: Offset,
+    flip = true,
+    fallbackPlacements?: Placement[],
+  ) {
+    const { padding, shift } = this.#options;
+
+    const invoker = this.#invoker;
+    const content = this.#content;
+    const arrow = this.#arrow;
+    if (!invoker || !content) {
+      return;
+    }
+    const {
+      x,
+      y,
+      placement: _placement,
+      middlewareData,
+    } = await computePosition(invoker, content, {
+      strategy: 'absolute',
+      placement,
+      middleware: [
+        offsetMiddleware(offset),
+        shift && shiftMiddleware({ padding }),
+        arrow && arrowMiddleware({ element: arrow, padding: arrow.offsetHeight / 2 }),
+        flip && flipMiddleware({ padding, fallbackPlacements }),
+      ].filter(Boolean),
+    });
+
+    if (arrow) {
+      const { x: arrowX, y: arrowY } = middlewareData.arrow || {};
+
+      const staticSide = {
+        top: 'bottom',
+        right: 'left',
+        bottom: 'top',
+        left: 'right',
+      }[_placement.split('-')[0]] || '';
+
+      Object.assign(arrow.style, {
+        left: arrowX != null ? `${arrowX}px` : '',
+        top: arrowY != null && !['top'].includes(_placement) ? `${arrowY}px` : '',
+        right: '',
+        bottom: '',
+        [staticSide]: `-${arrow.offsetHeight / 2}px`,
+      });
+    }
+
+    this.#placement = _placement;
+    [this.#anchor, this.#alignment] = (this.#placement.split('-') ?? []) as [Anchor, Alignment];
+    this.#styles = {
+      '--_floating-content-translate': `${x}px ${y}px`,
+    };
+    this.host.requestUpdate();
+  }
+
+  /**
+   * Show the floating DOM
+   * @param [options={}]
+   * @param options.offset
+   * @param options.placement
+   * @param options.flip
+   * @param options.fallbackPlacements
+   * */
+  async show({ offset, placement, flip, fallbackPlacements }: ShowOptions = {}): Promise<void> {
+    const invoker = this.#invoker;
+    const content = this.#content;
+    if (!invoker || !content) {
+      return;
+    }
+    if (!this.#opening) {
+      this.#opening = true;
+      const p = this.#update(placement, offset, flip, fallbackPlacements);
+      this.#cleanup ??= autoUpdate(invoker, content, () =>
+        this.#update(placement, offset, flip, fallbackPlacements));
+      await p;
+      this.#opening = false;
+    }
+    this.#open = true;
+    this.host.requestUpdate();
+  }
+
+  /** Hide the floating DOM */
+  async hide(): Promise<void> {
+    await this.host.updateComplete;
+    while (this.#opening && !this.open) {
+      await new Promise(requestAnimationFrame);
+    }
+    this.#open = false;
+    this.#cleanup?.();
+    this.host.requestUpdate();
+    await this.host.updateComplete;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/internals-controller.ts b/node_modules/@patternfly/pfe-core/controllers/internals-controller.ts
new file mode 100644
index 0000000..6b50b00
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/internals-controller.ts
@@ -0,0 +1,305 @@
+import {
+  isServer,
+  type ReactiveController,
+  type ReactiveControllerHost,
+  type LitElement,
+} from 'lit';
+
+function isARIAMixinProp(key: string): key is keyof ARIAMixin {
+  return key === 'role' || key.startsWith('aria');
+}
+
+type FACE = HTMLElement & {
+  formDisabledCallback?(disabled: boolean): void;
+};
+
+const protos = new WeakMap();
+
+let constructingAllowed = false;
+
+interface InternalsControllerOptions extends Partial<ARIAMixin> {
+  getHTMLElement?(): HTMLElement;
+}
+
+/**
+ * reactively forward the internals object's aria mixin prototype
+ * @param target
+ * @param key
+ */
+function aria(
+  target: InternalsController,
+  key: keyof InternalsController,
+) {
+  if (!protos.has(target)) {
+    protos.set(target, new Set());
+  }
+  if (protos.get(target).has(key)) {
+    return;
+  }
+  if (!isARIAMixinProp(key)) {
+    throw new Error('@aria can only be called on ARIAMixin properties');
+  }
+  // typescript experimental decorator
+  Object.defineProperty(target, key, {
+    enumerable: true,
+    configurable: false,
+    get(this: InternalsController) {
+      // @ts-expect-error: because i'm bad, i'm bad
+      const internals = this.attachOrRetrieveInternals();
+      return internals[key];
+    },
+    set(this: InternalsController, value: string | null) {
+      // @ts-expect-error: ya know it!
+      const internals = this.attachOrRetrieveInternals();
+      // @ts-expect-error: shamone!
+      internals[key] = value;
+      this.host.requestUpdate();
+    },
+  });
+  protos.get(target).add(key);
+}
+
+function getLabelText(label: HTMLElement) {
+  if (label.hidden) {
+    return '';
+  } else {
+    const ariaLabel = label.getAttribute?.('aria-label');
+    return ariaLabel ?? label.textContent;
+  }
+}
+
+export class InternalsController implements ReactiveController, ARIAMixin {
+  private static instances = new WeakMap<ReactiveControllerHost, InternalsController>();
+
+  declare readonly form: ElementInternals['form'];
+  declare readonly shadowRoot: ElementInternals['shadowRoot'];
+
+  // https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/states
+  declare readonly states: unknown;
+  declare readonly willValidate: ElementInternals['willValidate'];
+  declare readonly validationMessage: ElementInternals['validationMessage'];
+
+  public static getLabels(host: ReactiveControllerHost): Element[] {
+    return Array.from(this.instances.get(host)?.internals.labels ?? []) as Element[];
+  }
+
+  public static isSafari: boolean =
+    !isServer && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
+
+  public static of(
+    host: ReactiveControllerHost,
+    options?: InternalsControllerOptions,
+  ): InternalsController {
+    constructingAllowed = true;
+    // implement the singleton pattern
+    // using a public static constructor method is much easier to manage,
+    // due to the quirks of our typescript config
+    const instance: InternalsController =
+      InternalsController.instances.get(host)
+      ?? new InternalsController(host, options);
+    instance.initializeOptions(options);
+    constructingAllowed = false;
+    return instance;
+  }
+
+  @aria role: string | null = null;
+
+  @aria ariaActivedescendant: string | null = null;
+  @aria ariaAtomic: string | null = null;
+  @aria ariaAutoComplete: string | null = null;
+  @aria ariaBusy: string | null = null;
+  @aria ariaBrailleLabel: string | null = null;
+  @aria ariaBrailleRoleDescription: string | null = null;
+  @aria ariaChecked: string | null = null;
+  @aria ariaColCount: string | null = null;
+  @aria ariaColIndex: string | null = null;
+  @aria ariaColIndexText: string | null = null;
+  @aria ariaColSpan: string | null = null;
+  @aria ariaCurrent: string | null = null;
+  @aria ariaDescription: string | null = null;
+  @aria ariaDisabled: string | null = null;
+  @aria ariaExpanded: string | null = null;
+  @aria ariaHasPopup: string | null = null;
+  @aria ariaHidden: string | null = null;
+  @aria ariaInvalid: string | null = null;
+  @aria ariaKeyShortcuts: string | null = null;
+  @aria ariaLabel: string | null = null;
+  @aria ariaLevel: string | null = null;
+  @aria ariaLive: string | null = null;
+  @aria ariaModal: string | null = null;
+  @aria ariaMultiLine: string | null = null;
+  @aria ariaMultiSelectable: string | null = null;
+  @aria ariaOrientation: string | null = null;
+  @aria ariaPlaceholder: string | null = null;
+  @aria ariaPosInSet: string | null = null;
+  @aria ariaPressed: string | null = null;
+  @aria ariaReadOnly: string | null = null;
+  @aria ariaRequired: string | null = null;
+  @aria ariaRoleDescription: string | null = null;
+  @aria ariaRowCount: string | null = null;
+  @aria ariaRowIndex: string | null = null;
+  @aria ariaRowIndexText: string | null = null;
+  @aria ariaRowSpan: string | null = null;
+  @aria ariaSelected: string | null = null;
+  @aria ariaSetSize: string | null = null;
+  @aria ariaSort: string | null = null;
+  @aria ariaValueMax: string | null = null;
+  @aria ariaValueMin: string | null = null;
+  @aria ariaValueNow: string | null = null;
+  @aria ariaValueText: string | null = null;
+
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaActiveDescendantElement: Element | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaControlsElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaDescribedByElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaDetailsElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaErrorMessageElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaFlowToElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaLabelledByElements: Element[] | null = null;
+  /** WARNING: be careful of cross-root ARIA browser support */
+  @aria ariaOwnsElements: Element[] | null = null;
+
+  /** True when the control is disabled via it's containing fieldset element */
+  get formDisabled(): boolean {
+    if (isServer) {
+      return this._formDisabled;
+    } else {
+      return this.element?.matches(':disabled') || this._formDisabled;
+    }
+  }
+
+  get labels(): NodeList {
+    return this.internals.labels;
+  }
+
+  get validity(): ValidityState {
+    return this.internals.validity;
+  }
+
+  /** A best-attempt based on observed behaviour in FireFox 115 on fedora 38 */
+  get computedLabelText(): string {
+    return this.internals.ariaLabel
+      || Array.from(this.internals.labels as NodeListOf<HTMLElement>)
+          .reduce((acc, label) =>
+            `${acc}${getLabelText(label)}`, '');
+  }
+
+  private get element() {
+    if (isServer) {
+      // FIXME(bennyp): a little white lie, which may break
+      // when the controller is applied to non-lit frameworks.
+      return this.host as LitElement;
+    } else {
+      return this.host instanceof HTMLElement ? this.host : this.options?.getHTMLElement?.();
+    }
+  }
+
+  private internals!: ElementInternals;
+
+  private _formDisabled = false;
+
+  private constructor(
+    public host: ReactiveControllerHost,
+    private options?: InternalsControllerOptions,
+  ) {
+    if (!constructingAllowed) {
+      throw new Error('InternalsController must be constructed with `InternalsController.for()`');
+    }
+    if (!this.element) {
+      throw new Error(
+        `InternalsController must be instantiated with an HTMLElement or a \`getHTMLElement\` function`,
+      );
+    }
+    this.attachOrRetrieveInternals();
+    this.initializeOptions(options);
+    InternalsController.instances.set(host, this);
+    this.#polyfillDisabledPseudo();
+  }
+
+  /**
+   * We need to polyfill :disabled
+   * see https://github.com/calebdwilliams/element-internals-polyfill/issues/88
+   */
+  #polyfillDisabledPseudo() {
+    // START polyfill-disabled
+    // We need to polyfill :disabled
+    // see https://github.com/calebdwilliams/element-internals-polyfill/issues/88
+    const orig = (this.element as FACE).formDisabledCallback;
+    (this.element as FACE).formDisabledCallback = disabled => {
+      this._formDisabled = disabled;
+      orig?.call(this.host, disabled);
+    // END polyfill-disabled
+    };
+  }
+
+  /**
+   * Typescript (with experimental decorators) will compile the class
+   * such that the order of operations is:
+   * 1. set up constructor parameter fields
+   * 2. run decorated field setters with initializers as the value
+   * 3. run the rest of the constructor
+   * Because of that, `this.internals` may not be available in the decorator setter
+   * so we cheat here with nullish coalescing assignment operator `??=`;
+   */
+  private attachOrRetrieveInternals() {
+    this.internals ??= this.element!.attachInternals();
+    return this.internals;
+  }
+
+  private initializeOptions(options?: Partial<ARIAMixin>) {
+    this.options ??= options ?? {};
+    const { getHTMLElement, ...aria } = this.options;
+    this.options.getHTMLElement ??= getHTMLElement;
+    for (const [key, val] of Object.entries(aria)) {
+      if (isARIAMixinProp(key)) {
+        this[key as keyof this] = val as this[keyof this];
+      }
+    }
+  }
+
+  hostConnected?(): void;
+
+  setFormValue(...args: Parameters<ElementInternals['setFormValue']>): void {
+    return this.internals.setFormValue(...args);
+  }
+
+  setValidity(...args: Parameters<ElementInternals['setValidity']>): void {
+    return this.internals.setValidity(...args);
+  }
+
+  checkValidity(...args: Parameters<ElementInternals['checkValidity']>): boolean {
+    return this.internals.checkValidity(...args);
+  }
+
+  reportValidity(...args: Parameters<ElementInternals['reportValidity']>): boolean {
+    return this.internals.reportValidity(...args);
+  }
+
+  submit(): void {
+    this.internals.form?.requestSubmit();
+  }
+
+  reset(): void {
+    this.internals.form?.reset();
+  }
+}
+
+/** @see https://w3c.github.io/aria/#ref-for-dom-ariamixin-ariaactivedescendantelement-1 */
+declare global {
+  interface ARIAMixin {
+    ariaActiveDescendantElement: Element | null;
+    ariaControlsElements: readonly Element[] | null;
+    ariaDescribedByElements: readonly Element[] | null;
+    ariaDetailsElements: readonly Element[] | null;
+    ariaErrorMessageElements: readonly Element[] | null;
+    ariaFlowToElements: readonly Element[] | null;
+    ariaLabelledByElements: readonly Element[] | null;
+    ariaOwnsElements: readonly Element[] | null;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.d.ts b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.d.ts
index d31b514..4bf8ba4 100644
--- a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.d.ts
+++ b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.d.ts
@@ -1,4 +1,4 @@
-import type { ReactiveController, ReactiveElement } from 'lit';
+import { type ReactiveController, type ReactiveElement } from 'lit';
 export interface Options {
     observe?: boolean | MutationObserverInit;
     emptyWarning?: string;
diff --git a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js
index e256eb6..3c82ece 100644
--- a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js
@@ -1,3 +1,4 @@
+import { isServer } from 'lit';
 import { Logger } from './logger.js';
 export class LightDOMController {
     constructor(host, initializer, options) {
@@ -31,8 +32,13 @@ export class LightDOMController {
      * Returns a boolean statement of whether or not this component contains any light DOM.
      */
     hasLightDOM() {
-        return !!(this.host.children.length > 0
-            || (this.host.textContent ?? '').trim().length > 0);
+        if (isServer) {
+            return false;
+        }
+        else {
+            return !!(this.host.children.length > 0
+                || (this.host.textContent ?? '').trim().length > 0);
+        }
     }
 }
 //# sourceMappingURL=light-dom-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js.map
index 02f424a..b6d1bf9 100644
--- a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"light-dom-controller.js","sourceRoot":"","sources":["light-dom-controller.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAOrC,MAAM,OAAO,kBAAkB;IAK7B,YACU,IAAqB,EAC7B,WAAuB,EACf,OAA6B;QAF7B,SAAI,GAAJ,IAAI,CAAiB;QAErB,YAAO,GAAP,OAAO,CAAsB;QAErC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,EAAE,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;aAAM,IAAI,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACvB,CAAC;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC;YAClC,8CAA8C;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CACb,IAAI,CAAC,IAAI,EACP,OAAO,IAAI,CAAC,OAAO,EAAE,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;gBACjE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,OAA+B,CAChD,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,WAAW;QACT,OAAO,CAAC,CAAC,CACP,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;eAC1B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CACnD,CAAC;IACJ,CAAC;CACF","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { Logger } from './logger.js';\n\nexport interface Options {\n  observe?: boolean | MutationObserverInit;\n  emptyWarning?: string;\n}\n\nexport class LightDOMController implements ReactiveController {\n  private mo: MutationObserver;\n  private logger: Logger;\n  private initializer: () => void;\n\n  constructor(\n    private host: ReactiveElement,\n    initializer: () => void,\n    private options?: Options | undefined,\n  ) {\n    this.initializer = initializer.bind(host);\n    this.mo = new MutationObserver(this.initializer);\n    this.logger = new Logger(this.host);\n    host.addController(this);\n  }\n\n  hostConnected(): void {\n    if (this.hasLightDOM()) {\n      this.initializer();\n    } else if (this.options?.emptyWarning) {\n      this.logger.warn(this.options?.emptyWarning);\n    }\n\n    this.initObserver();\n  }\n\n  hostDisconnected(): void {\n    this.mo.disconnect();\n  }\n\n  private initObserver() {\n    if (this.options?.observe ?? true) {\n      // Use the provided options, or their defaults\n      this.mo.observe(\n        this.host,\n          typeof this.options?.observe !== 'object' ? { childList: true }\n        : this.options?.observe as MutationObserverInit\n      );\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   */\n  hasLightDOM(): boolean {\n    return !!(\n      this.host.children.length > 0\n      || (this.host.textContent ?? '').trim().length > 0\n    );\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"light-dom-controller.js","sourceRoot":"","sources":["light-dom-controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAiD,MAAM,KAAK,CAAC;AAE9E,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAOrC,MAAM,OAAO,kBAAkB;IAK7B,YACU,IAAqB,EAC7B,WAAuB,EACf,OAA6B;QAF7B,SAAI,GAAJ,IAAI,CAAiB;QAErB,YAAO,GAAP,OAAO,CAAsB;QAErC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,EAAE,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;aAAM,IAAI,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACvB,CAAC;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC;YAClC,8CAA8C;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CACb,IAAI,CAAC,IAAI,EACP,OAAO,IAAI,CAAC,OAAO,EAAE,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;gBACjE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,OAA+B,CAChD,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,CAAC,CACP,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;mBAC1B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CACnD,CAAC;QACJ,CAAC;IACH,CAAC;CACF","sourcesContent":["import { isServer, type ReactiveController, type ReactiveElement } from 'lit';\n\nimport { Logger } from './logger.js';\n\nexport interface Options {\n  observe?: boolean | MutationObserverInit;\n  emptyWarning?: string;\n}\n\nexport class LightDOMController implements ReactiveController {\n  private mo: MutationObserver;\n  private logger: Logger;\n  private initializer: () => void;\n\n  constructor(\n    private host: ReactiveElement,\n    initializer: () => void,\n    private options?: Options | undefined,\n  ) {\n    this.initializer = initializer.bind(host);\n    this.mo = new MutationObserver(this.initializer);\n    this.logger = new Logger(this.host);\n    host.addController(this);\n  }\n\n  hostConnected(): void {\n    if (this.hasLightDOM()) {\n      this.initializer();\n    } else if (this.options?.emptyWarning) {\n      this.logger.warn(this.options?.emptyWarning);\n    }\n\n    this.initObserver();\n  }\n\n  hostDisconnected(): void {\n    this.mo.disconnect();\n  }\n\n  private initObserver() {\n    if (this.options?.observe ?? true) {\n      // Use the provided options, or their defaults\n      this.mo.observe(\n        this.host,\n          typeof this.options?.observe !== 'object' ? { childList: true }\n        : this.options?.observe as MutationObserverInit\n      );\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   */\n  hasLightDOM(): boolean {\n    if (isServer) {\n      return false;\n    } else {\n      return !!(\n        this.host.children.length > 0\n        || (this.host.textContent ?? '').trim().length > 0\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.ts b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.ts
new file mode 100644
index 0000000..321010a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/light-dom-controller.ts
@@ -0,0 +1,64 @@
+import { isServer, type ReactiveController, type ReactiveElement } from 'lit';
+
+import { Logger } from './logger.js';
+
+export interface Options {
+  observe?: boolean | MutationObserverInit;
+  emptyWarning?: string;
+}
+
+export class LightDOMController implements ReactiveController {
+  private mo: MutationObserver;
+  private logger: Logger;
+  private initializer: () => void;
+
+  constructor(
+    private host: ReactiveElement,
+    initializer: () => void,
+    private options?: Options | undefined,
+  ) {
+    this.initializer = initializer.bind(host);
+    this.mo = new MutationObserver(this.initializer);
+    this.logger = new Logger(this.host);
+    host.addController(this);
+  }
+
+  hostConnected(): void {
+    if (this.hasLightDOM()) {
+      this.initializer();
+    } else if (this.options?.emptyWarning) {
+      this.logger.warn(this.options?.emptyWarning);
+    }
+
+    this.initObserver();
+  }
+
+  hostDisconnected(): void {
+    this.mo.disconnect();
+  }
+
+  private initObserver() {
+    if (this.options?.observe ?? true) {
+      // Use the provided options, or their defaults
+      this.mo.observe(
+        this.host,
+          typeof this.options?.observe !== 'object' ? { childList: true }
+        : this.options?.observe as MutationObserverInit
+      );
+    }
+  }
+
+  /**
+   * Returns a boolean statement of whether or not this component contains any light DOM.
+   */
+  hasLightDOM(): boolean {
+    if (isServer) {
+      return false;
+    } else {
+      return !!(
+        this.host.children.length > 0
+        || (this.host.textContent ?? '').trim().length > 0
+      );
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/listbox-controller.ts b/node_modules/@patternfly/pfe-core/controllers/listbox-controller.ts
new file mode 100644
index 0000000..22c4123
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/listbox-controller.ts
@@ -0,0 +1,560 @@
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+import type { RequireProps } from '../core.ts';
+
+import { isServer } from 'lit';
+import { arraysAreEquivalent } from '../functions/arraysAreEquivalent.js';
+
+/**
+ * Options for listbox controller
+ */
+export interface ListboxControllerOptions<Item extends HTMLElement> {
+  /**
+   * Whether the listbox supports multiple selections.
+   */
+  multi?: boolean;
+  /**
+   * Optional callback to control the selection behavior of items. By default, ListboxController
+   * will set the `aria-selected` attribute. When overriding this option, it will call it on your
+   * element with the selected state.
+   * Callers **must** ensure that the correct ARIA state is set.
+   */
+  setItemSelected?(item: Item, selected: boolean): void;
+  /**
+   * Optional predicate to ascertain whether a custom element item is disabled or not
+   * By default, if the item matches any of these conditions, it is considered disabled:
+   * 1. it's `disabled` DOM property is `true`
+   * 1. it has the `aria-disabled="true"` attribute
+   * 2. it has the `disabled` attribute present
+   * 3. it matches the `:disabled` pseudo selector
+   */
+  isItemDisabled?(item: Item): boolean;
+  /**
+   * Predicate which determines if a given element is in fact an item
+   * instead of e.g a presentational divider. By default, elements must meet the following criteria
+   * 1. element a child of a listbox role,
+   * 2. element does not have role="presentation"
+   * 2. element is not an `<hr>`
+   * **NB**: When overriding, you must avoid outside references. This predicate must
+   * only consider the element itself, without reference to the host element's items array.
+   * @example ```js
+   *          isItem: (item) => item instanceof MyCustomItem
+   *          ```
+   */
+  isItem?(item: EventTarget | null): item is Item;
+  /**
+   * Function returning the item which currently has assistive technology focus.
+   * In most cases, this should be the `atFocusedItem` of an ATFocusController
+   * i.e. RovingTabindexController or ActivedescendantController.
+   *
+   */
+  getATFocusedItem(): Item | null;
+  /**
+   * Function returning the DOM node which is the direct parent of the item elements
+   * Defaults to the controller host.
+   * If the controller host is not an HTMLElement, this *must* be set
+   */
+  getItemsContainer?(): HTMLElement | null;
+  /**
+   * Optional function returning an additional DOM node which controls the listbox, e.g.
+   * a combobox input.
+   */
+  getControlsElements?(): HTMLElement[];
+}
+
+/**
+ * This is the default method for setting the selected state on an item element
+ * @param item the item
+ * @param selected is this item selected
+ */
+function setItemSelected<Item extends HTMLElement>(item: Item, selected: boolean) {
+  if (selected) {
+    item.setAttribute('aria-selected', 'true');
+  } else {
+    item.removeAttribute('aria-selected');
+  }
+}
+
+/**
+ * @param item possible disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export function isItem<Item extends HTMLElement>(item: EventTarget | null): item is Item {
+  return item instanceof Element
+    && item?.parentElement?.role === 'listbox'
+    && item?.role !== 'presentation'
+    && item?.localName !== 'hr';
+}
+
+/**
+ * This is a fib. aria-disabled might not be present on an element that uses internals,
+ * and the `disabled` attribute may not accurately represent the disabled state.
+ * short of patching the `attachInternals` constructor, it may not be possible at
+ * runtime to know with certainty that an arbitrary custom element is disabled or not.
+ * @param item possibly disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export function isItemDisabled<Item extends HTMLElement>(item: Item): boolean {
+  return ('disabled' in item && typeof item.disabled === 'boolean' && item.disabled)
+      || item.getAttribute('aria-disabled') === 'true'
+      || item.hasAttribute('disabled')
+      || item.hasAttribute('inert')
+      || item.matches(':disabled');
+}
+
+let constructingAllowed = false;
+
+/**
+ * Implements listbox semantics and accesibility. As there are two recognized
+ * patterns for implementing keyboard interactions with listbox patterns,
+ * provide a secondary controller (either RovingTabindexController or
+ * ActiveDescendantController) to complete the implementation.
+ *
+ * @see https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_vs_selection
+ *
+ * > Occasionally, it may appear as if two elements on the page have focus at the same time.
+ * > For example, in a multi-select list box, when an option is selected it may be greyed.
+ * > Yet, the focus indicator can still be moved to other options, which may also be selected.
+ * > Similarly, when a user activates a tab in a tablist, the selected state is set on the tab
+ * > and its visual appearance changes. However, the user can still navigate, moving the focus
+ * > indicator elsewhere on the page while the tab retains its selected appearance and state.
+ * >
+ * > Focus and selection are quite different. From the keyboard user's perspective,
+ * > focus is a pointer, like a mouse pointer; it tracks the path of navigation.
+ * > There is only one point of focus at any time and all operations take place at the
+ * > point of focus. On the other hand, selection is an operation that can be performed in
+ * > some widgets, such as list boxes, trees, and tablists. If a widget supports only single
+ * > selection, then only one item can be selected and very often the selected state will simply
+ * > follow the focus when focus is moved inside of the widget.
+ * > That is, in some widgets, moving focus may also perform the select operation.
+ * > However, if the widget supports multiple selection, then more than one item can be in a
+ * > selected state, and keys for moving focus do not perform selection. Some multi-select widgets
+ * > do support key commands that both move focus and change selection, but those keys are
+ * > different from the normal navigation keys. Finally, when focus leaves a widget that includes
+ * > a selected element, the selected state persists.
+ * >
+ * > From the developer's perspective, the difference is simple -- the focused element is the
+ * > active element (document.activeElement). Selected elements are elements that have
+ * > aria-selected="true".
+ * >
+ * > With respect to focus and the selected state, the most important considerations for designers
+ * > and developers are:
+ * >
+ * > - The visual focus indicator must always be visible.
+ * > - The selected state must be visually distinct from the focus indicator.
+ */
+export class ListboxController<Item extends HTMLElement> implements ReactiveController {
+  private static instances = new WeakMap<ReactiveControllerHost, ListboxController<HTMLElement>>();
+
+  public static of<Item extends HTMLElement>(
+    host: ReactiveControllerHost,
+    options: ListboxControllerOptions<Item>,
+  ): ListboxController<Item> {
+    constructingAllowed = true;
+    const instance = new ListboxController<Item>(host, options);
+    constructingAllowed = false;
+    return instance as ListboxController<Item>;
+  }
+
+  /** Current active descendant when shift key is pressed */
+  #shiftStartingItem: Item | null = null;
+
+  #options: RequireProps<ListboxControllerOptions<Item>,
+    | 'setItemSelected'
+    | 'isItemDisabled'
+    | 'isItem'
+  >;
+
+  /** All items */
+  #items: Item[] = [];
+
+  #selectedItems = new Set<Item>;
+
+  #listening = false;
+
+  /** Whether listbox is disabled */
+  disabled = false;
+
+  get container(): HTMLElement {
+    return this.#options.getItemsContainer?.() ?? this.host as unknown as HTMLElement;
+  }
+
+  get multi(): boolean {
+    return !!this.#options.multi;
+  }
+
+  set multi(v: boolean) {
+    this.#options.multi = v;
+    this.host.requestUpdate();
+  }
+
+  get items(): Item[] {
+    return this.#items;
+  }
+
+  /**
+   * register's the host's Item elements as listbox controller items
+   * sets aria-setsize and aria-posinset on items
+   * @param items items
+   */
+  set items(items: Item[]) {
+    this.#items = items;
+    this.#items.forEach((item, index, _items) => {
+      item.ariaSetSize = _items.length.toString();
+      item.ariaPosInSet = (index + 1).toString();
+    });
+  }
+
+  /**
+   * sets the listbox value based on selected options
+   * @param selected item or items
+   */
+  set selected(selected: Item[]) {
+    if (!arraysAreEquivalent(selected, Array.from(this.#selectedItems))) {
+      this.#selectedItems = new Set(selected);
+      for (const item of this.items) {
+        this.#options.setItemSelected(item, this.#selectedItems.has(item));
+      }
+      this.host.requestUpdate();
+    }
+  }
+
+  /**
+   * array of options which are selected
+   */
+  get selected(): Item[] {
+    return [...this.#selectedItems];
+  }
+
+  private constructor(
+    public host: ReactiveControllerHost,
+    options: ListboxControllerOptions<Item>,
+  ) {
+    this.#options = { setItemSelected, isItemDisabled, isItem, ...options };
+    if (!constructingAllowed) {
+      throw new Error('ListboxController must be constructed with `ListboxController.of()`');
+    }
+    if (!isServer
+        && !(host instanceof HTMLElement)
+        && typeof options.getItemsContainer !== 'function') {
+      throw new Error([
+        'ListboxController requires the host to be an HTMLElement',
+        'or for the initializer to include a getItemsContainer() function',
+      ].join(' '));
+    }
+    const instance = ListboxController.instances.get(host) as unknown as ListboxController<Item>;
+    if (instance) {
+      return instance as ListboxController<Item>;
+    }
+    ListboxController.instances.set(host, this as unknown as ListboxController<HTMLElement>);
+    this.host.addController(this);
+    this.multi = this.#options.multi ?? false;
+    if (this.container?.isConnected) {
+      this.hostConnected();
+    }
+  }
+
+  async hostConnected(): Promise<void> {
+    await this.host.updateComplete;
+    this.hostUpdate();
+    this.hostUpdated();
+  }
+
+  #controlsElements: HTMLElement[] = [];
+
+  #removeControlsListeners(els = this.#controlsElements) {
+    for (const el of els) {
+      el.removeEventListener('keydown', this.#onKeydown);
+      el.removeEventListener('keyup', this.#onKeyup);
+    }
+  }
+
+  hostUpdate(): void {
+    const last = this.#controlsElements;
+    this.#controlsElements = this.#options.getControlsElements?.() ?? [];
+    if (!arraysAreEquivalent(last, this.#controlsElements)) {
+      this.#removeControlsListeners(last);
+      for (const el of this.#controlsElements) {
+        el.addEventListener('keydown', this.#onKeydown);
+        el.addEventListener('keyup', this.#onKeyup);
+      }
+    }
+  }
+
+  hostUpdated(): void {
+    if (!this.#listening) {
+      this.container?.addEventListener('click', this.#onClick);
+      this.container?.addEventListener('keydown', this.#onKeydown);
+      this.container?.addEventListener('keyup', this.#onKeyup);
+      this.#listening = true;
+    }
+    this.container?.setAttribute('role', 'listbox');
+    this.container?.setAttribute('aria-disabled', String(!!this.disabled));
+    this.container?.setAttribute('aria-multiselectable', String(!!this.#options.multi));
+  }
+
+  hostDisconnected(): void {
+    this.container?.removeEventListener('click', this.#onClick);
+    this.container?.removeEventListener('keydown', this.#onKeydown);
+    this.container?.removeEventListener('keyup', this.#onKeyup);
+    this.#removeControlsListeners();
+    this.#listening = false;
+  }
+
+  public isSelected(item: Item): boolean {
+    return this.#selectedItems.has(item);
+  }
+
+  get #isExpanded() {
+    return !this.#controlsElements.length ? true
+      : this.#controlsElements.every(x => x.ariaExpanded === 'true');
+  }
+
+  /**
+   * In the case where aria IDL attributes are not supported,
+   * we need to correlate the item in the event path (i.e. the shadow dom clone)
+   * with the item in listbox controller's root (i.e. the hidden light dom original)
+   * XXX: as long as there is no DOM preceeding the shadow root clones, this will work
+   * @param event click or keyboard event
+   */
+  #getItemFromEvent(event: Event): Item | null {
+    // NOTE(bennypowers): I am aware that this function *sucks*
+    // you're more than welcome to improve it.
+    // make sure there are unit tests first
+    const path = event.composedPath();
+    const tabindexed = this.items.some(x => x.hasAttribute('tabindex'));
+    if (tabindexed) {
+      const item = path.find(this.#options.isItem);
+      if (item) {
+        return item;
+      }
+    } else if (this.#options.isItem(event.target)
+               && event.target.getRootNode() !== this.container.getRootNode()
+               && 'ariaActiveDescendantElement' in HTMLElement.prototype) {
+      return event.target;
+    } else if (event.target instanceof HTMLElement && event.target.ariaActiveDescendantElement) {
+      return event.target.ariaActiveDescendantElement as Item;
+    } else if (event.type === 'click'
+               && this.#options.isItem(event.target)
+               && event.target.id) {
+      const element = event.target;
+      const root = element.getRootNode();
+      if (root instanceof ShadowRoot && this.container.getRootNode() === root) {
+        const shadowRootListboxElement = this.container;
+        const shadowRootItem = element;
+        if (shadowRootItem && shadowRootListboxElement) {
+          if (this.items.includes(shadowRootItem)) {
+            return shadowRootItem;
+          } else {
+            const index =
+              Array.from(shadowRootListboxElement?.children ?? [])
+                  .filter(this.#options.isItem)
+                  .filter(x => !x.hidden)
+                  .indexOf(shadowRootItem);
+            return this.#items.filter(x => !x.hidden)[index];
+          }
+        }
+      }
+    } else {
+      // otherwise, query the root (e.g. shadow root) for the associated element
+      const element = event.target as HTMLElement;
+
+      const root = element.getRootNode() as ShadowRoot | Document;
+
+      const controlsId = element?.getAttribute('aria-controls');
+      const shadowRootListboxElement =
+          this.#options.isItem(element) ? this.container
+        : controlsId ? root.getElementById(controlsId)
+        : null;
+
+      const shadowRootHasActiveDescendantElement =
+        root.querySelector(`[aria-controls="${shadowRootListboxElement?.id}"][aria-activedescendant]`);
+
+      const shadowRootItemId =
+        shadowRootHasActiveDescendantElement?.getAttribute('aria-activedescendant');
+
+      const shadowRootItem =
+        shadowRootItemId && root.getElementById(shadowRootItemId) as Item | null;
+
+      if (shadowRootItem && shadowRootListboxElement) {
+        if (this.items.includes(shadowRootItem)) {
+          return shadowRootItem;
+        } else {
+          const index =
+            Array.from(shadowRootListboxElement?.children ?? [])
+                .filter(this.#options.isItem)
+                .filter(x => !x.hidden)
+                .indexOf(shadowRootItem);
+          return this.#items.filter(x => !x.hidden)[index];
+        }
+      }
+
+      const itemFromEventContainer =
+        shadowRootListboxElement ? shadowRootListboxElement
+      : path.find(x =>
+        x instanceof HTMLElement && x.role === 'listbox') as HTMLElement;
+
+      if (itemFromEventContainer) {
+        const possiblyShadowRootContainerItems = Array.from(itemFromEventContainer.children)
+            .filter(this.#options.isItem);
+
+        const index = possiblyShadowRootContainerItems
+            .findIndex(node => path.includes(node));
+
+        if (index >= 0) {
+          return this.items[index] ?? null;
+        }
+      }
+    }
+
+    return null;
+  }
+
+  /**
+   * handles clicking on a listbox option:
+   * which selects an item by default
+   * or toggles selection if multiselectable
+   * @param event click event
+   */
+  #onClick = (event: MouseEvent) => {
+    const item = this.#getItemFromEvent(event);
+    this.#shiftStartingItem ??= this.#getItemFromEvent(event);
+    if (item && !this.#options.isItemDisabled(item)) {
+      // Case: single select?
+      //       just reset the selected list.
+      if (!this.multi) {
+        // select target and deselect all other options
+        this.selected = [item];
+      // Case: multi select, but no shift key
+      //       toggle target, keep all other previously selected
+      } else if (!event.shiftKey) {
+        this.selected = this.items.filter(possiblySelectedItem =>
+            this.#selectedItems.has(possiblySelectedItem) ? possiblySelectedItem !== item
+          : possiblySelectedItem === item);
+      // Case: multi select, with shift key
+      //       find all items between previously selected and target,
+      //       and select them (if reference item is selected) or deselect them (if reference item is deselected)
+      //       Do not wrap around from end to start, rather, only select withing the range of 0-end
+      } else {
+        const startingItem = this.#shiftStartingItem!;
+        // whether options will be selected (true) or deselected (false)
+        const selecting = this.#selectedItems.has(startingItem);
+        const [start, end] = [this.items.indexOf(startingItem), this.items.indexOf(item)].sort();
+        // de/select all options between active descendant and target
+        this.selected = this.items.filter((item, i) => {
+          if (i >= start && i <= end) {
+            return selecting;
+          } else {
+            return this.#selectedItems.has(item);
+          }
+        });
+      }
+    }
+    this.#shiftStartingItem = item;
+    this.host.requestUpdate();
+  };
+
+  /**
+   * track whether shift key is being used for multiselectable listbox
+   * @param event keyup event
+   */
+  #onKeyup = (event: KeyboardEvent) => {
+    if (event.key === 'Shift') {
+      this.#shiftStartingItem = null;
+    }
+  };
+
+  /**
+   * filters listbox by keyboard event when slotted option has focus,
+   * or by external element such as a text field
+   * @param event keydown event
+   */
+  #onKeydown = (event: KeyboardEvent) => {
+    const item = this.#getItemFromEvent(event);
+
+    if (this.disabled
+      || event.altKey
+      || event.metaKey
+      || !this.#isExpanded) {
+      return;
+    }
+
+    // need to set for keyboard support of multiselect
+    if (event.key === 'Shift' && this.multi) {
+      this.#shiftStartingItem ??= this.#options.getATFocusedItem() ?? null;
+    }
+
+    switch (event.key) {
+      // ctrl+A de/selects all options
+      case 'a':
+      case 'A':
+        if (event.ctrlKey
+            && (event.target === this.container
+                || this.#options.isItem(event.target))) {
+          const selectableItems = this.items.filter(item => !this.#options.isItemDisabled(item));
+          if (arraysAreEquivalent(this.selected, selectableItems)) {
+            this.selected = [];
+          } else {
+            this.selected = selectableItems;
+          }
+          event.preventDefault();
+        }
+        break;
+      case 'Enter':
+        // enter and space are only applicable if a listbox option is clicked
+        // an external text input should not trigger multiselect
+        if (item && !event.shiftKey) {
+          const focused = item;
+          this.#selectItem(focused, event.shiftKey);
+          event.preventDefault();
+        }
+        break;
+      case 'ArrowUp':
+        if (this.multi && event.shiftKey && this.#options.isItem(event.target)) {
+          const item = event.target;
+          this.selected = this.items.filter((x, i) =>
+            this.#selectedItems.has(x)
+            || i === this.items.indexOf(item) - 1)
+              .filter(x => !this.#options.isItemDisabled(x));
+        }
+        break;
+      case 'ArrowDown':
+        if (this.multi && event.shiftKey && this.#options.isItem(event.target)) {
+          const item = event.target;
+          this.selected = this.items.filter((x, i) =>
+            this.#selectedItems.has(x)
+            || i === this.items.indexOf(item) + 1)
+              .filter(x => !this.#options.isItemDisabled(x));
+        }
+        break;
+      case ' ':
+        // enter and space are only applicable if a listbox option is clicked
+        // an external text input should not trigger multiselect
+        if (item && event.target === this.container) {
+          this.#selectItem(item, event.shiftKey);
+          event.preventDefault();
+        } else if (this.#options.isItem(event.target)) {
+          this.#selectItem(event.target, event.shiftKey);
+          event.preventDefault();
+        }
+        break;
+      default:
+        break;
+    }
+    this.host.requestUpdate();
+  };
+
+  #selectItem(item: Item, shiftDown = false) {
+    if (this.#options.isItemDisabled(item)) {
+      return;
+    } else if (this.multi && shiftDown) {
+      // update starting item for other multiselect
+      this.selected = [...this.selected, item];
+    } else if (this.multi && this.#selectedItems.has(item)) {
+      this.selected = this.selected.filter(x => x !== item);
+    } else if (this.multi) {
+      this.selected = this.selected.concat(item);
+    } else {
+      this.selected = [item];
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/logger.ts b/node_modules/@patternfly/pfe-core/controllers/logger.ts
new file mode 100644
index 0000000..d7cf7e9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/logger.ts
@@ -0,0 +1,151 @@
+import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';
+
+export class Logger implements ReactiveController {
+  private static logDebug: boolean;
+
+  private static instances = new WeakMap<ReactiveControllerHost, Logger>();
+
+  private get prefix() {
+    if (!isServer && this.host instanceof HTMLElement) {
+      return `[${this.host.localName}${this.host.id ? `#${this.host.id}` : ''}]`;
+    } else {
+      return `[${this.host.constructor.name}]`;
+    }
+  }
+
+  /**
+   * A boolean value that indicates if the logging should be printed to the console; used for debugging.
+   * For use in a JS file or script tag; can also be added in the constructor of a component during development.
+   * @example Logger.debugLog(true);
+   * @param [preference=null]
+   */
+  static debugLog(preference = null): boolean {
+    // wrap localStorage references in a try/catch; merely referencing it can
+    // throw errors in some locked down environments
+    try {
+      if (preference !== null) {
+        Logger.logDebug = !!preference;
+        localStorage.pfeLog = !!preference;
+      }
+      return localStorage.pfeLog === 'true';
+    } catch {
+      return Logger.logDebug;
+    }
+  }
+
+  /* eslint-disable no-console */
+
+  /**
+   * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+   * @example Logger.debug("Hello");
+   * @param msgs console.log params
+   */
+  static debug(...msgs: unknown[]): void {
+    if (Logger.debugLog()) {
+      console.debug(...msgs);
+    }
+  }
+
+  /**
+   * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+   * @example Logger.info("Hello");
+   * @param msgs console.log params
+   */
+  static info(...msgs: unknown[]): void {
+    if (Logger.debugLog()) {
+      console.info(...msgs);
+    }
+  }
+
+  /**
+   * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+   * @example Logger.log("Hello");
+   * @param msgs console.log params
+   */
+  static log(...msgs: unknown[]): void {
+    if (Logger.debugLog()) {
+      console.log(...msgs);
+    }
+  }
+
+  /**
+   * A console warning wrapper which formats your output with useful debugging information.
+   * @example Logger.warn("Hello");
+   * @param msgs console.log params
+   */
+  static warn(...msgs: unknown[]): void {
+    console.warn(...msgs);
+  }
+
+  /**
+   * A console error wrapper which formats your output with useful debugging information.
+   * For use inside a component's function.
+   * @example Logger.error("Hello");
+   * @param msgs console.log params
+   */
+  static error(...msgs: unknown[]): void {
+    console.error([...msgs].join(' '));
+  }
+
+  /* eslint-enable no-console */
+
+  /**
+   * Debug logging that outputs the tag name as a prefix automatically
+   * @example this.logger.log("Hello");
+   * @param msgs console.log params
+   */
+  debug(...msgs: unknown[]): void {
+    Logger.debug(this.prefix, ...msgs);
+  }
+
+  /**
+   * Info logging that outputs the tag name as a prefix automatically
+   * @example this.logger.log("Hello");
+   * @param msgs console.log params
+   */
+  info(...msgs: unknown[]): void {
+    Logger.info(this.prefix, ...msgs);
+  }
+
+  /**
+   * Local logging that outputs the tag name as a prefix automatically
+   * @example this.logger.log("Hello");
+   * @param msgs console.log params
+   */
+  log(...msgs: unknown[]): void {
+    Logger.log(this.prefix, ...msgs);
+  }
+
+  /**
+   * Local warning wrapper that outputs the tag name as a prefix automatically.
+   * For use inside a component's function.
+   * @example this.logger.warn("Hello");
+   * @param msgs console.log params
+   */
+  warn(...msgs: unknown[]): void {
+    Logger.warn(this.prefix, ...msgs);
+  }
+
+  /**
+   * Local error wrapper that outputs the tag name as a prefix automatically.
+   * For use inside a component's function.
+   * @example this.logger.error("Hello");
+   * @param msgs console.log params
+   */
+  error(...msgs: unknown[]): void {
+    Logger.error(this.prefix, ...msgs);
+  }
+
+  constructor(private host: ReactiveControllerHost) {
+    // We only need one logger instance per host
+    if (Logger.instances.get(host)) {
+      return Logger.instances.get(host) as Logger;
+    }
+    host.addController(this);
+    Logger.instances.set(host, this);
+  }
+
+  hostConnected(): void {
+    this.debug('connected');
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/overflow-controller.ts b/node_modules/@patternfly/pfe-core/controllers/overflow-controller.ts
new file mode 100644
index 0000000..72bd5fc
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/overflow-controller.ts
@@ -0,0 +1,146 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+
+import { isElementInView } from '@patternfly/pfe-core/functions/isElementInView.js';
+
+export interface Options {
+  /**
+   * Force hide the scroll buttons regardless of overflow
+   */
+  hideOverflowButtons?: boolean;
+  /**
+   * Delay in ms to wait before checking for overflow
+   */
+  scrollTimeoutDelay?: number;
+}
+
+export class OverflowController implements ReactiveController {
+  static #instances = new Set<OverflowController>();
+
+  static {
+    // on resize check for overflows to add or remove scroll buttons
+    globalThis.addEventListener?.('resize', () => {
+      for (const instance of this.#instances) {
+        instance.onScroll();
+      }
+    }, { capture: false, passive: true });
+  }
+
+  /** Overflow container */
+  #container?: HTMLElement;
+  /** Children that can overflow */
+  #items: HTMLElement[] = [];
+
+  #scrollTimeoutDelay: number;
+  #scrollTimeout?: ReturnType<typeof setTimeout>;
+
+  /** Default state */
+  #hideOverflowButtons: boolean;
+
+  #mo = new MutationObserver(mutations => {
+    for (const mutation of mutations) {
+      if (mutation.type === 'childList') {
+        this.#setOverflowState();
+      }
+    }
+  });
+
+  #ro = new ResizeObserver(() => {
+    requestAnimationFrame(() => {
+      this.#setOverflowState();
+    });
+  });
+
+  showScrollButtons = false;
+  overflowLeft = false;
+  overflowRight = false;
+
+  get firstItem(): HTMLElement | undefined {
+    return this.#items.at(0);
+  }
+
+  get lastItem(): HTMLElement | undefined {
+    return this.#items.at(-1);
+  }
+
+  constructor(
+    // TODO: widen this type to ReactiveControllerHost
+    public host: ReactiveElement,
+    private options?: Options | undefined,
+  ) {
+    this.#hideOverflowButtons = options?.hideOverflowButtons ?? false;
+    this.#scrollTimeoutDelay = options?.scrollTimeoutDelay ?? 0;
+    if (host.isConnected) {
+      OverflowController.#instances.add(this);
+    }
+    host.addController(this);
+    if (host.isConnected) {
+      this.hostConnected();
+    }
+  }
+
+  #setOverflowState(): void {
+    if (!this.firstItem || !this.lastItem || !this.#container) {
+      return;
+    }
+    const prevLeft = this.overflowLeft;
+    const prevRight = this.overflowRight;
+
+    this.overflowLeft = !this.#hideOverflowButtons
+      && !isElementInView(this.#container, this.firstItem);
+    this.overflowRight = !this.#hideOverflowButtons
+      && !isElementInView(this.#container, this.lastItem);
+    let scrollButtonsWidth = 0;
+    if (this.overflowLeft || this.overflowRight) {
+      scrollButtonsWidth =
+        (this.#container.parentElement?.querySelector('button')?.getBoundingClientRect().width || 0)
+      * 2;
+    }
+    this.showScrollButtons = !this.#hideOverflowButtons
+    && this.#container.scrollWidth > (this.#container.clientWidth + scrollButtonsWidth);
+
+    // only request update if there has been a change
+    if ((prevLeft !== this.overflowLeft) || (prevRight !== this.overflowRight)) {
+      this.host.requestUpdate();
+    }
+  }
+
+  init(container: HTMLElement, items: HTMLElement[]): void {
+    this.#container = container;
+    // convert HTMLCollection to HTMLElement[]
+    this.#items = items;
+  }
+
+  onScroll = (): void => {
+    clearTimeout(this.#scrollTimeout);
+    this.#scrollTimeout = setTimeout(() => this.#setOverflowState(), this.#scrollTimeoutDelay);
+  };
+
+  scrollLeft(): void {
+    if (!this.#container) {
+      return;
+    }
+    const leftScroll = this.#container.scrollLeft - this.#container.clientWidth;
+    this.#container.scroll({ left: leftScroll, behavior: 'smooth' });
+    this.#setOverflowState();
+  }
+
+  scrollRight(): void {
+    if (!this.#container) {
+      return;
+    }
+    const leftScroll = this.#container.scrollLeft + this.#container.clientWidth;
+    this.#container.scroll({ left: leftScroll, behavior: 'smooth' });
+    this.#setOverflowState();
+  }
+
+  update(): void {
+    this.#setOverflowState();
+  }
+
+  hostConnected(): void {
+    this.#mo.observe(this.host, { attributes: false, childList: true, subtree: true });
+    this.#ro.observe(this.host);
+    this.onScroll();
+    this.#setOverflowState();
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/perf-controller.ts b/node_modules/@patternfly/pfe-core/controllers/perf-controller.ts
new file mode 100644
index 0000000..f5e8660
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/perf-controller.ts
@@ -0,0 +1,50 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+
+import { getRandomId } from '../functions/random.js';
+
+export class PerfController implements ReactiveController {
+  hasMeasured = false;
+
+  markId: string;
+
+  constructor(private host: ReactiveElement) {
+    host.addController(this);
+
+    // Set up the mark ID based on existing ID on component if it exists
+    if (!host.id) {
+      this.markId = getRandomId(host.localName);
+    } else if (host.id.startsWith('pf-') && !host.id.startsWith(host.localName)) {
+      this.markId = host.id.replace('pf', host.localName);
+    } else {
+      this.markId = `${host.localName}-${host.id}`;
+    }
+
+    performance.mark(`${this.markId}-defined`);
+  }
+
+  hostUpdate(): void {
+    if (!this.hasMeasured) {
+      this.measure();
+    }
+  }
+
+  measure(): void {
+    this.hasMeasured = true;
+
+    performance.mark(`${this.markId}-rendered`);
+
+    // Navigation start, i.e., the browser first sees that the user has navigated to the page
+    performance.measure(`${this.markId}-from-navigation-to-first-render`, undefined, `${this.markId}-rendered`);
+
+    // Render is run before connection unless delayRender is used
+    performance.measure(
+      `${this.markId}-from-defined-to-first-render`,
+      `${this.markId}-defined`,
+      `${this.markId}-rendered`
+    );
+
+    // Once we've measured time to render, we no longer need the controller,
+    // so we allow it to be garbage-collected
+    this.host.removeController(this);
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/property-observer-controller.ts b/node_modules/@patternfly/pfe-core/controllers/property-observer-controller.ts
new file mode 100644
index 0000000..1b9234b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/property-observer-controller.ts
@@ -0,0 +1,91 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+
+import { notEqual } from 'lit';
+
+export type ChangeCallback<T extends ReactiveElement, V = T[keyof T]> = (
+  this: T,
+  old?: V,
+  newV?: V,
+) => void;
+
+export interface PropertyObserverOptions<T extends ReactiveElement> {
+  propertyName: string & keyof T;
+  callback: ChangeCallback<T>;
+  waitFor?: 'connected' | 'updated' | 'firstUpdated';
+}
+
+const UNINITIALIZED = Symbol('uninitialized');
+
+export class PropertyObserverController<
+  T extends ReactiveElement
+> implements ReactiveController {
+  private oldVal: T[keyof T] = UNINITIALIZED as T[keyof T];
+
+  constructor(
+    private host: T,
+    private options: PropertyObserverOptions<T>
+  ) {
+  }
+
+  #neverRan = true;
+
+  hostConnected(): void {
+    this.#init();
+  }
+
+  /**
+   * Because of how typescript transpiles private fields,
+   * the __accessPrivate helper might not be entirely initialized
+   * by the time this constructor runs (in `addInitializer`'s instance callback')
+   * Therefore, we pull this shtick.
+   *
+   * When browser support improves to the point we can ship decorated private fields,
+   * we'll be able to get rid of this.
+   */
+  #init() {
+    if (this.oldVal === UNINITIALIZED) {
+      this.oldVal = this.host[this.options.propertyName];
+    }
+  }
+
+  /** Set any cached valued accumulated between constructor and connectedCallback */
+  async hostUpdate(): Promise<void> {
+    this.#init();
+    const { oldVal, options: { waitFor, propertyName, callback } } = this;
+    if (!callback) {
+      throw new Error(`no callback for ${propertyName}`);
+    }
+    const newVal = this.host[propertyName];
+    this.oldVal = newVal;
+    if (newVal !== oldVal) {
+      switch (waitFor) {
+        case 'connected':
+          if (!this.host.isConnected) {
+            const origConnected = this.host.connectedCallback;
+            await new Promise<void>(resolve => {
+              this.host.connectedCallback = function() {
+                resolve(origConnected?.call(this));
+              };
+            });
+          }
+          break;
+        case 'firstUpdated':
+          if (!this.host.hasUpdated) {
+            await this.host.updateComplete;
+          }
+          break;
+        case 'updated':
+          await this.host.updateComplete;
+          break;
+      }
+    }
+    const Class = (this.host.constructor as typeof ReactiveElement);
+    const hasChanged = Class
+        .getPropertyOptions(this.options.propertyName)
+        .hasChanged ?? notEqual;
+    if (this.#neverRan || hasChanged(oldVal, newVal)) {
+      callback.call(this.host, oldVal as T[keyof T], newVal);
+      this.#neverRan = false;
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/roving-tabindex-controller.ts b/node_modules/@patternfly/pfe-core/controllers/roving-tabindex-controller.ts
new file mode 100644
index 0000000..9659a11
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/roving-tabindex-controller.ts
@@ -0,0 +1,96 @@
+import { isServer, type ReactiveControllerHost } from 'lit';
+import { ATFocusController, type ATFocusControllerOptions } from './at-focus-controller.js';
+import { Logger } from './logger.js';
+import { bound } from '../decorators/bound.js';
+
+export type RovingTabindexControllerOptions<Item extends HTMLElement> =
+  ATFocusControllerOptions<Item>;
+
+/**
+ * Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within
+ * Components Using a Roving tabindex][rti]
+ *
+ * [rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex
+ */
+export class RovingTabindexController<
+  Item extends HTMLElement = HTMLElement
+> extends ATFocusController<Item> {
+  static of<Item extends HTMLElement>(
+    host: ReactiveControllerHost,
+    options: RovingTabindexControllerOptions<Item>,
+  ): RovingTabindexController<Item> {
+    return new RovingTabindexController(host, options);
+  }
+
+  #logger = new Logger(this.host);
+
+  #gainedInitialFocus = false;
+
+  #itemsSet = new Set<Item>();
+
+  get atFocusedItemIndex(): number {
+    return super.atFocusedItemIndex;
+  }
+
+  /**
+   * Sets the DOM Focus on the item with assistive technology focus
+   * @param item item
+   */
+  set atFocusedItemIndex(index: number) {
+    super.atFocusedItemIndex = index;
+    const item = this.items.at(this.atFocusedItemIndex);
+    for (const i of this.items) {
+      i.tabIndex = item === i ? 0 : -1;
+    }
+    if (this.#gainedInitialFocus) {
+      item?.focus();
+    }
+    this.host.requestUpdate();
+  }
+
+  get items() {
+    return this._items;
+  }
+
+  public set items(items: Item[]) {
+    this._items = items;
+    this.#itemsSet = new Set(items);
+    const pivot = Math.max(0, this.atFocusedItemIndex);
+    const [firstFocusable] = this.atFocusableItems;
+    const firstFocusableIndex = firstFocusable ? items.indexOf(firstFocusable) : -1;
+    const pivotFocusableIndex = items.indexOf(this.items
+        .slice(pivot)
+        .concat(this.items.slice(0, pivot))
+        .find(item => this.atFocusableItems.includes(item))!);
+    this.atFocusedItemIndex = Math.max(firstFocusableIndex, pivotFocusableIndex);
+    this.host.requestUpdate();
+  }
+
+  private constructor(
+    public host: ReactiveControllerHost,
+    options: RovingTabindexControllerOptions<Item>,
+  ) {
+    super(host, options);
+    this.initItems();
+    const container = options.getItemsContainer?.() ?? this.host;
+    if (!isServer) {
+      if (container instanceof HTMLElement) {
+        container.addEventListener('focusin', () =>
+          this.#gainedInitialFocus = true, { once: true });
+      } else {
+        this.#logger.warn('RovingTabindexController requires a getItemsContainer function');
+      }
+    }
+  }
+
+  @bound
+  protected override onKeydown(event: KeyboardEvent): void {
+    if (!event.ctrlKey
+        && !event.altKey
+        && !event.metaKey
+        && !!this.atFocusableItems.length
+        && !!event.composedPath().some(node => this.#itemsSet.has(node as Item))) {
+      super.onKeydown(event);
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
index fd5a7dc..fa8dae5 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
@@ -48,7 +48,7 @@ export class ScrollSpyController {
         __classPrivateFieldSet(this, _ScrollSpyController_rootMargin, options.rootMargin, "f");
         __classPrivateFieldSet(this, _ScrollSpyController_activeAttribute, options.activeAttribute ?? 'active', "f");
         __classPrivateFieldSet(this, _ScrollSpyController_threshold, options.threshold ?? 0.85, "f");
-        __classPrivateFieldSet(this, _ScrollSpyController_getRootNode, () => options.rootNode ?? host.getRootNode(), "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_getRootNode, () => options.rootNode ?? host.getRootNode?.() ?? null, "f");
         __classPrivateFieldSet(this, _ScrollSpyController_getHash, options?.getHash ?? ((el) => el.getAttribute('href')), "f");
     }
     hostConnected() {
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
index b0e31b2..c4941a0 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  #tagNames: string[];\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n  #rootMargin?: string;\n  #threshold: number | number[];\n\n  #getRootNode: () => Node;\n  #getHash: (el: Element) => string | null;\n\n  get #linkChildren(): Element[] {\n    return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n        .filter(this.#getHash);\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode();\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n  }\n\n  hostConnected(): void {\n    this.#initIo();\n  }\n\n  #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      this.#linkChildren\n          .map(x => this.#getHash(x))\n          .filter((x): x is string => !!x)\n          .map(x => rootNode.getElementById(x.replace('#', '')))\n          .filter((x): x is HTMLElement => !!x)\n          .forEach(target => this.#io?.observe(target));\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  #tagNames: string[];\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n  #rootMargin?: string;\n  #threshold: number | number[];\n\n  #getRootNode: () => Node | null;\n  #getHash: (el: Element) => string | null;\n\n  get #linkChildren(): Element[] {\n    return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n        .filter(this.#getHash);\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode?.() ?? null;\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n  }\n\n  hostConnected(): void {\n    this.#initIo();\n  }\n\n  #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      this.#linkChildren\n          .map(x => this.#getHash(x))\n          .filter((x): x is string => !!x)\n          .map(x => rootNode.getElementById(x.replace('#', '')))\n          .filter((x): x is HTMLElement => !!x)\n          .forEach(target => this.#io?.observe(target));\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.ts b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.ts
new file mode 100644
index 0000000..90cb254
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.ts
@@ -0,0 +1,173 @@
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+
+export interface ScrollSpyControllerOptions extends IntersectionObserverInit {
+  /**
+   * Tag names of legal link children.
+   * Legal children must have an `href` property/attribute pair, like `<a>`.
+   */
+  tagNames: string[];
+
+  /**
+   * Attribute to set on the active link element.
+   * @default 'active'
+   */
+  activeAttribute?: string;
+
+  /**
+   * The root node to query content for
+   * @default the host's root node
+   */
+  rootNode?: Node;
+  /**
+   * function to call on link children to get their URL hash (i.e. id to scroll to)
+   * @default el => el.getAttribute('href');
+   */
+  getHash?: (el: Element) => string | null;
+}
+
+export class ScrollSpyController implements ReactiveController {
+  #tagNames: string[];
+  #activeAttribute: string;
+
+  #io?: IntersectionObserver;
+
+  /** Which link's targets have already scrolled past? */
+  #passedLinks = new Set<Element>();
+
+  /** Ignore intersections? */
+  #force = false;
+
+  /** Has the intersection observer found an element? */
+  #intersected = false;
+
+  #root: ScrollSpyControllerOptions['root'];
+  #rootMargin?: string;
+  #threshold: number | number[];
+
+  #getRootNode: () => Node | null;
+  #getHash: (el: Element) => string | null;
+
+  get #linkChildren(): Element[] {
+    return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))
+        .filter(this.#getHash);
+  }
+
+  get root(): Element | Document | null | undefined {
+    return this.#root;
+  }
+
+  set root(v) {
+    this.#root = v;
+    this.#io?.disconnect();
+    this.#initIo();
+  }
+
+  get rootMargin(): string | undefined {
+    return this.#rootMargin;
+  }
+
+  set rootMargin(v) {
+    this.#rootMargin = v;
+    this.#io?.disconnect();
+    this.#initIo();
+  }
+
+  get threshold(): number | number[] {
+    return this.#threshold;
+  }
+
+  set threshold(v) {
+    this.#threshold = v;
+    this.#io?.disconnect();
+    this.#initIo();
+  }
+
+  constructor(
+    private host: ReactiveControllerHost & HTMLElement,
+    options: ScrollSpyControllerOptions,
+  ) {
+    host.addController(this);
+    this.#tagNames = options.tagNames;
+    this.#root = options.root;
+    this.#rootMargin = options.rootMargin;
+    this.#activeAttribute = options.activeAttribute ?? 'active';
+    this.#threshold = options.threshold ?? 0.85;
+    this.#getRootNode = () => options.rootNode ?? host.getRootNode?.() ?? null;
+    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));
+  }
+
+  hostConnected(): void {
+    this.#initIo();
+  }
+
+  #initIo() {
+    const rootNode = this.#getRootNode();
+    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {
+      const { rootMargin, threshold, root } = this;
+      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });
+      this.#linkChildren
+          .map(x => this.#getHash(x))
+          .filter((x): x is string => !!x)
+          .map(x => rootNode.getElementById(x.replace('#', '')))
+          .filter((x): x is HTMLElement => !!x)
+          .forEach(target => this.#io?.observe(target));
+    }
+  }
+
+  #markPassed(link: Element, force: boolean) {
+    if (force) {
+      this.#passedLinks.add(link);
+    } else {
+      this.#passedLinks.delete(link);
+    }
+  }
+
+  #setActive(link?: EventTarget | null) {
+    for (const child of this.#linkChildren) {
+      child.toggleAttribute(this.#activeAttribute, child === link);
+    }
+  }
+
+  async #nextIntersection() {
+    this.#intersected = false;
+    // safeguard the loop
+    setTimeout(() => this.#intersected = false, 3000);
+    while (!this.#intersected) {
+      await new Promise(requestAnimationFrame);
+    }
+  }
+
+  async #onIo(entries: IntersectionObserverEntry[]) {
+    if (!this.#force) {
+      for (const { target, boundingClientRect, intersectionRect } of entries) {
+        const selector = `:is(${this.#tagNames.join(',')})[href="#${target.id}"]`;
+        const link = this.host.querySelector(selector);
+        if (link) {
+          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);
+        }
+      }
+      const link = [...this.#passedLinks];
+      const last = link.at(-1);
+      this.#setActive(last ?? this.#linkChildren.at(0));
+    }
+    this.#intersected = true;
+  }
+
+  /**
+   * Explicitly set the active item
+   * @param link usually an `<a>`
+   */
+  public async setActive(link: EventTarget | null): Promise<void> {
+    this.#force = true;
+    this.#setActive(link);
+    let sawActive = false;
+    for (const child of this.#linkChildren) {
+      this.#markPassed(child, !sawActive);
+      if (child === link) {
+        sawActive = true;
+      }
+    }
+    await this.#nextIntersection();
+    this.#force = false;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/slot-controller.d.ts b/node_modules/@patternfly/pfe-core/controllers/slot-controller.d.ts
index 3fae8f3..2a45c34 100644
--- a/node_modules/@patternfly/pfe-core/controllers/slot-controller.d.ts
+++ b/node_modules/@patternfly/pfe-core/controllers/slot-controller.d.ts
@@ -1,4 +1,4 @@
-import type { ReactiveController, ReactiveElement } from 'lit';
+import { type ReactiveController, type ReactiveElement } from 'lit';
 interface AnonymousSlot {
     hasContent: boolean;
     elements: Element[];
diff --git a/node_modules/@patternfly/pfe-core/controllers/slot-controller.js b/node_modules/@patternfly/pfe-core/controllers/slot-controller.js
index 7162155..8d545ae 100644
--- a/node_modules/@patternfly/pfe-core/controllers/slot-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/slot-controller.js
@@ -1,5 +1,6 @@
 var _SlotController_instances, _a, _SlotController_nodes, _SlotController_logger, _SlotController_firstUpdated, _SlotController_mo, _SlotController_slotNames, _SlotController_deprecations, _SlotController_onSlotChange, _SlotController_onMutation, _SlotController_getChildrenForSlot, _SlotController_initSlot;
 import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
 import { Logger } from './logger.js';
 function isObjectConfigSpread(config) {
     return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;
@@ -44,7 +45,8 @@ export class SlotController {
                 ?? __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_getChildrenForSlot).call(this, name);
             const selector = slotName ? `slot[name="${slotName}"]` : 'slot:not([name])';
             const slot = this.host.shadowRoot?.querySelector?.(selector) ?? null;
-            const hasContent = !!elements.length;
+            const nodes = slot?.assignedNodes?.();
+            const hasContent = !!elements.length || !!nodes?.filter(x => x.textContent?.trim()).length;
             __classPrivateFieldGet(this, _SlotController_nodes, "f").set(name, { elements, name: slotName ?? '', hasContent, slot });
             __classPrivateFieldGet(this, _SlotController_logger, "f").debug(slotName, hasContent);
         });
@@ -117,11 +119,20 @@ export class SlotController {
      * @example this.hasSlotted('header');
      */
     hasSlotted(...names) {
-        const slotNames = Array.from(names, x => x == null ? _a.default : x);
-        if (!slotNames.length) {
-            slotNames.push(_a.default);
+        if (isServer) {
+            return this.host
+                .getAttribute('ssr-hint-has-slotted')
+                ?.split(',')
+                .map(name => name.trim())
+                .some(name => names.includes(name === 'default' ? null : name)) ?? false;
+        }
+        else {
+            const slotNames = Array.from(names, x => x == null ? _a.default : x);
+            if (!slotNames.length) {
+                slotNames.push(_a.default);
+            }
+            return slotNames.some(x => __classPrivateFieldGet(this, _SlotController_nodes, "f").get(x)?.hasContent ?? false);
         }
-        return slotNames.some(x => __classPrivateFieldGet(this, _SlotController_nodes, "f").get(x)?.hasContent ?? false);
     }
     /**
      * Whether or not all the requested slots are empty.
@@ -135,8 +146,13 @@ export class SlotController {
     }
 }
 _a = SlotController, _SlotController_nodes = new WeakMap(), _SlotController_logger = new WeakMap(), _SlotController_firstUpdated = new WeakMap(), _SlotController_mo = new WeakMap(), _SlotController_slotNames = new WeakMap(), _SlotController_deprecations = new WeakMap(), _SlotController_onSlotChange = new WeakMap(), _SlotController_onMutation = new WeakMap(), _SlotController_initSlot = new WeakMap(), _SlotController_instances = new WeakSet(), _SlotController_getChildrenForSlot = function _SlotController_getChildrenForSlot(name) {
-    const children = Array.from(this.host.children);
-    return children.filter(isSlot(name));
+    if (isServer) {
+        return [];
+    }
+    else {
+        const children = Array.from(this.host.children);
+        return children.filter(isSlot(name));
+    }
 };
 SlotController.default = Symbol('default slot');
 /** @deprecated use `default` */
diff --git a/node_modules/@patternfly/pfe-core/controllers/slot-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/slot-controller.js.map
index d6c09da..0e0aefd 100644
--- a/node_modules/@patternfly/pfe-core/controllers/slot-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/slot-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"slot-controller.js","sourceRoot":"","sources":["slot-controller.ts"],"names":[],"mappings":";;AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAgCrC,SAAS,oBAAoB,CAC3B,MAA2C;IAE3C,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;AACpF,CAAC;AAED;;;;GAIG;AACH,MAAM,MAAM,GACV,CAA8B,CAAyC,EAAE,EAAE,CACzE,CAAC,KAAc,EAAc,EAAE,CAC3B,CAAC,KAAK,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC;IAC5D,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAEzC,MAAM,OAAO,cAAc;IAkBzB,YAAmB,IAAqB,EAAE,GAAG,MAA2C;;QAArE,SAAI,GAAJ,IAAI,CAAiB;QAZxC,gCAAS,IAAI,GAAG,EAAgD,EAAC;QAEjE,yCAAgB;QAEhB,uCAAgB,KAAK,EAAC;QAEtB,6BAAM,IAAI,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,uBAAA,IAAI,kCAAY,MAAhB,IAAI,EAAa,OAAO,CAAC,CAAC,EAAC;QAEjE,4CAA8B;QAE9B,uCAAwC,EAAE,EAAC;QAgG3C,uCAAgB,CAAC,KAA0C,EAAE,EAAE;YAC7D,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;YACnC,uBAAA,IAAI,gCAAU,MAAd,IAAI,EAAW,QAAQ,CAAC,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC5B,CAAC,EAAC;QAEF,qCAAc,KAAK,EAAE,OAAyB,EAAE,EAAE;YAChD,MAAM,OAAO,GAAG,EAAE,CAAC;YACnB,KAAK,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,IAAI,OAAO,EAAE,CAAC;gBACnD,KAAK,MAAM,IAAI,IAAI,CAAC,GAAG,UAAU,EAAE,GAAG,YAAY,CAAC,EAAE,CAAC;oBACpD,IAAI,IAAI,YAAY,WAAW,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;wBAC7C,uBAAA,IAAI,gCAAU,MAAd,IAAI,EAAW,IAAI,CAAC,IAAI,CAAC,CAAC;wBAC1B,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;oBAC1B,CAAC;gBACH,CAAC;YACH,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC5B,CAAC,EAAC;QASF,mCAAY,CAAC,QAAuB,EAAE,EAAE;YACtC,MAAM,IAAI,GAAG,QAAQ,IAAI,EAAc,CAAC,OAAO,CAAC;YAChD,MAAM,QAAQ,GAAG,uBAAA,IAAI,6BAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,gBAAgB,EAAE,EAAE;mBAC7D,uBAAA,IAAI,qEAAoB,MAAxB,IAAI,EAAqB,IAAI,CAAC,CAAC;YACpC,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,QAAQ,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC;YAC5E,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,EAAE,CAAkB,QAAQ,CAAC,IAAI,IAAI,CAAC;YACtF,MAAM,UAAU,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC;YACrC,uBAAA,IAAI,6BAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,IAAI,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;YAC5E,uBAAA,IAAI,8BAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC3C,CAAC,EAAC;QAhIA,uBAAA,IAAI,0BAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAA,CAAC;QAErC,IAAI,oBAAoB,CAAC,MAAM,CAAC,EAAE,CAAC;YACjC,MAAM,CAAC,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,GAAG,MAAM,CAAC;YACzC,uBAAA,IAAI,6BAAc,KAAK,MAAA,CAAC;YACxB,uBAAA,IAAI,gCAAiB,YAAY,IAAI,EAAE,MAAA,CAAC;QAC1C,CAAC;aAAM,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;YAC9B,uBAAA,IAAI,6BAAc,MAAM,MAAA,CAAC;YACzB,uBAAA,IAAI,gCAAiB,EAAE,MAAA,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,uBAAA,IAAI,6BAAc,CAAC,IAAI,CAAC,MAAA,CAAC;QAC3B,CAAC;QAGD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,uBAAA,IAAI,oCAA+B,CAAC,CAAC;QAC9E,uBAAA,IAAI,gCAAiB,KAAK,MAAA,CAAC;QAC3B,uBAAA,IAAI,0BAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACjD,+DAA+D;QAC/D,uBAAA,IAAI,6BAAO,CAAC,KAAK,EAAE,CAAC;QACpB,kDAAkD;QAClD,uBAAA,IAAI,iCAAW,CAAC,OAAO,CAAC,uBAAA,IAAI,gCAAU,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,uBAAA,IAAI,oCAAc,CAAC,CAAC,OAAO,CAAC,uBAAA,IAAI,gCAAU,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC1B,uCAAuC;QACvC,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,uBAAA,IAAI,oCAAc,EAAE,CAAC;YACxB,uBAAA,IAAI,iCAAW,CAAC,OAAO,CAAC,uBAAA,IAAI,gCAAU,CAAC,CAAC;YACxC,uBAAA,IAAI,gCAAiB,IAAI,MAAA,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,gBAAgB;QACd,uBAAA,IAAI,0BAAI,CAAC,UAAU,EAAE,CAAC;IACxB,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,UAAU,CAA8B,GAAG,SAAmB;QAC5D,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACtB,OAAO,CAAC,uBAAA,IAAI,6BAAO,CAAC,GAAG,CAAC,EAAc,CAAC,OAAO,CAAC,EAAE,QAAQ,IAAI,EAAE,CAAQ,CAAC;QAC1E,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAClC,uBAAA,IAAI,6BAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,IAAI,EAAE,CAAQ,CAAC;QACtD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,GAAG,KAAoC;QAChD,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjF,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,CAAC;YACtB,SAAS,CAAC,IAAI,CAAC,EAAc,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC;QACD,OAAO,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,uBAAA,IAAI,6BAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,UAAU,IAAI,KAAK,CAAC,CAAC;IACtE,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CAAC,GAAG,KAAoC;QAC7C,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC;IACpC,CAAC;;+gBAsBC,IAA4C;IAE5C,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAQ,CAAC;IACvD,OAAO,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AACvC,CAAC;AAvIa,sBAAO,GAAG,MAAM,CAAC,cAAc,CAA4B,AAApD,CAAqD;AAE1E,gCAAgC;AAClB,wBAAS,GAAW,EAAI,CAAC,OAAO,AAAvB,CAAwB","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { Logger } from './logger.js';\n\ninterface AnonymousSlot {\n  hasContent: boolean;\n  elements: Element[];\n  slot: HTMLSlotElement | null;\n}\n\ninterface NamedSlot extends AnonymousSlot {\n  name: string;\n  initialized: true;\n}\n\nexport type Slot = NamedSlot | AnonymousSlot;\n\nexport interface SlotsConfig {\n  slots: (string | null)[];\n  /**\n   * Object mapping new slot name keys to deprecated slot name values\n   * @example `pf-modal--header` is deprecated in favour of `header`\n   * ```js\n   * new SlotController(this, {\n   *   slots: ['header'],\n   *   deprecations: {\n   *     'header': 'pf-modal--header'\n   *   }\n   * })\n   * ```\n   */\n  deprecations?: Record<string, string>;\n}\n\nfunction isObjectConfigSpread(\n  config: ([SlotsConfig] | (string | null)[]),\n): config is [SlotsConfig] {\n  return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;\n}\n\n/**\n * If it's a named slot, return its children,\n * for the default slot, look for direct children not assigned to a slot\n * @param n slot name\n */\nconst isSlot =\n  <T extends Element = Element>(n: string | typeof SlotController.default) =>\n    (child: Element): child is T =>\n        n === SlotController.default ? !child.hasAttribute('slot')\n      : child.getAttribute('slot') === n;\n\nexport class SlotController implements ReactiveController {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  #nodes = new Map<string | typeof SlotController.default, Slot>();\n\n  #logger: Logger;\n\n  #firstUpdated = false;\n\n  #mo = new MutationObserver(records => this.#onMutation(records));\n\n  #slotNames: (string | null)[];\n\n  #deprecations: Record<string, string> = {};\n\n  constructor(public host: ReactiveElement, ...config: ([SlotsConfig] | (string | null)[])) {\n    this.#logger = new Logger(this.host);\n\n    if (isObjectConfigSpread(config)) {\n      const [{ slots, deprecations }] = config;\n      this.#slotNames = slots;\n      this.#deprecations = deprecations ?? {};\n    } else if (config.length >= 1) {\n      this.#slotNames = config;\n      this.#deprecations = {};\n    } else {\n      this.#slotNames = [null];\n    }\n\n\n    host.addController(this);\n  }\n\n  async hostConnected(): Promise<void> {\n    this.host.addEventListener('slotchange', this.#onSlotChange as EventListener);\n    this.#firstUpdated = false;\n    this.#mo.observe(this.host, { childList: true });\n    // Map the defined slots into an object that is easier to query\n    this.#nodes.clear();\n    // Loop over the properties provided by the schema\n    this.#slotNames.forEach(this.#initSlot);\n    Object.values(this.#deprecations).forEach(this.#initSlot);\n    this.host.requestUpdate();\n    // insurance for framework integrations\n    await this.host.updateComplete;\n    this.host.requestUpdate();\n  }\n\n  hostUpdated(): void {\n    if (!this.#firstUpdated) {\n      this.#slotNames.forEach(this.#initSlot);\n      this.#firstUpdated = true;\n    }\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  getSlotted<T extends Element = Element>(...slotNames: string[]): T[] {\n    if (!slotNames.length) {\n      return (this.#nodes.get(SlotController.default)?.elements ?? []) as T[];\n    } else {\n      return slotNames.flatMap(slotName =>\n        this.#nodes.get(slotName)?.elements ?? []) as T[];\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  hasSlotted(...names: (string | null | undefined)[]): boolean {\n    const slotNames = Array.from(names, x => x == null ? SlotController.default : x);\n    if (!slotNames.length) {\n      slotNames.push(SlotController.default);\n    }\n    return slotNames.some(x => this.#nodes.get(x)?.hasContent ?? false);\n  }\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  isEmpty(...names: (string | null | undefined)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n\n  #onSlotChange = (event: Event & { target: HTMLSlotElement }) => {\n    const slotName = event.target.name;\n    this.#initSlot(slotName);\n    this.host.requestUpdate();\n  };\n\n  #onMutation = async (records: MutationRecord[]) => {\n    const changed = [];\n    for (const { addedNodes, removedNodes } of records) {\n      for (const node of [...addedNodes, ...removedNodes]) {\n        if (node instanceof HTMLElement && node.slot) {\n          this.#initSlot(node.slot);\n          changed.push(node.slot);\n        }\n      }\n    }\n    this.host.requestUpdate();\n  };\n\n  #getChildrenForSlot<T extends Element = Element>(\n    name: string | typeof SlotController.default,\n  ): T[] {\n    const children = Array.from(this.host.children) as T[];\n    return children.filter(isSlot(name));\n  }\n\n  #initSlot = (slotName: string | null) => {\n    const name = slotName || SlotController.default;\n    const elements = this.#nodes.get(name)?.slot?.assignedElements?.()\n      ?? this.#getChildrenForSlot(name);\n    const selector = slotName ? `slot[name=\"${slotName}\"]` : 'slot:not([name])';\n    const slot = this.host.shadowRoot?.querySelector?.<HTMLSlotElement>(selector) ?? null;\n    const hasContent = !!elements.length;\n    this.#nodes.set(name, { elements, name: slotName ?? '', hasContent, slot });\n    this.#logger.debug(slotName, hasContent);\n  };\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"slot-controller.js","sourceRoot":"","sources":["slot-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveElement } from 'lit';\n\nimport { Logger } from './logger.js';\n\ninterface AnonymousSlot {\n  hasContent: boolean;\n  elements: Element[];\n  slot: HTMLSlotElement | null;\n}\n\ninterface NamedSlot extends AnonymousSlot {\n  name: string;\n  initialized: true;\n}\n\nexport type Slot = NamedSlot | AnonymousSlot;\n\nexport interface SlotsConfig {\n  slots: (string | null)[];\n  /**\n   * Object mapping new slot name keys to deprecated slot name values\n   * @example `pf-modal--header` is deprecated in favour of `header`\n   * ```js\n   * new SlotController(this, {\n   *   slots: ['header'],\n   *   deprecations: {\n   *     'header': 'pf-modal--header'\n   *   }\n   * })\n   * ```\n   */\n  deprecations?: Record<string, string>;\n}\n\nfunction isObjectConfigSpread(\n  config: ([SlotsConfig] | (string | null)[]),\n): config is [SlotsConfig] {\n  return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;\n}\n\n/**\n * If it's a named slot, return its children,\n * for the default slot, look for direct children not assigned to a slot\n * @param n slot name\n */\nconst isSlot =\n  <T extends Element = Element>(n: string | typeof SlotController.default) =>\n    (child: Element): child is T =>\n        n === SlotController.default ? !child.hasAttribute('slot')\n      : child.getAttribute('slot') === n;\n\nexport class SlotController implements ReactiveController {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  #nodes = new Map<string | typeof SlotController.default, Slot>();\n\n  #logger: Logger;\n\n  #firstUpdated = false;\n\n  #mo = new MutationObserver(records => this.#onMutation(records));\n\n  #slotNames: (string | null)[];\n\n  #deprecations: Record<string, string> = {};\n\n  constructor(public host: ReactiveElement, ...config: ([SlotsConfig] | (string | null)[])) {\n    this.#logger = new Logger(this.host);\n\n    if (isObjectConfigSpread(config)) {\n      const [{ slots, deprecations }] = config;\n      this.#slotNames = slots;\n      this.#deprecations = deprecations ?? {};\n    } else if (config.length >= 1) {\n      this.#slotNames = config;\n      this.#deprecations = {};\n    } else {\n      this.#slotNames = [null];\n    }\n\n\n    host.addController(this);\n  }\n\n  async hostConnected(): Promise<void> {\n    this.host.addEventListener('slotchange', this.#onSlotChange as EventListener);\n    this.#firstUpdated = false;\n    this.#mo.observe(this.host, { childList: true });\n    // Map the defined slots into an object that is easier to query\n    this.#nodes.clear();\n    // Loop over the properties provided by the schema\n    this.#slotNames.forEach(this.#initSlot);\n    Object.values(this.#deprecations).forEach(this.#initSlot);\n    this.host.requestUpdate();\n    // insurance for framework integrations\n    await this.host.updateComplete;\n    this.host.requestUpdate();\n  }\n\n  hostUpdated(): void {\n    if (!this.#firstUpdated) {\n      this.#slotNames.forEach(this.#initSlot);\n      this.#firstUpdated = true;\n    }\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  getSlotted<T extends Element = Element>(...slotNames: string[]): T[] {\n    if (!slotNames.length) {\n      return (this.#nodes.get(SlotController.default)?.elements ?? []) as T[];\n    } else {\n      return slotNames.flatMap(slotName =>\n        this.#nodes.get(slotName)?.elements ?? []) as T[];\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  hasSlotted(...names: (string | null | undefined)[]): boolean {\n    if (isServer) {\n      return this.host\n          .getAttribute('ssr-hint-has-slotted')\n          ?.split(',')\n          .map(name => name.trim())\n          .some(name => names.includes(name === 'default' ? null : name)) ?? false;\n    } else {\n      const slotNames = Array.from(names, x => x == null ? SlotController.default : x);\n      if (!slotNames.length) {\n        slotNames.push(SlotController.default);\n      }\n      return slotNames.some(x => this.#nodes.get(x)?.hasContent ?? false);\n    }\n  }\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  isEmpty(...names: (string | null | undefined)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n\n  #onSlotChange = (event: Event & { target: HTMLSlotElement }) => {\n    const slotName = event.target.name;\n    this.#initSlot(slotName);\n    this.host.requestUpdate();\n  };\n\n  #onMutation = async (records: MutationRecord[]) => {\n    const changed = [];\n    for (const { addedNodes, removedNodes } of records) {\n      for (const node of [...addedNodes, ...removedNodes]) {\n        if (node instanceof HTMLElement && node.slot) {\n          this.#initSlot(node.slot);\n          changed.push(node.slot);\n        }\n      }\n    }\n    this.host.requestUpdate();\n  };\n\n  #getChildrenForSlot<T extends Element = Element>(\n    name: string | typeof SlotController.default,\n  ): T[] {\n    if (isServer) {\n      return [];\n    } else {\n      const children = Array.from(this.host.children) as T[];\n      return children.filter(isSlot(name));\n    }\n  }\n\n  #initSlot = (slotName: string | null) => {\n    const name = slotName || SlotController.default;\n    const elements = this.#nodes.get(name)?.slot?.assignedElements?.()\n      ?? this.#getChildrenForSlot(name);\n    const selector = slotName ? `slot[name=\"${slotName}\"]` : 'slot:not([name])';\n    const slot = this.host.shadowRoot?.querySelector?.<HTMLSlotElement>(selector) ?? null;\n    const nodes = slot?.assignedNodes?.();\n    const hasContent = !!elements.length || !!nodes?.filter(x => x.textContent?.trim()).length;\n    this.#nodes.set(name, { elements, name: slotName ?? '', hasContent, slot });\n    this.#logger.debug(slotName, hasContent);\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/slot-controller.ts b/node_modules/@patternfly/pfe-core/controllers/slot-controller.ts
new file mode 100644
index 0000000..2a7671b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/slot-controller.ts
@@ -0,0 +1,213 @@
+import { isServer, type ReactiveController, type ReactiveElement } from 'lit';
+
+import { Logger } from './logger.js';
+
+interface AnonymousSlot {
+  hasContent: boolean;
+  elements: Element[];
+  slot: HTMLSlotElement | null;
+}
+
+interface NamedSlot extends AnonymousSlot {
+  name: string;
+  initialized: true;
+}
+
+export type Slot = NamedSlot | AnonymousSlot;
+
+export interface SlotsConfig {
+  slots: (string | null)[];
+  /**
+   * Object mapping new slot name keys to deprecated slot name values
+   * @example `pf-modal--header` is deprecated in favour of `header`
+   * ```js
+   * new SlotController(this, {
+   *   slots: ['header'],
+   *   deprecations: {
+   *     'header': 'pf-modal--header'
+   *   }
+   * })
+   * ```
+   */
+  deprecations?: Record<string, string>;
+}
+
+function isObjectConfigSpread(
+  config: ([SlotsConfig] | (string | null)[]),
+): config is [SlotsConfig] {
+  return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;
+}
+
+/**
+ * If it's a named slot, return its children,
+ * for the default slot, look for direct children not assigned to a slot
+ * @param n slot name
+ */
+const isSlot =
+  <T extends Element = Element>(n: string | typeof SlotController.default) =>
+    (child: Element): child is T =>
+        n === SlotController.default ? !child.hasAttribute('slot')
+      : child.getAttribute('slot') === n;
+
+export class SlotController implements ReactiveController {
+  public static default = Symbol('default slot') satisfies symbol as symbol;
+
+  /** @deprecated use `default` */
+  public static anonymous: symbol = this.default;
+
+  #nodes = new Map<string | typeof SlotController.default, Slot>();
+
+  #logger: Logger;
+
+  #firstUpdated = false;
+
+  #mo = new MutationObserver(records => this.#onMutation(records));
+
+  #slotNames: (string | null)[];
+
+  #deprecations: Record<string, string> = {};
+
+  constructor(public host: ReactiveElement, ...config: ([SlotsConfig] | (string | null)[])) {
+    this.#logger = new Logger(this.host);
+
+    if (isObjectConfigSpread(config)) {
+      const [{ slots, deprecations }] = config;
+      this.#slotNames = slots;
+      this.#deprecations = deprecations ?? {};
+    } else if (config.length >= 1) {
+      this.#slotNames = config;
+      this.#deprecations = {};
+    } else {
+      this.#slotNames = [null];
+    }
+
+
+    host.addController(this);
+  }
+
+  async hostConnected(): Promise<void> {
+    this.host.addEventListener('slotchange', this.#onSlotChange as EventListener);
+    this.#firstUpdated = false;
+    this.#mo.observe(this.host, { childList: true });
+    // Map the defined slots into an object that is easier to query
+    this.#nodes.clear();
+    // Loop over the properties provided by the schema
+    this.#slotNames.forEach(this.#initSlot);
+    Object.values(this.#deprecations).forEach(this.#initSlot);
+    this.host.requestUpdate();
+    // insurance for framework integrations
+    await this.host.updateComplete;
+    this.host.requestUpdate();
+  }
+
+  hostUpdated(): void {
+    if (!this.#firstUpdated) {
+      this.#slotNames.forEach(this.#initSlot);
+      this.#firstUpdated = true;
+    }
+  }
+
+  hostDisconnected(): void {
+    this.#mo.disconnect();
+  }
+
+  /**
+   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.
+   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).
+   * @param slotNames slots to query
+   * @example Get header-slotted elements
+   *          ```js
+   *          this.getSlotted('header')
+   *          ```
+   * @example Get header- and footer-slotted elements
+   *          ```js
+   *          this.getSlotted('header', 'footer')
+   *          ```
+   * @example Get default-slotted elements
+   *          ```js
+   *          this.getSlotted();
+   *          ```
+   */
+  getSlotted<T extends Element = Element>(...slotNames: string[]): T[] {
+    if (!slotNames.length) {
+      return (this.#nodes.get(SlotController.default)?.elements ?? []) as T[];
+    } else {
+      return slotNames.flatMap(slotName =>
+        this.#nodes.get(slotName)?.elements ?? []) as T[];
+    }
+  }
+
+  /**
+   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.
+   * @param names The slot names to check.
+   * @example this.hasSlotted('header');
+   */
+  hasSlotted(...names: (string | null | undefined)[]): boolean {
+    if (isServer) {
+      return this.host
+          .getAttribute('ssr-hint-has-slotted')
+          ?.split(',')
+          .map(name => name.trim())
+          .some(name => names.includes(name === 'default' ? null : name)) ?? false;
+    } else {
+      const slotNames = Array.from(names, x => x == null ? SlotController.default : x);
+      if (!slotNames.length) {
+        slotNames.push(SlotController.default);
+      }
+      return slotNames.some(x => this.#nodes.get(x)?.hasContent ?? false);
+    }
+  }
+
+  /**
+   * Whether or not all the requested slots are empty.
+   * @param  names The slot names to query.  If no value is provided, it returns the default slot.
+   * @example this.isEmpty('header', 'footer');
+   * @example this.isEmpty();
+   * @returns
+   */
+  isEmpty(...names: (string | null | undefined)[]): boolean {
+    return !this.hasSlotted(...names);
+  }
+
+  #onSlotChange = (event: Event & { target: HTMLSlotElement }) => {
+    const slotName = event.target.name;
+    this.#initSlot(slotName);
+    this.host.requestUpdate();
+  };
+
+  #onMutation = async (records: MutationRecord[]) => {
+    const changed = [];
+    for (const { addedNodes, removedNodes } of records) {
+      for (const node of [...addedNodes, ...removedNodes]) {
+        if (node instanceof HTMLElement && node.slot) {
+          this.#initSlot(node.slot);
+          changed.push(node.slot);
+        }
+      }
+    }
+    this.host.requestUpdate();
+  };
+
+  #getChildrenForSlot<T extends Element = Element>(
+    name: string | typeof SlotController.default,
+  ): T[] {
+    if (isServer) {
+      return [];
+    } else {
+      const children = Array.from(this.host.children) as T[];
+      return children.filter(isSlot(name));
+    }
+  }
+
+  #initSlot = (slotName: string | null) => {
+    const name = slotName || SlotController.default;
+    const elements = this.#nodes.get(name)?.slot?.assignedElements?.()
+      ?? this.#getChildrenForSlot(name);
+    const selector = slotName ? `slot[name="${slotName}"]` : 'slot:not([name])';
+    const slot = this.host.shadowRoot?.querySelector?.<HTMLSlotElement>(selector) ?? null;
+    const nodes = slot?.assignedNodes?.();
+    const hasContent = !!elements.length || !!nodes?.filter(x => x.textContent?.trim()).length;
+    this.#nodes.set(name, { elements, name: slotName ?? '', hasContent, slot });
+    this.#logger.debug(slotName, hasContent);
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/style-controller.ts b/node_modules/@patternfly/pfe-core/controllers/style-controller.ts
new file mode 100644
index 0000000..ef3ca52
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/style-controller.ts
@@ -0,0 +1,61 @@
+import type {
+  ReactiveController,
+  ReactiveElement,
+  CSSResultGroup,
+  CSSResultOrNative,
+  CSSResult,
+} from 'lit';
+import { getCompatibleStyle, supportsAdoptingStyleSheets } from 'lit';
+
+declare global {
+  interface ShadowRoot {
+    adoptedStyleSheets: CSSStyleSheet[];
+  }
+}
+
+/**
+ * Controller which adds styles to it's host element.
+ * Like `static styles = []`, except a controller.
+ * Should typically only be used within other controllers.
+ */
+export class StyleController implements ReactiveController {
+  private stylesAdopted = false;
+
+  constructor(
+    private host: ReactiveElement,
+    /** These styles will be applied to the host element */
+    private styles: CSSResultGroup,
+  ) {
+    host.addController(this);
+  }
+
+  hostConnected(): void {
+    if (this.stylesAdopted || !(this.host.renderRoot instanceof ShadowRoot)) {
+      return;
+    }
+
+    const styles = [this.styles]
+        .flatMap(x => getCompatibleStyle(x as CSSResultOrNative))
+        .filter(x => !!x);
+
+    if (supportsAdoptingStyleSheets) {
+      this.host.renderRoot.adoptedStyleSheets = [
+        ...styles.map(x => x instanceof CSSStyleSheet ? x : x.styleSheet as CSSStyleSheet),
+        ...this.host.renderRoot.adoptedStyleSheets ?? [],
+      ];
+    } else {
+      styles.forEach(s => {
+        const style = document.createElement('style');
+        // eslint-disable-next-line @typescript-eslint/no-explicit-any
+        const nonce = (window as any)['litNonce'];
+        if (nonce !== undefined) {
+          style.setAttribute('nonce', nonce);
+        }
+        style.textContent = (s as CSSResult).cssText;
+        this.host.renderRoot.appendChild(style);
+      });
+    }
+
+    this.stylesAdopted = true;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/tabs-aria-controller.ts b/node_modules/@patternfly/pfe-core/controllers/tabs-aria-controller.ts
new file mode 100644
index 0000000..bfd7ab6
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/tabs-aria-controller.ts
@@ -0,0 +1,130 @@
+import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';
+
+import { Logger } from '@patternfly/pfe-core/controllers/logger.js';
+
+export interface TabsAriaControllerOptions<Tab, Panel> {
+  /** Add an `isTab` predicate to ensure this tabs instance' state does not leak into parent tabs' state */
+  isTab: (node: unknown) => node is Tab;
+  isActiveTab: (tab: Tab) => boolean;
+  /** Add an `isPanel` predicate to ensure this tabs instance' state does not leak into parent tabs' state */
+  isPanel: (node: unknown) => node is Panel;
+  getHTMLElement?: () => HTMLElement;
+}
+
+export class TabsAriaController<
+  Tab extends HTMLElement = HTMLElement,
+  Panel extends HTMLElement = HTMLElement
+> implements ReactiveController {
+  #logger: Logger;
+
+  #host: ReactiveControllerHost;
+
+  #element!: HTMLElement;
+
+  #tabPanelMap = new Map<Tab, Panel>();
+
+  #options: TabsAriaControllerOptions<Tab, Panel>;
+
+  #mo = new MutationObserver(this.#onSlotchange.bind(this));
+
+  get tabs() {
+    return [...this.#tabPanelMap.keys()] as Tab[];
+  }
+
+  get activeTab(): Tab | undefined {
+    return this.tabs.find(x => this.#options.isActiveTab(x));
+  }
+
+  /**
+   * @param host controller host
+   * @param options controller options
+   * @example Usage in PfTab
+   *          ```ts
+   *          new TabsController(this, {
+   *             isTab: (x): x is PfTab => x instanceof PfTab,
+   *             isPanel: (x): x is PfTabPanel => x instanceof PfTabPanel
+   *          });
+   *          ```
+   */
+  constructor(
+    host: ReactiveControllerHost,
+    options: TabsAriaControllerOptions<Tab, Panel>,
+  ) {
+    this.#options = options;
+    this.#logger = new Logger(host);
+    (this.#host = host).addController(this);
+    if (isServer) {
+      return;
+    }
+    if (host instanceof HTMLElement) {
+      this.#element = host;
+    } else {
+      const element = options.getHTMLElement?.();
+      if (!element) {
+        throw new Error(
+          'TabsController must be instantiated with an HTMLElement or a `getHTMLElement()` option',
+        );
+      }
+      this.#element = element;
+    }
+    this.#element.addEventListener('slotchange', this.#onSlotchange);
+    if (this.#element.isConnected) {
+      this.hostConnected();
+    }
+  }
+
+  hostConnected(): void {
+    this.#mo.observe(this.#element, { attributes: false, childList: true, subtree: false });
+    this.#onSlotchange();
+  }
+
+  hostUpdated(): void {
+    for (const [tab, panel] of this.#tabPanelMap) {
+      panel.setAttribute('aria-labelledby', tab.id);
+      tab.setAttribute('aria-controls', panel.id);
+    }
+  }
+
+  hostDisconnected(): void {
+    this.#mo.disconnect();
+  }
+
+  /**
+   * zip the tabs and panels together into #tabPanelMap
+   */
+  #onSlotchange() {
+    this.#tabPanelMap.clear();
+    const tabs = [];
+    const panels = [];
+    for (const child of this.#element?.children ?? []) {
+      if (this.#options.isTab(child)) {
+        tabs.push(child);
+        child.role ??= 'tab';
+      } else if (this.#options.isPanel(child)) {
+        panels.push(child);
+        child.role ??= 'tabpanel';
+      }
+    }
+    if (tabs.length > panels.length) {
+      this.#logger.warn('Too many tabs!');
+    } else if (panels.length > tabs.length) {
+      this.#logger.warn('Too many panels!');
+    }
+    while (tabs.length) {
+      this.#tabPanelMap.set(tabs.shift()!, panels.shift()!);
+    }
+    this.#host.requestUpdate();
+  }
+
+  panelFor(tab: Tab): Panel | undefined {
+    return this.#tabPanelMap.get(tab);
+  }
+
+  tabFor(panel: Panel): Tab | undefined {
+    for (const [tab, panelToCheck] of this.#tabPanelMap) {
+      if (panel === panelToCheck) {
+        return tab;
+      }
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/controllers/test/combobox-controller.spec.ts b/node_modules/@patternfly/pfe-core/controllers/test/combobox-controller.spec.ts
new file mode 100644
index 0000000..6bf9271
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/test/combobox-controller.spec.ts
@@ -0,0 +1,312 @@
+import { expect, fixture, nextFrame } from '@open-wc/testing';
+import { sendKeys } from '@web/test-runner-commands';
+import { a11ySnapshot } from '@patternfly/pfe-tools/test/a11y-snapshot.js';
+
+import { customElement } from 'lit/decorators/custom-element.js';
+import { query } from 'lit/decorators/query.js';
+import { ReactiveElement, html, render, type PropertyValues, type TemplateResult } from 'lit';
+
+import { ComboboxController } from '../combobox-controller.js';
+
+function press(key: string) {
+  return async function() {
+    await sendKeys({ press: key });
+  };
+}
+
+abstract class TestCombobox extends ReactiveElement {
+  declare static template: TemplateResult;
+
+  static styles = new CSSStyleSheet();
+
+  static {
+    this.styles.replaceSync(/* css */`
+      option {
+        &.active {
+          outline: 1px solid black;
+        }
+        &[selected] {
+          background: lightblue;
+        }
+      }
+    `);
+  }
+
+  controller = ComboboxController.of(this, {
+    multi: false,
+    getItems: () => this.options,
+    isItem: item => item instanceof HTMLOptionElement,
+    getFallbackLabel: () => 'options',
+    getListboxElement: () => this.listbox ?? null,
+    getToggleButton: () => this.button ?? null,
+    getComboboxInput: () => this.combobox ?? null,
+    isExpanded: () => !this.listbox.hidden,
+    requestShowListbox: () => void (this.listbox.hidden = false),
+    requestHideListbox: () => void (this.listbox.hidden = true),
+    setItemActive: (item, active) => item.classList.toggle('active', active),
+    setItemSelected: (item, selected) => item.selected = selected,
+  });
+
+  @query('#listbox') listbox!: HTMLElement;
+  @query('#button') button!: HTMLButtonElement;
+  @query('#combobox') combobox!: HTMLInputElement;
+  @query('#placeholder') placeholder!: HTMLOptionElement;
+
+  /** List of options */
+  get options(): HTMLOptionElement[] {
+    return [
+      ...new Set([
+        this.placeholder,
+        ...this.querySelectorAll('option'),
+        ...this.renderRoot.querySelectorAll('option'),
+      ]),
+    ].filter(x => !!x);
+  }
+
+  get selected() {
+    return this.options.filter(x => x.selected);
+  }
+
+  get activeOption() {
+    return this.options.find(x => x.classList.contains('active'));
+  }
+
+  abstract render(): TemplateResult;
+
+  override update(changed: PropertyValues<this>) {
+    render(this.render(), this.renderRoot);
+    super.update(changed);
+    this.placeholder.inert = !!this.controller.selected.length;
+  }
+
+  connectedCallback(): void {
+    super.connectedCallback();
+    const root = this.renderRoot.getRootNode() as Document | ShadowRoot;
+    root.adoptedStyleSheets = [...root.adoptedStyleSheets ?? [], TestCombobox.styles];
+  }
+
+  static async test() {
+    let element: TestCombobox;
+
+    const updateComplete = () => element.updateComplete;
+
+    const { template } = this;
+
+    if (!template) {
+      throw new Error(`${this.constructor.name} must implement template`);
+    }
+
+    beforeEach(async function() {
+      element = await fixture<TestCombobox>(template);
+    });
+
+    describe('Tab', function() {
+      beforeEach(press('Tab'));
+      beforeEach(updateComplete);
+
+      it('focuses the combobox', async function() {
+        expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+      });
+
+      describe('Tab', function() {
+        beforeEach(press('Tab'));
+        beforeEach(updateComplete);
+        beforeEach(nextFrame);
+
+        it('does not focus the toggle button', async function() {
+          expect(await a11ySnapshot()).to.not.axContainQuery({ focused: true });
+        });
+      });
+
+      describe('ArrowDown', function() {
+        beforeEach(press('ArrowDown'));
+        beforeEach(updateComplete);
+
+        it('expands the listbox', async function() {
+          expect(await a11ySnapshot())
+              .to.axContainRole('listbox')
+              .and
+              .to.axContainQuery({ role: 'combobox', expanded: true });
+        });
+
+        it('maintains DOM focus on the combobox', async function() {
+          expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+        });
+
+        it('sets active state on the placeholder', function() {
+          expect(element.activeOption).to.equal(element.placeholder);
+        });
+
+        describe('Enter', function() {
+          beforeEach(press('Enter'));
+          beforeEach(updateComplete);
+
+          it('maintains DOM focus on the combobox', async function() {
+            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+          });
+
+          it('selects nothing', function() {
+            expect(element.selected).to.have.length(0);
+          });
+        });
+
+        describe('ArrowDown', function() {
+          beforeEach(press('ArrowDown'));
+          beforeEach(updateComplete);
+
+          it('maintains DOM focus on the combobox', async function() {
+            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+          });
+
+          it('sets active state on the 1st option', function() {
+            expect(element.activeOption).to.have.text('1');
+          });
+
+          describe('Enter', function() {
+            beforeEach(press('Enter'));
+            beforeEach(updateComplete);
+
+            it('maintains DOM focus on the combobox', async function() {
+              expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+            });
+
+            it('selects the first option', function() {
+              expect(element.selected).to.have.length(1);
+              expect(element.selected.at(0)).to.have.text('1');
+            });
+
+            it('collapses the listbox', async function() {
+              expect(await a11ySnapshot())
+                  .to.not.axContainRole('listbox')
+                  .and
+                  .to.axContainQuery({ role: 'combobox', expanded: false });
+            });
+          });
+        });
+
+        describe('Escape', function() {
+          beforeEach(press('Escape'));
+          beforeEach(updateComplete);
+
+          it('collapses the listbox', async function() {
+            expect(await a11ySnapshot())
+                .to.not.axContainRole('listbox')
+                .and
+                .to.axContainQuery({ role: 'combobox', expanded: false });
+          });
+
+          it('maintains DOM focus on the combobox', async function() {
+            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+          });
+        });
+      });
+    });
+  };
+}
+
+@customElement('x-combobox-cross-root')
+class XComboboxCrossRoot extends TestCombobox {
+  static template = html`
+    <x-combobox-cross-root>
+      <option>1</option>
+      <option>2</option>
+      <option>3</option>
+      <option>4</option>
+      <option>5</option>
+      <option>6</option>
+      <option>7</option>
+      <option>8</option>
+      <option>9</option>
+      <option>10</option>
+    </x-combobox-cross-root>
+  `;
+
+
+  /** List of options */
+  override get options(): HTMLOptionElement[] {
+    return [
+      ...new Set([
+        this.placeholder,
+        ...this.querySelectorAll('option'),
+      ]),
+    ].filter(x => !!x);
+  }
+
+  render() {
+    return html`
+      <div id="toggle">
+        <input id="combobox">
+        <button id="button">Show Options</button>
+      </div>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        ${this.controller.renderItemsToShadowRoot()}
+        <div ?hidden=${!ComboboxController.supportsCrossRootActiveDescendant}>
+          <slot></slot>
+        </div>
+      </div>
+    `;
+  }
+}
+
+@customElement('x-combobox-light')
+class XComboboxLight extends TestCombobox {
+  static template = html`
+    <x-combobox-light></x-combobox-light>
+  `;
+
+  protected createRenderRoot(): HTMLElement | DocumentFragment {
+    return this;
+  }
+
+  render() {
+    return html`
+      <input id="combobox">
+      <button id="button">Show Options</button>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        <option>1</option>
+        <option>2</option>
+        <option>3</option>
+        <option>4</option>
+        <option>5</option>
+        <option>6</option>
+        <option>7</option>
+        <option>8</option>
+        <option>9</option>
+        <option>10</option>
+      </div>`;
+  }
+}
+
+@customElement('x-combobox-shadow')
+class XComboboxShadow extends TestCombobox {
+  static template = html`
+    <x-combobox-shadow></x-combobox-shadow>
+  `;
+
+  render() {
+    return html`
+      <input id="combobox">
+      <button id="button">Show Options</button>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        <option>1</option>
+        <option>2</option>
+        <option>3</option>
+        <option>4</option>
+        <option>5</option>
+        <option>6</option>
+        <option>7</option>
+        <option>8</option>
+        <option>9</option>
+        <option>10</option>
+      </div>`;
+  }
+}
+
+describe('ComboboxController', function() {
+  describe('Cross-root ARIA', XComboboxCrossRoot.test.bind(XComboboxCrossRoot));
+  describe('Light-DOM only', XComboboxLight.test.bind(XComboboxLight));
+  describe('Shadow-DOM only', XComboboxShadow.test.bind(XComboboxShadow));
+});
diff --git a/node_modules/@patternfly/pfe-core/controllers/timestamp-controller.ts b/node_modules/@patternfly/pfe-core/controllers/timestamp-controller.ts
new file mode 100644
index 0000000..e6deb68
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/controllers/timestamp-controller.ts
@@ -0,0 +1,137 @@
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+
+export type DateTimeFormat = 'full' | 'long' | 'medium' | 'short';
+
+export interface TimestampOptions {
+  dateFormat?: DateTimeFormat;
+  timeFormat?: DateTimeFormat;
+  customFormat?: Intl.DateTimeFormatOptions;
+  displaySuffix: string;
+  locale: Intl.LocalesArgument;
+  relative: boolean;
+  utc: boolean;
+  hour12: boolean;
+}
+
+const defaults = {
+  dateFormat: undefined,
+  timeFormat: undefined,
+  customFormat: undefined,
+  displaySuffix: '',
+  locale: undefined,
+  relative: false,
+  utc: false,
+  hour12: false,
+} as const;
+
+export class TimestampController implements ReactiveController {
+  static #isTimestampOptionKey(prop: PropertyKey): prop is keyof TimestampOptions {
+    return prop in defaults;
+  }
+
+  #date = new Date();
+
+  #options: TimestampOptions = {} as TimestampOptions;
+
+  #host: ReactiveControllerHost;
+
+  get localeString(): string {
+    return this.#date.toLocaleString(this.#options.locale);
+  }
+
+  get date(): Date {
+    return this.#date;
+  }
+
+  set date(string) {
+    this.#date = new Date(string);
+  }
+
+  get isoString(): string {
+    return this.#date.toISOString();
+  }
+
+  get time(): string {
+    if (this.#options.relative) {
+      return this.#getTimeRelative();
+    } else {
+      let { displaySuffix } = this.#options;
+      const { locale } = this.#options;
+      if (this.#options.utc) {
+        displaySuffix ||= 'UTC';
+      }
+      const localeString = this.#date.toLocaleString(locale, this.#options.customFormat ?? {
+        hour12: this.#options.hour12,
+        timeStyle: this.#options.timeFormat,
+        dateStyle: this.#options.dateFormat,
+        ...this.#options.utc && { timeZone: 'UTC' },
+      });
+
+      return `${localeString} ${displaySuffix ?? ''}`.trim();
+    }
+  }
+
+  constructor(host: ReactiveControllerHost, options?: Partial<TimestampOptions>) {
+    this.#host = host;
+    host.addController(this);
+    for (const [name, value] of Object.entries(this.#options)) {
+      // @ts-expect-error: seems typescript compiler isn't up to the task here
+      this.#options[name] = options?.[name] ?? value;
+    }
+  }
+
+  hostConnected?(): void;
+
+  /**
+   * Based off of Github Relative Time
+   * https://github.com/github/time-elements/blob/master/src/relative-time.js
+   */
+  #getTimeRelative() {
+    const date = this.#date;
+    const { locale } = this.#options;
+    const rtf = new Intl.RelativeTimeFormat(locale as string, {
+      localeMatcher: 'best fit',
+      numeric: 'auto',
+      style: 'long',
+    });
+    const ms: number = date.getTime() - Date.now();
+    const tense = ms > 0 ? 1 : -1;
+    let qty = 0;
+    let units: Intl.RelativeTimeFormatUnit | undefined;
+    const s = Math.round(Math.abs(ms) / 1000);
+    const min = Math.round(s / 60);
+    const h = Math.round(min / 60);
+    const d = Math.round(h / 24);
+    const m = Math.round(d / 30);
+    const y = Math.round(m / 12);
+    if (m >= 12) {
+      qty = y;
+      units = 'year';
+    } else if (d >= 30) {
+      qty = m;
+      units = 'month';
+    } else if (h >= 24) {
+      qty = d;
+      units = 'day';
+    } else if (min >= 45) {
+      qty = h;
+      units = 'hour';
+    } else if (s >= 45) {
+      qty = min;
+      units = 'minute';
+    } else if (s >= 10) {
+      qty = s;
+      units = 'second';
+    }
+
+    return typeof (units) !== 'undefined' ? rtf.format(tense * qty, units) : 'just now';
+  }
+
+  set(prop: PropertyKey, value: unknown): void {
+    if (TimestampController.#isTimestampOptionKey(prop)) {
+      // @ts-expect-error: seems typescript compiler isn't up to the task here
+      this.#options[prop] = value;
+      this.#host.requestUpdate();
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/core.ts b/node_modules/@patternfly/pfe-core/core.ts
new file mode 100644
index 0000000..11d7875
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/core.ts
@@ -0,0 +1,51 @@
+import type { ComplexAttributeConverter } from 'lit';
+
+export type RequireProps<T, Ps extends keyof T> = T & {
+  [P in Ps]-?: T[P];
+};
+
+function makeConverter<T>(
+  f: (x: string, type?: unknown) => T,
+): ComplexAttributeConverter<null | T[]> {
+  return {
+    fromAttribute(value: string) {
+      if (typeof value !== 'string') {
+        return null;
+      } else {
+        return value.split(',').map(f);
+      }
+    },
+    toAttribute(value: T[]) {
+      return value.join(',');
+    },
+  };
+}
+
+/**
+ * A LitElement property converter which represents a list of numbers as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export const NumberListConverter: ComplexAttributeConverter<number[] | null, unknown> =
+  makeConverter(x => parseInt(x?.trim(), 10));
+
+/**
+ * A LitElement property converter which represents a list of strings as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export const StringListConverter: ComplexAttributeConverter<string[] | null, unknown> =
+  makeConverter(x => x.trim());
+
+/**
+ * A composed, bubbling event for UI interactions
+ * e.g. when an accordion panel opens.
+ */
+export class ComposedEvent extends Event {
+  constructor(type: string, init?: EventInit) {
+    super(type, {
+      bubbles: true,
+      composed: true,
+      ...init,
+    });
+  }
+}
+
diff --git a/node_modules/@patternfly/pfe-core/custom-elements.json b/node_modules/@patternfly/pfe-core/custom-elements.json
index f65ac96..ab4cad3 100644
--- a/node_modules/@patternfly/pfe-core/custom-elements.json
+++ b/node_modules/@patternfly/pfe-core/custom-elements.json
@@ -2709,7 +2709,7 @@
               "kind": "field",
               "name": "style",
               "type": {
-                "text": "CSSStyleDeclaration"
+                "text": "CSSStyleDeclaration | undefined"
               }
             },
             {
@@ -2785,13 +2785,13 @@
               ]
             },
             {
-              "kind": "field",
-              "name": "host",
-              "default": "host"
+              "kind": "method",
+              "name": "hostConnected"
             },
             {
               "kind": "field",
-              "name": "style"
+              "name": "host",
+              "default": "host"
             }
           ]
         }
@@ -2820,7 +2820,7 @@
               "kind": "field",
               "name": "style",
               "type": {
-                "text": "CSSStyleDeclaration"
+                "text": "CSSStyleDeclaration | undefined"
               }
             },
             {
@@ -8665,7 +8665,7 @@
               "name": "#getRootNode",
               "privacy": "private",
               "type": {
-                "text": "() => Node"
+                "text": "() => Node | null"
               }
             },
             {
diff --git a/node_modules/@patternfly/pfe-core/decorators.ts b/node_modules/@patternfly/pfe-core/decorators.ts
new file mode 100644
index 0000000..17bdfe6
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators.ts
@@ -0,0 +1,9 @@
+export * from './decorators/bound.js';
+export * from './decorators/cascades.js';
+export * from './decorators/deprecation.js';
+export * from './decorators/initializer.js';
+export * from './decorators/listen.js';
+export * from './decorators/observed.js';
+export * from './decorators/observes.js';
+export * from './decorators/time.js';
+export * from './decorators/trace.js';
diff --git a/node_modules/@patternfly/pfe-core/decorators/bound.ts b/node_modules/@patternfly/pfe-core/decorators/bound.ts
new file mode 100644
index 0000000..458b94c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/bound.ts
@@ -0,0 +1,29 @@
+const configurable = true;
+
+/**
+ * Binds a class method to the instance
+ * @param _
+ * @param key
+ * @param descriptor
+ * @example Binding an event listener
+ *     ```ts
+ *     private mo = new MutationObserver(this.onMutation);
+ *
+ *     @bound onMutation(records: MutationRecord[]) {
+ *       this.count = this.children.length;
+ *     }
+ *     ```
+ */
+export function bound(_: unknown, key: string, descriptor: PropertyDescriptor): PropertyDescriptor {
+  if (typeof descriptor?.value !== 'function') {
+    throw new TypeError(`Only methods can be decorated with @bound. <${key ?? (_ as () => void).name}> is not a method!`);
+  } /* c8 ignore next */
+  return {
+    configurable,
+    get() {
+      const value = descriptor.value.bind(this);
+      Object.defineProperty(this, key, { value, configurable, writable: true });
+      return value;
+    },
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/cascades.ts b/node_modules/@patternfly/pfe-core/decorators/cascades.ts
new file mode 100644
index 0000000..8413443
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/cascades.ts
@@ -0,0 +1,23 @@
+import type { ReactiveElement } from 'lit';
+
+import { CascadeController } from '../controllers/cascade-controller.js';
+
+/**
+ * Cascades the decorated attribute to children
+ * @param items
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export function cascades<T extends ReactiveElement>(...items: string[]): PropertyDecorator {
+  return function(proto: T, key: string & keyof T) {
+    (proto.constructor as typeof ReactiveElement).addInitializer(x => {
+      const instance = x as ReactiveElement;
+      // You can have multiple `@cascades` decorators on an element
+      // and it will only get one CascadeController for all of them
+      if (!CascadeController.instances.has(instance)) {
+        CascadeController.instances.set(instance, new CascadeController(instance));
+      }
+
+      CascadeController.instances.get(instance)?.initProp(key, items);
+    });
+  } as PropertyDecorator;
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/deprecation.ts b/node_modules/@patternfly/pfe-core/decorators/deprecation.ts
new file mode 100644
index 0000000..73be32f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/deprecation.ts
@@ -0,0 +1,63 @@
+import type { ReactiveElement, PropertyDeclaration, ReactiveController } from 'lit';
+
+import { Logger } from '../controllers/logger.js';
+
+export type DeprecationDeclaration<K extends PropertyKey> = PropertyDeclaration & {
+  alias: string & K;
+  attribute: string;
+};
+
+/**
+ * Aliases the decorated field to an existing property, and logs a warning if it is used
+ * @param options alias is a drop in replacement
+ * @example deprecating an attribute
+ *          ```ts
+ *          @property({ reflect: true, attribute: 'color-palette'})
+ *          colorPalette: ColorPalette = 'base';
+ *
+ *          @deprecation('colorPalette') color?: ColorPalette;
+ *          ```
+ */
+export function deprecation<K extends PropertyKey>(
+  options: DeprecationDeclaration<K>,
+) {
+  return function<T extends ReactiveElement, L extends PropertyKey>(
+    proto: Partial<Record<K | L, T>>,
+    key: string & keyof T
+  ): void {
+    const { alias, ...deprecationOptions } = options;
+    const klass = (proto.constructor as typeof ReactiveElement);
+    const declaration = klass.getPropertyOptions(alias);
+    klass.createProperty(key, { ...declaration, ...deprecationOptions });
+    klass.addInitializer(instance => {
+      instance.addController(new Deprecation(instance as T, options, key));
+    });
+  };
+}
+
+class Deprecation<T extends ReactiveElement, K extends PropertyKey> implements ReactiveController {
+  private logger: Logger;
+
+  private logged = false;
+
+  constructor(
+    private host: T,
+    private options: DeprecationDeclaration<K>,
+    private deprecatedKey: string & keyof T
+  ) {
+    this.logger = new Logger(host);
+  }
+
+  hostUpdate() {
+    const { deprecatedKey, options: { alias } } = this;
+    if (this.host[deprecatedKey]) {
+      if (this.host[alias as keyof T] !== this.host[deprecatedKey]) {
+        if (!this.logged) {
+          this.logger.warn(`${deprecatedKey} is deprecated, use ${alias} instead`);
+          this.logged = true;
+        }
+        this.host[alias as keyof T] = this.host[deprecatedKey];
+      }
+    }
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/initializer.ts b/node_modules/@patternfly/pfe-core/decorators/initializer.ts
new file mode 100644
index 0000000..a041451
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/initializer.ts
@@ -0,0 +1,24 @@
+import type { ReactiveElement } from 'lit';
+import type { Options } from '../controllers/light-dom-controller.js';
+
+import { LightDOMController } from '../controllers/light-dom-controller.js';
+
+/**
+ * Runs the decorated method in `connectedCallback`,
+ * provided the element has light children, and sets
+ * up a mutation observer to re-run the callback,
+ * unless opted-out with `{ observe: false }`
+ * @param  options        Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options
+ */
+export function initializer<T extends ReactiveElement>(options?: Options) {
+  return function(proto: T, key: string): void {
+    // @TODO: allow multiple initializers
+    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {
+      const initializer = proto[key as keyof T] as unknown as () => void;
+      const controller = new LightDOMController(instance as ReactiveElement, initializer, options);
+      if (instance.isConnected) {
+        controller.hostConnected();
+      }
+    });
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/listen.ts b/node_modules/@patternfly/pfe-core/decorators/listen.ts
new file mode 100644
index 0000000..ead1817
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/listen.ts
@@ -0,0 +1,29 @@
+import type { LitElement } from 'lit';
+
+/**
+ * Listens for a given event on the custom element.
+ * equivalent to calling `this.addEventListener` in the constructor
+ * @param type event type e.g. `click`
+ * @param options event listener options object e.g. `{ passive: true }`
+ */
+export function listen<P extends LitElement>(
+  type: keyof HTMLElementEventMap,
+  options?: AddEventListenerOptions,
+) {
+  return function(
+    proto: LitElement,
+    methodName: string,
+  ): void {
+    const origConnected = proto.connectedCallback;
+    const origDisconnected = proto.disconnectedCallback;
+    const listener = (proto as P)[methodName as keyof P] as EventListener;
+    proto.connectedCallback = function() {
+      origConnected?.call(this);
+      this.addEventListener(type, listener, options);
+    };
+    proto.disconnectedCallback = function() {
+      origDisconnected?.call(this);
+      this.removeEventListener(type, listener, options);
+    };
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/observed.ts b/node_modules/@patternfly/pfe-core/decorators/observed.ts
new file mode 100644
index 0000000..13c39d4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/observed.ts
@@ -0,0 +1,95 @@
+import type { ReactiveElement } from 'lit';
+import type { ChangeCallback } from '../controllers/property-observer-controller.js';
+
+import { PropertyObserverController } from '../controllers/property-observer-controller.js';
+
+type TypedFieldDecorator<T> = (proto: T, key: string | keyof T) => void ;
+
+// eslint-disable-next-line jsdoc/require-param
+/**
+ * Calls a _fooChanged method on the instance when the value changes.
+ * Works on any class field. When using on lit observed properties,
+ * Make sure `@observed` is to the left (i.e. called after) the `@property`
+ * or `@state` decorator.
+ * @example observing a lit property
+ *          ```ts
+ *          @observed @property() foo = 'bar';
+ *
+ *          protected _fooChanged(oldValue?: string, newValue?: string) {}
+ *          ```
+ * @example using a custom callback
+ *          ```ts
+ *          @observed('_myCallback') size = 'lg';
+ *
+ *          _myCallback(_, size) {...}
+ *          ```
+ * @example using an arrow function
+ *          ```ts
+ *          @observed((oldVal, newVal) => console.log(`Size changed from ${oldVal} to ${newVal}`))
+ *          ```
+ */
+export function observed<T extends ReactiveElement, V>(
+  cb: ChangeCallback<T, V>,
+): TypedFieldDecorator<T>;
+export function observed<T extends ReactiveElement>(methodName: string): TypedFieldDecorator<T>;
+export function observed<T extends ReactiveElement>(proto: T, key: string): void;
+// eslint-disable-next-line jsdoc/require-jsdoc
+export function observed<T extends ReactiveElement>(...as: any[]): void | TypedFieldDecorator<T> {
+  if (as.length === 1) {
+    const [methodNameOrCb] = as;
+    return configuredDecorator(methodNameOrCb);
+  } else {
+    return executeBareDecorator(...as as [T, string & keyof T]);
+  }
+}
+
+/**
+ * @param proto element prototype
+ * @param propertyName propertyName
+ * @example ```typescript
+ *          @observed @property() foo?: string;
+ *          ```
+ */
+function executeBareDecorator<T extends ReactiveElement>(proto: T, propertyName: string & keyof T) {
+  const klass = proto.constructor as typeof ReactiveElement;
+  klass.addInitializer(x => initialize(
+    x as T,
+    propertyName,
+    x[`_${propertyName}Changed` as keyof typeof x] as ChangeCallback<T>,
+  ));
+}
+
+/**
+ * @param methodNameOrCb string name of callback or function
+ * @example ```typescript
+ *          @observed('_myCallback') @property() foo?: string;
+ *          @observed((old) => console.log(old)) @property() bar?: string;
+ *          ```
+ */
+function configuredDecorator<T extends ReactiveElement>(
+  methodNameOrCb: string | ChangeCallback<T>,
+): TypedFieldDecorator<T> {
+  return function(proto, key) {
+    const propertyName = key as string & keyof T;
+    const klass = proto.constructor as typeof ReactiveElement;
+    if (typeof methodNameOrCb === 'function') {
+      const callback = methodNameOrCb;
+      klass.addInitializer(x => initialize(x as T, propertyName, callback));
+    } else {
+      klass.addInitializer(x => initialize(
+        x as T,
+        propertyName,
+        x[methodNameOrCb as keyof ReactiveElement] as ChangeCallback<T>,
+      ));
+    }
+  };
+}
+
+function initialize<T extends ReactiveElement>(
+  instance: T,
+  propertyName: string & keyof T,
+  callback: ChangeCallback<T>,
+) {
+  const controller = new PropertyObserverController<T>(instance as T, { propertyName, callback });
+  instance.addController(controller);
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/observes.ts b/node_modules/@patternfly/pfe-core/decorators/observes.ts
new file mode 100644
index 0000000..943b849
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/observes.ts
@@ -0,0 +1,40 @@
+import type { ReactiveElement } from 'lit';
+
+import {
+  PropertyObserverController,
+  type ChangeCallback,
+  type PropertyObserverOptions,
+} from '@patternfly/pfe-core/controllers/property-observer-controller.js';
+
+/**
+ * Observes changes on the given property and calls the decorated method
+ * with the old and new values when it changes. In cases where the decorated method
+ * needs to access uninitialized class fields, You may need to wait for the element to connect
+ * before running your effects. In that case, you can optionally specify which
+ * lifecycle state to wait for. e.g.:
+ * - `waitFor: 'firstUpdate'` waits until the first update cycle has completed
+ * - `waitFor: 'updated'` waits until the next update cycle has completed
+ * - `waitFor: 'connected'` waits until the element connects
+ * @param propertyName property to react to
+ * @param [options] options including lifecycle to wait on.
+ */
+export function observes<T extends ReactiveElement>(
+  propertyName: string & keyof T,
+  options?: Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>,
+) {
+  return function(proto: T, methodName: string): void {
+    const callback = proto[methodName as keyof T] as ChangeCallback<T>;
+    if (typeof callback !== 'function') {
+      throw new Error('@observes must decorate a class method');
+    }
+    const klass = proto.constructor as typeof ReactiveElement;
+    klass.addInitializer(instance => {
+      instance.addController(new PropertyObserverController(instance as T, {
+        ...options,
+        propertyName,
+        callback,
+      }));
+    });
+  };
+}
+
diff --git a/node_modules/@patternfly/pfe-core/decorators/time.ts b/node_modules/@patternfly/pfe-core/decorators/time.ts
new file mode 100644
index 0000000..bdb3f45
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/time.ts
@@ -0,0 +1,41 @@
+/**
+ * Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)
+ * @param tag - short string to identify the method name
+ */
+export function time(tag?: string) {
+  return function(
+    _: unknown,
+    key: string,
+    descriptor: PropertyDescriptor,
+  ): void {
+    const { value: f } = descriptor ?? {};
+
+    if (!(typeof f === 'function')) {
+      throw new Error('@time() may only decorate class methods');
+    }
+
+    descriptor.value = function(...args: any[]) {
+      const TAG = tag ?? `${this.constructor.name}-${key}`;
+      const START_TAG = `start-${TAG}`;
+      const END_TAG = `end-${TAG}`;
+
+      performance.mark(START_TAG);
+
+      const x = f.call(this, ...args);
+
+      const ret = () => {
+        performance.mark(END_TAG);
+        performance.measure(TAG, START_TAG, END_TAG);
+        // eslint-disable-next-line no-console
+        console.log(Array.from(performance.getEntriesByName(TAG)).pop());
+        return x;
+      };
+
+      if (x instanceof Promise) {
+        return x.then(ret);
+      } else {
+        return ret();
+      }
+    };
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/decorators/trace.ts b/node_modules/@patternfly/pfe-core/decorators/trace.ts
new file mode 100644
index 0000000..7507ad5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/decorators/trace.ts
@@ -0,0 +1,28 @@
+/**
+ * Logs the result of a class method
+ * @param tag log tag, prepended to outputs
+ */
+export function trace(tag?: string) {
+  return function(
+    _: unknown,
+    key: string,
+    descriptor: PropertyDescriptor,
+  ): void {
+    const { value: f } = descriptor;
+    descriptor.value = function(...args: any[]) {
+      const x = f.call(this, ...args);
+
+      const ret = () => {
+        // eslint-disable-next-line no-console
+        console.log(tag ?? key, x);
+        return x;
+      };
+
+      if (x instanceof Promise) {
+        return x.then(ret);
+      } else {
+        return ret();
+      }
+    };
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/arraysAreEquivalent.ts b/node_modules/@patternfly/pfe-core/functions/arraysAreEquivalent.ts
new file mode 100644
index 0000000..475520c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/arraysAreEquivalent.ts
@@ -0,0 +1,24 @@
+/**
+ * Whether the two arrays are equivalent
+ * Arrays are equivalent when they are both empty, or when their lengths are equal and each of
+ * their members is equal (===) to the corresponding member in the other array.
+ * If either argument is not an array, the result will be strict equivalence (===)
+ * @param a first array
+ * @param b second array
+ */
+export function arraysAreEquivalent(a: unknown, b: unknown): boolean {
+  if (!Array.isArray(a) || !Array.isArray(b)) {
+    return a === b;
+  } else if (a.length !== b.length) { // lengths are different
+    return false;
+  } else if (!a.length && !b.length) { // both are empty
+    return true;
+  } else { // multi and length of both is equal
+    for (const [i, element] of a.entries()) {
+      if (element !== b[i]) {
+        return false;
+      }
+    }
+    return true;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/containsDeep.ts b/node_modules/@patternfly/pfe-core/functions/containsDeep.ts
new file mode 100644
index 0000000..b14454b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/containsDeep.ts
@@ -0,0 +1,24 @@
+/**
+ * Whether or not the container contains the node,
+ * and if not, whether the node is contained by any element
+ * slotted in to the container
+ * @param container haystack
+ * @param node needle
+ */
+export function containsDeep(
+  container: Element,
+  node: Node,
+): boolean {
+  if (container.contains(node)) {
+    return true;
+  } else {
+    for (const slot of container.querySelectorAll('slot') ?? []) {
+      for (const el of slot.assignedElements()) {
+        if (el.contains(node)) {
+          return true;
+        }
+      }
+    }
+    return false;
+  }
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/context.js b/node_modules/@patternfly/pfe-core/functions/context.js
index e46eac0..feff5a4 100644
--- a/node_modules/@patternfly/pfe-core/functions/context.js
+++ b/node_modules/@patternfly/pfe-core/functions/context.js
@@ -6,6 +6,11 @@ function makeContextRoot() {
     if (!isServer) {
         root.attach(document.body);
     }
+    else {
+        root.attach(
+        // @ts-expect-error: enable context root in ssr
+        globalThis.litServerRoot);
+    }
     return root;
 }
 /**
diff --git a/node_modules/@patternfly/pfe-core/functions/context.js.map b/node_modules/@patternfly/pfe-core/functions/context.js.map
index 3774125..11f9bc1 100644
--- a/node_modules/@patternfly/pfe-core/functions/context.js.map
+++ b/node_modules/@patternfly/pfe-core/functions/context.js.map
@@ -1 +1 @@
-{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAgB,MAAM,cAAc,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,IAAI,IAAiB,CAAC;AAEtB,SAAS,eAAe;IACtB,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,qBAAqB,CACnC,GAAG,IAAsC;IAEzC,IAAI,KAAJ,IAAI,GAAK,eAAe,EAAE,EAAC;IAC3B,OAAO,aAAa,CAAI,GAAG,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { ContextRoot, createContext, type Context } from '@lit/context';\nimport { isServer } from 'lit';\n\nlet root: ContextRoot;\n\nfunction makeContextRoot() {\n  const root = new ContextRoot();\n  if (!isServer) {\n    root.attach(document.body);\n  }\n  return root;\n}\n\n/**\n * In order to prevent late-upgrading-context-consumers from 'missing'\n * their rightful context providers, we must set up a `ContextRoot` on the body.\n * Always use this function when creating contexts that are shared with child elements.\n * @param args createContext args\n */\nexport function createContextWithRoot<T>(\n  ...args: Parameters<typeof createContext>\n): Context<unknown, T> {\n  root ??= makeContextRoot();\n  return createContext<T>(...args);\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAgB,MAAM,cAAc,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,IAAI,IAAiB,CAAC;AAEtB,SAAS,eAAe;IACtB,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;SAAM,CAAC;QACN,IAAI,CAAC,MAAM;QACT,+CAA+C;QAC/C,UAAU,CAAC,aAAa,CACzB,CAAC;IACJ,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,qBAAqB,CACnC,GAAG,IAAsC;IAEzC,IAAI,KAAJ,IAAI,GAAK,eAAe,EAAE,EAAC;IAC3B,OAAO,aAAa,CAAI,GAAG,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { ContextRoot, createContext, type Context } from '@lit/context';\nimport { isServer } from 'lit';\n\nlet root: ContextRoot;\n\nfunction makeContextRoot() {\n  const root = new ContextRoot();\n  if (!isServer) {\n    root.attach(document.body);\n  } else {\n    root.attach(\n      // @ts-expect-error: enable context root in ssr\n      globalThis.litServerRoot,\n    );\n  }\n  return root;\n}\n\n/**\n * In order to prevent late-upgrading-context-consumers from 'missing'\n * their rightful context providers, we must set up a `ContextRoot` on the body.\n * Always use this function when creating contexts that are shared with child elements.\n * @param args createContext args\n */\nexport function createContextWithRoot<T>(\n  ...args: Parameters<typeof createContext>\n): Context<unknown, T> {\n  root ??= makeContextRoot();\n  return createContext<T>(...args);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/functions/context.ts b/node_modules/@patternfly/pfe-core/functions/context.ts
new file mode 100644
index 0000000..d3ebc1f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/context.ts
@@ -0,0 +1,30 @@
+import { ContextRoot, createContext, type Context } from '@lit/context';
+import { isServer } from 'lit';
+
+let root: ContextRoot;
+
+function makeContextRoot() {
+  const root = new ContextRoot();
+  if (!isServer) {
+    root.attach(document.body);
+  } else {
+    root.attach(
+      // @ts-expect-error: enable context root in ssr
+      globalThis.litServerRoot,
+    );
+  }
+  return root;
+}
+
+/**
+ * In order to prevent late-upgrading-context-consumers from 'missing'
+ * their rightful context providers, we must set up a `ContextRoot` on the body.
+ * Always use this function when creating contexts that are shared with child elements.
+ * @param args createContext args
+ */
+export function createContextWithRoot<T>(
+  ...args: Parameters<typeof createContext>
+): Context<unknown, T> {
+  root ??= makeContextRoot();
+  return createContext<T>(...args);
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/debounce.ts b/node_modules/@patternfly/pfe-core/functions/debounce.ts
new file mode 100644
index 0000000..b367ef1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/debounce.ts
@@ -0,0 +1,31 @@
+/**
+ * Debounce helper function
+ * @see https://davidwalsh.name/javascript-debounce-function
+ *
+ * @param  func Function to be debounced
+ * @param  delay How long until it will be run
+ * @param  immediate Whether it should be run at the start instead of the end of the debounce
+ */
+export function debounce(
+  func: (...args: any[]) => unknown,
+  delay: number,
+  immediate = false
+) {
+  let timeout: number | null;
+  return function(this: unknown, ...args: any[]): void {
+    // eslint-disable-next-line @typescript-eslint/no-this-alias
+    const context = this;
+    const later = function() {
+      timeout = null;
+      if (!immediate) {
+        func.apply(context, args);
+      }
+    };
+    const callNow = immediate && !timeout;
+    clearTimeout(timeout as number);
+    timeout = window.setTimeout(later, delay);
+    if (callNow) {
+      func.apply(context, args);
+    }
+  };
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/isElementInView.ts b/node_modules/@patternfly/pfe-core/functions/isElementInView.ts
new file mode 100644
index 0000000..c18e277
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/isElementInView.ts
@@ -0,0 +1,37 @@
+/**
+ * This function returns whether or not an element is within the viewable area of a container. If partial is true,
+ * then this function will return true even if only part of the element is in view.
+ * @param container  The container to check if the element is in view of.
+ * @param element    The element to check if it is view
+ * @param partial   true if partial view is allowed
+ * @param strict    true if strict mode is set, never consider the container width and element width
+ * @returns True if the component is in View.
+ */
+export function isElementInView(
+  container: HTMLElement,
+  element: HTMLElement,
+  partial = false,
+  strict = false
+): boolean {
+  if (!container || !element) {
+    return false;
+  }
+  const containerBounds = container.getBoundingClientRect();
+  const elementBounds = element.getBoundingClientRect();
+  const containerBoundsLeft = Math.ceil(containerBounds.left);
+  const containerBoundsRight = Math.floor(containerBounds.right);
+  const elementBoundsLeft = Math.ceil(elementBounds.left);
+  const elementBoundsRight = Math.floor(elementBounds.right);
+
+  // Check if in view
+  const isTotallyInView =
+    elementBoundsLeft >= containerBoundsLeft
+    && elementBoundsRight <= containerBoundsRight;
+  const isPartiallyInView =
+    (partial || (!strict && containerBounds.width < elementBounds.width))
+    && ((elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft)
+      || (elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight));
+
+  // Return outcome
+  return isTotallyInView || isPartiallyInView;
+}
diff --git a/node_modules/@patternfly/pfe-core/functions/random.ts b/node_modules/@patternfly/pfe-core/functions/random.ts
new file mode 100644
index 0000000..f851bf0
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/functions/random.ts
@@ -0,0 +1,8 @@
+/**
+ * A quick way to fetch a random ID value.
+ * _Note:_ All values are prefixed automatically to ensure an ID-safe value is returned.
+ * @param  prefix id-safe string prefix
+ */
+export function getRandomId(prefix = 'pfe') {
+  return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;
+}
diff --git a/node_modules/@patternfly/pfe-core/pfe-icon-blue-shaded.svg b/node_modules/@patternfly/pfe-core/pfe-icon-blue-shaded.svg
new file mode 100644
index 0000000..c6bb6ba
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/pfe-icon-blue-shaded.svg
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Generator: Adobe Illustrator 25.0.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
+<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
+	 viewBox="0 0 64.2 64.2" style="enable-background:new 0 0 64.2 64.2;" xml:space="preserve">
+<style type="text/css">
+	.st0{fill:#046A89;}
+	.st1{opacity:0.45;fill:#231F20;enable-background:new    ;}
+	.st2{fill:#0477A4;}
+</style>
+<g>
+	<g id="Layer_1_1_">
+		<path class="st0" d="M26,0c0,14.4-11.6,26-26,26v12.2c21.1,0,38.1-17.1,38.2-38.2H26z"/>
+		<path class="st0" d="M38.2,64.2c0-14.4,11.6-26,26-26V26C43.1,26,26,43.1,26,64.2H38.2z"/>
+		<path class="st1" d="M33.4,41.6C28.6,48.1,26,56,26,64.2h12.2c0-1.6,0.2-3.3,0.5-4.9C38,53.1,36.3,47.1,33.4,41.6z"/>
+		<path class="st1" d="M64.2,26c-8.1,0-16,2.6-22.6,7.4c5.5,2.8,11.5,4.6,17.7,5.2c1.6-0.3,3.3-0.5,4.9-0.5V26z"/>
+		<path class="st1" d="M30.8,22.6C35.6,16,38.2,8.1,38.2,0H26c0,1.6-0.2,3.3-0.5,4.9C26.1,11.1,27.9,17.1,30.8,22.6z"/>
+		<path class="st1" d="M0,38.2c8.1,0,16-2.6,22.6-7.4c-5.5-2.8-11.5-4.6-17.7-5.2C3.3,25.9,1.6,26,0,26.1V38.2z"/>
+		<path class="st2" d="M0,38.2c14.4,0,26,11.6,26,26h12.2C38.1,43.1,21.1,26,0,26V38.2z"/>
+		<path class="st2" d="M64.2,26c-14.4,0-26-11.6-26-26H26c0,21.1,17.1,38.1,38.2,38.2V26z"/>
+	</g>
+</g>
+</svg>
diff --git a/node_modules/@patternfly/pfe-core/ssr-shims.d.ts b/node_modules/@patternfly/pfe-core/ssr-shims.d.ts
index f463291..cb0ff5c 100644
--- a/node_modules/@patternfly/pfe-core/ssr-shims.d.ts
+++ b/node_modules/@patternfly/pfe-core/ssr-shims.d.ts
@@ -1,17 +1 @@
-declare class ObserverShim {
-    observe(): void;
-    disconnect(): void;
-}
-declare class MiniHTMLElement {
-    tagName: string;
-    innerHTML: string;
-    constructor(tagName: string);
-}
-declare class MiniHTMLTemplateElement extends MiniHTMLElement {
-    content: {
-        cloneNode: () => string;
-    };
-}
-declare class MiniDocument {
-    createElement(tagName: string): MiniHTMLElement;
-}
+export {};
diff --git a/node_modules/@patternfly/pfe-core/ssr-shims.js b/node_modules/@patternfly/pfe-core/ssr-shims.js
index c8fe51d..1584acc 100644
--- a/node_modules/@patternfly/pfe-core/ssr-shims.js
+++ b/node_modules/@patternfly/pfe-core/ssr-shims.js
@@ -1,4 +1,5 @@
-"use strict";
+var _a;
+import { installWindowOnGlobal } from '@lit-labs/ssr/lib/dom-shim.js';
 class ObserverShim {
     observe() {
         void 0;
@@ -19,32 +20,7 @@ class MiniHTMLTemplateElement extends MiniHTMLElement {
         this.content = { cloneNode: () => this.innerHTML };
     }
 }
-class MiniDocument {
-    createElement(tagName) {
-        switch (tagName) {
-            case 'template':
-                return new MiniHTMLTemplateElement(tagName);
-            default:
-                return new MiniHTMLElement(tagName);
-        }
-    }
-}
-// @ts-expect-error: this runs in node
-globalThis.window ?? (globalThis.window = globalThis);
-// @ts-expect-error: this runs in node
-globalThis.document ?? (globalThis.document = new MiniDocument());
-// @ts-expect-error: this runs in node
-globalThis.navigator ?? (globalThis.navigator = { userAgent: '' });
-// @ts-expect-error: this runs in node
-globalThis.ErrorEvent ?? (globalThis.ErrorEvent = Event);
-// @ts-expect-error: this runs in node
-globalThis.IntersectionObserver ?? (globalThis.IntersectionObserver = ObserverShim);
-// @ts-expect-error: this runs in node
-globalThis.MutationObserver ?? (globalThis.MutationObserver = ObserverShim);
-// @ts-expect-error: this runs in node
-globalThis.ResizeObserver ?? (globalThis.ResizeObserver = ObserverShim);
-// @ts-expect-error: this runs in node
-globalThis.getComputedStyle ?? (globalThis.getComputedStyle = function () {
+function getComputedStyle() {
     return {
         getPropertyPriority() {
             return '';
@@ -53,5 +29,25 @@ globalThis.getComputedStyle ?? (globalThis.getComputedStyle = function () {
             return '';
         },
     };
+}
+;
+// @ts-expect-error: opt in to event support in ssr
+globalThis.litSsrCallConnectedCallback = true;
+installWindowOnGlobal({
+    ErrorEvent: Event,
+    IntersectionObserver: ObserverShim,
+    MutationObserver: ObserverShim,
+    ResizeObserver: ObserverShim,
+    getComputedStyle,
 });
+// @ts-expect-error: this runs in node
+(_a = globalThis.navigator).userAgent ?? (_a.userAgent = '@lit-labs/ssr');
+globalThis.document.createElement = function createElement(tagName) {
+    switch (tagName) {
+        case 'template':
+            return new MiniHTMLTemplateElement(tagName);
+        default:
+            return new MiniHTMLElement(tagName);
+    }
+};
 //# sourceMappingURL=ssr-shims.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/ssr-shims.js.map b/node_modules/@patternfly/pfe-core/ssr-shims.js.map
index 8ef66dc..5a05b91 100644
--- a/node_modules/@patternfly/pfe-core/ssr-shims.js.map
+++ b/node_modules/@patternfly/pfe-core/ssr-shims.js.map
@@ -1 +1 @@
-{"version":3,"file":"ssr-shims.js","sourceRoot":"","sources":["ssr-shims.ts"],"names":[],"mappings":";AAAA,MAAM,YAAY;IAChB,OAAO;QACL,KAAK,CAAC,CAAC;IACT,CAAC;IAED,UAAU;QACR,KAAK,CAAC,CAAC;IACT,CAAC;CACF;AAED,MAAM,eAAe;IAEnB,YAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QADlC,cAAS,GAAG,EAAE,CAAC;IACuB,CAAC;CACxC;AAED,MAAM,uBAAwB,SAAQ,eAAe;IAArD;;QACE,YAAO,GAAG,EAAE,SAAS,EAAE,GAAW,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IACxD,CAAC;CAAA;AAED,MAAM,YAAY;IAChB,aAAa,CAAC,OAAe;QAC3B,QAAQ,OAAO,EAAE,CAAC;YAChB,KAAK,UAAU;gBACb,OAAO,IAAI,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAC9C;gBACE,OAAO,IAAI,eAAe,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;IACH,CAAC;CACF;AAED,sCAAsC;AACtC,UAAU,CAAC,MAAM,KAAjB,UAAU,CAAC,MAAM,GAAK,UAAU,EAAC;AACjC,sCAAsC;AACtC,UAAU,CAAC,QAAQ,KAAnB,UAAU,CAAC,QAAQ,GAAK,IAAI,YAAY,EAAE,EAAC;AAC3C,sCAAsC;AACtC,UAAU,CAAC,SAAS,KAApB,UAAU,CAAC,SAAS,GAAK,EAAE,SAAS,EAAE,EAAE,EAAE,EAAC;AAC3C,sCAAsC;AACtC,UAAU,CAAC,UAAU,KAArB,UAAU,CAAC,UAAU,GAAK,KAAK,EAAC;AAChC,sCAAsC;AACtC,UAAU,CAAC,oBAAoB,KAA/B,UAAU,CAAC,oBAAoB,GAAK,YAAY,EAAC;AACjD,sCAAsC;AACtC,UAAU,CAAC,gBAAgB,KAA3B,UAAU,CAAC,gBAAgB,GAAK,YAAY,EAAC;AAC7C,sCAAsC;AACtC,UAAU,CAAC,cAAc,KAAzB,UAAU,CAAC,cAAc,GAAK,YAAY,EAAC;AAC3C,sCAAsC;AACtC,UAAU,CAAC,gBAAgB,KAA3B,UAAU,CAAC,gBAAgB,GAAK;IAC9B,OAAO;QACL,mBAAmB;YACjB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,gBAAgB;YACd,OAAO,EAAE,CAAC;QACZ,CAAC;KACF,CAAC;AACJ,CAAC,EAEA","sourcesContent":["class ObserverShim {\n  observe(): void {\n    void 0;\n  }\n\n  disconnect(): void {\n    void 0;\n  }\n}\n\nclass MiniHTMLElement {\n  innerHTML = '';\n  constructor(public tagName: string) { }\n}\n\nclass MiniHTMLTemplateElement extends MiniHTMLElement {\n  content = { cloneNode: (): string => this.innerHTML };\n}\n\nclass MiniDocument {\n  createElement(tagName: string): MiniHTMLElement {\n    switch (tagName) {\n      case 'template':\n        return new MiniHTMLTemplateElement(tagName);\n      default:\n        return new MiniHTMLElement(tagName);\n    }\n  }\n}\n\n// @ts-expect-error: this runs in node\nglobalThis.window ??= globalThis;\n// @ts-expect-error: this runs in node\nglobalThis.document ??= new MiniDocument();\n// @ts-expect-error: this runs in node\nglobalThis.navigator ??= { userAgent: '' };\n// @ts-expect-error: this runs in node\nglobalThis.ErrorEvent ??= Event;\n// @ts-expect-error: this runs in node\nglobalThis.IntersectionObserver ??= ObserverShim;\n// @ts-expect-error: this runs in node\nglobalThis.MutationObserver ??= ObserverShim;\n// @ts-expect-error: this runs in node\nglobalThis.ResizeObserver ??= ObserverShim;\n// @ts-expect-error: this runs in node\nglobalThis.getComputedStyle ??= function() {\n  return {\n    getPropertyPriority() {\n      return '';\n    },\n    getPropertyValue() {\n      return '';\n    },\n  };\n}\n\n;\n\n"]}
\ No newline at end of file
+{"version":3,"file":"ssr-shims.js","sourceRoot":"","sources":["ssr-shims.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AAEtE,MAAM,YAAY;IAChB,OAAO;QACL,KAAK,CAAC,CAAC;IACT,CAAC;IAED,UAAU;QACR,KAAK,CAAC,CAAC;IACT,CAAC;CACF;AAED,MAAM,eAAe;IAEnB,YAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QADlC,cAAS,GAAG,EAAE,CAAC;IACuB,CAAC;CACxC;AAED,MAAM,uBAAwB,SAAQ,eAAe;IAArD;;QACE,YAAO,GAAG,EAAE,SAAS,EAAE,GAAW,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IACxD,CAAC;CAAA;AAED,SAAS,gBAAgB;IACvB,OAAO;QACL,mBAAmB;YACjB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,gBAAgB;YACd,OAAO,EAAE,CAAC;QACZ,CAAC;KACF,CAAC;AACJ,CAAC;AAAA,CAAC;AAEF,mDAAmD;AACnD,UAAU,CAAC,2BAA2B,GAAG,IAAI,CAAC;AAE9C,qBAAqB,CAAC;IACpB,UAAU,EAAE,KAAK;IACjB,oBAAoB,EAAE,YAAY;IAClC,gBAAgB,EAAE,YAAY;IAC9B,cAAc,EAAE,YAAY;IAC5B,gBAAgB;CACjB,CAAC,CAAC;AAEH,sCAAsC;AACtC,MAAA,UAAU,CAAC,SAAS,EAAC,SAAS,QAAT,SAAS,GAAK,eAAe,EAAC;AAEnD,UAAU,CAAC,QAAQ,CAAC,aAAa,GAAG,SAAS,aAAa,CAAC,OAAe;IACxE,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,UAAU;YACb,OAAO,IAAI,uBAAuB,CAAC,OAAO,CAA2B,CAAC;QACxE;YACE,OAAO,IAAI,eAAe,CAAC,OAAO,CAAgB,CAAC;IACvD,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { installWindowOnGlobal } from '@lit-labs/ssr/lib/dom-shim.js';\n\nclass ObserverShim {\n  observe(): void {\n    void 0;\n  }\n\n  disconnect(): void {\n    void 0;\n  }\n}\n\nclass MiniHTMLElement {\n  innerHTML = '';\n  constructor(public tagName: string) { }\n}\n\nclass MiniHTMLTemplateElement extends MiniHTMLElement {\n  content = { cloneNode: (): string => this.innerHTML };\n}\n\nfunction getComputedStyle() {\n  return {\n    getPropertyPriority() {\n      return '';\n    },\n    getPropertyValue() {\n      return '';\n    },\n  };\n};\n\n// @ts-expect-error: opt in to event support in ssr\nglobalThis.litSsrCallConnectedCallback = true;\n\ninstallWindowOnGlobal({\n  ErrorEvent: Event,\n  IntersectionObserver: ObserverShim,\n  MutationObserver: ObserverShim,\n  ResizeObserver: ObserverShim,\n  getComputedStyle,\n});\n\n// @ts-expect-error: this runs in node\nglobalThis.navigator.userAgent ??= '@lit-labs/ssr';\n\nglobalThis.document.createElement = function createElement(tagName: string): HTMLElement {\n  switch (tagName) {\n    case 'template':\n      return new MiniHTMLTemplateElement(tagName) as unknown as HTMLElement;\n    default:\n      return new MiniHTMLElement(tagName) as HTMLElement;\n  }\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/ssr-shims.ts b/node_modules/@patternfly/pfe-core/ssr-shims.ts
new file mode 100644
index 0000000..32d0168
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/ssr-shims.ts
@@ -0,0 +1,54 @@
+import { installWindowOnGlobal } from '@lit-labs/ssr/lib/dom-shim.js';
+
+class ObserverShim {
+  observe(): void {
+    void 0;
+  }
+
+  disconnect(): void {
+    void 0;
+  }
+}
+
+class MiniHTMLElement {
+  innerHTML = '';
+  constructor(public tagName: string) { }
+}
+
+class MiniHTMLTemplateElement extends MiniHTMLElement {
+  content = { cloneNode: (): string => this.innerHTML };
+}
+
+function getComputedStyle() {
+  return {
+    getPropertyPriority() {
+      return '';
+    },
+    getPropertyValue() {
+      return '';
+    },
+  };
+};
+
+// @ts-expect-error: opt in to event support in ssr
+globalThis.litSsrCallConnectedCallback = true;
+
+installWindowOnGlobal({
+  ErrorEvent: Event,
+  IntersectionObserver: ObserverShim,
+  MutationObserver: ObserverShim,
+  ResizeObserver: ObserverShim,
+  getComputedStyle,
+});
+
+// @ts-expect-error: this runs in node
+globalThis.navigator.userAgent ??= '@lit-labs/ssr';
+
+globalThis.document.createElement = function createElement(tagName: string): HTMLElement {
+  switch (tagName) {
+    case 'template':
+      return new MiniHTMLTemplateElement(tagName) as unknown as HTMLElement;
+    default:
+      return new MiniHTMLElement(tagName) as HTMLElement;
+  }
+};
diff --git a/node_modules/@patternfly/pfe-core/test/decorators.spec.d.ts b/node_modules/@patternfly/pfe-core/test/decorators.spec.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/decorators.spec.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/@patternfly/pfe-core/test/decorators.spec.js b/node_modules/@patternfly/pfe-core/test/decorators.spec.js
new file mode 100644
index 0000000..e9efa78
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/decorators.spec.js
@@ -0,0 +1,192 @@
+import { __decorate } from "tslib";
+import { LitElement, html } from 'lit';
+import { fixture, expect } from '@open-wc/testing';
+import { customElement } from 'lit/decorators/custom-element.js';
+import { property } from 'lit/decorators/property.js';
+import { observes } from '../decorators/observes.js';
+import { observed } from '../decorators/observed.js';
+import { listen } from '../decorators/listen.js';
+import { spy } from 'sinon';
+let XObservesHost = class XObservesHost extends LitElement {
+    constructor() {
+        super(...arguments);
+        this.count = 0;
+    }
+    numberChanged(old, current) {
+        this.old = old;
+        this.current = current;
+    }
+};
+__decorate([
+    property({ type: Number })
+], XObservesHost.prototype, "count", void 0);
+__decorate([
+    observes('count')
+], XObservesHost.prototype, "numberChanged", null);
+XObservesHost = __decorate([
+    customElement('x-observes-host')
+], XObservesHost);
+describe('@observes', function () {
+    let element;
+    beforeEach(async function () {
+        element = await fixture(html `<x-observes-host></x-observes-host>`);
+    });
+    it('initializes with old and new values', function () {
+        expect(element.old, 'old').to.equal(0);
+        expect(element.current, 'current').to.equal(0);
+    });
+    describe('setting the observed prop', function () {
+        beforeEach(function () {
+            element.count = 1;
+        });
+        beforeEach(() => element.updateComplete);
+        it('updates old and new values', function () {
+            expect(element.old, 'old').to.equal(0);
+            expect(element.current, 'current').to.equal(1);
+        });
+    });
+});
+let XObservedBareHost = class XObservedBareHost extends LitElement {
+    constructor() {
+        super(...arguments);
+        this.count = 0;
+    }
+    _countChanged(old, current) {
+        this.old = old;
+        this.current = current;
+    }
+};
+__decorate([
+    observed,
+    property({ type: Number })
+], XObservedBareHost.prototype, "count", void 0);
+XObservedBareHost = __decorate([
+    customElement('x-observed-bare-host')
+], XObservedBareHost);
+describe('@observed', function () {
+    let element;
+    beforeEach(async function () {
+        element = await fixture(html `<x-observed-bare-host></x-observed-bare-host>`);
+    });
+    it('initializes with old and new values', function () {
+        expect(element.old, 'old').to.equal(0);
+        expect(element.current, 'current').to.equal(0);
+    });
+    describe('setting the observed prop', function () {
+        beforeEach(function () {
+            element.count = 1;
+        });
+        beforeEach(() => element.updateComplete);
+        it('updates old and new values', function () {
+            expect(element.old, 'old').to.equal(0);
+            expect(element.current, 'current').to.equal(1);
+        });
+    });
+});
+let XObservedConfiguredHost = class XObservedConfiguredHost extends LitElement {
+    constructor() {
+        super(...arguments);
+        this.count = 0;
+    }
+    _myCallback(old, current) {
+        this.old = old;
+        this.current = current;
+    }
+};
+__decorate([
+    observed('_myCallback'),
+    property({ type: Number })
+], XObservedConfiguredHost.prototype, "count", void 0);
+XObservedConfiguredHost = __decorate([
+    customElement('x-observed-configured-host')
+], XObservedConfiguredHost);
+describe('@observed(\'_myCallback\')', function () {
+    let element;
+    beforeEach(async function () {
+        element = await fixture(html `<x-observed-configured-host></x-observed-configured-host>`);
+    });
+    it('initializes with old and new values', function () {
+        expect(element.old, 'old').to.equal(0);
+        expect(element.current, 'current').to.equal(0);
+    });
+    describe('setting the observed prop', function () {
+        beforeEach(function () {
+            element.count = 1;
+        });
+        beforeEach(() => element.updateComplete);
+        it('updates old and new values', function () {
+            expect(element.old, 'old').to.equal(0);
+            expect(element.current, 'current').to.equal(1);
+        });
+    });
+});
+describe('@observed(() => {...})', function () {
+    let element;
+    const dump = spy();
+    let XObservedFunctionHost = class XObservedFunctionHost extends LitElement {
+        constructor() {
+            super(...arguments);
+            this.count = 0;
+        }
+    };
+    __decorate([
+        observed(dump),
+        property({ type: Number })
+    ], XObservedFunctionHost.prototype, "count", void 0);
+    XObservedFunctionHost = __decorate([
+        customElement('x-observed-function-host')
+    ], XObservedFunctionHost);
+    beforeEach(async function () {
+        element = await fixture(html `<x-observed-function-host></x-observed-function-host>`);
+    });
+    it('initializes with old and new values', function () {
+        expect(dump).to.have.been.calledWith(0, 0);
+    });
+    describe('setting the observed prop', function () {
+        beforeEach(function () {
+            element.count = 1;
+        });
+        beforeEach(() => element.updateComplete);
+        it('updates old and new values', function () {
+            expect(dump).to.have.been.calledWith(0, 1);
+        });
+    });
+});
+let XListenHost = class XListenHost extends LitElement {
+    constructor() {
+        super(...arguments);
+        this.events = [];
+    }
+    handler(event) {
+        this.events.push(event.type);
+    }
+};
+__decorate([
+    listen('click'),
+    listen('change', { once: true })
+], XListenHost.prototype, "handler", null);
+XListenHost = __decorate([
+    customElement('x-listen-host')
+], XListenHost);
+describe('@listen', function () {
+    let element;
+    beforeEach(async function () {
+        element = await fixture(document.createElement('x-listen-host'));
+    });
+    it('listens for a given event on the host', function () {
+        element.dispatchEvent(new Event('change'));
+        expect(element.events).to.deep.equal(['change']);
+    });
+    it('composes to listen for a multiple events on the host', function () {
+        element.dispatchEvent(new Event('change'));
+        element.dispatchEvent(new Event('click'));
+        element.dispatchEvent(new Event('change'));
+        element.dispatchEvent(new Event('click'));
+        expect(element.events).to.deep.equal([
+            'change',
+            'click',
+            'click',
+        ]);
+    });
+});
+//# sourceMappingURL=decorators.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/test/decorators.spec.js.map b/node_modules/@patternfly/pfe-core/test/decorators.spec.js.map
new file mode 100644
index 0000000..36c890f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/decorators.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"decorators.spec.js","sourceRoot":"","sources":["decorators.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { fixture, expect } from '@open-wc/testing';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { observes } from '../decorators/observes.js';\nimport { observed } from '../decorators/observed.js';\nimport { listen } from '../decorators/listen.js';\n\nimport { spy } from 'sinon';\n\n@customElement('x-observes-host')\nclass XObservesHost extends LitElement {\n  @property({ type: Number }) count = 0;\n  old?: number;\n  current?: number;\n  @observes('count')\n  numberChanged(old: number, current: number) {\n    this.old = old;\n    this.current = current;\n  }\n}\n\ndescribe('@observes', function() {\n  let element: XObservesHost;\n  beforeEach(async function() {\n    element = await fixture(html`<x-observes-host></x-observes-host>`);\n  });\n  it('initializes with old and new values', function() {\n    expect(element.old, 'old').to.equal(0);\n    expect(element.current, 'current').to.equal(0);\n  });\n  describe('setting the observed prop', function() {\n    beforeEach(function() {\n      element.count = 1;\n    });\n    beforeEach(() => element.updateComplete);\n    it('updates old and new values', function() {\n      expect(element.old, 'old').to.equal(0);\n      expect(element.current, 'current').to.equal(1);\n    });\n  });\n});\n\n@customElement('x-observed-bare-host')\nclass XObservedBareHost extends LitElement {\n  @observed\n  @property({ type: Number }) count = 0;\n\n  old?: number;\n  current?: number;\n  _countChanged(old: number, current: number) {\n    this.old = old;\n    this.current = current;\n  }\n}\n\ndescribe('@observed', function() {\n  let element: XObservedBareHost;\n  beforeEach(async function() {\n    element = await fixture(html`<x-observed-bare-host></x-observed-bare-host>`);\n  });\n  it('initializes with old and new values', function() {\n    expect(element.old, 'old').to.equal(0);\n    expect(element.current, 'current').to.equal(0);\n  });\n  describe('setting the observed prop', function() {\n    beforeEach(function() {\n      element.count = 1;\n    });\n    beforeEach(() => element.updateComplete);\n    it('updates old and new values', function() {\n      expect(element.old, 'old').to.equal(0);\n      expect(element.current, 'current').to.equal(1);\n    });\n  });\n});\n\n@customElement('x-observed-configured-host')\nclass XObservedConfiguredHost extends LitElement {\n  @observed('_myCallback')\n  @property({ type: Number }) count = 0;\n\n  old?: number;\n  current?: number;\n  _myCallback(old: number, current: number) {\n    this.old = old;\n    this.current = current;\n  }\n}\n\ndescribe('@observed(\\'_myCallback\\')', function() {\n  let element: XObservedConfiguredHost;\n  beforeEach(async function() {\n    element = await fixture(html`<x-observed-configured-host></x-observed-configured-host>`);\n  });\n  it('initializes with old and new values', function() {\n    expect(element.old, 'old').to.equal(0);\n    expect(element.current, 'current').to.equal(0);\n  });\n  describe('setting the observed prop', function() {\n    beforeEach(function() {\n      element.count = 1;\n    });\n    beforeEach(() => element.updateComplete);\n    it('updates old and new values', function() {\n      expect(element.old, 'old').to.equal(0);\n      expect(element.current, 'current').to.equal(1);\n    });\n  });\n});\n\ndescribe('@observed(() => {...})', function() {\n  let element: XObservedFunctionHost;\n  const dump = spy();\n\n  @customElement('x-observed-function-host')\n  class XObservedFunctionHost extends LitElement {\n    @observed(dump)\n    @property({ type: Number }) count = 0;\n  }\n\n  beforeEach(async function() {\n    element = await fixture(html`<x-observed-function-host></x-observed-function-host>`);\n  });\n\n  it('initializes with old and new values', function() {\n    expect(dump).to.have.been.calledWith(0, 0);\n  });\n  describe('setting the observed prop', function() {\n    beforeEach(function() {\n      element.count = 1;\n    });\n    beforeEach(() => element.updateComplete);\n    it('updates old and new values', function() {\n      expect(dump).to.have.been.calledWith(0, 1);\n    });\n  });\n});\n\n@customElement('x-listen-host')\nclass XListenHost extends LitElement {\n  public events: string[] = [];\n  @listen('click')\n  @listen('change', { once: true })\n  handler(event: Event) {\n    this.events.push(event.type);\n  }\n}\n\ndescribe('@listen', function() {\n  let element: XListenHost;\n  beforeEach(async function() {\n    element = await fixture(document.createElement('x-listen-host'));\n  });\n  it('listens for a given event on the host', function() {\n    element.dispatchEvent(new Event('change'));\n    expect(element.events).to.deep.equal(['change']);\n  });\n  it('composes to listen for a multiple events on the host', function() {\n    element.dispatchEvent(new Event('change'));\n    element.dispatchEvent(new Event('click'));\n    element.dispatchEvent(new Event('change'));\n    element.dispatchEvent(new Event('click'));\n    expect(element.events).to.deep.equal([\n      'change',\n      'click',\n      'click',\n    ]);\n  });\n});\n\n\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/test/decorators.spec.ts b/node_modules/@patternfly/pfe-core/test/decorators.spec.ts
new file mode 100644
index 0000000..51bde28
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/decorators.spec.ts
@@ -0,0 +1,172 @@
+import { LitElement, html } from 'lit';
+import { fixture, expect } from '@open-wc/testing';
+import { customElement } from 'lit/decorators/custom-element.js';
+import { property } from 'lit/decorators/property.js';
+import { observes } from '../decorators/observes.js';
+import { observed } from '../decorators/observed.js';
+import { listen } from '../decorators/listen.js';
+
+import { spy } from 'sinon';
+
+@customElement('x-observes-host')
+class XObservesHost extends LitElement {
+  @property({ type: Number }) count = 0;
+  old?: number;
+  current?: number;
+  @observes('count')
+  numberChanged(old: number, current: number) {
+    this.old = old;
+    this.current = current;
+  }
+}
+
+describe('@observes', function() {
+  let element: XObservesHost;
+  beforeEach(async function() {
+    element = await fixture(html`<x-observes-host></x-observes-host>`);
+  });
+  it('initializes with old and new values', function() {
+    expect(element.old, 'old').to.equal(0);
+    expect(element.current, 'current').to.equal(0);
+  });
+  describe('setting the observed prop', function() {
+    beforeEach(function() {
+      element.count = 1;
+    });
+    beforeEach(() => element.updateComplete);
+    it('updates old and new values', function() {
+      expect(element.old, 'old').to.equal(0);
+      expect(element.current, 'current').to.equal(1);
+    });
+  });
+});
+
+@customElement('x-observed-bare-host')
+class XObservedBareHost extends LitElement {
+  @observed
+  @property({ type: Number }) count = 0;
+
+  old?: number;
+  current?: number;
+  _countChanged(old: number, current: number) {
+    this.old = old;
+    this.current = current;
+  }
+}
+
+describe('@observed', function() {
+  let element: XObservedBareHost;
+  beforeEach(async function() {
+    element = await fixture(html`<x-observed-bare-host></x-observed-bare-host>`);
+  });
+  it('initializes with old and new values', function() {
+    expect(element.old, 'old').to.equal(0);
+    expect(element.current, 'current').to.equal(0);
+  });
+  describe('setting the observed prop', function() {
+    beforeEach(function() {
+      element.count = 1;
+    });
+    beforeEach(() => element.updateComplete);
+    it('updates old and new values', function() {
+      expect(element.old, 'old').to.equal(0);
+      expect(element.current, 'current').to.equal(1);
+    });
+  });
+});
+
+@customElement('x-observed-configured-host')
+class XObservedConfiguredHost extends LitElement {
+  @observed('_myCallback')
+  @property({ type: Number }) count = 0;
+
+  old?: number;
+  current?: number;
+  _myCallback(old: number, current: number) {
+    this.old = old;
+    this.current = current;
+  }
+}
+
+describe('@observed(\'_myCallback\')', function() {
+  let element: XObservedConfiguredHost;
+  beforeEach(async function() {
+    element = await fixture(html`<x-observed-configured-host></x-observed-configured-host>`);
+  });
+  it('initializes with old and new values', function() {
+    expect(element.old, 'old').to.equal(0);
+    expect(element.current, 'current').to.equal(0);
+  });
+  describe('setting the observed prop', function() {
+    beforeEach(function() {
+      element.count = 1;
+    });
+    beforeEach(() => element.updateComplete);
+    it('updates old and new values', function() {
+      expect(element.old, 'old').to.equal(0);
+      expect(element.current, 'current').to.equal(1);
+    });
+  });
+});
+
+describe('@observed(() => {...})', function() {
+  let element: XObservedFunctionHost;
+  const dump = spy();
+
+  @customElement('x-observed-function-host')
+  class XObservedFunctionHost extends LitElement {
+    @observed(dump)
+    @property({ type: Number }) count = 0;
+  }
+
+  beforeEach(async function() {
+    element = await fixture(html`<x-observed-function-host></x-observed-function-host>`);
+  });
+
+  it('initializes with old and new values', function() {
+    expect(dump).to.have.been.calledWith(0, 0);
+  });
+  describe('setting the observed prop', function() {
+    beforeEach(function() {
+      element.count = 1;
+    });
+    beforeEach(() => element.updateComplete);
+    it('updates old and new values', function() {
+      expect(dump).to.have.been.calledWith(0, 1);
+    });
+  });
+});
+
+@customElement('x-listen-host')
+class XListenHost extends LitElement {
+  public events: string[] = [];
+  @listen('click')
+  @listen('change', { once: true })
+  handler(event: Event) {
+    this.events.push(event.type);
+  }
+}
+
+describe('@listen', function() {
+  let element: XListenHost;
+  beforeEach(async function() {
+    element = await fixture(document.createElement('x-listen-host'));
+  });
+  it('listens for a given event on the host', function() {
+    element.dispatchEvent(new Event('change'));
+    expect(element.events).to.deep.equal(['change']);
+  });
+  it('composes to listen for a multiple events on the host', function() {
+    element.dispatchEvent(new Event('change'));
+    element.dispatchEvent(new Event('click'));
+    element.dispatchEvent(new Event('change'));
+    element.dispatchEvent(new Event('click'));
+    expect(element.events).to.deep.equal([
+      'change',
+      'click',
+      'click',
+    ]);
+  });
+});
+
+
diff --git a/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.d.ts b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.d.ts
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js
new file mode 100644
index 0000000..79448a1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js
@@ -0,0 +1,2 @@
+"use strict";
+//# sourceMappingURL=kitchen-sink.e2e.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js.map b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js.map
new file mode 100644
index 0000000..fc52c3a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"kitchen-sink.e2e.js","sourceRoot":"","sources":["kitchen-sink.e2e.ts"],"names":[],"mappings":"","sourcesContent":[""]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.ts b/node_modules/@patternfly/pfe-core/test/kitchen-sink.e2e.ts
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/@patternfly/pfe-core/tsconfig.json b/node_modules/@patternfly/pfe-core/tsconfig.json
new file mode 100644
index 0000000..c47017a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/tsconfig.json
@@ -0,0 +1,16 @@
+{
+  "extends": "../../tsconfig.settings.json",
+  "include": [
+    "./**/*"
+  ],
+  "compilerOptions": {
+    "declaration": true,
+    "composite": true,
+    "allowJs": false
+  },
+  "references": [
+    {
+      "path": "../../tools/pfe-tools"
+    }
+  ]
+}
diff --git a/node_modules/@patternfly/pfe-core/tsconfig.tsbuildinfo b/node_modules/@patternfly/pfe-core/tsconfig.tsbuildinfo
new file mode 100644
index 0000000..bf83004
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/tsconfig.tsbuildinfo
@@ -0,0 +1 @@
+{"program":{"fileNames":["../../node_modules/typescript/lib/lib.es5.d.ts","../../node_modules/typescript/lib/lib.es2015.d.ts","../../node_modules/typescript/lib/lib.es2016.d.ts","../../node_modules/typescript/lib/lib.es2017.d.ts","../../node_modules/typescript/lib/lib.es2018.d.ts","../../node_modules/typescript/lib/lib.es2019.d.ts","../../node_modules/typescript/lib/lib.es2020.d.ts","../../node_modules/typescript/lib/lib.es2021.d.ts","../../node_modules/typescript/lib/lib.es2022.d.ts","../../node_modules/typescript/lib/lib.dom.d.ts","../../node_modules/typescript/lib/lib.dom.iterable.d.ts","../../node_modules/typescript/lib/lib.scripthost.d.ts","../../node_modules/typescript/lib/lib.es2015.core.d.ts","../../node_modules/typescript/lib/lib.es2015.collection.d.ts","../../node_modules/typescript/lib/lib.es2015.generator.d.ts","../../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../../node_modules/typescript/lib/lib.es2015.promise.d.ts","../../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../../node_modules/typescript/lib/lib.es2016.intl.d.ts","../../node_modules/typescript/lib/lib.es2017.date.d.ts","../../node_modules/typescript/lib/lib.es2017.object.d.ts","../../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../../node_modules/typescript/lib/lib.es2017.string.d.ts","../../node_modules/typescript/lib/lib.es2017.intl.d.ts","../../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../../node_modules/typescript/lib/lib.es2018.intl.d.ts","../../node_modules/typescript/lib/lib.es2018.promise.d.ts","../../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../../node_modules/typescript/lib/lib.es2019.array.d.ts","../../node_modules/typescript/lib/lib.es2019.object.d.ts","../../node_modules/typescript/lib/lib.es2019.string.d.ts","../../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../../node_modules/typescript/lib/lib.es2019.intl.d.ts","../../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../../node_modules/typescript/lib/lib.es2020.date.d.ts","../../node_modules/typescript/lib/lib.es2020.promise.d.ts","../../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../../node_modules/typescript/lib/lib.es2020.string.d.ts","../../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../../node_modules/typescript/lib/lib.es2020.intl.d.ts","../../node_modules/typescript/lib/lib.es2020.number.d.ts","../../node_modules/typescript/lib/lib.es2021.promise.d.ts","../../node_modules/typescript/lib/lib.es2021.string.d.ts","../../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../../node_modules/typescript/lib/lib.es2021.intl.d.ts","../../node_modules/typescript/lib/lib.es2022.array.d.ts","../../node_modules/typescript/lib/lib.es2022.error.d.ts","../../node_modules/typescript/lib/lib.es2022.intl.d.ts","../../node_modules/typescript/lib/lib.es2022.object.d.ts","../../node_modules/typescript/lib/lib.es2022.sharedmemory.d.ts","../../node_modules/typescript/lib/lib.es2022.string.d.ts","../../node_modules/typescript/lib/lib.es2022.regexp.d.ts","../../node_modules/typescript/lib/lib.esnext.intl.d.ts","../../node_modules/typescript/lib/lib.esnext.disposable.d.ts","../../node_modules/typescript/lib/lib.decorators.d.ts","../../node_modules/typescript/lib/lib.decorators.legacy.d.ts","../../declaration.d.ts","../../node_modules/tslib/tslib.d.ts","../../node_modules/@lit/reactive-element/css-tag.d.ts","../../node_modules/@lit/reactive-element/reactive-controller.d.ts","../../node_modules/@lit/reactive-element/reactive-element.d.ts","../../node_modules/lit-html/directive.d.ts","../../node_modules/@types/trusted-types/lib/index.d.ts","../../node_modules/lit-html/lit-html.d.ts","../../node_modules/lit-element/lit-element.d.ts","../../node_modules/lit-html/is-server.d.ts","../../node_modules/lit/index.d.ts","./core.ts","./decorators/bound.ts","./functions/debounce.ts","./controllers/logger.ts","./controllers/cascade-controller.ts","./decorators/cascades.ts","./decorators/deprecation.ts","./controllers/light-dom-controller.ts","./decorators/initializer.ts","./decorators/listen.ts","./controllers/property-observer-controller.ts","./decorators/observed.ts","./decorators/observes.ts","./decorators/time.ts","./decorators/trace.ts","./decorators.ts","../../node_modules/@lit-labs/ssr/lib/dom-shim.d.ts","./ssr-shims.ts","./controllers/at-focus-controller.ts","./functions/random.ts","./controllers/activedescendant-controller.ts","./controllers/roving-tabindex-controller.ts","./functions/arraysAreEquivalent.ts","./controllers/listbox-controller.ts","./controllers/internals-controller.ts","./controllers/combobox-controller.ts","./controllers/css-variable-controller.ts","../../node_modules/@floating-ui/utils/dist/floating-ui.utils.d.ts","../../node_modules/@floating-ui/core/dist/floating-ui.core.d.ts","../../node_modules/@floating-ui/utils/dom/floating-ui.utils.dom.d.ts","../../node_modules/@floating-ui/dom/dist/floating-ui.dom.d.ts","../../node_modules/lit-html/directives/style-map.d.ts","../../node_modules/lit/directives/style-map.d.ts","./controllers/floating-dom-controller.ts","./functions/isElementInView.ts","./controllers/overflow-controller.ts","./controllers/perf-controller.ts","./controllers/scroll-spy-controller.ts","./controllers/slot-controller.ts","./controllers/style-controller.ts","./controllers/tabs-aria-controller.ts","./controllers/timestamp-controller.ts","../../node_modules/@types/chai/index.d.ts","../../node_modules/@open-wc/semantic-dom-diff/get-diffable-html.d.ts","../../node_modules/@open-wc/semantic-dom-diff/chai-dom-diff-plugin.d.ts","../../node_modules/@open-wc/semantic-dom-diff/chai-dom-diff.d.ts","../../node_modules/@open-wc/semantic-dom-diff/index.d.ts","../../node_modules/chai-a11y-axe/chai-a11y-axe-plugin.d.ts","../../node_modules/chai-a11y-axe/src/accessible.d.ts","../../node_modules/chai-a11y-axe/index.d.ts","../../node_modules/@types/chai-dom/index.d.ts","../../node_modules/@types/sinonjs__fake-timers/index.d.ts","../../node_modules/@types/sinon/index.d.ts","../../node_modules/@types/sinon-chai/index.d.ts","../../node_modules/@open-wc/testing/register-chai-plugins.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/elementUpdated.d.ts","../../node_modules/lit-html/static.d.ts","../../node_modules/lit/static-html.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/renderable.d.ts","../../node_modules/@open-wc/dedupe-mixin/index.d.ts","../../node_modules/@open-wc/scoped-elements/types.d.ts","../../node_modules/@open-wc/scoped-elements/html-element.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/fixture-no-side-effect.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/fixture.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/fixtureWrapper.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/helpers.d.ts","../../node_modules/lit/html.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/scopedElementsWrapper.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/litFixture.d.ts","../../node_modules/@open-wc/testing-helpers/types/src/stringFixture.d.ts","../../node_modules/@open-wc/testing-helpers/types/index.d.ts","../../node_modules/@open-wc/testing/index.d.ts","../../node_modules/@types/istanbul-lib-coverage/index.d.ts","../../node_modules/@web/test-runner-core/dist/utils/constants.d.ts","../../node_modules/@types/node/assert.d.ts","../../node_modules/@types/node/assert/strict.d.ts","../../node_modules/buffer/index.d.ts","../../node_modules/undici-types/header.d.ts","../../node_modules/undici-types/readable.d.ts","../../node_modules/undici-types/file.d.ts","../../node_modules/undici-types/fetch.d.ts","../../node_modules/undici-types/formdata.d.ts","../../node_modules/undici-types/connector.d.ts","../../node_modules/undici-types/client.d.ts","../../node_modules/undici-types/errors.d.ts","../../node_modules/undici-types/dispatcher.d.ts","../../node_modules/undici-types/global-dispatcher.d.ts","../../node_modules/undici-types/global-origin.d.ts","../../node_modules/undici-types/pool-stats.d.ts","../../node_modules/undici-types/pool.d.ts","../../node_modules/undici-types/handlers.d.ts","../../node_modules/undici-types/balanced-pool.d.ts","../../node_modules/undici-types/agent.d.ts","../../node_modules/undici-types/mock-interceptor.d.ts","../../node_modules/undici-types/mock-agent.d.ts","../../node_modules/undici-types/mock-client.d.ts","../../node_modules/undici-types/mock-pool.d.ts","../../node_modules/undici-types/mock-errors.d.ts","../../node_modules/undici-types/proxy-agent.d.ts","../../node_modules/undici-types/env-http-proxy-agent.d.ts","../../node_modules/undici-types/retry-handler.d.ts","../../node_modules/undici-types/retry-agent.d.ts","../../node_modules/undici-types/api.d.ts","../../node_modules/undici-types/interceptors.d.ts","../../node_modules/undici-types/util.d.ts","../../node_modules/undici-types/cookies.d.ts","../../node_modules/undici-types/patch.d.ts","../../node_modules/undici-types/websocket.d.ts","../../node_modules/undici-types/eventsource.d.ts","../../node_modules/undici-types/filereader.d.ts","../../node_modules/undici-types/diagnostics-channel.d.ts","../../node_modules/undici-types/content-type.d.ts","../../node_modules/undici-types/cache.d.ts","../../node_modules/undici-types/index.d.ts","../../node_modules/@types/node/globals.d.ts","../../node_modules/@types/node/async_hooks.d.ts","../../node_modules/@types/node/buffer.d.ts","../../node_modules/@types/node/child_process.d.ts","../../node_modules/@types/node/cluster.d.ts","../../node_modules/@types/node/console.d.ts","../../node_modules/@types/node/constants.d.ts","../../node_modules/@types/node/crypto.d.ts","../../node_modules/@types/node/dgram.d.ts","../../node_modules/@types/node/diagnostics_channel.d.ts","../../node_modules/@types/node/dns.d.ts","../../node_modules/@types/node/dns/promises.d.ts","../../node_modules/@types/node/domain.d.ts","../../node_modules/@types/node/dom-events.d.ts","../../node_modules/@types/node/events.d.ts","../../node_modules/@types/node/fs.d.ts","../../node_modules/@types/node/fs/promises.d.ts","../../node_modules/@types/node/http.d.ts","../../node_modules/@types/node/http2.d.ts","../../node_modules/@types/node/https.d.ts","../../node_modules/@types/node/inspector.d.ts","../../node_modules/@types/node/module.d.ts","../../node_modules/@types/node/net.d.ts","../../node_modules/@types/node/os.d.ts","../../node_modules/@types/node/path.d.ts","../../node_modules/@types/node/perf_hooks.d.ts","../../node_modules/@types/node/process.d.ts","../../node_modules/@types/node/punycode.d.ts","../../node_modules/@types/node/querystring.d.ts","../../node_modules/@types/node/readline.d.ts","../../node_modules/@types/node/readline/promises.d.ts","../../node_modules/@types/node/repl.d.ts","../../node_modules/@types/node/sea.d.ts","../../node_modules/@types/node/sqlite.d.ts","../../node_modules/@types/node/stream.d.ts","../../node_modules/@types/node/stream/promises.d.ts","../../node_modules/@types/node/stream/consumers.d.ts","../../node_modules/@types/node/stream/web.d.ts","../../node_modules/@types/node/string_decoder.d.ts","../../node_modules/@types/node/test.d.ts","../../node_modules/@types/node/timers.d.ts","../../node_modules/@types/node/timers/promises.d.ts","../../node_modules/@types/node/tls.d.ts","../../node_modules/@types/node/trace_events.d.ts","../../node_modules/@types/node/tty.d.ts","../../node_modules/@types/node/url.d.ts","../../node_modules/@types/node/util.d.ts","../../node_modules/@types/node/v8.d.ts","../../node_modules/@types/node/vm.d.ts","../../node_modules/@types/node/wasi.d.ts","../../node_modules/@types/node/worker_threads.d.ts","../../node_modules/@types/node/zlib.d.ts","../../node_modules/@types/node/globals.global.d.ts","../../node_modules/@types/node/index.d.ts","../../node_modules/anymatch/index.d.ts","../../node_modules/chokidar/types/index.d.ts","../../node_modules/@types/accepts/index.d.ts","../../node_modules/@types/connect/index.d.ts","../../node_modules/@types/mime/index.d.ts","../../node_modules/@types/send/index.d.ts","../../node_modules/@types/qs/index.d.ts","../../node_modules/@types/range-parser/index.d.ts","../../node_modules/@types/express-serve-static-core/index.d.ts","../../node_modules/@types/http-errors/index.d.ts","../../node_modules/@types/serve-static/index.d.ts","../../node_modules/@types/body-parser/index.d.ts","../../node_modules/@types/express/index.d.ts","../../node_modules/@types/keygrip/index.d.ts","../../node_modules/@types/cookies/index.d.ts","../../node_modules/@types/http-assert/index.d.ts","../../node_modules/@types/content-disposition/index.d.ts","../../node_modules/@types/koa-compose/index.d.ts","../../node_modules/@types/koa/index.d.ts","../../node_modules/@types/ws/index.d.ts","../../node_modules/@web/dev-server-core/dist/logger/Logger.d.ts","../../node_modules/@web/dev-server-core/dist/web-sockets/EventEmitter.d.ts","../../node_modules/@web/dev-server-core/dist/web-sockets/WebSocketsManager.d.ts","../../node_modules/@web/dev-server-core/dist/plugins/Plugin.d.ts","../../node_modules/@web/dev-server-core/dist/server/DevServerCoreConfig.d.ts","../../node_modules/@web/dev-server-core/dist/server/DevServer.d.ts","../../node_modules/@web/dev-server-core/dist/utils.d.ts","../../node_modules/@web/dev-server-core/dist/logger/PluginSyntaxError.d.ts","../../node_modules/@web/dev-server-core/dist/logger/PluginError.d.ts","../../node_modules/@web/dev-server-core/dist/index.d.ts","../../node_modules/@web/test-runner-core/dist/test-framework/TestFramework.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/TestSessionStatus.d.ts","../../node_modules/@web/test-runner-core/dist/config/TestRunnerGroupConfig.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/TestSessionGroup.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/BasicTestSession.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/TestSession.d.ts","../../node_modules/@web/test-runner-core/dist/utils/EventEmitter.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/DebugTestSession.d.ts","../../node_modules/@web/test-runner-core/dist/test-session/TestSessionManager.d.ts","../../node_modules/@web/test-runner-core/dist/coverage/getTestCoverage.d.ts","../../node_modules/@web/test-runner-core/dist/logger/Logger.d.ts","../../node_modules/@web/test-runner-core/dist/reporter/Reporter.d.ts","../../node_modules/@web/test-runner-core/dist/server/TestRunnerPlugin.d.ts","../../node_modules/@types/istanbul-lib-report/index.d.ts","../../node_modules/@types/istanbul-reports/index.d.ts","../../node_modules/@web/test-runner-core/dist/config/TestRunnerCoreConfig.d.ts","../../node_modules/@web/test-runner-core/dist/browser-launcher/BrowserLauncher.d.ts","../../node_modules/@web/test-runner-core/dist/runner/TestRunner.d.ts","../../node_modules/@web/test-runner-core/dist/cli/TestRunnerCli.d.ts","../../node_modules/@web/test-runner-core/dist/cli/BufferedLogger.d.ts","../../node_modules/@web/test-runner-core/dist/utils/isTestFilePath.d.ts","../../node_modules/@types/convert-source-map/index.d.ts","../../node_modules/@web/test-runner-core/dist/utils/fetchSourceMap.d.ts","../../node_modules/@web/test-runner-core/dist/index.d.ts","../../node_modules/@web/test-runner-commands/dist/setViewportPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/emulateMediaPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/selectOptionPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/setUserAgentPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/sendKeysPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/sendMousePlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/a11ySnapshotPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/filePlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/snapshotPlugin.d.ts","../../node_modules/@web/test-runner-commands/dist/index.d.ts","../../node_modules/@web/test-runner-commands/browser/commands.d.ts","../../node_modules/@web/test-runner-commands/index.d.ts","../../tools/pfe-tools/test/a11y-snapshot.d.ts","../../node_modules/@lit/reactive-element/decorators/base.d.ts","../../node_modules/@lit/reactive-element/decorators/custom-element.d.ts","../../node_modules/lit/decorators/custom-element.d.ts","../../node_modules/@lit/reactive-element/decorators/query.d.ts","../../node_modules/lit/decorators/query.d.ts","./controllers/test/combobox-controller.spec.ts","./functions/containsDeep.ts","../../node_modules/@lit/context/lib/create-context.d.ts","../../node_modules/@lit/context/lib/context-request-event.d.ts","../../node_modules/@lit/context/lib/controllers/context-consumer.d.ts","../../node_modules/@lit/context/lib/value-notifier.d.ts","../../node_modules/@lit/context/lib/controllers/context-provider.d.ts","../../node_modules/@lit/context/lib/context-root.d.ts","../../node_modules/@lit/context/lib/decorators/provide.d.ts","../../node_modules/@lit/context/lib/decorators/consume.d.ts","../../node_modules/@lit/context/index.d.ts","./functions/context.ts","../../node_modules/@lit/reactive-element/decorators/property.d.ts","../../node_modules/lit/decorators/property.d.ts","./test/decorators.spec.ts","./test/kitchen-sink.e2e.ts","../../node_modules/@types/babel__code-frame/index.d.ts","../../node_modules/@types/clean-css/node_modules/source-map/source-map.d.ts","../../node_modules/@types/clean-css/index.d.ts","../../node_modules/@types/co-body/index.d.ts","../../node_modules/@types/command-line-args/index.d.ts","../../node_modules/@types/conventional-commits-parser/index.d.ts","../../node_modules/@types/debounce/index.d.ts","../../node_modules/@types/dedent/index.d.ts","../../node_modules/@types/eslint/helpers.d.ts","../../node_modules/@types/estree/index.d.ts","../../node_modules/@types/json-schema/index.d.ts","../../node_modules/@types/eslint/index.d.ts","../../node_modules/@types/minimatch/index.d.ts","../../node_modules/@types/glob/index.d.ts","../../node_modules/@types/uglify-js/node_modules/source-map/source-map.d.ts","../../node_modules/@types/uglify-js/index.d.ts","../../node_modules/@types/relateurl/index.d.ts","../../node_modules/@types/html-minifier/index.d.ts","../../node_modules/@types/koa-send/index.d.ts","../../node_modules/@types/koa__router/index.d.ts","../../node_modules/@types/linkify-it/build/index.cjs.d.ts","../../node_modules/@types/linkify-it/index.d.ts","../../node_modules/@types/mdurl/build/index.cjs.d.ts","../../node_modules/@types/mdurl/index.d.ts","../../node_modules/@types/markdown-it/dist/index.cjs.d.ts","../../node_modules/@types/markdown-it/index.d.ts","../../node_modules/@types/minimist/index.d.ts","../../node_modules/@types/mocha/index.d.ts","../../node_modules/@types/normalize-package-data/index.d.ts","../../node_modules/@types/numeral/index.d.ts","../../node_modules/@types/nunjucks/index.d.ts","../../node_modules/@types/parse5/lib/tree-adapters/default.d.ts","../../node_modules/@types/parse5/index.d.ts","../../node_modules/@types/prismjs/index.d.ts","../../node_modules/@types/prompts/node_modules/kleur/kleur.d.ts","../../node_modules/@types/prompts/index.d.ts","../../node_modules/@types/prop-types/index.d.ts","../../node_modules/@types/react/global.d.ts","../../node_modules/csstype/index.d.ts","../../node_modules/@types/react/index.d.ts","../../node_modules/@types/resolve/index.d.ts","../../node_modules/@types/semver/classes/semver.d.ts","../../node_modules/@types/semver/functions/parse.d.ts","../../node_modules/@types/semver/functions/valid.d.ts","../../node_modules/@types/semver/functions/clean.d.ts","../../node_modules/@types/semver/functions/inc.d.ts","../../node_modules/@types/semver/functions/diff.d.ts","../../node_modules/@types/semver/functions/major.d.ts","../../node_modules/@types/semver/functions/minor.d.ts","../../node_modules/@types/semver/functions/patch.d.ts","../../node_modules/@types/semver/functions/prerelease.d.ts","../../node_modules/@types/semver/functions/compare.d.ts","../../node_modules/@types/semver/functions/rcompare.d.ts","../../node_modules/@types/semver/functions/compare-loose.d.ts","../../node_modules/@types/semver/functions/compare-build.d.ts","../../node_modules/@types/semver/functions/sort.d.ts","../../node_modules/@types/semver/functions/rsort.d.ts","../../node_modules/@types/semver/functions/gt.d.ts","../../node_modules/@types/semver/functions/lt.d.ts","../../node_modules/@types/semver/functions/eq.d.ts","../../node_modules/@types/semver/functions/neq.d.ts","../../node_modules/@types/semver/functions/gte.d.ts","../../node_modules/@types/semver/functions/lte.d.ts","../../node_modules/@types/semver/functions/cmp.d.ts","../../node_modules/@types/semver/functions/coerce.d.ts","../../node_modules/@types/semver/classes/comparator.d.ts","../../node_modules/@types/semver/classes/range.d.ts","../../node_modules/@types/semver/functions/satisfies.d.ts","../../node_modules/@types/semver/ranges/max-satisfying.d.ts","../../node_modules/@types/semver/ranges/min-satisfying.d.ts","../../node_modules/@types/semver/ranges/to-comparators.d.ts","../../node_modules/@types/semver/ranges/min-version.d.ts","../../node_modules/@types/semver/ranges/valid.d.ts","../../node_modules/@types/semver/ranges/outside.d.ts","../../node_modules/@types/semver/ranges/gtr.d.ts","../../node_modules/@types/semver/ranges/ltr.d.ts","../../node_modules/@types/semver/ranges/intersects.d.ts","../../node_modules/@types/semver/ranges/simplify.d.ts","../../node_modules/@types/semver/ranges/subset.d.ts","../../node_modules/@types/semver/internals/identifiers.d.ts","../../node_modules/@types/semver/index.d.ts","../../node_modules/@types/trusted-types/index.d.ts","../../node_modules/@types/yargs-parser/index.d.ts","../../node_modules/@types/yargs/index.d.ts","../../node_modules/@types/yauzl/index.d.ts"],"fileInfos":[{"version":"44e584d4f6444f58791784f1d530875970993129442a847597db702a073ca68c","affectsGlobalScope":true},"45b7ab580deca34ae9729e97c13cfd999df04416a79116c3bfb483804f85ded4","3facaf05f0c5fc569c5649dd359892c98a85557e3e0c847964caeb67076f4d75","9a68c0c07ae2fa71b44384a839b7b8d81662a236d4b9ac30916718f7510b1b2d","5e1c4c362065a6b95ff952c0eab010f04dcd2c3494e813b493ecfd4fcb9fc0d8","68d73b4a11549f9c0b7d352d10e91e5dca8faa3322bfb77b661839c42b1ddec7","5efce4fc3c29ea84e8928f97adec086e3dc876365e0982cc8479a07954a3efd4","feecb1be483ed332fad555aff858affd90a48ab19ba7272ee084704eb7167569","5514e54f17d6d74ecefedc73c504eadffdeda79c7ea205cf9febead32d45c4bc",{"version":"4af6b0c727b7a2896463d512fafd23634229adf69ac7c00e2ae15a09cb084fad","affectsGlobalScope":true},{"version":"9c00a480825408b6a24c63c1b71362232927247595d7c97659bc24dc68ae0757","affectsGlobalScope":true},{"version":"cd034f499c6cdca722b60c04b5b1b78e058487a7085a8e0d6fb50809947ee573","affectsGlobalScope":true},{"version":"6920e1448680767498a0b77c6a00a8e77d14d62c3da8967b171f1ddffa3c18e4","affectsGlobalScope":true},{"version":"dc2df20b1bcdc8c2d34af4926e2c3ab15ffe1160a63e58b7e09833f616efff44","affectsGlobalScope":true},{"version":"4443e68b35f3332f753eacc66a04ac1d2053b8b035a0e0ac1d455392b5e243b3","affectsGlobalScope":true},{"version":"bc47685641087c015972a3f072480889f0d6c65515f12bd85222f49a98952ed7","affectsGlobalScope":true},{"version":"0dc1e7ceda9b8b9b455c3a2d67b0412feab00bd2f66656cd8850e8831b08b537","affectsGlobalScope":true},{"version":"ce691fb9e5c64efb9547083e4a34091bcbe5bdb41027e310ebba8f7d96a98671","affectsGlobalScope":true},{"version":"8d697a2a929a5fcb38b7a65594020fcef05ec1630804a33748829c5ff53640d0","affectsGlobalScope":true},{"version":"4ff2a353abf8a80ee399af572debb8faab2d33ad38c4b4474cff7f26e7653b8d","affectsGlobalScope":true},{"version":"93495ff27b8746f55d19fcbcdbaccc99fd95f19d057aed1bd2c0cafe1335fbf0","affectsGlobalScope":true},{"version":"6fc23bb8c3965964be8c597310a2878b53a0306edb71d4b5a4dfe760186bcc01","affectsGlobalScope":true},{"version":"ea011c76963fb15ef1cdd7ce6a6808b46322c527de2077b6cfdf23ae6f5f9ec7","affectsGlobalScope":true},{"version":"38f0219c9e23c915ef9790ab1d680440d95419ad264816fa15009a8851e79119","affectsGlobalScope":true},{"version":"bb42a7797d996412ecdc5b2787720de477103a0b2e53058569069a0e2bae6c7e","affectsGlobalScope":true},{"version":"4738f2420687fd85629c9efb470793bb753709c2379e5f85bc1815d875ceadcd","affectsGlobalScope":true},{"version":"2f11ff796926e0832f9ae148008138ad583bd181899ab7dd768a2666700b1893","affectsGlobalScope":true},{"version":"4de680d5bb41c17f7f68e0419412ca23c98d5749dcaaea1896172f06435891fc","affectsGlobalScope":true},{"version":"9fc46429fbe091ac5ad2608c657201eb68b6f1b8341bd6d670047d32ed0a88fa","affectsGlobalScope":true},{"version":"61c37c1de663cf4171e1192466e52c7a382afa58da01b1dc75058f032ddf0839","affectsGlobalScope":true},{"version":"b541a838a13f9234aba650a825393ffc2292dc0fc87681a5d81ef0c96d281e7a","affectsGlobalScope":true},{"version":"9e9fbd7030c440b33d021da145d3232984c8bb7916f277e8ffd3dc2e3eae2bdb","affectsGlobalScope":true},{"version":"811ec78f7fefcabbda4bfa93b3eb67d9ae166ef95f9bff989d964061cbf81a0c","affectsGlobalScope":true},{"version":"717937616a17072082152a2ef351cb51f98802fb4b2fdabd32399843875974ca","affectsGlobalScope":true},{"version":"d7e7d9b7b50e5f22c915b525acc5a49a7a6584cf8f62d0569e557c5cfc4b2ac2","affectsGlobalScope":true},{"version":"71c37f4c9543f31dfced6c7840e068c5a5aacb7b89111a4364b1d5276b852557","affectsGlobalScope":true},{"version":"576711e016cf4f1804676043e6a0a5414252560eb57de9faceee34d79798c850","affectsGlobalScope":true},{"version":"89c1b1281ba7b8a96efc676b11b264de7a8374c5ea1e6617f11880a13fc56dc6","affectsGlobalScope":true},{"version":"74f7fa2d027d5b33eb0471c8e82a6c87216223181ec31247c357a3e8e2fddc5b","affectsGlobalScope":true},{"version":"ae37d6ccd1560b0203ab88d46987393adaaa78c919e51acf32fb82c86502e98c","affectsGlobalScope":true},{"version":"063600664504610fe3e99b717a1223f8b1900087fab0b4cad1496a114744f8df","affectsGlobalScope":true},{"version":"934019d7e3c81950f9a8426d093458b65d5aff2c7c1511233c0fd5b941e608ab","affectsGlobalScope":true},{"version":"bf14a426dbbf1022d11bd08d6b8e709a2e9d246f0c6c1032f3b2edb9a902adbe","affectsGlobalScope":true},{"version":"5e07ed3809d48205d5b985642a59f2eba47c402374a7cf8006b686f79efadcbd","affectsGlobalScope":true},{"version":"2b72d528b2e2fe3c57889ca7baef5e13a56c957b946906d03767c642f386bbc3","affectsGlobalScope":true},{"version":"479553e3779be7d4f68e9f40cdb82d038e5ef7592010100410723ceced22a0f7","affectsGlobalScope":true},{"version":"368af93f74c9c932edd84c58883e736c9e3d53cec1fe24c0b0ff451f529ceab1","affectsGlobalScope":true},{"version":"af3dd424cf267428f30ccfc376f47a2c0114546b55c44d8c0f1d57d841e28d74","affectsGlobalScope":true},{"version":"995c005ab91a498455ea8dfb63aa9f83fa2ea793c3d8aa344be4a1678d06d399","affectsGlobalScope":true},{"version":"d3d7b04b45033f57351c8434f60b6be1ea71a2dfec2d0a0c3c83badbb0e3e693","affectsGlobalScope":true},{"version":"956d27abdea9652e8368ce029bb1e0b9174e9678a273529f426df4b3d90abd60","affectsGlobalScope":true},{"version":"4fa6ed14e98aa80b91f61b9805c653ee82af3502dc21c9da5268d3857772ca05","affectsGlobalScope":true},{"version":"e6633e05da3ff36e6da2ec170d0d03ccf33de50ca4dc6f5aeecb572cedd162fb","affectsGlobalScope":true},{"version":"d8670852241d4c6e03f2b89d67497a4bbefe29ecaa5a444e2c11a9b05e6fccc6","affectsGlobalScope":true},{"version":"8444af78980e3b20b49324f4a16ba35024fef3ee069a0eb67616ea6ca821c47a","affectsGlobalScope":true},{"version":"caccc56c72713969e1cfe5c3d44e5bab151544d9d2b373d7dbe5a1e4166652be","affectsGlobalScope":true},{"version":"3287d9d085fbd618c3971944b65b4be57859f5415f495b33a6adc994edd2f004","affectsGlobalScope":true},{"version":"b4b67b1a91182421f5df999988c690f14d813b9850b40acd06ed44691f6727ad","affectsGlobalScope":true},{"version":"811c71eee4aa0ac5f7adf713323a5c41b0cf6c4e17367a34fbce379e12bbf0a4","affectsGlobalScope":true},{"version":"15b98a533864d324e5f57cd3cfc0579b231df58c1c0f6063ea0fcb13c3c74ff9","affectsGlobalScope":true},{"version":"33358442698bb565130f52ba79bfd3d4d484ac85fe33f3cb1759c54d18201393","affectsGlobalScope":true},{"version":"782dec38049b92d4e85c1585fbea5474a219c6984a35b004963b00beb1aab538","affectsGlobalScope":true},"1bf1b9e2fd34bf435b620b9ee48085e79c2f9864af1baa8192819c8331fbe9a0","4a882ffbb4ed09d9b7734f784aebb1dfe488d63725c40759165c5d9c657ca029","e056bb30bf82271634daeee81f772f4a7960085f01f6d4d09c8da1ebe5f6a623","5e30131b6a5587fe666926ad1d9807e733c0a597ed12d682669fcaa331aea576",{"version":"86492a546c3308feaf1dde967afd325c321483b5e96f5fa9e9b6e691dc23fa9e","affectsGlobalScope":true},"00cb63103f9670f8094c238a4a7e252c8b4c06ba371fea5c44add7e41b7247e4","15fe687c59d62741b4494d5e623d497d55eb38966ecf5bea7f36e48fc3fbe15e","43f58358870effc43ba93c92c040dee2285cbd8685ddfa77658e498780727c4e","9a318e3a8900672b85cd3c8c3a5acf51b88049557a3ae897ccdcf2b85a8f61f9","1bcd560deed90a43c51b08aa18f7f55229f2e30974ab5ed1b7bb5721be379013","dc08fe04e50bc24d1baded4f33e942222bbdd5d77d6341a93cfe6e4e4586a3be",{"version":"0b63f4b02a41d1d8044b176a65bca875ac0f3027cfd5fb97daa07c72b7c9c7d7","signature":"d4c9d1d39874eaf85bbc5ddc9c301b9ef76f1a17ad926ef5372a64d9fa3f3989"},{"version":"e782343eb5cedfeadf0ddb447707139b08e268ca0d0fde019e95093c3a027db5","signature":"09b44e983eb4608e2d7baebf36af55bb68378c87b2a1d3185045e7fe92f80625"},{"version":"feb2a0b0d255974e33af36ef561c89222e85677ff73a7b6039a044a91d1acdc7","signature":"8e9baedf5ed19cf0468c173b0cb5cf415eddc7a78189b9de3659dcafdcbcc3de"},{"version":"efe6a7fa55888cbc467ada6601a6abaea127afe2b4b5efe476e1f21720c91eb0","signature":"9c1ce9ede3aded14d68b183b0e36d1eb9000f2e604ae091ad8fa080f18161360"},{"version":"aeb3365c6e5c3ded48815b1b52e88b917324d759d966adec3b277affac293d4b","signature":"dbe1857d38fc3658cad90ba06c0859b0ad0c1fc2e24763c8b2e7c68152d071d3"},{"version":"a16cba903ce1367cbca5c38dd7312d1e6b30ffb89ea5702024802da791a72e70","signature":"b00a3e6d9bf72c64b51e8c73b2dadf6d1916e440e1bb1305b1f98b9412f02f83"},{"version":"f24ba578dbc267d0bc65a423b5e3a2134c29d16ee57f54ed64d2372bc341bff6","signature":"921b33eeefd74887f75dcb0255baa2e0c9eea2742ecda72b1897664fc647620a"},{"version":"65dcae4163e10eb9c39c95759ba6041de40de88891c85fde113cc54ea29d8042","signature":"b4fcf3cb4098ebae1d266a6105a181e4d2db07768f47df3238b4629ffbd33735"},{"version":"751a4d5e3dcfca4c1dd2ec4f8d6a6f0cecbdbb56a39daf2b1a39f4361652b01d","signature":"a62a2f7dc0bf14b7dafc79922d5ff55f2797b7bbaa0f05efa60eac02b7682a10"},{"version":"84f393c10a1838984db189e9181b0a6d4dcfd2a3043f0a54fc9a796c4ae27302","signature":"e90662b29eef070c1720b029622317afe12dadf6ff762d42d29bc8b931571336"},{"version":"2ca023d8d23fe27b3aa13568eb4c01090b39226f1be2a785b552e003701c9a8b","signature":"ca8b5f903594a6506a4031e1a095cdacfd83c425dab562dccdc0be5f682dcc0e"},{"version":"3df193f5f65aeb35dc249fee48eda2df34878e544b9f4fa055b8409aa2edd737","signature":"330f0d07e32d9a12eaf2d22dc1f44bcbb58daa4504e680688776090d6d2146c1"},{"version":"8720eddc55f99d92a4f72b3e5a5e2b30ed64d9ac99467958e18d7b642dc160a7","signature":"1fdb9e7c07860913f8381440c41c95aeb92a8767fba60662295a944d54f86db4"},{"version":"362851aa0f0647e8e80ba574e5cde1758af590768444495a0aade5cadd486889","signature":"06c4b0f3a2bf593aad71e8e9365c0aa8d4295cc911c8f6d5f1fca94090b54ab9"},{"version":"e3dc455f497715d85b8fe45b9231da2bbef523f30d1f471d25bfcce848c6f0a6","signature":"eca6e44a43722f9b9df5cc8fbd91fe5b5c787ed9e12dabc12f61bfd04ce75437"},"e855b871bb1fef97d3295a6035181b43a225099271c1cd80c76ac06d8604e462","b25fbd8a88a7a7f86734966974e18aa4050fc173e9f10f2399661cdd8ec89294",{"version":"9ee5b84f653d4e3475df04d8c283905c08365c6c248aaf2447a1fe7107cfc896","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"62a972f942e95a0844489d8a8272a8730bb267fc2a27a926128cce61e7a7da80","signature":"ff48bea041972c77d9602ad5806d425c17d0facb2139ecf433fad5045e19071a"},{"version":"2cf5245b6fe96e83bbd463108c555bdbcf7c9543e061f069e777a7802b50f2e8","signature":"30def28e37da43f9aaa47a608d04f9ba60cae8ebb3e0aaa2db5752f7474f1745"},{"version":"b1e07d2291ecf8ead7768c75386063ed8531f954e7c6268a2bd5b00fdd19abee","signature":"ae7565f340317127d0359888fbfdc3269eecd9e7541fcc56c53cfec1d33b59dd"},{"version":"312655dc552807e3d65f8526d5d0f771e999f2fbc05d4cd1a1602c0626e4b54b","signature":"fe03443b27050754db6c976e8d83e6ae5bc613697a7fb519354c407bad01b845"},{"version":"c1dcf4b2bcd1effd8b8c1b307e952721f55b67afebb7f78ff3b06c375b776669","signature":"e179716579fa7a8fe1d8de4b3c7e8a1bd397e78fe0bdf1f381adfd3426658031"},{"version":"4c02b158009d634142702b604ac56de0f39c6a02d0ddbdc70348bee02865a6eb","signature":"2b25024f4d1ee024b55afbd398056ff6649945eada2bf18f23b82967f3d29619"},{"version":"e1c1b54a57ca49b1e93415a18c928435dc567ef319d6fb1a75c67f0755ee025c","signature":"0585a91254d6626a0009e741f6c85722fc56697366ad87a7571424b61f2ca15e","affectsGlobalScope":true},{"version":"ac5b6baeaa6b73e21b35b780d5299d78feaae6c4768ea736b1835d59bcbcfa25","signature":"d92347922edc993368f9510f97779a62db31f62d17057fca0d8a16365eb0ce92"},{"version":"f58bbf185951981001b41f3b282fa14caab83e445f69eb9f5851c3ef1a8d4839","signature":"0c4a85144797dbf34c2fc5e453affb7c8635e894c0ef743b84069d29e882965b"},"2b4276dde46aa2faf0dd86119999c76b81e6488cd6b0d0fcf9fb985769cd11c0","19d09e5760e743edbd022ee2ede1d6910c3bacc0e99079564adf276617ad0963","5ecea63968444d55f7c3cf677cbec9525db9229953b34f06be0386a24b0fffd2","b50ee4bde16b52ecb08e2407dca49a5649b38e046e353485335aa024f6efb8ef","fb605fccb30512c9291061c381cba041e06b51d10479d1589441e9468a32363e","635052f2979263b7be4665514c303fd56bceabe15d793c6f393fc1214996966a",{"version":"4ad83d8850918a70efcaca7700db2cd421ce4151c4cfb8126b2980b6ffb2e9a7","signature":"aef882dd5674551d9d409917e51fc48e063c424bb04e265abb3021d84be96f9c"},{"version":"2cdd8235381afa2d2c926becb3480c9d3b7cdf471fbf596bdf2cf3a515bfa918","signature":"f9071d2b5f3b44f50ca47d2ce99570afa1a08c8e261520fb19adcf384f6f17d3"},{"version":"50452580c3cd872e11b6d2845e64467e6208c8b979ae50c34bdd08e9efad13e6","signature":"757d5d72adcc9e4b215b9f98c873f1ff60cc2749b122fe4befdbd3fc47562efd"},{"version":"38d12bb59b532b3cdae8e6d20533f6aabd34e5aa05aa072694bedd943df5fb55","signature":"8fc054c464404c3c59ba63051c3193034f69c2d7ad287dfab319d4ab9fca7ca6"},{"version":"d02f7ec4d523918435f0128ca828f5445598ea413f007a49a4b26fb294bb50d4","signature":"acc0b31fe5451731d0dd4f68a179efd7cf8a905b073d0de963a0c555d6e68173"},{"version":"2ba8a02d4b0fb32aeb9a557ae2d813e36de9fb8df640619e55656d3b27cfe503","signature":"bbd76f26e46054790969d6fba73482d0f6e2e5bdf4aa77413603f996091e2df5"},{"version":"100aa676c3d5488b98be0ea8e90c7e0a66e037d7fccff3b1bf341fae4db6eb3c","signature":"8543e88afabd0594abec3a0c74fe3e9b5db05fefc5da1a4ef7f060fafd66a658","affectsGlobalScope":true},{"version":"2e3dc65659be6acb301bf30b4a12bd2d33f1f05990bfd8f1b633071dce7babcf","signature":"9820ed33018c9756e9a84b4e71c7c16f4b0f7546317861400e937db193ee3c79"},{"version":"7e363f53ec563f0c92c1b5f2d356a8f7ebdd594b21447a49ae4692aeecf4b482","signature":"37b86aa68ea38b8451245198636b16b6ae02c13ed2cab7195e5546fd5ad2b1a0"},{"version":"bce25bc07ecd6f84cb2cf5fdeadf4c4087f619fc9f4c28856308c1a92000f8c5","affectsGlobalScope":true},"72bee526b949b9932edba50997ff3b9cdede7b314d790d5f0d94f3d2944930ea",{"version":"2d412861573a672bd90fdcb1e48740593324565f3b3aaf6808c0e3e2f0d54ae8","affectsGlobalScope":true},{"version":"cd711db43a952f15464b571ac11b7a440332cd52342bc92c4bf908c70688f57f","affectsGlobalScope":true},"9d8709c916778cb34830708ed47b78e9a46d1fb2eb73a682b14eee990bed4aa6",{"version":"507e2131e89b515ce40c05c0c2fef6cc575ba8947703f92e8cdf36078747a9ff","affectsGlobalScope":true},"999a90d30a3183dcee987d0a5a7c586aba5bacbf6ce087ba8635124082ccfeea","8a5878edd52f4a720560b4c6e6247e9ddc3df6118ad9cf2f9927903b03d5f440",{"version":"e7be17cfcbe98809c052f384c230ecea9e1cee045edac9db0659e997a988ff9e","affectsGlobalScope":true},"7d2a0ba1297be385a89b5515b88cd31b4a1eeef5236f710166dc1b36b1741e1b","8e87660f5170c195ade218937e360484775be6a4e75a098665d9ba5a2e4cdc15",{"version":"525b52b38b44420fb1758c0917e7b67cf379f7f9477d2ba7343f3d5f50a44258","affectsGlobalScope":true},"65b91a3725399231d3469529b5e27b85bf2aa98013e607f308e5fe260b47eeff","04e3793f33c71ceae20a4719698c068b72c98cf925b3c5f8a33096c00ed44258","fa8ef3fb228e258f9508386e2056c95c959d1c1168301181313a5c978754ba70","15c9478a8a3d630ac5e738aca25fca15d0842aaeb97fb1a9c1e80eddc5a0e14c","cc46ce345c0e19e456388446733250527eead4ca557b5e5fdf0c2e30adc3c89f","88cda4269c54f0803834fd62b2fac61af8bff7a085693f7ca9df85c1f19dee8a",{"version":"5d600cfe96a85d58ea8dbf44646f35e82d25e788ea0a6a8295594cef9948445a","affectsGlobalScope":true},"d9e25c382a75bed1c058c324edff8b2af655521472b431857e58cdac5f9b2185","6168f8e0a5b354f8177bf0dee7c1a69c2afb6a155d5534221f3a1a2d86b84367","d7840fd94e6dfb5b0d9df5a20fe1e79c8dd72b1efdb74d2ef04c31e3588c6b5b","fa6d684e15fe6e99c7208a51b45c04f8e0147f1c8587871aac48fff55b7b1f24","d61a4b627c3e2e054616df905a25226f547dc0e821c2a2b6d5f13318b3fd7e78","1308479c593c3d337bd9c438ac1d7164006a9286638cec0b26e3331a978f91d4","cfad37dbd7cf27cc16758755847ad7c07ac52a01c466486e50f8f84d0f0ea9ce","0c4d3009672fd12d4d9a6505e769de9369c180dcfa8188d9fd850ec156245d87","793fca6322a14fa8fa6bc6a4fc694fd7bcc88922c4f9abcd48bf6908f8bf939b","be3e93b109deb44b925583674cc0706c0b3c2e7316bcf79631285a45c18ed0c8","50f63746fc2a779d1f9c5657fd78e292045dc98b540e026799e039ea629f2943","035a5df183489c2e22f3cf59fc1ed2b043d27f357eecc0eb8d8e840059d44245","54c536aa08ae9e5fad5ec395260891f9ede1767935d018caede0c6afbf617fee","e142fda89ed689ea53d6f2c93693898464c7d29a0ae71c6dc8cdfe5a1d76c775","7394959e5a741b185456e1ef5d64599c36c60a323207450991e7a42e08911419","8e9c23ba78aabc2e0a27033f18737a6df754067731e69dc5f52823957d60a4b6","5929864ce17fba74232584d90cb721a89b7ad277220627cc97054ba15a98ea8f","24bd580b5743dc56402c440dc7f9a4f5d592ad7a419f25414d37a7bfe11e342b","25c8056edf4314820382a5fdb4bb7816999acdcb929c8f75e3f39473b87e85bc","c464d66b20788266e5353b48dc4aa6bc0dc4a707276df1e7152ab0c9ae21fad8","78d0d27c130d35c60b5e5566c9f1e5be77caf39804636bc1a40133919a949f21","c6fd2c5a395f2432786c9cb8deb870b9b0e8ff7e22c029954fabdd692bff6195","1d6e127068ea8e104a912e42fc0a110e2aa5a66a356a917a163e8cf9a65e4a75","5ded6427296cdf3b9542de4471d2aa8d3983671d4cac0f4bf9c637208d1ced43","6bdc71028db658243775263e93a7db2fd2abfce3ca569c3cca5aee6ed5eb186d","cadc8aced301244057c4e7e73fbcae534b0f5b12a37b150d80e5a45aa4bebcbd","385aab901643aa54e1c36f5ef3107913b10d1b5bb8cbcd933d4263b80a0d7f20","9670d44354bab9d9982eca21945686b5c24a3f893db73c0dae0fd74217a4c219","0b8a9268adaf4da35e7fa830c8981cfa22adbbe5b3f6f5ab91f6658899e657a7","11396ed8a44c02ab9798b7dca436009f866e8dae3c9c25e8c1fbc396880bf1bb","ba7bc87d01492633cb5a0e5da8a4a42a1c86270e7b3d2dea5d156828a84e4882","4893a895ea92c85345017a04ed427cbd6a1710453338df26881a6019432febdd","c21dc52e277bcfc75fac0436ccb75c204f9e1b3fa5e12729670910639f27343e","13f6f39e12b1518c6650bbb220c8985999020fe0f21d818e28f512b7771d00f9","9b5369969f6e7175740bf51223112ff209f94ba43ecd3bb09eefff9fd675624a","4fe9e626e7164748e8769bbf74b538e09607f07ed17c2f20af8d680ee49fc1da","24515859bc0b836719105bb6cc3d68255042a9f02a6022b3187948b204946bd2","ea0148f897b45a76544ae179784c95af1bd6721b8610af9ffa467a518a086a43","24c6a117721e606c9984335f71711877293a9651e44f59f3d21c1ea0856f9cc9","dd3273ead9fbde62a72949c97dbec2247ea08e0c6952e701a483d74ef92d6a17","405822be75ad3e4d162e07439bac80c6bcc6dbae1929e179cf467ec0b9ee4e2e","0db18c6e78ea846316c012478888f33c11ffadab9efd1cc8bcc12daded7a60b6","4d2b0eb911816f66abe4970898f97a2cfc902bcd743cbfa5017fad79f7ef90d8","bd0532fd6556073727d28da0edfd1736417a3f9f394877b6d5ef6ad88fba1d1a","89167d696a849fce5ca508032aabfe901c0868f833a8625d5a9c6e861ef935d2","e53a3c2a9f624d90f24bf4588aacd223e7bec1b9d0d479b68d2f4a9e6011147f","24b8685c62562f5d98615c5a0c1d05f297cf5065f15246edfe99e81ec4c0e011","93507c745e8f29090efb99399c3f77bec07db17acd75634249dc92f961573387","339dc5265ee5ed92e536a93a04c4ebbc2128f45eeec6ed29f379e0085283542c","4732aec92b20fb28c5fe9ad99521fb59974289ed1e45aecb282616202184064f","2e85db9e6fd73cfa3d7f28e0ab6b55417ea18931423bd47b409a96e4a169e8e6","c46e079fe54c76f95c67fb89081b3e399da2c7d109e7dca8e4b58d83e332e605","bf67d53d168abc1298888693338cb82854bdb2e69ef83f8a0092093c2d562107",{"version":"964f307d249df0d7e8eb16d594536c0ac6cc63c8d467edf635d05542821dec8e","affectsGlobalScope":true},"db3ec8993b7596a4ef47f309c7b25ee2505b519c13050424d9c34701e5973315",{"version":"6a1ebd564896d530364f67b3257c62555b61d60494a73dfe8893274878c6589d","affectsGlobalScope":true},"af49b066a76ce26673fe49d1885cc6b44153f1071ed2d952f2a90fccba1095c9","f22fd1dc2df53eaf5ce0ff9e0a3326fc66f880d6a652210d50563ae72625455f",{"version":"3ddbdb519e87a7827c4f0c4007013f3628ca0ebb9e2b018cf31e5b2f61c593f1","affectsGlobalScope":true},"a40826e8476694e90da94aa008283a7de50d1dafd37beada623863f1901cb7fb",{"version":"6d498d4fd8036ea02a4edcae10375854a0eb1df0496cf0b9d692577d3c0fd603","affectsGlobalScope":true},"24642567d3729bcc545bacb65ee7c0db423400c7f1ef757cab25d05650064f98","fd09b892597ab93e7f79745ce725a3aaf6dd005e8db20f0c63a5d10984cba328","a3be878ff1e1964ab2dc8e0a3b67087cf838731c7f3d8f603337e7b712fdd558","5433f7f77cd1fd53f45bd82445a4e437b2f6a72a32070e907530a4fea56c30c8","9be74296ee565af0c12d7071541fdd23260f53c3da7731fb6361f61150a791f6",{"version":"ee1ee365d88c4c6c0c0a5a5701d66ebc27ccd0bcfcfaa482c6e2e7fe7b98edf7","affectsGlobalScope":true},{"version":"f501a53b94ba382d9ba396a5c486969a3abc68309828fa67f916035f5d37fe2b","affectsGlobalScope":true},"aa658b5d765f630c312ac9202d110bbaf2b82d180376457f0a9d57b42629714a","312ac7cbd070107766a9886fd27f9faad997ef57d93fdfb4095df2c618ac8162","2e9b4e7f9942af902eb85bae6066d04ef1afee51d61554a62d144df3da7dec94","672ad3045f329e94002256f8ed460cfd06173a50c92cde41edaadfacffd16808","64da4965d1e0559e134d9c1621ae400279a216f87ed00c4cce4f2c7c78021712","2205527b976f4f1844adc46a3f0528729fb68cac70027a5fb13c49ca23593797",{"version":"0166fce1204d520fdfd6b5febb3cda3deee438bcbf8ce9ffeb2b1bcde7155346","affectsGlobalScope":true},"d8b13eab85b532285031b06a971fa051bf0175d8fff68065a24a6da9c1c986cf","50c382ba1827988c59aa9cc9d046e386d55d70f762e9e352e95ee8cb7337cdb8","bb9627ab9d078c79bb5623de4ac8e5d08f806ec9b970962dfc83b3211373690d",{"version":"21d7e87f271e72d02f8d167edc902f90b04525edc7918f00f01dd0bd00599f7e","affectsGlobalScope":true},{"version":"6f6abdaf8764ef01a552a958f45e795b5e79153b87ddad3af5264b86d2681b72","affectsGlobalScope":true},"a215554477f7629e3dcbc8cde104bec036b78673650272f5ffdc5a2cee399a0a","c3497fc242aabfedcd430b5932412f94f157b5906568e737f6a18cc77b36a954","cdc1de3b672f9ef03ff15c443aa1b631edca35b6ae6970a7da6400647ff74d95","139ad1dc93a503da85b7a0d5f615bddbae61ad796bc68fedd049150db67a1e26","bf01fdd3b93cf633b3f7420718457af19c57ab8cbfea49268df60bae2e84d627","15c5e91b5f08be34a78e3d976179bf5b7a9cc28dc0ef1ffebffeb3c7812a2dca","5f461d6f5d9ff474f1121cc3fd86aa3cd67476c701f55c306d323c5112201207","65b39cc6b610a4a4aecc321f6efb436f10c0509d686124795b4c36a5e915b89e","269929a24b2816343a178008ac9ae9248304d92a8ba8e233055e0ed6dbe6ef71","93452d394fdd1dc551ec62f5042366f011a00d342d36d50793b3529bfc9bd633",{"version":"83fe38aa2243059ea859325c006da3964ead69b773429fe049ebb0426e75424d","affectsGlobalScope":true},"d3edb86744e2c19f2c1503849ac7594a5e06024f2451bacae032390f2e20314a",{"version":"e501cbca25bd54f0bcb89c00f092d3cae227e970b93fd76207287fd8110b123d","affectsGlobalScope":true},{"version":"8a3e61347b8f80aa5af532094498bceb0c0b257b25a6aa8ab4880fd6ed57c95a","affectsGlobalScope":true},"98e00f3613402504bc2a2c9a621800ab48e0a463d1eed062208a4ae98ad8f84c","950f6810f7c80e0cffefcf1bcc6ade3485c94394720e334c3c2be3c16b6922fb","5475df7cfc493a08483c9d7aa61cc04791aecba9d0a2efc213f23c4006d4d3cd","000720870b275764c65e9f28ac97cc9e4d9e4a36942d4750ca8603e416e9c57c",{"version":"54412c70bacb9ed547ed6caae8836f712a83ccf58d94466f3387447ec4e82dc3","affectsGlobalScope":true},{"version":"e74e7b0baa7a24f073080091427d36a75836d584b9393e6ac2b1daf1647fe65a","affectsGlobalScope":true},"4c48e931a72f6971b5add7fdb1136be1d617f124594e94595f7114af749395e0","478eb5c32250678a906d91e0529c70243fc4d75477a08f3da408e2615396f558","e686a88c9ee004c8ba12ffc9d674ca3192a4c50ed0ca6bd5b2825c289e2b2bfe",{"version":"0d27932df2fbc3728e78b98892540e24084424ce12d3bd32f62a23cf307f411f","affectsGlobalScope":true},"4423fb3d6abe6eefb8d7f79eb2df9510824a216ec1c6feee46718c9b18e6d89f",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"01c47d1c006b3a15b51d89d7764fff7e4fabc4e412b3a61ee5357bd74b822879","eac647a94fb1f09789e12dfecb52dcd678d05159a4796b4e415aa15892f3b103","0744807211f8cd16343fb1a796f53a8f7b7f95d4bd278c48febf657679bf28e6","87f287f296f3ff07dbd14ea7853c2400d995dccd7bd83206196d6c0974774e96","104c67f0da1bdf0d94865419247e20eded83ce7f9911a1aa75fc675c077ca66e","d3f2d715f57df3f04bf7b16dde01dec10366f64fce44503c92b8f78f614c1769","b78cd10245a90e27e62d0558564f5d9a16576294eee724a59ae21b91f9269e4a","17f0ae35f62a9586cade6c10e5a0d61362257b8e03e661c49ca417e4f3da857d","2f5747b1508ccf83fad0c251ba1e5da2f5a30b78b09ffa1cfaf633045160afed",{"version":"a45c25e77c911c1f2a04cade78f6f42b4d7d896a3882d4e226efd3a3fcd5f2c4","affectsGlobalScope":true},"b71c603a539078a5e3a039b20f2b0a0d1708967530cf97dec8850a9ca45baa2b","0e13570a7e86c6d83dd92e81758a930f63747483e2cd34ef36fcdb47d1f9726a","cc0d0b339f31ce0ab3b7a5b714d8e578ce698f1e13d7f8c60bfb766baeb1d35c","5c45abf1e13e4463eacfd5dedda06855da8748a6a6cb3334f582b52e219acc04","6847334317c1bc1e6fc4b679b0095bbd2b6ee3b85fe3f26fc26bac462f68ef5e","2224f3072e3cc07906eeed5c71746779511fba2dd224addc5489bcdb489bdee5","3f841292a135503a4cc1a9029af59dae135595810cfad5ca62ec1b2ad9846e8e","0504070e7eaba788f5d0d5926782ed177f1db01cee28363c488fae94950c0bbc","7e8d3f08435ad2cefe67f58182618bfc9a0a29db08cf2544b94cbcae754a9bd9","8cf9b9045a614f883b623c2f1a631ec6a93321747e933330b2eec0ee47164a34","bc81aff061c53a7140270555f4b22da4ecfe8601e8027cf5aa175fbdc7927c31","f442a0e81de65ef6b6f40964640005dc8b0ffc2cc0103f609a3bba44f87c7fe6","a6e3a235ab437dacf811dc938355d0e4782543cb2e4f7344e3fa85e875cd3625","d60df5c72a9cae1b78934f335002de329347e44f9d615bef836ebdfa26b43152","421e6c7b30796b556fc615312e60ded69773e91665d38296ea1c488ccf4a88a9","865fedc7f1f50a2ff3c37dcfe2b049c30adaef3522de834469cb45d37cd0d77a","b2d5b99b38242ab4d0eea306a0daa25a22d75ead28530fa045de6fb255a8aca0","0e465e743b9793a20b7d9ced39d8883d4530221c5efb877f6529247e7b3cf8ce","7adc607c20a51c50367d7377804df44a70a93847368fbd0b3df4115fdc9bb316","b0221f7f6c3e31c2801ae46958b2a45ef8bfe6b20e2846212f5fe56fe2c90e4b","3d5d4e245f3d19ad6c9c84978c903fdd2b1da19cabf34bed1f08c1914b6a38f3","588ac8a9105110b13b06ecc43811d08251ee21925c98bf10005b669b6e49f2ad","4c9cdbb50758da630a0c54fc49e8f784157ba40a1bd7aa4a29121b98973c7761","717513cebfe29c3fdd9e5a7adad9aa6475756ca3a42c80f35412f42eae92a725","6da45ac48e99ecec671cba0f12fa64051105b77a2c0217d3398ecac109b5c25c","9870e8dff8c386ddaa4449fec70790701b8f85312529740ef0b3d248b89cfea5","24c15038c2198fc5d3b853ee7f9dc3fed02ac216b10686d451e7c429b9b1725f","a6e3a235ab437dacf811dc938355d0e4782543cb2e4f7344e3fa85e875cd3625","1fe1baf69ff26dfd47906a4d6c12a643372d77d9dc088a9568b7205377689054","ae42abcf25061983f893f42371d92ce43897e4415aa9dfabf214e328a05a3e07","1b252e271d750d2eb0a99cefe276cf3d24b01b27c445c9caed36ab5414c75447","f442a0e81de65ef6b6f40964640005dc8b0ffc2cc0103f609a3bba44f87c7fe6","0aa2c4ee3054f39425bca95e80c14c5e5734eed81ba3e69d33903b038c4334a5","e8375522a20cac394b4714b4d356bde3f2514eca8ba120a19f2c56b9f5ee8ada","a4809f4d92317535e6b22b01019437030077a76fec1d93b9881c9ed4738fcc54","5f53fa0bd22096d2a78533f94e02c899143b8f0f9891a46965294ee8b91a9434","22079adc7e41c61be9456481c75cbae22b549c7b08aeddb1c4ef6f3bef0bb372","d4c95937b9dfa8567c997910030a43232a2a0189425e0f8936566464b20d403e","9ac049560fc8c4edeb69d16072454a7f5c7d0453620c75b3cb64742d212a241e","ee1c4385698ca9d8c2cd3f5acb15fc7a41927024395b6f7f789a80c9916d20cd","0286076cd3c3dc2df04809ea031c6d5141ce18bf30232e884244570a8c2eae2e","f577166335fffe386bcc7c1d17de0de9e3df64cd1a515a7c88b491f9e0200925","1e87d58d3678958d89e2a94454afcc827f1aa6363abbcbd4f99729e65ab47995","0b1f667f3b8955dd539bff86ce655f504188e512a4aef73efa155c51c5c89cfe","d01b5705c8b4c4c2653b5da1ab5e10dbac0f5c8b9c0ce6f9168dc5636c4394f1","f311f735f4c013741086a778a515a791ab918c7d88d4b41abce0c84c8bb1edab","90153382068e8fdb040f444c5cddee5d9e8a621e2067459f181123a5c3c79561","870e284ce78ff9f144b9b9f5673831eeabab4089665478907446f2e73172aa19","d375db3bfbc5fe5e970f4d73b6ed453a67abfd67a847d5a3e91d735aae540b7a","d0af557a0c16b81f36b68f8574e4f8979e9f21c13a19a6e3ade423df97d8aa74","73295e035e4ee2a454ec32640b0b234b26f5f0ade43a586f3133e1495f885e70","f6ab1745296f14aa0d3c58185f7c6ed52a881238491a05d1ab56104bf27348f5","72511f0bd9521bc08cb51fe757ec973f3132ad98d87aaabc947154e7eaba5694","bb033bbc8fff3abcfede0badf277790fbe447aac9ff62e97f987697fa576ea0b","ba84e7615558647fabeb9dcc2fb55d464e51b8940de95085bb090d70fc04510a","aa9aa1a39adeb389141232ca52d10f45828f226a9087a380229f7eb518764149","1fba140bdb439fce6da664c001142e59732c8e5f4c2b9b909357f8bc3867ab0c",{"version":"cfbc34776a54d01771effdc2b06aef42cdff3fb13aa7547d1392e61395df6334","affectsGlobalScope":true},"cdeae34aca6700620ebf3f27cf7d439c3af97595dd6e2729fa4780483add5680","3ff87ea3471b51beaf4aa8fd8f4422862b11d343fdbb55bf383e0f8cc195a445","8eba76cba47f025785c0467d8e318bf8775db384c2307598811bd745d85b66a9","1b81f1fa82ad30af01ab1cae91ccaddc10c48f5916bbd6d282155e44a65d858d","134da2fc76a5a8547dbe6bfb9a5ec45900ae01357199c6c6aaea7e728c06fad5",{"version":"51392c7d86815a7350b82a3d8f33760406c4ceb65da31161396cc68d50b0df9a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"a2379b91cf28bb7a020bf78e06b8455b9680bd643496eda3ed3da97807c9086e","signature":"8a9e6369fe4dd0f64ce8b5d61c235558d592fd7ef4d09ca70bd8e9538b607a11"},"7455f2d44bbd248413e4ab8c3ff847413d9ce327967dba66f0b51880f60fb653",{"version":"89dd9e045d0a71c73a2ebc140cb2d3161ddb0917942e4c6709578406fdf4426d","affectsGlobalScope":true},"38df32d74f5cb92d08a7ace088d631e65fd4ae41fd1098ef74ad8efab03763ac","ff169075cb4df455eaa1dc4972416ae6981adca96429ed698a306da3d5a2e241",{"version":"d6160f2aa5658e1a1da53661a85cb63a2ce2f888f1702f0fd5b4a67b065dd763","affectsGlobalScope":true},"f3731eb0da8be50797a04467e9021082654c55d6cbabaf17a9d505c0ff3033cc","6146b370459b8f7e81f61b7dd9022fb06509cc20d34514dc782c9ce538fd8ec9","a585baba6d92b7f5052a11c3a5d0bcc73657180bb6066cf70e1b4664df4e8363","1aacab8ad3bd52a3a508b9c07bb341d680448fc9ee45591708ded8113c1be517",{"version":"0d0b27f83240100bde5ac9651ca4729509fbb845ce91e0ee02e03620fd69315d","signature":"0bc6da20e0eb064f2c7ed1a49c4ce5d26c3b2853f4b876b8e522445c7c052eb6"},"1cc188904259bd0985b24d9dc2a160891cb5e94210901466b951716fcdb4ff62","6d69069fa6d2d6531effe1d8c538a74108fc5c0014a47f2f408f63969c12626d",{"version":"5a905e6918b7838e83666ad08352e48c43a1a8ccf71663c7dcfd5a8fa72dd520","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855","3dcefe176e6dce7a06bd345522e19f631f7fdb370335e2e93bc225b3afbb0bd0","2887592574fcdfd087647c539dcb0fbe5af2521270dad4a37f9d17c16190d579","ba3b727e6a9e85ca15f115b3dbd2e962f6fd4a0ed9aee445d03b40def8971139","7578ed901eec5f590609fc7a6ba9027be5735ad1aedef119aa56d53a22dfbe02","5b7206ca5f2f6eeaac6daa285664f424e0b728f3e31937da89deb8696c5f1dbc","f96f3c445afc7d65d4790386e37c5b57f095f285cc89b8315b209fe0c81837c1","072099609280e6659eb29b1d2a601e95708c90b7db2aba2571ebda50d1be0dd5","3189093b3543e545bcf0e6d387d60c5cfe5a224b104d15b1639c0c4db9ecf012",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"ee7d8894904b465b072be0d2e4b45cf6b887cdba16a467645c4e200982ece7ea","f3d8c757e148ad968f0d98697987db363070abada5f503da3c06aefd9d4248c1","dd0c1b380ba3437adedef134b2e48869449b1db0b07b2a229069309ce7b9dd39","963d59066dd6742da1918a6213a209bcc205b8ee53b1876ee2b4e6d80f97c85e","9c5c92b7fb8c38ff1b46df69701f2d1ea8e2d6468e3cd8f73d8af5e6f7864576","2887592574fcdfd087647c539dcb0fbe5af2521270dad4a37f9d17c16190d579","f86d0150d5abc55bf5bb479beacc34a7e9d4ab4e3014315fb74626baf1558857","d298f6aca49ec8b97f4e972aae1299d5cd2f72ac566e0f179f168f8130be1ba3","3f6bff86e78e065dad71ca8e395824703f56977f7309139127e58718d7915410","03e266e412f1494d4288de426268bcee43d54f47d79e09d523f28820c6aea823","41ab75ee7cef1e86c663595cfac0e1d2d092cc6b6d18e6fd9fc19f993371d29b","742f21debb3937c3839a63245648238555bdab1ea095d43fd10c88a64029bf76","7cfdf3b9a5ba934a058bfc9390c074104dc7223b7e3c16fd5335206d789bc3d3","0944f27ebff4b20646b71e7e3faaaae50a6debd40bc63e225de1320dd15c5795","5d30565583300c9256072a013ac0318cc603ff769b4c5cafc222394ea93963e1","8a7219b41d3c1c93f3f3b779146f313efade2404eeece88dcd366df7e2364977","a109c4289d59d9019cfe1eeab506fe57817ee549499b02a83a7e9d3bdf662d63","fbca5ffaebf282ec3cdac47b0d1d4a138a8b0bb32105251a38acb235087d3318",{"version":"90ebf5865e27d8966ef44b073e6e83b0ddd45058bab1d58b1e4b5a47d36396c4","affectsGlobalScope":true},"22293bd6fa12747929f8dfca3ec1684a3fe08638aa18023dd286ab337e88a592","cabf0c014f27d0e80f4b0e3a2a1af5dd0a8a66d31a79180b2e5876d4f4c62173","85a8fd55d9e1b2e6d7d2cde66f6d150cf6b7dc15b80a8a0af0e93105aa997ef6","fc37aca06f6b8b296c42412a2e75ab53d30cd1fa8a340a3bb328a723fd678377","5f2c582b9ef260cb9559a64221b38606378c1fabe17694592cdfe5975a6d7efa","c271193e426325d9acab2f99997bb9f5f2dff850ec8c7c011c5abafe5af83b5f","6ab263df6465e2ed8f1d02922bae18bb5b407020767de021449a4c509859b22e","6805621d9f970cda51ab1516e051febe5f3ec0e45b371c7ad98ac2700d13d57c","247a952efd811d780e5630f8cfd76f495196f5fa74f6f0fee39ac8ba4a3c9800",{"version":"36a2e4c9a67439aca5f91bb304611d5ae6e20d420503e96c230cf8fcdc948d94","affectsGlobalScope":true},"8a8eb4ebffd85e589a1cc7c178e291626c359543403d58c9cd22b81fab5b1fb9",{"version":"8ca4709dbd22a34bcc1ebf93e1877645bdb02ebd3f3d9a211a299a8db2ee4ba1","affectsGlobalScope":true},"8baa5d0febc68db886c40bf341e5c90dc215a90cd64552e47e8184be6b7e3358","cf3d384d082b933d987c4e2fe7bfb8710adfd9dc8155190056ed6695a25a559e","9871b7ee672bc16c78833bdab3052615834b08375cb144e4d2cba74473f4a589","c863198dae89420f3c552b5a03da6ed6d0acfa3807a64772b895db624b0de707","8b03a5e327d7db67112ebbc93b4f744133eda2c1743dbb0a990c61a8007823ef","86c73f2ee1752bac8eeeece234fd05dfcf0637a4fbd8032e4f5f43102faa8eec","42fad1f540271e35ca37cecda12c4ce2eef27f0f5cf0f8dd761d723c744d3159","ff3743a5de32bee10906aff63d1de726f6a7fd6ee2da4b8229054dfa69de2c34","83acd370f7f84f203e71ebba33ba61b7f1291ca027d7f9a662c6307d74e4ac22","1445cec898f90bdd18b2949b9590b3c012f5b7e1804e6e329fb0fe053946d5ec","0e5318ec2275d8da858b541920d9306650ae6ac8012f0e872fe66eb50321a669","cf530297c3fb3a92ec9591dd4fa229d58b5981e45fe6702a0bd2bea53a5e59be","c1f6f7d08d42148ddfe164d36d7aba91f467dbcb3caa715966ff95f55048b3a4","f4e9bf9103191ef3b3612d3ec0044ca4044ca5be27711fe648ada06fad4bcc85","0c1ee27b8f6a00097c2d6d91a21ee4d096ab52c1e28350f6362542b55380059a","7677d5b0db9e020d3017720f853ba18f415219fb3a9597343b1b1012cfd699f7","bc1c6bc119c1784b1a2be6d9c47addec0d83ef0d52c8fbe1f14a51b4dfffc675","52cf2ce99c2a23de70225e252e9822a22b4e0adb82643ab0b710858810e00bf1","770625067bb27a20b9826255a8d47b6b5b0a2d3dfcbd21f89904c731f671ba77","d1ed6765f4d7906a05968fb5cd6d1db8afa14dbe512a4884e8ea5c0f5e142c80","799c0f1b07c092626cf1efd71d459997635911bb5f7fc1196efe449bba87e965","2a184e4462b9914a30b1b5c41cf80c6d3428f17b20d3afb711fff3f0644001fd","9eabde32a3aa5d80de34af2c2206cdc3ee094c6504a8d0c2d6d20c7c179503cc","397c8051b6cfcb48aa22656f0faca2553c5f56187262135162ee79d2b2f6c966","a8ead142e0c87dcd5dc130eba1f8eeed506b08952d905c47621dc2f583b1bff9","a02f10ea5f73130efca046429254a4e3c06b5475baecc8f7b99a0014731be8b3","c2576a4083232b0e2d9bd06875dd43d371dee2e090325a9eac0133fd5650c1cb","4c9a0564bb317349de6a24eb4efea8bb79898fa72ad63a1809165f5bd42970dd","f40ac11d8859092d20f953aae14ba967282c3bb056431a37fced1866ec7a2681","cc11e9e79d4746cc59e0e17473a59d6f104692fd0eeea1bdb2e206eabed83b03","b444a410d34fb5e98aa5ee2b381362044f4884652e8bc8a11c8fe14bbd85518e","c35808c1f5e16d2c571aa65067e3cb95afeff843b259ecfa2fc107a9519b5392","14d5dc055143e941c8743c6a21fa459f961cbc3deedf1bfe47b11587ca4b3ef5","a3ad4e1fc542751005267d50a6298e6765928c0c3a8dce1572f2ba6ca518661c","f237e7c97a3a89f4591afd49ecb3bd8d14f51a1c4adc8fcae3430febedff5eb6","3ffdfbec93b7aed71082af62b8c3e0cc71261cc68d796665faa1e91604fbae8f","662201f943ed45b1ad600d03a90dffe20841e725203ced8b708c91fcd7f9379a","c9ef74c64ed051ea5b958621e7fb853fe3b56e8787c1587aefc6ea988b3c7e79","2462ccfac5f3375794b861abaa81da380f1bbd9401de59ffa43119a0b644253d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","7d8ddf0f021c53099e34ee831a06c394d50371816caa98684812f089b4c6b3d4",{"version":"2c3b8be03577c98530ef9cb1a76e2c812636a871f367e9edf4c5f3ce702b77f8","affectsGlobalScope":true},"bae8d023ef6b23df7da26f51cea44321f95817c190342a36882e93b80d07a960","26a770cec4bd2e7dbba95c6e536390fffe83c6268b78974a93727903b515c4e7","74d5a87c3616cd5d8691059d531504403aa857e09cbaecb1c64dfb9ace0db185"],"root":[63,[74,89],[91,100],[107,115],314,315,325,328,329],"options":{"allowJs":false,"allowSyntheticDefaultImports":true,"composite":true,"declaration":true,"downlevelIteration":true,"experimentalDecorators":true,"importHelpers":true,"inlineSources":true,"isolatedDeclarations":true,"module":7,"rootDir":"../..","sourceMap":true,"strict":true,"target":7,"useDefineForClassFields":false,"verbatimModuleSyntax":true},"fileIdsList":[[64,73,75,92,93],[64,73,75],[64,73,75,76,77],[64,73,74,92,93,94,95,97,98],[64,73],[64,73,102,104,106],[64,73,77],[64,73,74,96],[64,73,108],[64,73,93],[64,73,75,77,92],[64,73,99,145,307,308,311,313],[64,75,79,80,82,83,85,86,87,88],[64],[64,73,78],[64,73,81],[64,73,84],[64,73,324],[64,90],[64,73,83,85,86,126,145,311,327],[101],[102,103],[316,317,318,320,321,322,323],[316],[67,316],[67,316,317,319],[317],[309],[67,309],[65,66],[133,134],[133],[116,117],[118],[117,119],[129,131,137,138,139,142,143],[132,135],[136],[132,136,141],[73],[132,135,140],[116,128,144],[120,123,124,127],[205,241],[205,241,245],[116],[205,207,241,331],[205,241,248],[222,241],[205,241,245,254,255],[338,339,340],[202,205,241,247,248,249],[248,250,252,253],[202,203,241,342],[332,345,346],[146],[285],[260],[203,260],[189,202,205,206,210,216,233,241,244,251,255,256,257,258,259],[350],[351,353],[354],[352],[148],[189],[190,195,225],[191,196,202,203,210,222,233],[191,192,202,210],[193,234],[194,195,203,211],[195,222,230],[196,198,202,210],[189,197],[198,199],[202],[200,202],[189,202],[202,203,204,222,233],[202,203,204,217,222,225],[187,238],[187,198,202,205,210,222,233],[202,203,205,206,210,222,230,233],[205,207,222,230,233],[148,149,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240],[202,208],[209,233,238],[198,202,210,222],[211],[212],[189,213],[148,149,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239],[215],[216],[202,217,218],[217,219,234,236],[190,202,222,223,224,225],[190,222,224],[222,223],[225],[226],[148,222],[202,228,229],[228,229],[195,210,222,230],[231],[210,232],[190,205,216,233],[195,234],[222,235],[209,236],[237],[190,195,202,204,213,222,233,236,238],[222,239],[361],[362],[222,241,364],[366,367,368],[371,410],[371,395,410],[410],[371],[371,396,410],[371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409],[396,410],[203,222,241,246],[205,241,247,251],[116,126],[125],[69],[331],[202,205,207,210,222,230,233,239,241],[412],[202,222,241],[210,243,260,261,262,264,265,266,267,268,269,270],[210,241,243,260,262,264,266],[210,241,243,260,265],[241,260],[210,241,261,263],[305],[295],[241,295],[296,297,298,299,300,301,302,303,304],[306],[146,277,287],[282],[287,289],[271,272,277,282,283,284,286,288],[287,288],[146,147,272,273,274,276,277,278,279,280,281,282,283,284,287,288,289,290,291,292,294],[277,280,281,282,287,288],[274,277,278,280,281,287,288],[271,276],[275,288],[276],[146,273,276],[274,287,288],[273,275,277,278,279,288],[293],[122],[121],[202,203,241,242],[67,70],[70],[68,70],[68,69],[310],[326],[312],[105],[67,70,71,72],[130],[159,163,233],[159,222,233],[154],[156,159,230,233],[210,230],[241],[154,241],[156,159,210,233],[151,152,155,158,190,202,222,233],[159,166],[151,157],[159,180,181],[155,159,190,225,233,241],[190,241],[180,190,241],[153,154,241],[159],[153,154,155,156,157,158,159,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,181,182,183,184,185,186],[159,174],[159,166,167],[157,159,167,168],[158],[151,154,159],[159,163,167,168],[163],[157,159,162,233],[151,156,159,166],[190,222],[154,159,180,190,238,241],[307]],"referencedMap":[[94,1],[92,2],[78,3],[99,4],[100,5],[107,6],[98,5],[81,7],[97,8],[77,5],[109,9],[110,10],[84,5],[95,11],[111,5],[112,7],[113,5],[114,7],[314,12],[115,5],[74,5],[89,13],[75,14],[79,15],[80,7],[82,16],[83,5],[85,17],[86,17],[87,14],[88,14],[96,14],[315,14],[325,18],[76,14],[108,14],[93,14],[91,19],[328,20],[329,14],[102,21],[104,22],[324,23],[317,24],[318,25],[320,26],[323,25],[322,25],[319,27],[310,28],[326,29],[312,29],[67,30],[135,31],[134,32],[118,33],[119,34],[120,35],[144,36],[136,37],[137,38],[139,32],[142,39],[132,40],[141,41],[143,38],[145,42],[128,43],[244,44],[253,45],[124,46],[332,47],[333,48],[245,44],[335,49],[256,50],[341,51],[250,52],[254,53],[343,54],[347,55],[285,56],[286,57],[259,58],[348,59],[260,60],[349,58],[351,61],[354,62],[355,63],[353,64],[148,65],[149,65],[189,66],[190,67],[191,68],[192,69],[193,70],[194,71],[195,72],[196,73],[197,74],[198,75],[199,75],[201,76],[200,77],[202,78],[203,79],[204,80],[188,81],[205,82],[206,83],[207,84],[241,85],[208,86],[209,87],[210,88],[211,89],[212,90],[213,91],[214,92],[215,93],[216,94],[217,95],[218,95],[219,96],[222,97],[224,98],[223,99],[225,100],[226,101],[227,102],[228,103],[229,104],[230,105],[231,106],[232,107],[233,108],[234,109],[235,110],[236,111],[237,112],[238,113],[239,114],[362,115],[361,116],[365,117],[369,118],[395,119],[396,120],[371,121],[374,121],[393,119],[394,119],[384,119],[383,122],[381,119],[376,119],[389,119],[387,119],[391,119],[375,119],[388,119],[392,119],[377,119],[378,119],[390,119],[372,119],[379,119],[380,119],[382,119],[386,119],[397,123],[385,119],[373,119],[410,124],[404,123],[406,125],[405,123],[398,123],[399,123],[401,123],[403,123],[407,125],[408,125],[400,125],[402,125],[247,126],[252,127],[127,128],[126,129],[411,130],[345,131],[261,132],[413,133],[414,134],[271,135],[265,136],[267,136],[266,137],[268,138],[264,139],[306,140],[302,141],[297,141],[303,142],[305,143],[298,141],[300,141],[301,141],[299,141],[296,141],[304,141],[307,144],[288,145],[291,146],[290,147],[287,148],[274,149],[281,145],[295,150],[283,151],[289,152],[284,153],[276,154],[279,155],[277,156],[275,157],[280,158],[294,159],[121,46],[123,160],[122,161],[243,162],[71,163],[68,164],[105,165],[70,166],[130,164],[311,167],[327,168],[313,169],[106,170],[140,164],[73,171],[131,172],[166,173],[176,174],[165,173],[186,175],[157,176],[156,177],[185,178],[179,179],[184,180],[159,181],[173,182],[158,183],[182,184],[154,185],[153,186],[183,187],[155,188],[160,189],[164,189],[187,190],[177,191],[168,192],[169,193],[171,194],[167,195],[170,196],[180,178],[162,197],[163,198],[172,199],[152,200],[175,191],[174,189],[181,201],[308,202]],"latestChangedDtsFile":"./test/kitchen-sink.e2e.d.ts"},"version":"5.5.4"}
\ No newline at end of file
