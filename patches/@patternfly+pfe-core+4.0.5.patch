diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.d.ts b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.d.ts
index d342387..addc933 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.d.ts
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.d.ts
@@ -1,4 +1,4 @@
-import type { ReactiveController, ReactiveControllerHost } from 'lit';
+import { type ReactiveController, type ReactiveControllerHost } from 'lit';
 export interface ScrollSpyControllerOptions extends IntersectionObserverInit {
     /**
      * Tag names of legal link children.
@@ -20,6 +20,10 @@ export interface ScrollSpyControllerOptions extends IntersectionObserverInit {
      * @default el => el.getAttribute('href');
      */
     getHash?: (el: Element) => string | null;
+    /**
+     * Optional callback for when an intersection occurs
+     */
+    onIntersection?(): void;
 }
 export declare class ScrollSpyController implements ReactiveController {
     #private;
@@ -32,6 +36,7 @@ export declare class ScrollSpyController implements ReactiveController {
     set threshold(v: number | number[]);
     constructor(host: ReactiveControllerHost & HTMLElement, options: ScrollSpyControllerOptions);
     hostConnected(): void;
+    hostDisconnected(): void;
     /**
      * Explicitly set the active item
      * @param link usually an `<a>`
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
index fd5a7dc..df40332 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
@@ -1,5 +1,6 @@
-var _ScrollSpyController_instances, _ScrollSpyController_tagNames, _ScrollSpyController_activeAttribute, _ScrollSpyController_io, _ScrollSpyController_passedLinks, _ScrollSpyController_force, _ScrollSpyController_intersected, _ScrollSpyController_root, _ScrollSpyController_rootMargin, _ScrollSpyController_threshold, _ScrollSpyController_getRootNode, _ScrollSpyController_getHash, _ScrollSpyController_linkChildren_get, _ScrollSpyController_initIo, _ScrollSpyController_markPassed, _ScrollSpyController_setActive, _ScrollSpyController_nextIntersection, _ScrollSpyController_onIo;
+var _ScrollSpyController_instances, _a, _ScrollSpyController_instances_1, _ScrollSpyController_tagNames, _ScrollSpyController_activeAttribute, _ScrollSpyController_io, _ScrollSpyController_passedLinks, _ScrollSpyController_force, _ScrollSpyController_intersected, _ScrollSpyController_root, _ScrollSpyController_rootMargin, _ScrollSpyController_threshold, _ScrollSpyController_intersectingTargets, _ScrollSpyController_linkTargetMap, _ScrollSpyController_getRootNode, _ScrollSpyController_getHash, _ScrollSpyController_onIntersection, _ScrollSpyController_linkChildren_get, _ScrollSpyController_initializing, _ScrollSpyController_initIo, _ScrollSpyController_markPassed, _ScrollSpyController_setActive, _ScrollSpyController_activateHash, _ScrollSpyController_nextIntersection, _ScrollSpyController_onIo;
 import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
 export class ScrollSpyController {
     get root() {
         return __classPrivateFieldGet(this, _ScrollSpyController_root, "f");
@@ -40,8 +41,12 @@ export class ScrollSpyController {
         _ScrollSpyController_root.set(this, void 0);
         _ScrollSpyController_rootMargin.set(this, void 0);
         _ScrollSpyController_threshold.set(this, void 0);
+        _ScrollSpyController_intersectingTargets.set(this, new Set());
+        _ScrollSpyController_linkTargetMap.set(this, new Map());
         _ScrollSpyController_getRootNode.set(this, void 0);
         _ScrollSpyController_getHash.set(this, void 0);
+        _ScrollSpyController_onIntersection.set(this, void 0);
+        _ScrollSpyController_initializing.set(this, true);
         host.addController(this);
         __classPrivateFieldSet(this, _ScrollSpyController_tagNames, options.tagNames, "f");
         __classPrivateFieldSet(this, _ScrollSpyController_root, options.root, "f");
@@ -50,10 +55,16 @@ export class ScrollSpyController {
         __classPrivateFieldSet(this, _ScrollSpyController_threshold, options.threshold ?? 0.85, "f");
         __classPrivateFieldSet(this, _ScrollSpyController_getRootNode, () => options.rootNode ?? host.getRootNode(), "f");
         __classPrivateFieldSet(this, _ScrollSpyController_getHash, options?.getHash ?? ((el) => el.getAttribute('href')), "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_onIntersection, options?.onIntersection, "f");
     }
     hostConnected() {
+        __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).add(this);
         __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_initIo).call(this);
     }
+    hostDisconnected() {
+        __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).delete(this);
+        __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.disconnect();
+    }
     /**
      * Explicitly set the active item
      * @param link usually an `<a>`
@@ -72,20 +83,29 @@ export class ScrollSpyController {
         __classPrivateFieldSet(this, _ScrollSpyController_force, false, "f");
     }
 }
-_ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttribute = new WeakMap(), _ScrollSpyController_io = new WeakMap(), _ScrollSpyController_passedLinks = new WeakMap(), _ScrollSpyController_force = new WeakMap(), _ScrollSpyController_intersected = new WeakMap(), _ScrollSpyController_root = new WeakMap(), _ScrollSpyController_rootMargin = new WeakMap(), _ScrollSpyController_threshold = new WeakMap(), _ScrollSpyController_getRootNode = new WeakMap(), _ScrollSpyController_getHash = new WeakMap(), _ScrollSpyController_instances = new WeakSet(), _ScrollSpyController_linkChildren_get = function _ScrollSpyController_linkChildren_get() {
-    return Array.from(this.host.querySelectorAll(__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')))
-        .filter(__classPrivateFieldGet(this, _ScrollSpyController_getHash, "f"));
-}, _ScrollSpyController_initIo = function _ScrollSpyController_initIo() {
+_a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttribute = new WeakMap(), _ScrollSpyController_io = new WeakMap(), _ScrollSpyController_passedLinks = new WeakMap(), _ScrollSpyController_force = new WeakMap(), _ScrollSpyController_intersected = new WeakMap(), _ScrollSpyController_root = new WeakMap(), _ScrollSpyController_rootMargin = new WeakMap(), _ScrollSpyController_threshold = new WeakMap(), _ScrollSpyController_intersectingTargets = new WeakMap(), _ScrollSpyController_linkTargetMap = new WeakMap(), _ScrollSpyController_getRootNode = new WeakMap(), _ScrollSpyController_getHash = new WeakMap(), _ScrollSpyController_onIntersection = new WeakMap(), _ScrollSpyController_initializing = new WeakMap(), _ScrollSpyController_instances = new WeakSet(), _ScrollSpyController_linkChildren_get = function _ScrollSpyController_linkChildren_get() {
+    if (isServer) {
+        return [];
+    }
+    else {
+        return Array.from(this.host.querySelectorAll(__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')))
+            .filter(__classPrivateFieldGet(this, _ScrollSpyController_getHash, "f"));
+    }
+}, _ScrollSpyController_initIo = async function _ScrollSpyController_initIo() {
     const rootNode = __classPrivateFieldGet(this, _ScrollSpyController_getRootNode, "f").call(this);
     if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {
         const { rootMargin, threshold, root } = this;
         __classPrivateFieldSet(this, _ScrollSpyController_io, new IntersectionObserver(r => __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_onIo).call(this, r), { root, rootMargin, threshold }), "f");
-        __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)
-            .map(x => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, x))
-            .filter((x) => !!x)
-            .map(x => rootNode.getElementById(x.replace('#', '')))
-            .filter((x) => !!x)
-            .forEach(target => __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.observe(target));
+        for (const link of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
+            const id = __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, link)?.replace('#', '');
+            if (id) {
+                const target = document.getElementById(id);
+                if (target) {
+                    __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.observe(target);
+                    __classPrivateFieldGet(this, _ScrollSpyController_linkTargetMap, "f").set(link, target);
+                }
+            }
+        }
     }
 }, _ScrollSpyController_markPassed = function _ScrollSpyController_markPassed(link, force) {
     if (force) {
@@ -98,6 +118,16 @@ _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttrib
     for (const child of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
         child.toggleAttribute(__classPrivateFieldGet(this, _ScrollSpyController_activeAttribute, "f"), child === link);
     }
+}, _ScrollSpyController_activateHash = async function _ScrollSpyController_activateHash() {
+    const links = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get);
+    const { hash } = location;
+    if (!hash) {
+        this.setActive(links.at(0) ?? null);
+    }
+    else {
+        await __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_nextIntersection).call(this);
+        this.setActive(links.find(x => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, x) === hash) ?? null);
+    }
 }, _ScrollSpyController_nextIntersection = async function _ScrollSpyController_nextIntersection() {
     __classPrivateFieldSet(this, _ScrollSpyController_intersected, false, "f");
     // safeguard the loop
@@ -119,5 +149,41 @@ _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttrib
         __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, last ?? __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(0));
     }
     __classPrivateFieldSet(this, _ScrollSpyController_intersected, true, "f");
+    __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").clear();
+    for (const entry of entries) {
+        if (entry.isIntersecting) {
+            __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").add(entry.target);
+        }
+    }
+    if (__classPrivateFieldGet(this, _ScrollSpyController_initializing, "f")) {
+        const ints = entries?.filter(x => x.isIntersecting) ?? [];
+        if (__classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").size > 0) {
+            const [{ target = null } = {}] = ints;
+            const { id } = target ?? {};
+            if (id) {
+                const link = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).find(link => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, link) === `#${id}`);
+                if (link) {
+                    __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
+                }
+            }
+        }
+        __classPrivateFieldSet(this, _ScrollSpyController_initializing, false, "f");
+    }
+    __classPrivateFieldGet(this, _ScrollSpyController_onIntersection, "f")?.call(this);
 };
+_ScrollSpyController_instances_1 = { value: new Set };
+(() => {
+    addEventListener('scroll', () => {
+        if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {
+            __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+                __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(ssc, __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(-1));
+            });
+        }
+    }, { passive: true });
+    addEventListener('hashchange', () => {
+        __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+            __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_activateHash).call(ssc);
+        });
+    });
+})();
 //# sourceMappingURL=scroll-spy-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
index b0e31b2..6dfbad3 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  #tagNames: string[];\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n  #rootMargin?: string;\n  #threshold: number | number[];\n\n  #getRootNode: () => Node;\n  #getHash: (el: Element) => string | null;\n\n  get #linkChildren(): Element[] {\n    return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n        .filter(this.#getHash);\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode();\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n  }\n\n  hostConnected(): void {\n    this.#initIo();\n  }\n\n  #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      this.#linkChildren\n          .map(x => this.#getHash(x))\n          .filter((x): x is string => !!x)\n          .map(x => rootNode.getElementById(x.replace('#', '')))\n          .filter((x): x is HTMLElement => !!x)\n          .forEach(target => this.#io?.observe(target));\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n\n  /**\n   * Optional callback for when an intersection occurs\n   */\n  onIntersection?(): void;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  static #instances = new Set<ScrollSpyController>;\n\n  static {\n    addEventListener('scroll', () => {\n      if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {\n        this.#instances.forEach(ssc => {\n          ssc.#setActive(ssc.#linkChildren.at(-1));\n        });\n      }\n    }, { passive: true });\n    addEventListener('hashchange', () => {\n      this.#instances.forEach(ssc => {\n        ssc.#activateHash();\n      });\n    });\n  }\n\n  #tagNames: string[];\n\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n\n  #rootMargin?: string;\n\n  #threshold: number | number[];\n\n  #intersectingTargets = new Set<Element>();\n\n  #linkTargetMap = new Map<Element, Element | null>();\n\n  #getRootNode: () => Node;\n\n  #getHash: (el: Element) => string | null;\n\n  #onIntersection?: () => void;\n\n  get #linkChildren(): Element[] {\n    if (isServer) {\n      return [];\n    } else {\n      return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n          .filter(this.#getHash);\n    }\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode();\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n    this.#onIntersection = options?.onIntersection;\n  }\n\n  hostConnected(): void {\n    ScrollSpyController.#instances.add(this);\n    this.#initIo();\n  }\n\n  hostDisconnected(): void {\n    ScrollSpyController.#instances.delete(this);\n    this.#io?.disconnect();\n  }\n\n  #initializing = true;\n\n  async #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      for (const link of this.#linkChildren) {\n        const id = this.#getHash(link)?.replace('#', '');\n        if (id) {\n          const target = document.getElementById(id);\n          if (target) {\n            this.#io?.observe(target);\n            this.#linkTargetMap.set(link, target);\n          }\n        }\n      }\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #activateHash() {\n    const links = this.#linkChildren;\n    const { hash } = location;\n    if (!hash) {\n      this.setActive(links.at(0) ?? null);\n    } else {\n      await this.#nextIntersection();\n      this.setActive(links.find(x => this.#getHash(x) === hash) ?? null);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n    this.#intersectingTargets.clear();\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        this.#intersectingTargets.add(entry.target);\n      }\n    }\n    if (this.#initializing) {\n      const ints = entries?.filter(x => x.isIntersecting) ?? [];\n      if (this.#intersectingTargets.size > 0) {\n        const [{ target = null } = {}] = ints;\n        const { id } = target ?? {};\n        if (id) {\n          const link = this.#linkChildren.find(link => this.#getHash(link) === `#${id}`);\n          if (link) {\n            this.#setActive(link);\n          }\n        }\n      }\n      this.#initializing = false;\n    }\n    this.#onIntersection?.();\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/LICENSE.txt b/node_modules/@patternfly/pfe-core/package/LICENSE.txt
new file mode 100644
index 0000000..8405772
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/LICENSE.txt
@@ -0,0 +1,19 @@
+Copyright 2021 Red Hat, Inc.
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/node_modules/@patternfly/pfe-core/package/README.md b/node_modules/@patternfly/pfe-core/package/README.md
new file mode 100644
index 0000000..1a69102
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/README.md
@@ -0,0 +1,33 @@
+# `@patternfly/pfe-core`
+
+Utilities for building PatternFly elements.
+
+## Controllers
+
+- `CascadeController` - cascades configured properties/attributes to child elements
+- `ColorContextController` - enables colour context detection
+- `CssVariableController` - caches computed styles
+- `LightDOMController` - controls a light-DOM mutation observer
+- `Logger` - logging utilities
+- `PerfController` - measures element upgrading performance
+- `PropertyObserverController` - caches set values for observed properties until element is updated
+- `SlotController` - utilities for managing slots and slotted content
+
+## Decorators
+
+- `@bound` - binds a decorated method to the object instance
+- `@cascades` - cascades the decorated property to configured light and shadow child elements
+- `@initializer` - executes a decorated method when the element upgrades and on DOM mutations (opt-out)
+- `@observed` - runs a callback when the decorated property changes
+- `@time` - tracks the time a method takes to complete using the [performance 
+  API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)
+- `@trace` - debug decorator which logs the name and result of a class method whenever it runs
+
+## Directives
+
+- `when` - element-position directive which adds or removes an element depending on a condition
+
+## Functions
+
+- `debounce` - debounce a function
+- `getRandomId` - generate a random element ID, optionally with a given prefix
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.d.ts
new file mode 100644
index 0000000..802086a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.d.ts
@@ -0,0 +1,99 @@
+import type { ReactiveControllerHost } from 'lit';
+import { type ATFocusControllerOptions, ATFocusController } from './at-focus-controller.js';
+import { nothing } from 'lit';
+export interface ActivedescendantControllerOptions<Item extends HTMLElement> extends ATFocusControllerOptions<Item> {
+    /**
+     * Returns a reference to the element which acts as the assistive technology container for
+     * the items. In the case of a combobox, this is the input element.
+     */
+    getActiveDescendantContainer(): HTMLElement | null;
+    /**
+     * Optional callback to control the assistive technology focus behavior of items.
+     * By default, ActivedescendantController will not do anything special to items when they receive
+     * assistive technology focus, and will only set the `activedescendant` property on the container.
+     * If you provide this callback, ActivedescendantController will call it on your item with the
+     * active state. You may use this to set active styles.
+     */
+    setItemActive?(item: Item, active: boolean): void;
+    /**
+     * Optional callback to retrieve the value from an option element.
+     * By default, retrieves the `value` attribute, or the text content.
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement
+     */
+    getItemValue?(item: Item): string;
+}
+/**
+ * Implements activedescendant pattern, as described in WAI-ARIA practices,
+ * [Managing Focus in Composites Using aria-activedescendant][ad]
+ *
+ * The steps for using the aria-activedescendant method of managing focus are as follows.
+ *
+ *  - When the container element that has a role that supports aria-activedescendant is loaded
+ *    or created, ensure that:
+ *    - The container element is included in the tab sequence as described in
+ *      Keyboard Navigation Between Components or is a focusable element of a composite
+ *      that implements a roving tabindex.
+ *    - It has aria-activedescendant="IDREF" where IDREF is the ID of the element within
+ *      the container that should be identified as active when the widget receives focus.
+ *      The referenced element needs to meet the DOM relationship requirements described below.
+ *  - When the container element receives DOM focus, draw a visual focus indicator on the active
+ *    element and ensure the active element is scrolled into view.
+ *  - When the composite widget contains focus and the user presses a navigation key that moves
+ *    focus within the widget, such as an arrow key:
+ *    - Change the value of aria-activedescendant on the container to refer to the element
+ *      that should be reported to assistive technologies as active.
+ *    - Move the visual focus indicator and, if necessary, scrolled the active element into view.
+ *  - If the design calls for a specific element to be focused the next time a user moves focus
+ *    into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to
+ *    that target element when the container loses focus. If it is not, set aria-activedescendant
+ *    to refer to the target element.
+ *
+ * The specification for aria-activedescendant places important restrictions on the
+ * DOM relationship between the focused element that has the aria-activedescendant attribute
+ * and the element referenced as active by the value of the attribute.
+ * One of the following three conditions must be met.
+ *
+ * 1. The element referenced as active is a DOM descendant of the focused referencing element.
+ * 2. The focused referencing element has a value specified for the aria-owns property that
+ *    includes the ID of the element referenced as active.
+ * 3. The focused referencing element has role of combobox, textbox, or searchbox
+ *    and has aria-controls property referring to an element with a role that supports
+ *    aria-activedescendant and either:
+ *   1. The element referenced as active is a descendant of the controlled element.
+ *   2. The controlled element has a value specified for the aria-owns property that includes
+ *      the ID of the element referenced as active.
+ *
+ * [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant
+ */
+export declare class ActivedescendantController<Item extends HTMLElement = HTMLElement> extends ATFocusController<Item> {
+    #private;
+    host: ReactiveControllerHost;
+    protected options: ActivedescendantControllerOptions<Item>;
+    /**
+     * When true, the browser supports cross-root ARIA such that the controller does not need
+     * to copy item nodes into the controlling nodes' root
+     */
+    static get supportsCrossRootActiveDescendant(): boolean;
+    static of<Item extends HTMLElement>(host: ReactiveControllerHost, options: ActivedescendantControllerOptions<Item>): ActivedescendantController<Item>;
+    get atFocusedItemIndex(): number;
+    /**
+     * Rather than setting DOM focus, applies the `aria-activedescendant` attribute,
+     * using AriaIDLAttributes for cross-root aria, if supported by the browser
+     * @param item item
+     */
+    set atFocusedItemIndex(index: number);
+    protected get controlsElements(): HTMLElement[];
+    protected set controlsElements(elements: HTMLElement[]);
+    /** All items */
+    get items(): Item[];
+    /**
+     * Sets the list of items and activates the next activatable item after the current one
+     * @param items tabindex items
+     */
+    set items(items: Item[]);
+    private constructor();
+    protected initItems(): void;
+    hostDisconnected(): void;
+    protected onKeydown(event: KeyboardEvent): void;
+    renderItemsToShadowRoot(): typeof nothing | Node[];
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js
new file mode 100644
index 0000000..2a10c41
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js
@@ -0,0 +1,230 @@
+var _ActivedescendantController_instances, _ActivedescendantController_lightToShadowMap, _ActivedescendantController_shadowToLightMap, _ActivedescendantController_noCloneSet, _ActivedescendantController_controlsElements, _ActivedescendantController_observing, _ActivedescendantController_listMO, _ActivedescendantController_attrMO, _ActivedescendantController_syncAttr, _ActivedescendantController_onItemsDOMChange, _ActivedescendantController_onItemAttributeChange;
+import { __classPrivateFieldGet, __classPrivateFieldSet, __decorate } from "tslib";
+import { ATFocusController } from './at-focus-controller.js';
+import { isServer, nothing } from 'lit';
+import { getRandomId } from '../functions/random.js';
+import { bound } from '../decorators/bound.js';
+/**
+ * Implements activedescendant pattern, as described in WAI-ARIA practices,
+ * [Managing Focus in Composites Using aria-activedescendant][ad]
+ *
+ * The steps for using the aria-activedescendant method of managing focus are as follows.
+ *
+ *  - When the container element that has a role that supports aria-activedescendant is loaded
+ *    or created, ensure that:
+ *    - The container element is included in the tab sequence as described in
+ *      Keyboard Navigation Between Components or is a focusable element of a composite
+ *      that implements a roving tabindex.
+ *    - It has aria-activedescendant="IDREF" where IDREF is the ID of the element within
+ *      the container that should be identified as active when the widget receives focus.
+ *      The referenced element needs to meet the DOM relationship requirements described below.
+ *  - When the container element receives DOM focus, draw a visual focus indicator on the active
+ *    element and ensure the active element is scrolled into view.
+ *  - When the composite widget contains focus and the user presses a navigation key that moves
+ *    focus within the widget, such as an arrow key:
+ *    - Change the value of aria-activedescendant on the container to refer to the element
+ *      that should be reported to assistive technologies as active.
+ *    - Move the visual focus indicator and, if necessary, scrolled the active element into view.
+ *  - If the design calls for a specific element to be focused the next time a user moves focus
+ *    into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to
+ *    that target element when the container loses focus. If it is not, set aria-activedescendant
+ *    to refer to the target element.
+ *
+ * The specification for aria-activedescendant places important restrictions on the
+ * DOM relationship between the focused element that has the aria-activedescendant attribute
+ * and the element referenced as active by the value of the attribute.
+ * One of the following three conditions must be met.
+ *
+ * 1. The element referenced as active is a DOM descendant of the focused referencing element.
+ * 2. The focused referencing element has a value specified for the aria-owns property that
+ *    includes the ID of the element referenced as active.
+ * 3. The focused referencing element has role of combobox, textbox, or searchbox
+ *    and has aria-controls property referring to an element with a role that supports
+ *    aria-activedescendant and either:
+ *   1. The element referenced as active is a descendant of the controlled element.
+ *   2. The controlled element has a value specified for the aria-owns property that includes
+ *      the ID of the element referenced as active.
+ *
+ * [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant
+ */
+export class ActivedescendantController extends ATFocusController {
+    /**
+     * When true, the browser supports cross-root ARIA such that the controller does not need
+     * to copy item nodes into the controlling nodes' root
+     */
+    static get supportsCrossRootActiveDescendant() {
+        return !isServer && 'ariaActiveDescendantElement' in HTMLElement.prototype;
+    }
+    static of(host, options) {
+        return new ActivedescendantController(host, options);
+    }
+    get atFocusedItemIndex() {
+        return super.atFocusedItemIndex;
+    }
+    /**
+     * Rather than setting DOM focus, applies the `aria-activedescendant` attribute,
+     * using AriaIDLAttributes for cross-root aria, if supported by the browser
+     * @param item item
+     */
+    set atFocusedItemIndex(index) {
+        super.atFocusedItemIndex = index;
+        const item = this._items.at(this.atFocusedItemIndex);
+        for (const _item of this.items) {
+            this.options.setItemActive?.(_item, _item === item);
+        }
+        const container = this.options.getActiveDescendantContainer();
+        if (!ActivedescendantController.supportsCrossRootActiveDescendant) {
+            container?.setAttribute('aria-activedescendant', item?.id ?? '');
+        }
+        else if (container) {
+            container.ariaActiveDescendantElement = item ?? null;
+        }
+        this.host.requestUpdate();
+    }
+    get controlsElements() {
+        return __classPrivateFieldGet(this, _ActivedescendantController_controlsElements, "f");
+    }
+    set controlsElements(elements) {
+        for (const old of __classPrivateFieldGet(this, _ActivedescendantController_controlsElements, "f")) {
+            old?.removeEventListener('keydown', this.onKeydown);
+        }
+        __classPrivateFieldSet(this, _ActivedescendantController_controlsElements, elements, "f");
+        for (const element of __classPrivateFieldGet(this, _ActivedescendantController_controlsElements, "f")) {
+            element.addEventListener('keydown', this.onKeydown);
+        }
+    }
+    /** All items */
+    get items() {
+        return this._items;
+    }
+    /**
+     * Sets the list of items and activates the next activatable item after the current one
+     * @param items tabindex items
+     */
+    set items(items) {
+        const container = this.options.getItemsContainer?.() ?? this.host;
+        if (!(container instanceof HTMLElement)) {
+            throw new Error('items container must be an HTMLElement');
+        }
+        this.itemsContainerElement = container;
+        const { supportsCrossRootActiveDescendant } = ActivedescendantController;
+        if (supportsCrossRootActiveDescendant
+            || [container] // all nodes are in the same root
+                .concat(this.controlsElements)
+                .concat(items)
+                .every((node, _, a) => node.getRootNode() === a[0].getRootNode())) {
+            this._items = items.map(x => {
+                if (!supportsCrossRootActiveDescendant) {
+                    x.id || (x.id = getRandomId());
+                }
+                return x;
+            });
+        }
+        else {
+            this._items = items?.map((item) => {
+                item.removeAttribute('tabindex');
+                if (container.contains(item)) {
+                    item.id || (item.id = getRandomId());
+                    __classPrivateFieldGet(this, _ActivedescendantController_noCloneSet, "f").add(item);
+                    __classPrivateFieldGet(this, _ActivedescendantController_shadowToLightMap, "f").set(item, item);
+                    return item;
+                }
+                else {
+                    const clone = item.cloneNode(true);
+                    clone.id = getRandomId();
+                    __classPrivateFieldGet(this, _ActivedescendantController_lightToShadowMap, "f").set(item, clone);
+                    __classPrivateFieldGet(this, _ActivedescendantController_shadowToLightMap, "f").set(clone, item);
+                    // Though efforts were taken to disconnect
+                    // this observer, it may still be a memory leak
+                    __classPrivateFieldGet(this, _ActivedescendantController_attrMO, "f").observe(clone, { attributes: true });
+                    __classPrivateFieldGet(this, _ActivedescendantController_attrMO, "f").observe(item, { attributes: true });
+                    return clone;
+                }
+            });
+        }
+    }
+    constructor(host, options) {
+        var _a;
+        super(host, options);
+        _ActivedescendantController_instances.add(this);
+        this.host = host;
+        this.options = options;
+        /** Maps from original element to shadow DOM clone */
+        _ActivedescendantController_lightToShadowMap.set(this, new WeakMap());
+        /** Maps from shadow DOM clone to original element */
+        _ActivedescendantController_shadowToLightMap.set(this, new WeakMap());
+        /** Set of item which should not be cloned */
+        _ActivedescendantController_noCloneSet.set(this, new WeakSet());
+        /** Element which controls the list i.e. combobox */
+        _ActivedescendantController_controlsElements.set(this, []);
+        _ActivedescendantController_observing.set(this, false);
+        _ActivedescendantController_listMO.set(this, new MutationObserver(records => __classPrivateFieldGet(this, _ActivedescendantController_instances, "m", _ActivedescendantController_onItemsDOMChange).call(this, records)));
+        _ActivedescendantController_attrMO.set(this, new MutationObserver(records => __classPrivateFieldGet(this, _ActivedescendantController_instances, "m", _ActivedescendantController_onItemAttributeChange).call(this, records)));
+        (_a = this.options).getItemValue ?? (_a.getItemValue = function () {
+            return this.value;
+        });
+    }
+    ;
+    ;
+    initItems() {
+        __classPrivateFieldGet(this, _ActivedescendantController_attrMO, "f").disconnect();
+        super.initItems();
+        this.controlsElements = this.options.getControlsElements?.() ?? [];
+        if (!__classPrivateFieldGet(this, _ActivedescendantController_observing, "f") && this.itemsContainerElement && this.itemsContainerElement.isConnected) {
+            __classPrivateFieldGet(this, _ActivedescendantController_listMO, "f").observe(this.itemsContainerElement, { childList: true });
+            __classPrivateFieldSet(this, _ActivedescendantController_observing, true, "f");
+        }
+    }
+    hostDisconnected() {
+        this.controlsElements = [];
+        __classPrivateFieldSet(this, _ActivedescendantController_observing, false, "f");
+        __classPrivateFieldGet(this, _ActivedescendantController_listMO, "f").disconnect();
+        __classPrivateFieldGet(this, _ActivedescendantController_attrMO, "f").disconnect();
+    }
+    onKeydown(event) {
+        if (!event.ctrlKey
+            && !event.altKey
+            && !event.metaKey
+            && !!this.atFocusableItems.length) {
+            super.onKeydown(event);
+        }
+        ;
+    }
+    renderItemsToShadowRoot() {
+        if (ActivedescendantController.supportsCrossRootActiveDescendant) {
+            return nothing;
+        }
+        else {
+            return this.items?.filter(x => !__classPrivateFieldGet(this, _ActivedescendantController_noCloneSet, "f").has(x));
+        }
+    }
+}
+_ActivedescendantController_lightToShadowMap = new WeakMap(), _ActivedescendantController_shadowToLightMap = new WeakMap(), _ActivedescendantController_noCloneSet = new WeakMap(), _ActivedescendantController_controlsElements = new WeakMap(), _ActivedescendantController_observing = new WeakMap(), _ActivedescendantController_listMO = new WeakMap(), _ActivedescendantController_attrMO = new WeakMap(), _ActivedescendantController_instances = new WeakSet(), _ActivedescendantController_syncAttr = function _ActivedescendantController_syncAttr(attributeName, fromNode) {
+    const toNode = __classPrivateFieldGet(this, _ActivedescendantController_shadowToLightMap, "f").get(fromNode)
+        ?? __classPrivateFieldGet(this, _ActivedescendantController_lightToShadowMap, "f").get(fromNode);
+    const newVal = fromNode.getAttribute(attributeName);
+    const oldVal = toNode?.getAttribute(attributeName);
+    if (!fromNode.hasAttribute(attributeName)) {
+        toNode?.removeAttribute(attributeName);
+    }
+    else if (oldVal !== newVal) {
+        toNode?.setAttribute(attributeName, newVal);
+    }
+}, _ActivedescendantController_onItemsDOMChange = function _ActivedescendantController_onItemsDOMChange(records) {
+    for (const { removedNodes } of records) {
+        for (const removed of removedNodes) {
+            __classPrivateFieldGet(this, _ActivedescendantController_lightToShadowMap, "f").get(removed)?.remove();
+            __classPrivateFieldGet(this, _ActivedescendantController_lightToShadowMap, "f").delete(removed);
+        }
+    }
+}, _ActivedescendantController_onItemAttributeChange = function _ActivedescendantController_onItemAttributeChange(records) {
+    for (const { target, attributeName } of records) {
+        if (attributeName) {
+            __classPrivateFieldGet(this, _ActivedescendantController_instances, "m", _ActivedescendantController_syncAttr).call(this, attributeName, target);
+        }
+    }
+};
+__decorate([
+    bound
+], ActivedescendantController.prototype, "onKeydown", null);
+//# sourceMappingURL=activedescendant-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js.map
new file mode 100644
index 0000000..d29c284
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/activedescendant-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"activedescendant-controller.js","sourceRoot":"","sources":["activedescendant-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveControllerHost } from 'lit';\n\nimport { type ATFocusControllerOptions, ATFocusController } from './at-focus-controller.js';\n\nimport { isServer, nothing } from 'lit';\nimport { getRandomId } from '../functions/random.js';\nimport { bound } from '../decorators/bound.js';\n\nexport interface ActivedescendantControllerOptions<\n  Item extends HTMLElement\n> extends ATFocusControllerOptions<Item> {\n  /**\n   * Returns a reference to the element which acts as the assistive technology container for\n   * the items. In the case of a combobox, this is the input element.\n   */\n  getActiveDescendantContainer(): HTMLElement | null;\n  /**\n   * Optional callback to control the assistive technology focus behavior of items.\n   * By default, ActivedescendantController will not do anything special to items when they receive\n   * assistive technology focus, and will only set the `activedescendant` property on the container.\n   * If you provide this callback, ActivedescendantController will call it on your item with the\n   * active state. You may use this to set active styles.\n   */\n  setItemActive?(item: Item, active: boolean): void;\n  /**\n   * Optional callback to retrieve the value from an option element.\n   * By default, retrieves the `value` attribute, or the text content.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n   */\n  getItemValue?(item: Item): string;\n}\n\n/**\n * Implements activedescendant pattern, as described in WAI-ARIA practices,\n * [Managing Focus in Composites Using aria-activedescendant][ad]\n *\n * The steps for using the aria-activedescendant method of managing focus are as follows.\n *\n *  - When the container element that has a role that supports aria-activedescendant is loaded\n *    or created, ensure that:\n *    - The container element is included in the tab sequence as described in\n *      Keyboard Navigation Between Components or is a focusable element of a composite\n *      that implements a roving tabindex.\n *    - It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\n *      the container that should be identified as active when the widget receives focus.\n *      The referenced element needs to meet the DOM relationship requirements described below.\n *  - When the container element receives DOM focus, draw a visual focus indicator on the active\n *    element and ensure the active element is scrolled into view.\n *  - When the composite widget contains focus and the user presses a navigation key that moves\n *    focus within the widget, such as an arrow key:\n *    - Change the value of aria-activedescendant on the container to refer to the element\n *      that should be reported to assistive technologies as active.\n *    - Move the visual focus indicator and, if necessary, scrolled the active element into view.\n *  - If the design calls for a specific element to be focused the next time a user moves focus\n *    into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\n *    that target element when the container loses focus. If it is not, set aria-activedescendant\n *    to refer to the target element.\n *\n * The specification for aria-activedescendant places important restrictions on the\n * DOM relationship between the focused element that has the aria-activedescendant attribute\n * and the element referenced as active by the value of the attribute.\n * One of the following three conditions must be met.\n *\n * 1. The element referenced as active is a DOM descendant of the focused referencing element.\n * 2. The focused referencing element has a value specified for the aria-owns property that\n *    includes the ID of the element referenced as active.\n * 3. The focused referencing element has role of combobox, textbox, or searchbox\n *    and has aria-controls property referring to an element with a role that supports\n *    aria-activedescendant and either:\n *   1. The element referenced as active is a descendant of the controlled element.\n *   2. The controlled element has a value specified for the aria-owns property that includes\n *      the ID of the element referenced as active.\n *\n * [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant\n */\nexport class ActivedescendantController<\n  Item extends HTMLElement = HTMLElement\n> extends ATFocusController<Item> {\n  /**\n   * When true, the browser supports cross-root ARIA such that the controller does not need\n   * to copy item nodes into the controlling nodes' root\n   */\n  public static get supportsCrossRootActiveDescendant(): boolean {\n    return !isServer && 'ariaActiveDescendantElement' in HTMLElement.prototype;\n  }\n\n  static of<Item extends HTMLElement>(\n    host: ReactiveControllerHost,\n    options: ActivedescendantControllerOptions<Item>,\n  ): ActivedescendantController<Item> {\n    return new ActivedescendantController(host, options);\n  }\n\n  /** Maps from original element to shadow DOM clone */\n  #lightToShadowMap = new WeakMap<Item, Item>();\n\n  /** Maps from shadow DOM clone to original element */\n  #shadowToLightMap = new WeakMap<Item, Item>();\n\n  /** Set of item which should not be cloned */\n  #noCloneSet = new WeakSet<Item>();\n\n  /** Element which controls the list i.e. combobox */\n  #controlsElements: HTMLElement[] = [];\n\n  #observing = false;\n\n  #listMO = new MutationObserver(records => this.#onItemsDOMChange(records));\n\n  #attrMO = new MutationObserver(records => this.#onItemAttributeChange(records));\n\n  #syncAttr(attributeName: string, fromNode: Item) {\n    const toNode = this.#shadowToLightMap.get(fromNode as Item)\n                ?? this.#lightToShadowMap.get(fromNode as Item);\n    const newVal = fromNode.getAttribute(attributeName);\n    const oldVal = toNode?.getAttribute(attributeName);\n    if (!fromNode.hasAttribute(attributeName)) {\n      toNode?.removeAttribute(attributeName);\n    } else if (oldVal !== newVal) {\n      toNode?.setAttribute(attributeName, newVal!);\n    }\n  }\n\n  get atFocusedItemIndex(): number {\n    return super.atFocusedItemIndex;\n  }\n\n  /**\n   * Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\n   * using AriaIDLAttributes for cross-root aria, if supported by the browser\n   * @param item item\n   */\n  set atFocusedItemIndex(index: number) {\n    super.atFocusedItemIndex = index;\n    const item = this._items.at(this.atFocusedItemIndex);\n    for (const _item of this.items) {\n      this.options.setItemActive?.(_item, _item === item);\n    }\n    const container = this.options.getActiveDescendantContainer();\n    if (!ActivedescendantController.supportsCrossRootActiveDescendant) {\n      container?.setAttribute('aria-activedescendant', item?.id ?? '');\n    } else if (container) {\n      container.ariaActiveDescendantElement = item ?? null;\n    }\n    this.host.requestUpdate();\n  }\n\n  protected get controlsElements(): HTMLElement[] {\n    return this.#controlsElements;\n  }\n\n  protected set controlsElements(elements: HTMLElement[]) {\n    for (const old of this.#controlsElements) {\n      old?.removeEventListener('keydown', this.onKeydown);\n    }\n    this.#controlsElements = elements;\n    for (const element of this.#controlsElements) {\n      element.addEventListener('keydown', this.onKeydown);\n    }\n  }\n\n  /** All items */\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * Sets the list of items and activates the next activatable item after the current one\n   * @param items tabindex items\n   */\n  override set items(items: Item[]) {\n    const container = this.options.getItemsContainer?.() ?? this.host;\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('items container must be an HTMLElement');\n    }\n    this.itemsContainerElement = container;\n    const { supportsCrossRootActiveDescendant } = ActivedescendantController;\n    if (supportsCrossRootActiveDescendant\n        || [container] // all nodes are in the same root\n            .concat(this.controlsElements)\n            .concat(items)\n            .every((node, _, a) => node.getRootNode() === a[0].getRootNode())) {\n      this._items = items.map(x => {\n        if (!supportsCrossRootActiveDescendant) {\n          x.id ||= getRandomId();\n        }\n        return x;\n      });\n    } else {\n      this._items = items?.map((item: Item) => {\n        item.removeAttribute('tabindex');\n        if (container.contains(item)) {\n          item.id ||= getRandomId();\n          this.#noCloneSet.add(item);\n          this.#shadowToLightMap.set(item, item);\n          return item;\n        } else {\n          const clone = item.cloneNode(true) as Item;\n          clone.id = getRandomId();\n          this.#lightToShadowMap.set(item, clone);\n          this.#shadowToLightMap.set(clone, item);\n          // Though efforts were taken to disconnect\n          // this observer, it may still be a memory leak\n          this.#attrMO.observe(clone, { attributes: true });\n          this.#attrMO.observe(item, { attributes: true });\n          return clone;\n        }\n      });\n    }\n  }\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    protected options: ActivedescendantControllerOptions<Item>,\n  ) {\n    super(host, options);\n    this.options.getItemValue ??= function(this: Item) {\n      return (this as unknown as HTMLOptionElement).value;\n    };\n  }\n\n  #onItemsDOMChange(records: MutationRecord[]) {\n    for (const { removedNodes } of records) {\n      for (const removed of removedNodes as NodeListOf<Item>) {\n        this.#lightToShadowMap.get(removed)?.remove();\n        this.#lightToShadowMap.delete(removed);\n      }\n    }\n  };\n\n  #onItemAttributeChange(records: MutationRecord[]) {\n    for (const { target, attributeName } of records) {\n      if (attributeName) {\n        this.#syncAttr(attributeName, target as Item);\n      }\n    }\n  };\n\n  protected override initItems(): void {\n    this.#attrMO.disconnect();\n    super.initItems();\n    this.controlsElements = this.options.getControlsElements?.() ?? [];\n    if (!this.#observing && this.itemsContainerElement && this.itemsContainerElement.isConnected) {\n      this.#listMO.observe(this.itemsContainerElement, { childList: true });\n      this.#observing = true;\n    }\n  }\n\n  hostDisconnected(): void {\n    this.controlsElements = [];\n    this.#observing = false;\n    this.#listMO.disconnect();\n    this.#attrMO.disconnect();\n  }\n\n  @bound\n  protected override onKeydown(event: KeyboardEvent): void {\n    if (!event.ctrlKey\n        && !event.altKey\n        && !event.metaKey\n        && !!this.atFocusableItems.length) {\n      super.onKeydown(event);\n    };\n  }\n\n  public renderItemsToShadowRoot(): typeof nothing | Node[] {\n    if (ActivedescendantController.supportsCrossRootActiveDescendant) {\n      return nothing;\n    } else {\n      return this.items?.filter(x => !this.#noCloneSet.has(x));\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.d.ts
new file mode 100644
index 0000000..38e83a4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.d.ts
@@ -0,0 +1,56 @@
+import { type ReactiveControllerHost } from 'lit';
+export interface ATFocusControllerOptions<Item extends HTMLElement> {
+    /**
+     * Callback to return the list of items
+     */
+    getItems(): Item[];
+    /**
+     * Callback to return the listbox container element
+     */
+    getItemsContainer?(): HTMLElement | null;
+    /**
+     * Callback to return the direction of navigation in the list box.
+     */
+    getOrientation?(): 'horizontal' | 'vertical' | 'both' | 'undefined';
+    /**
+     * Function returning the DOM nodes which are accessibility controllers of item container
+     * e.g. the button toggle and combobox input which control a listbox.
+     */
+    getControlsElements?(): HTMLElement[];
+}
+export declare abstract class ATFocusController<Item extends HTMLElement> {
+    #private;
+    host: ReactiveControllerHost;
+    protected options: ATFocusControllerOptions<Item>;
+    protected _items: Item[];
+    /** All items */
+    abstract items: Item[];
+    /**
+     * Index of the Item which currently has assistive technology focus
+     * Set this to change focus. Setting to an out-of-bounds value will
+     * wrap around to the other side of the list.
+     */
+    get atFocusedItemIndex(): number;
+    set atFocusedItemIndex(index: number);
+    /** Elements which control the items container e.g. a combobox input */
+    protected get controlsElements(): HTMLElement[];
+    /** All items which are able to receive assistive technology focus */
+    get atFocusableItems(): Item[];
+    /** The element containing focusable items, e.g. a listbox */
+    get itemsContainerElement(): HTMLElement | null;
+    set itemsContainerElement(container: HTMLElement | null);
+    constructor(host: ReactiveControllerHost, options: ATFocusControllerOptions<Item>);
+    /**
+     * Initialize the items and itemsContainerElement fields
+     */
+    protected initItems(): void;
+    hostConnected(): void;
+    hostDisconnected(): void;
+    hostUpdate(): void;
+    /**
+     * Override and conditionally call `super.onKeydown` to filter out keyboard events
+     * which should not result in a focus change. Ensure that subclass' method is bound
+     * @param event keyboard event
+     */
+    protected onKeydown(event: KeyboardEvent): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js
new file mode 100644
index 0000000..ba9af2b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js
@@ -0,0 +1,168 @@
+var _ATFocusController_instances, _ATFocusController_itemsContainerElement, _ATFocusController_atFocusedItemIndex, _ATFocusController_initContainer;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
+import { bound } from '../decorators/bound.js';
+function isATFocusableItem(el) {
+    return !!el
+        && el.ariaHidden !== 'true'
+        && !el.hasAttribute('inert')
+        && !el.hasAttribute('hidden');
+}
+export class ATFocusController {
+    /**
+     * Index of the Item which currently has assistive technology focus
+     * Set this to change focus. Setting to an out-of-bounds value will
+     * wrap around to the other side of the list.
+     */
+    get atFocusedItemIndex() {
+        return __classPrivateFieldGet(this, _ATFocusController_atFocusedItemIndex, "f");
+    }
+    set atFocusedItemIndex(index) {
+        const previousIndex = __classPrivateFieldGet(this, _ATFocusController_atFocusedItemIndex, "f");
+        const direction = index > previousIndex ? 1 : -1;
+        const { items, atFocusableItems } = this;
+        const itemsIndexOfLastATFocusableItem = items.indexOf(this.atFocusableItems.at(-1));
+        let itemToGainFocus = items.at(index);
+        let itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus);
+        if (atFocusableItems.length) {
+            let count = 0;
+            while (!itemToGainFocus || !itemToGainFocusIsFocusable && count++ <= 1000) {
+                if (index < 0) {
+                    index = itemsIndexOfLastATFocusableItem;
+                }
+                else if (index >= itemsIndexOfLastATFocusableItem) {
+                    index = 0;
+                }
+                else {
+                    index = index + direction;
+                }
+                itemToGainFocus = items.at(index);
+                itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus);
+            }
+            if (count >= 1000) {
+                throw new Error('Could not atFocusedItemIndex');
+            }
+        }
+        __classPrivateFieldSet(this, _ATFocusController_atFocusedItemIndex, index, "f");
+    }
+    /** Elements which control the items container e.g. a combobox input */
+    get controlsElements() {
+        return this.options.getControlsElements?.() ?? [];
+    }
+    /** All items which are able to receive assistive technology focus */
+    get atFocusableItems() {
+        return this._items.filter(isATFocusableItem);
+    }
+    /** The element containing focusable items, e.g. a listbox */
+    get itemsContainerElement() {
+        return __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f") ?? null;
+    }
+    set itemsContainerElement(container) {
+        if (container !== __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f")) {
+            __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f")?.removeEventListener('keydown', this.onKeydown);
+            __classPrivateFieldSet(this, _ATFocusController_itemsContainerElement, container, "f");
+            __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f")?.addEventListener('keydown', this.onKeydown);
+            this.host.requestUpdate();
+        }
+    }
+    constructor(host, options) {
+        _ATFocusController_instances.add(this);
+        this.host = host;
+        this.options = options;
+        _ATFocusController_itemsContainerElement.set(this, null);
+        _ATFocusController_atFocusedItemIndex.set(this, -1);
+        this._items = [];
+        this.host.updateComplete.then(() => this.initItems());
+    }
+    /**
+     * Initialize the items and itemsContainerElement fields
+     */
+    initItems() {
+        this.items = this.options.getItems();
+        this.itemsContainerElement ?? (this.itemsContainerElement = __classPrivateFieldGet(this, _ATFocusController_instances, "m", _ATFocusController_initContainer).call(this));
+    }
+    hostConnected() {
+        this.hostUpdate();
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f")?.removeEventListener('keydown', this.onKeydown);
+    }
+    hostUpdate() {
+        this.itemsContainerElement ?? (this.itemsContainerElement = __classPrivateFieldGet(this, _ATFocusController_instances, "m", _ATFocusController_initContainer).call(this));
+    }
+    /**
+     * Override and conditionally call `super.onKeydown` to filter out keyboard events
+     * which should not result in a focus change. Ensure that subclass' method is bound
+     * @param event keyboard event
+     */
+    onKeydown(event) {
+        const orientation = this.options.getOrientation?.() ?? __classPrivateFieldGet(this, _ATFocusController_itemsContainerElement, "f")
+            ?.getAttribute('aria-orientation');
+        const item = this._items.at(this.atFocusedItemIndex);
+        const horizontalOnly = orientation === 'horizontal'
+            || item?.tagName === 'SELECT'
+            || item?.getAttribute('role') === 'spinbutton';
+        const verticalOnly = orientation === 'vertical';
+        switch (event.key) {
+            case 'ArrowLeft':
+                if (verticalOnly) {
+                    return;
+                }
+                this.atFocusedItemIndex--;
+                event.stopPropagation();
+                event.preventDefault();
+                break;
+            case 'ArrowRight':
+                if (verticalOnly) {
+                    return;
+                }
+                this.atFocusedItemIndex++;
+                event.stopPropagation();
+                event.preventDefault();
+                break;
+            case 'ArrowUp':
+                if (horizontalOnly) {
+                    return;
+                }
+                this.atFocusedItemIndex--;
+                event.stopPropagation();
+                event.preventDefault();
+                break;
+            case 'ArrowDown':
+                if (horizontalOnly) {
+                    return;
+                }
+                this.atFocusedItemIndex++;
+                event.stopPropagation();
+                event.preventDefault();
+                break;
+            case 'Home':
+                if (!(event.target instanceof HTMLElement
+                    && (event.target.hasAttribute('aria-activedescendant')
+                        || event.target.ariaActiveDescendantElement))) {
+                    this.atFocusedItemIndex = 0;
+                    event.stopPropagation();
+                    event.preventDefault();
+                }
+                break;
+            case 'End':
+                if (!(event.target instanceof HTMLElement
+                    && (event.target.hasAttribute('aria-activedescendant')
+                        || event.target.ariaActiveDescendantElement))) {
+                    this.atFocusedItemIndex = this.items.length - 1;
+                    event.stopPropagation();
+                    event.preventDefault();
+                }
+                break;
+            default:
+                break;
+        }
+        this.host.requestUpdate();
+    }
+    ;
+}
+_ATFocusController_itemsContainerElement = new WeakMap(), _ATFocusController_atFocusedItemIndex = new WeakMap(), _ATFocusController_instances = new WeakSet(), _ATFocusController_initContainer = function _ATFocusController_initContainer() {
+    return this.options.getItemsContainer?.()
+        ?? (!isServer && this.host instanceof HTMLElement ? this.host : null);
+};
+//# sourceMappingURL=at-focus-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js.map
new file mode 100644
index 0000000..17b0fbf
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/at-focus-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"at-focus-controller.js","sourceRoot":"","sources":["at-focus-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveControllerHost } from 'lit';\nimport { bound } from '../decorators/bound.js';\n\nfunction isATFocusableItem(el: Element): el is HTMLElement {\n  return !!el\n      && el.ariaHidden !== 'true'\n      && !el.hasAttribute('inert')\n      && !el.hasAttribute('hidden');\n}\n\nexport interface ATFocusControllerOptions<Item extends HTMLElement> {\n  /**\n   * Callback to return the list of items\n   */\n  getItems(): Item[];\n  /**\n   * Callback to return the listbox container element\n   */\n  getItemsContainer?(): HTMLElement | null;\n  /**\n   * Callback to return the direction of navigation in the list box.\n   */\n  getOrientation?(): 'horizontal' | 'vertical' | 'both' | 'undefined';\n  /**\n   * Function returning the DOM nodes which are accessibility controllers of item container\n   * e.g. the button toggle and combobox input which control a listbox.\n   */\n  getControlsElements?(): HTMLElement[];\n}\n\nexport abstract class ATFocusController<Item extends HTMLElement> {\n  #itemsContainerElement: HTMLElement | null = null;\n\n  #atFocusedItemIndex = -1;\n\n  protected _items: Item[] = [];\n\n  /** All items */\n  abstract items: Item[];\n\n  /**\n   * Index of the Item which currently has assistive technology focus\n   * Set this to change focus. Setting to an out-of-bounds value will\n   * wrap around to the other side of the list.\n   */\n  get atFocusedItemIndex() {\n    return this.#atFocusedItemIndex;\n  }\n\n  set atFocusedItemIndex(index: number) {\n    const previousIndex = this.#atFocusedItemIndex;\n    const direction = index > previousIndex ? 1 : -1;\n    const { items, atFocusableItems } = this;\n    const itemsIndexOfLastATFocusableItem = items.indexOf(this.atFocusableItems.at(-1)!);\n    let itemToGainFocus = items.at(index);\n    let itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus!);\n    if (atFocusableItems.length) {\n      let count = 0;\n      while (!itemToGainFocus || !itemToGainFocusIsFocusable && count++ <= 1000) {\n        if (index < 0) {\n          index = itemsIndexOfLastATFocusableItem;\n        } else if (index >= itemsIndexOfLastATFocusableItem) {\n          index = 0;\n        } else {\n          index = index + direction;\n        }\n        itemToGainFocus = items.at(index);\n        itemToGainFocusIsFocusable = atFocusableItems.includes(itemToGainFocus!);\n      }\n      if (count >= 1000) {\n        throw new Error('Could not atFocusedItemIndex');\n      }\n    }\n    this.#atFocusedItemIndex = index;\n  }\n\n  /** Elements which control the items container e.g. a combobox input */\n  protected get controlsElements(): HTMLElement[] {\n    return this.options.getControlsElements?.() ?? [];\n  }\n\n  /** All items which are able to receive assistive technology focus */\n  get atFocusableItems(): Item[] {\n    return this._items.filter(isATFocusableItem);\n  }\n\n  /** The element containing focusable items, e.g. a listbox */\n  get itemsContainerElement() {\n    return this.#itemsContainerElement ?? null;\n  }\n\n  set itemsContainerElement(container: HTMLElement | null) {\n    if (container !== this.#itemsContainerElement) {\n      this.#itemsContainerElement?.removeEventListener('keydown', this.onKeydown);\n      this.#itemsContainerElement = container;\n      this.#itemsContainerElement?.addEventListener('keydown', this.onKeydown);\n      this.host.requestUpdate();\n    }\n  }\n\n  constructor(\n    public host: ReactiveControllerHost,\n    protected options: ATFocusControllerOptions<Item>,\n  ) {\n    this.host.updateComplete.then(() => this.initItems());\n  }\n\n  /**\n   * Initialize the items and itemsContainerElement fields\n   */\n  protected initItems(): void {\n    this.items = this.options.getItems();\n    this.itemsContainerElement ??= this.#initContainer();\n  }\n\n  hostConnected(): void {\n    this.hostUpdate();\n  }\n\n  hostDisconnected(): void {\n    this.#itemsContainerElement?.removeEventListener('keydown', this.onKeydown);\n  }\n\n  hostUpdate(): void {\n    this.itemsContainerElement ??= this.#initContainer();\n  }\n\n  #initContainer() {\n    return this.options.getItemsContainer?.()\n      ?? (!isServer && this.host instanceof HTMLElement ? this.host : null);\n  }\n\n  /**\n   * Override and conditionally call `super.onKeydown` to filter out keyboard events\n   * which should not result in a focus change. Ensure that subclass' method is bound\n   * @param event keyboard event\n   */\n  protected onKeydown(event: KeyboardEvent): void {\n    const orientation = this.options.getOrientation?.() ?? this\n        .#itemsContainerElement\n        ?.getAttribute('aria-orientation') as\n            'horizontal' | 'vertical' | 'grid' | 'undefined';\n\n    const item = this._items.at(this.atFocusedItemIndex);\n\n    const horizontalOnly =\n        orientation === 'horizontal'\n        || item?.tagName === 'SELECT'\n        || item?.getAttribute('role') === 'spinbutton';\n\n    const verticalOnly = orientation === 'vertical';\n\n    switch (event.key) {\n      case 'ArrowLeft':\n        if (verticalOnly) {\n          return;\n        }\n        this.atFocusedItemIndex--;\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'ArrowRight':\n        if (verticalOnly) {\n          return;\n        }\n        this.atFocusedItemIndex++;\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'ArrowUp':\n        if (horizontalOnly) {\n          return;\n        }\n        this.atFocusedItemIndex--;\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'ArrowDown':\n        if (horizontalOnly) {\n          return;\n        }\n        this.atFocusedItemIndex++;\n        event.stopPropagation();\n        event.preventDefault();\n        break;\n      case 'Home':\n        if (!(event.target instanceof HTMLElement\n            && (event.target.hasAttribute('aria-activedescendant')\n             || event.target.ariaActiveDescendantElement))) {\n          this.atFocusedItemIndex = 0;\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        break;\n      case 'End':\n        if (!(event.target instanceof HTMLElement\n            && (event.target.hasAttribute('aria-activedescendant')\n             || event.target.ariaActiveDescendantElement))) {\n          this.atFocusedItemIndex = this.items.length - 1;\n          event.stopPropagation();\n          event.preventDefault();\n        }\n        break;\n      default:\n        break;\n    }\n    this.host.requestUpdate();\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.d.ts
new file mode 100644
index 0000000..41730ec
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.d.ts
@@ -0,0 +1,54 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+/**
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export interface Options<E extends ReactiveElement> {
+    properties: Partial<Record<keyof E, string | string[]>>;
+    prefix?: string;
+}
+/**
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export declare class CascadeController<E extends ReactiveElement> implements ReactiveController {
+    host: E;
+    options?: Options<E> | undefined;
+    private class;
+    private logger;
+    static instances: WeakMap<ReactiveElement, CascadeController<ReactiveElement>>;
+    mo: MutationObserver;
+    cache: Map<string, string[]>;
+    constructor(host: E, options?: Options<E> | undefined);
+    hostUpdated(): void;
+    hostConnected(): void;
+    hostDisconnected(): void;
+    /**
+     * Handles the cascading of properties to nested components when new elements are added
+     * Attribute updates/additions are handled by the attribute callback
+     * @param [nodeList=this.host.children]
+     */
+    cascadeProperties(nodeList?: HTMLCollection | NodeList): void;
+    /**
+     * Gets the configured attribute name for the decorated property,
+     * falling back to the lowercased property name, and caches the attribute name
+     * with it's designated child selectors for value-propagation on change
+     * @param propName
+     * @param cascade
+     */
+    initProp(propName: string, cascade: string | string[]): void;
+    private parse;
+    /**
+     * Copy the named attribute to a target element.
+     * @param name attr name
+     * @param el element
+     */
+    private _copyAttribute;
+    private _cascadeAttributes;
+    /**
+     * Trigger a cascade of the named attribute to any child elements that match
+     * the `to` selector.  The selector can match elements in the light DOM and
+     * shadow DOM.
+     * @param  name The name of the attribute to cascade (not necessarily the same as the property name).
+     * @param  to A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.
+     */
+    private _cascadeAttribute;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js
new file mode 100644
index 0000000..c975e48
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js
@@ -0,0 +1,144 @@
+import { __decorate } from "tslib";
+import { bound } from '../decorators/bound.js';
+import { debounce } from '../functions/debounce.js';
+import { Logger } from './logger.js';
+/**
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export class CascadeController {
+    constructor(host, options) {
+        this.host = host;
+        this.options = options;
+        this.mo = new MutationObserver(this.parse);
+        this.cache = new Map();
+        this.class = host.constructor;
+        this.logger = new Logger(this.host);
+        CascadeController.instances.set(host, this);
+        const properties = this.options?.properties ?? {};
+        for (const [propName, cascade] of Object.entries(properties)) {
+            this.initProp(propName, cascade);
+        }
+        host.addController(this);
+        this.cascadeProperties = debounce(this.cascadeProperties, 1);
+    }
+    hostUpdated() {
+        this.cascadeProperties();
+    }
+    hostConnected() {
+        this.mo.observe(this.host, { attributes: true, childList: true });
+        this.cascadeProperties();
+    }
+    hostDisconnected() {
+        this.mo.disconnect();
+    }
+    /**
+     * Handles the cascading of properties to nested components when new elements are added
+     * Attribute updates/additions are handled by the attribute callback
+     * @param [nodeList=this.host.children]
+     */
+    cascadeProperties(nodeList = this.host.children) {
+        if (this.host.isConnected) {
+            const selectors = this.cache.keys();
+            // Find out if anything in the nodeList matches any of the observed selectors for cacading properties
+            if (!nodeList) {
+                return this._cascadeAttributes(selectors, this.cache);
+            }
+            for (const node of nodeList) {
+                // if this node has a match function (i.e., it's an HTMLElement, not a text node),
+                if (node instanceof Element) {
+                    // see if it matches one of the selectors, otherwise drop it (like it's hot).
+                    for (const selector of selectors) {
+                        // console.log('_copyAttribute', name, value, el.getAttribute(name));
+                        if (node.matches(selector)) {
+                            const attrNames = this.cache.get(selector);
+                            // each selector can match multiple properties/attributes, so
+                            // copy each of them
+                            for (const attrName of attrNames ?? []) {
+                                this._copyAttribute(attrName, node);
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+    /**
+     * Gets the configured attribute name for the decorated property,
+     * falling back to the lowercased property name, and caches the attribute name
+     * with it's designated child selectors for value-propagation on change
+     * @param propName
+     * @param cascade
+     */
+    initProp(propName, cascade) {
+        for (const nodeItem of [cascade].flat(Infinity).filter(Boolean)) {
+            const { attribute } = this.class.getPropertyOptions(propName);
+            const attr = typeof attribute === 'string' ? attribute
+                : propName.toLowerCase();
+            // Create an object with the node as the key and an array of attributes
+            // that are to be cascaded down to it
+            if (!this.cache.get(nodeItem)) {
+                this.cache.set(nodeItem, [attr]);
+            }
+            else {
+                this.cache.get(nodeItem)?.push(attr);
+            }
+        }
+    }
+    parse(mutations) {
+        // Iterate over the mutation list, look for cascade updates
+        for (const mutation of mutations ?? []) {
+            // If a new node is added, attempt to cascade attributes to it
+            if (mutation.type === 'childList' && mutation.addedNodes.length) {
+                this.cascadeProperties(mutation.addedNodes);
+            }
+            else if (mutation.type === 'attributes') {
+                this._cascadeAttributes(this.cache.keys(), this.cache);
+            }
+        }
+    }
+    /**
+     * Copy the named attribute to a target element.
+     * @param name attr name
+     * @param el element
+     */
+    async _copyAttribute(name, el) {
+        this.logger.log(`copying ${name} to ${el}`);
+        const value = this.host.getAttribute(name);
+        if (el.isConnected) {
+            if (value == null) {
+                el.removeAttribute(name);
+            }
+            else {
+                el.setAttribute(name, value);
+            }
+        }
+    }
+    _cascadeAttributes(selectors, set) {
+        for (const selector of selectors) {
+            for (const attr of set.get(selector) ?? []) {
+                this._cascadeAttribute(attr, selector);
+            }
+        }
+    }
+    /**
+     * Trigger a cascade of the named attribute to any child elements that match
+     * the `to` selector.  The selector can match elements in the light DOM and
+     * shadow DOM.
+     * @param  name The name of the attribute to cascade (not necessarily the same as the property name).
+     * @param  to A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.
+     */
+    _cascadeAttribute(name, to) {
+        const recipients = [
+            ...this.host.querySelectorAll(to),
+            ...this.host.shadowRoot?.querySelectorAll(to) ?? [],
+        ];
+        for (const node of recipients) {
+            this._copyAttribute(name, node);
+        }
+    }
+}
+CascadeController.instances = new WeakMap();
+__decorate([
+    bound
+], CascadeController.prototype, "parse", null);
+//# sourceMappingURL=cascade-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js.map
new file mode 100644
index 0000000..503d8ea
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/cascade-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"cascade-controller.js","sourceRoot":"","sources":["cascade-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { bound } from '../decorators/bound.js';\nimport { debounce } from '../functions/debounce.js';\nimport { Logger } from './logger.js';\n\n/**\n * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;\n */\nexport interface Options<E extends ReactiveElement> {\n  properties: Partial<Record<keyof E, string | string[]>>;\n  prefix?: string;\n}\n\n/**\n * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;\n */\nexport class CascadeController<E extends ReactiveElement> implements ReactiveController {\n  private class: typeof ReactiveElement;\n\n  private logger: Logger;\n\n  static instances: WeakMap<ReactiveElement, CascadeController<ReactiveElement>> =\n    new WeakMap<ReactiveElement, CascadeController<ReactiveElement>>();\n\n  mo: MutationObserver = new MutationObserver(this.parse);\n\n  cache: Map<string, string[]> = new Map<string, string[]>();\n\n  constructor(public host: E, public options?: Options<E> | undefined) {\n    this.class = host.constructor as typeof ReactiveElement;\n    this.logger = new Logger(this.host);\n    CascadeController.instances.set(host, this);\n    const properties = this.options?.properties ?? {} as Options<E>['properties'];\n    for (const [propName, cascade] of Object.entries(properties)) {\n      this.initProp(propName, cascade);\n    }\n    host.addController(this);\n    this.cascadeProperties = debounce(this.cascadeProperties, 1);\n  }\n\n  hostUpdated(): void {\n    this.cascadeProperties();\n  }\n\n  hostConnected(): void {\n    this.mo.observe(this.host, { attributes: true, childList: true });\n    this.cascadeProperties();\n  }\n\n  hostDisconnected(): void {\n    this.mo.disconnect();\n  }\n\n  /**\n   * Handles the cascading of properties to nested components when new elements are added\n   * Attribute updates/additions are handled by the attribute callback\n   * @param [nodeList=this.host.children]\n   */\n  cascadeProperties(nodeList: HTMLCollection | NodeList = this.host.children): void {\n    if (this.host.isConnected) {\n      const selectors = this.cache.keys();\n\n      // Find out if anything in the nodeList matches any of the observed selectors for cacading properties\n      if (!nodeList) {\n        return this._cascadeAttributes(selectors, this.cache);\n      }\n\n\n      for (const node of nodeList) {\n        // if this node has a match function (i.e., it's an HTMLElement, not a text node),\n        if (node instanceof Element) {\n          // see if it matches one of the selectors, otherwise drop it (like it's hot).\n          for (const selector of selectors) {\n            // console.log('_copyAttribute', name, value, el.getAttribute(name));\n            if (node.matches(selector)) {\n              const attrNames = this.cache.get(selector);\n              // each selector can match multiple properties/attributes, so\n              // copy each of them\n              for (const attrName of attrNames ?? []) {\n                this._copyAttribute(attrName, node);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Gets the configured attribute name for the decorated property,\n   * falling back to the lowercased property name, and caches the attribute name\n   * with it's designated child selectors for value-propagation on change\n   * @param propName\n   * @param cascade\n   */\n  initProp(propName: string, cascade: string | string[]): void {\n    for (const nodeItem of [cascade].flat(Infinity).filter(Boolean) as string[]) {\n      const { attribute } = this.class.getPropertyOptions(propName);\n\n      const attr =\n          typeof attribute === 'string' ? attribute\n        : propName.toLowerCase();\n\n      // Create an object with the node as the key and an array of attributes\n      // that are to be cascaded down to it\n      if (!this.cache.get(nodeItem)) {\n        this.cache.set(nodeItem, [attr]);\n      } else {\n        this.cache.get(nodeItem)?.push(attr);\n      }\n    }\n  }\n\n  @bound private parse(mutations: MutationRecord[]) {\n    // Iterate over the mutation list, look for cascade updates\n    for (const mutation of mutations ?? []) {\n      // If a new node is added, attempt to cascade attributes to it\n      if (mutation.type === 'childList' && mutation.addedNodes.length) {\n        this.cascadeProperties(mutation.addedNodes);\n      } else if (mutation.type === 'attributes') {\n        this._cascadeAttributes(this.cache.keys(), this.cache);\n      }\n    }\n  }\n\n  /**\n   * Copy the named attribute to a target element.\n   * @param name attr name\n   * @param el element\n   */\n  private async _copyAttribute(name: string, el: Element) {\n    this.logger.log(`copying ${name} to ${el}`);\n    const value = this.host.getAttribute(name);\n    if (el.isConnected) {\n      if (value == null) {\n        el.removeAttribute(name);\n      } else {\n        el.setAttribute(name, value);\n      }\n    }\n  }\n\n  private _cascadeAttributes(selectors: IterableIterator<string>, set: this['cache']) {\n    for (const selector of selectors) {\n      for (const attr of set.get(selector) ?? []) {\n        this._cascadeAttribute(attr, selector);\n      }\n    }\n  }\n\n  /**\n   * Trigger a cascade of the named attribute to any child elements that match\n   * the `to` selector.  The selector can match elements in the light DOM and\n   * shadow DOM.\n   * @param  name The name of the attribute to cascade (not necessarily the same as the property name).\n   * @param  to A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.\n   */\n  private _cascadeAttribute(name: string, to: string) {\n    const recipients = [\n      ...this.host.querySelectorAll(to),\n      ...this.host.shadowRoot?.querySelectorAll(to) ?? [],\n    ];\n\n    for (const node of recipients) {\n      this._copyAttribute(name, node);\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.d.ts
new file mode 100644
index 0000000..66dc1a3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.d.ts
@@ -0,0 +1,117 @@
+import { nothing, type ReactiveController, type ReactiveControllerHost } from 'lit';
+import type { ActivedescendantControllerOptions } from './activedescendant-controller.js';
+import type { RovingTabindexControllerOptions } from './roving-tabindex-controller.js';
+import type { ListboxControllerOptions } from './listbox-controller.js';
+type AllOptions<Item extends HTMLElement> = ActivedescendantControllerOptions<Item> & ListboxControllerOptions<Item> & RovingTabindexControllerOptions<Item>;
+export interface ComboboxControllerOptions<Item extends HTMLElement> extends Omit<AllOptions<Item>, 'getATFocusedItem' | 'getControlsElements' | 'getActiveDescendantContainer' | 'getItemsContainer'> {
+    /**
+     * Predicate which establishes whether the listbox is expanded
+     * e.g. `isExpanded: () => this.expanded`, if the host's `expanded` property
+     * should correspond to the listbox expanded state.
+     */
+    isExpanded(): boolean;
+    /**
+     * Callback which the host must implement to change the expanded state to true.
+     * Return or resolve false to prevent the change.
+     */
+    requestShowListbox(): void | boolean | Promise<boolean> | Promise<void>;
+    /**
+     * Callback which the host must implement to change the expanded to false.
+     * Return or resolve false to prevent the default.
+     */
+    requestHideListbox(): void | boolean | Promise<boolean> | Promise<void>;
+    /**
+     * Returns the listbox container element
+     */
+    getListboxElement(): HTMLElement | null;
+    /**
+     * Returns the toggle button, if it exists
+     */
+    getToggleButton(): HTMLElement | null;
+    /**
+     * Returns the combobox input, if it exists
+     */
+    getComboboxInput(): HTMLElement | null;
+    /**
+     * Returns the label for the toggle button, combobox input, and listbox.
+     * when `ariaLabelledByElements` is supported, the label elements associated with
+     * the host element are used instead, and this value is ignored.
+     */
+    getFallbackLabel(): string;
+    /**
+     * Called on an item to retrieve it's value string. By default, returns the `value` property
+     * of the item, as if it implemented the `<option>` element's interface.
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement
+     */
+    getItemValue?(item: Item): string;
+    /**
+     * Optional callback, called on the combobox input element to set its value.
+     * by default, returns the element's `value` DOM property.
+     */
+    getComboboxValue?(combobox: HTMLElement): string;
+    /**
+     * Optional callback, called on the combobox input element to set its value.
+     * by default, sets the element's `value` DOM property.
+     */
+    setComboboxValue?(item: HTMLElement, value: string): void;
+    /**
+     * Called on each item, with the combobox input, to determine if the item should be shown in the
+     * listbox or filtered out. Return false to hide the item. By default, checks whether the item's
+     * value starts with the input value (when both are lowercased).
+     */
+    isItemFiltered?(item: Item, value: string): boolean;
+    /**
+     * Called on each item when the filter changes.
+     * By default, toggles the `hidden` attribute on the item
+     */
+    setItemHidden?(item: Item, hidden: boolean): void;
+}
+/**
+ * @summary Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].
+ *
+ * Combobox with keyboard and pointer navigation, using the aria-activedescendant pattern.
+ *
+ * WARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users
+ * rely on the combobox input value being announced when navigating the listbox with the keyboard.
+ * We have erred on the side that it may be less-broken to avoid announcing disabled items in that
+ * case, rather than announcing the disabled items value without indicating that it is disabled.
+ * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)
+ *
+ * [pattern]: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-both/
+ */
+export declare class ComboboxController<Item extends HTMLElement> implements ReactiveController {
+    #private;
+    host: ReactiveControllerHost;
+    static of<T extends HTMLElement>(host: ReactiveControllerHost, options: ComboboxControllerOptions<T>): ComboboxController<T>;
+    /**
+     * Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA.
+     */
+    static get supportsCrossRootActiveDescendant(): boolean;
+    private static langs;
+    private static langsRE;
+    private options;
+    /** All items */
+    get items(): Item[];
+    set items(value: Item[]);
+    /** Whether the combobox is disabled */
+    get disabled(): boolean;
+    set disabled(value: boolean);
+    /** Whether multiselect is enabled */
+    get multi(): boolean;
+    set multi(value: boolean);
+    /** The current selection: a list of items */
+    get selected(): Item[];
+    set selected(value: Item[]);
+    private constructor();
+    hostConnected(): Promise<void>;
+    hostUpdated(): void;
+    hostDisconnected(): void;
+    /**
+     * For Browsers which do not support `ariaActiveDescendantElement`, we must clone
+     * the listbox items into the same root as the combobox input
+     * Call this method to return either an array of (cloned) list box items, to be placed in your
+     * shadow template, or nothing in the case the browser supports cross-root aria.
+     */
+    renderItemsToShadowRoot(): Node[] | typeof nothing;
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js
new file mode 100644
index 0000000..86cfd13
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js
@@ -0,0 +1,611 @@
+var _ComboboxController_instances, _a, _ComboboxController_alert, _ComboboxController_alertTemplate, _ComboboxController_lb, _ComboboxController_fc, _ComboboxController_preventListboxGainingFocus, _ComboboxController_input, _ComboboxController_button, _ComboboxController_listbox, _ComboboxController_buttonInitialRole, _ComboboxController_mo, _ComboboxController_microcopy, _ComboboxController_hasTextInput_get, _ComboboxController_focusedItem_get, _ComboboxController_element_get, _ComboboxController_init, _ComboboxController_initListbox, _ComboboxController_initButton, _ComboboxController_initInput, _ComboboxController_initLabels, _ComboboxController_initController, _ComboboxController_initItems, _ComboboxController_show, _ComboboxController_hide, _ComboboxController_toggle, _ComboboxController_translate, _ComboboxController_announce, _ComboboxController_filterItems, _ComboboxController_onClickButton, _ComboboxController_onClickListbox, _ComboboxController_onKeydownInput, _ComboboxController_onKeyupInput, _ComboboxController_onKeydownButton, _ComboboxController_onKeydownListbox, _ComboboxController_onFocusoutListbox, _ComboboxController_onKeydownToggleButton;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { nothing } from 'lit';
+import { ListboxController, isItem, isItemDisabled } from './listbox-controller.js';
+import { RovingTabindexController } from './roving-tabindex-controller.js';
+import { ActivedescendantController } from './activedescendant-controller.js';
+import { InternalsController } from './internals-controller.js';
+import { getRandomId } from '../functions/random.js';
+function deepClosest(element, selector) {
+    let closest = element?.closest(selector);
+    let root = element?.getRootNode();
+    let count = 0;
+    while (count < 500 && !closest && element) {
+        count++;
+        root = element.getRootNode();
+        if (root instanceof ShadowRoot) {
+            element = root.host;
+        }
+        else if (root instanceof Document) {
+            element = document.documentElement;
+        }
+        else {
+            return null;
+        }
+        closest = element.closest(selector);
+    }
+    return closest;
+}
+function getItemValue(item) {
+    if ('value' in item && typeof item.value === 'string') {
+        return item.value;
+    }
+    else {
+        return '';
+    }
+}
+function isItemFiltered(item, value) {
+    return !getItemValue(item)
+        .toLowerCase()
+        .startsWith(value.toLowerCase());
+}
+function setItemHidden(item, hidden) {
+    item.hidden = hidden;
+}
+function setComboboxValue(item, value) {
+    if (!('value' in item)) {
+        // eslint-disable-next-line no-console
+        return console.warn(`Cannot set value on combobox element ${item.localName}`);
+    }
+    else {
+        item.value = value;
+    }
+}
+function getComboboxValue(combobox) {
+    if ('value' in combobox && typeof combobox.value === 'string') {
+        return combobox.value;
+    }
+    else {
+        // eslint-disable-next-line no-console
+        return console.warn(`Cannot get value from combobox element ${combobox.localName}`), '';
+    }
+}
+/**
+ * @summary Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].
+ *
+ * Combobox with keyboard and pointer navigation, using the aria-activedescendant pattern.
+ *
+ * WARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users
+ * rely on the combobox input value being announced when navigating the listbox with the keyboard.
+ * We have erred on the side that it may be less-broken to avoid announcing disabled items in that
+ * case, rather than announcing the disabled items value without indicating that it is disabled.
+ * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)
+ *
+ * [pattern]: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-both/
+ */
+export class ComboboxController {
+    static of(host, options) {
+        return new _a(host, options);
+    }
+    /**
+     * Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA.
+     */
+    static get supportsCrossRootActiveDescendant() {
+        return ActivedescendantController.supportsCrossRootActiveDescendant;
+    }
+    /** All items */
+    get items() {
+        return __classPrivateFieldGet(this, _ComboboxController_lb, "f").items;
+    }
+    set items(value) {
+        __classPrivateFieldGet(this, _ComboboxController_lb, "f").items = value;
+    }
+    /** Whether the combobox is disabled */
+    get disabled() {
+        return __classPrivateFieldGet(this, _ComboboxController_lb, "f").disabled;
+    }
+    set disabled(value) {
+        __classPrivateFieldGet(this, _ComboboxController_lb, "f").disabled = value;
+    }
+    /** Whether multiselect is enabled */
+    get multi() {
+        return __classPrivateFieldGet(this, _ComboboxController_lb, "f").multi;
+    }
+    set multi(value) {
+        __classPrivateFieldGet(this, _ComboboxController_lb, "f").multi = value;
+    }
+    /** The current selection: a list of items */
+    get selected() {
+        return __classPrivateFieldGet(this, _ComboboxController_lb, "f").selected;
+    }
+    set selected(value) {
+        __classPrivateFieldGet(this, _ComboboxController_lb, "f").selected = value;
+    }
+    constructor(host, options) {
+        _ComboboxController_instances.add(this);
+        this.host = host;
+        _ComboboxController_lb.set(this, void 0);
+        _ComboboxController_fc.set(this, void 0);
+        _ComboboxController_preventListboxGainingFocus.set(this, false);
+        _ComboboxController_input.set(this, null);
+        _ComboboxController_button.set(this, null);
+        _ComboboxController_listbox.set(this, null);
+        _ComboboxController_buttonInitialRole.set(this, null);
+        _ComboboxController_mo.set(this, new MutationObserver(() => __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initItems).call(this)));
+        _ComboboxController_microcopy.set(this, new Map(Object.entries({
+            dimmed: {
+                en: 'dimmed',
+                es: 'atenuada',
+                de: 'gedimmt',
+                it: 'oscurato',
+                fr: 'atténué',
+                ja: '暗くなった',
+                zh: '变暗',
+            },
+            selected: {
+                en: 'selected',
+                es: 'seleccionado',
+                de: 'ausgewählt',
+                fr: 'choisie',
+                it: 'selezionato',
+                ja: '選ばれた',
+                zh: '选',
+            },
+            of: {
+                en: 'of',
+                es: 'de',
+                de: 'von',
+                fr: 'sur',
+                it: 'di',
+                ja: '件目',
+                zh: '的',
+            },
+        })));
+        _ComboboxController_onClickButton.set(this, () => {
+            if (!this.options.isExpanded()) {
+                __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+            }
+            else {
+                __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+            }
+        });
+        _ComboboxController_onClickListbox.set(this, (event) => {
+            if (!this.multi && event.composedPath().some(this.options.isItem)) {
+                __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+            }
+        });
+        /**
+         * Handle keypresses on the input
+         * ## `Down Arrow`
+         * - If the textbox is not empty and the listbox is displayed,
+         *   moves visual focus to the first suggested value.
+         * - If the textbox is empty and the listbox is not displayed,
+         *   opens the listbox and moves visual focus to the first option.
+         * - In both cases DOM focus remains on the textbox.
+         *
+         * ## `Alt + Down Arrow`
+         * Opens the listbox without moving focus or changing selection.
+         *
+         * ## `Up Arrow`
+         * - If the textbox is not empty and the listbox is displayed,
+         *   moves visual focus to the last suggested value.
+         * - If the textbox is empty, first opens the listbox if it is not already displayed
+         *   and then moves visual focus to the last option.
+         * - In both cases DOM focus remains on the textbox.
+         *
+         * ## `Enter`
+         * Closes the listbox if it is displayed.
+         *
+         * ## `Escape`
+         * - If the listbox is displayed, closes it.
+         * - If the listbox is not displayed, clears the textbox.
+         *
+         * ## Standard single line text editing keys
+         * - Keys used for cursor movement and text manipulation,
+         *   such as `Delete` and `Shift + Right Arrow`.
+         * - An HTML `input` with `type="text"` is used for the textbox so the browser will provide
+         *   platform-specific editing keys.
+         *
+         * @see https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list
+         * @param event keydown event
+         */
+        _ComboboxController_onKeydownInput.set(this, (event) => {
+            if (event.ctrlKey || event.shiftKey || !__classPrivateFieldGet(this, _ComboboxController_input, "f")) {
+                return;
+            }
+            switch (event.key) {
+                case 'ArrowDown':
+                case 'ArrowUp':
+                    if (!this.options.isExpanded()) {
+                        __classPrivateFieldSet(this, _ComboboxController_preventListboxGainingFocus, event.altKey, "f");
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+                    }
+                    break;
+                case 'Enter':
+                    if (!this.multi) {
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+                    }
+                    break;
+                case 'Escape':
+                    if (!this.options.isExpanded()) {
+                        this.options.setComboboxValue(__classPrivateFieldGet(this, _ComboboxController_input, "f"), '');
+                        this.host.requestUpdate();
+                    }
+                    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+                    break;
+                case 'Alt':
+                case 'AltGraph':
+                case 'Shift':
+                case 'Control':
+                case 'Fn':
+                case 'Symbol':
+                case 'Hyper':
+                case 'Super':
+                case 'Meta':
+                case 'CapsLock':
+                case 'FnLock':
+                case 'NumLock':
+                case 'Tab':
+                case 'ScrollLock':
+                case 'SymbolLock':
+                case ' ':
+                    break;
+                default:
+                    if (!this.options.isExpanded()) {
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+                    }
+            }
+        });
+        /**
+         * Populates the combobox input with the focused value when navigating the listbox,
+         * and filters the items when typing.
+         * @param event keyup event
+         */
+        _ComboboxController_onKeyupInput.set(this, (event) => {
+            if (!__classPrivateFieldGet(this, _ComboboxController_input, "f")) {
+                return;
+            }
+            switch (event.key) {
+                case 'ArrowUp':
+                case 'ArrowDown':
+                    /**
+                     * Safari VoiceOver does not support aria-activedescendant, so we must.
+                     * approximate the correct behaviour by constructing a visually-hidden alert role
+                     * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)
+                     */
+                    if (__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_focusedItem_get)
+                        && this.options.getComboboxInput()
+                        && InternalsController.isSafari) {
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_announce).call(this, __classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_focusedItem_get));
+                    }
+                    break;
+                default:
+                    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_filterItems).call(this);
+            }
+        });
+        _ComboboxController_onKeydownButton.set(this, (event) => {
+            if (__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get)) {
+                return __classPrivateFieldGet(this, _ComboboxController_onKeydownInput, "f").call(this, event);
+            }
+            else {
+                return __classPrivateFieldGet(this, _ComboboxController_onKeydownToggleButton, "f").call(this, event);
+            }
+        });
+        _ComboboxController_onKeydownListbox.set(this, (event) => {
+            if (!__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get)) {
+                switch (event.key) {
+                    case 'Home':
+                    case 'End':
+                        __classPrivateFieldGet(this, _ComboboxController_onKeydownToggleButton, "f").call(this, event);
+                        break;
+                    case 'Escape':
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+                        __classPrivateFieldGet(this, _ComboboxController_button, "f")?.focus();
+                        break;
+                    case 'Enter':
+                    case ' ': {
+                        const eventItem = event.composedPath().find(this.options.isItem);
+                        if (eventItem
+                            && !this.multi
+                            && this.options.isExpanded()
+                            && !this.options.isItemDisabled(eventItem)) {
+                            __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+                            __classPrivateFieldGet(this, _ComboboxController_button, "f")?.focus();
+                        }
+                    }
+                }
+            }
+        });
+        _ComboboxController_onFocusoutListbox.set(this, (event) => {
+            if (!__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get) && this.options.isExpanded()) {
+                const root = __classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_element_get)?.getRootNode();
+                if ((root instanceof ShadowRoot || root instanceof Document)
+                    && !this.items.includes(event.relatedTarget)) {
+                    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+                }
+            }
+        });
+        _ComboboxController_onKeydownToggleButton.set(this, async (event) => {
+            switch (event.key) {
+                case 'ArrowDown':
+                case 'ArrowUp':
+                    if (!this.options.isExpanded()) {
+                        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+                    }
+                    break;
+                case 'Home':
+                    if (!this.options.isExpanded()) {
+                        await __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+                    }
+                    if (__classPrivateFieldGet(this, _ComboboxController_fc, "f")) {
+                        __classPrivateFieldGet(this, _ComboboxController_fc, "f").atFocusedItemIndex = 0;
+                    }
+                    break;
+                case 'End':
+                    if (!this.options.isExpanded()) {
+                        await __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+                    }
+                    if (__classPrivateFieldGet(this, _ComboboxController_fc, "f")) {
+                        __classPrivateFieldGet(this, _ComboboxController_fc, "f").atFocusedItemIndex = this.items.length - 1;
+                    }
+                    break;
+                case ' ':
+                case 'Enter':
+                    // prevent scroll
+                    event.preventDefault();
+                    await __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_toggle).call(this);
+                    await this.host.updateComplete;
+                    if (!this.options.isExpanded()) {
+                        __classPrivateFieldGet(this, _ComboboxController_button, "f")?.focus();
+                    }
+                    break;
+            }
+        });
+        host.addController(this);
+        this.options = {
+            isItem,
+            getItemValue,
+            isItemFiltered,
+            isItemDisabled,
+            getComboboxValue,
+            setComboboxValue,
+            setItemHidden,
+            getOrientation: () => 'vertical',
+            ...options,
+        };
+        __classPrivateFieldSet(this, _ComboboxController_lb, ListboxController.of(host, {
+            isItem: this.options.isItem,
+            getItemsContainer: this.options.getListboxElement,
+            getControlsElements: () => [
+                this.options.getToggleButton(),
+                this.options.getComboboxInput(),
+            ].filter(x => !!x),
+            getATFocusedItem: () => this.items[__classPrivateFieldGet(this, _ComboboxController_fc, "f")?.atFocusedItemIndex ?? -1] ?? null,
+            isItemDisabled: this.options.isItemDisabled,
+            setItemSelected: this.options.setItemSelected,
+        }), "f");
+    }
+    async hostConnected() {
+        await this.host.updateComplete;
+        this.hostUpdated();
+    }
+    hostUpdated() {
+        if (!__classPrivateFieldGet(this, _ComboboxController_fc, "f")) {
+            __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_init).call(this);
+        }
+        const expanded = this.options.isExpanded();
+        __classPrivateFieldGet(this, _ComboboxController_button, "f")?.setAttribute('aria-expanded', String(expanded));
+        __classPrivateFieldGet(this, _ComboboxController_input, "f")?.setAttribute('aria-expanded', String(expanded));
+        if (__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get)) {
+            __classPrivateFieldGet(this, _ComboboxController_button, "f")?.setAttribute('tabindex', '-1');
+        }
+        else {
+            __classPrivateFieldGet(this, _ComboboxController_button, "f")?.removeAttribute('tabindex');
+        }
+        __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initLabels).call(this);
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(this, _ComboboxController_fc, "f")?.hostDisconnected();
+    }
+    /**
+     * For Browsers which do not support `ariaActiveDescendantElement`, we must clone
+     * the listbox items into the same root as the combobox input
+     * Call this method to return either an array of (cloned) list box items, to be placed in your
+     * shadow template, or nothing in the case the browser supports cross-root aria.
+     */
+    renderItemsToShadowRoot() {
+        if (__classPrivateFieldGet(this, _ComboboxController_fc, "f") instanceof ActivedescendantController) {
+            return __classPrivateFieldGet(this, _ComboboxController_fc, "f").renderItemsToShadowRoot();
+        }
+        else {
+            return nothing;
+        }
+    }
+}
+_a = ComboboxController, _ComboboxController_lb = new WeakMap(), _ComboboxController_fc = new WeakMap(), _ComboboxController_preventListboxGainingFocus = new WeakMap(), _ComboboxController_input = new WeakMap(), _ComboboxController_button = new WeakMap(), _ComboboxController_listbox = new WeakMap(), _ComboboxController_buttonInitialRole = new WeakMap(), _ComboboxController_mo = new WeakMap(), _ComboboxController_microcopy = new WeakMap(), _ComboboxController_onClickButton = new WeakMap(), _ComboboxController_onClickListbox = new WeakMap(), _ComboboxController_onKeydownInput = new WeakMap(), _ComboboxController_onKeyupInput = new WeakMap(), _ComboboxController_onKeydownButton = new WeakMap(), _ComboboxController_onKeydownListbox = new WeakMap(), _ComboboxController_onFocusoutListbox = new WeakMap(), _ComboboxController_onKeydownToggleButton = new WeakMap(), _ComboboxController_instances = new WeakSet(), _ComboboxController_hasTextInput_get = function _ComboboxController_hasTextInput_get() {
+    return this.options.getComboboxInput();
+}, _ComboboxController_focusedItem_get = function _ComboboxController_focusedItem_get() {
+    return __classPrivateFieldGet(this, _ComboboxController_fc, "f")?.items.at(Math.max(__classPrivateFieldGet(this, _ComboboxController_fc, "f")?.atFocusedItemIndex ?? -1, 0)) ?? null;
+}, _ComboboxController_element_get = function _ComboboxController_element_get() {
+    if (this.host instanceof HTMLElement) {
+        return this.host;
+    }
+    else if (this.options.getListboxElement() instanceof HTMLElement) {
+        return this.options.getListboxElement();
+    }
+}, _ComboboxController_init = 
+/**
+ * Order of operations is important
+ */
+async function _ComboboxController_init() {
+    await this.host.updateComplete;
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initListbox).call(this);
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initItems).call(this);
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initButton).call(this);
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initInput).call(this);
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initLabels).call(this);
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_initController).call(this);
+}, _ComboboxController_initListbox = function _ComboboxController_initListbox() {
+    var _b;
+    __classPrivateFieldGet(this, _ComboboxController_mo, "f").disconnect();
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f")?.removeEventListener('focusout', __classPrivateFieldGet(this, _ComboboxController_onFocusoutListbox, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f")?.removeEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownListbox, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f")?.removeEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickListbox, "f"));
+    __classPrivateFieldSet(this, _ComboboxController_listbox, this.options.getListboxElement(), "f");
+    if (!__classPrivateFieldGet(this, _ComboboxController_listbox, "f")) {
+        throw new Error('ComboboxController getListboxElement() option must return an element');
+    }
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f").addEventListener('focusout', __classPrivateFieldGet(this, _ComboboxController_onFocusoutListbox, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f").addEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownListbox, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_listbox, "f").addEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickListbox, "f"));
+    (_b = __classPrivateFieldGet(this, _ComboboxController_listbox, "f")).id ?? (_b.id = getRandomId());
+    __classPrivateFieldGet(this, _ComboboxController_mo, "f").observe(__classPrivateFieldGet(this, _ComboboxController_listbox, "f"), { childList: true });
+}, _ComboboxController_initButton = function _ComboboxController_initButton() {
+    __classPrivateFieldGet(this, _ComboboxController_button, "f")?.removeEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickButton, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_button, "f")?.removeEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownButton, "f"));
+    __classPrivateFieldSet(this, _ComboboxController_button, this.options.getToggleButton(), "f");
+    if (!__classPrivateFieldGet(this, _ComboboxController_button, "f")) {
+        throw new Error('ComboboxController getToggleButton() option must return an element');
+    }
+    __classPrivateFieldSet(this, _ComboboxController_buttonInitialRole, __classPrivateFieldGet(this, _ComboboxController_button, "f").role, "f");
+    __classPrivateFieldGet(this, _ComboboxController_button, "f").role = 'combobox';
+    __classPrivateFieldGet(this, _ComboboxController_button, "f").setAttribute('aria-controls', __classPrivateFieldGet(this, _ComboboxController_listbox, "f")?.id ?? '');
+    __classPrivateFieldGet(this, _ComboboxController_button, "f").addEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickButton, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_button, "f").addEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownButton, "f"));
+}, _ComboboxController_initInput = function _ComboboxController_initInput() {
+    __classPrivateFieldGet(this, _ComboboxController_input, "f")?.removeEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickButton, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_input, "f")?.removeEventListener('keyup', __classPrivateFieldGet(this, _ComboboxController_onKeyupInput, "f"));
+    __classPrivateFieldGet(this, _ComboboxController_input, "f")?.removeEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownInput, "f"));
+    __classPrivateFieldSet(this, _ComboboxController_input, this.options.getComboboxInput(), "f");
+    if (__classPrivateFieldGet(this, _ComboboxController_input, "f") && !('value' in __classPrivateFieldGet(this, _ComboboxController_input, "f"))) {
+        throw new Error(`ComboboxController getToggleInput() option must return an element with a value property`);
+    }
+    else if (__classPrivateFieldGet(this, _ComboboxController_input, "f")) {
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").role = 'combobox';
+        __classPrivateFieldGet(this, _ComboboxController_button, "f").role = __classPrivateFieldGet(this, _ComboboxController_buttonInitialRole, "f");
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").setAttribute('aria-autocomplete', 'both');
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").setAttribute('aria-controls', __classPrivateFieldGet(this, _ComboboxController_listbox, "f")?.id ?? '');
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").addEventListener('click', __classPrivateFieldGet(this, _ComboboxController_onClickButton, "f"));
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").addEventListener('keyup', __classPrivateFieldGet(this, _ComboboxController_onKeyupInput, "f"));
+        __classPrivateFieldGet(this, _ComboboxController_input, "f").addEventListener('keydown', __classPrivateFieldGet(this, _ComboboxController_onKeydownInput, "f"));
+    }
+}, _ComboboxController_initLabels = function _ComboboxController_initLabels() {
+    const labels = InternalsController.getLabels(this.host)
+        ?? __classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_element_get)?.ariaLabelledByElements
+        ?? [];
+    const label = this.options.getFallbackLabel()
+        || __classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_element_get)?.ariaLabelledByElements?.map(x => x.textContent).join('')
+        || null;
+    for (const element of [__classPrivateFieldGet(this, _ComboboxController_button, "f"), __classPrivateFieldGet(this, _ComboboxController_listbox, "f"), __classPrivateFieldGet(this, _ComboboxController_input, "f")].filter(x => !!x)) {
+        if ('ariaLabelledByElements' in HTMLElement.prototype && labels.filter(x => !!x).length) {
+            element.ariaLabelledByElements = [...labels ?? []];
+        }
+        else {
+            element.ariaLabel = label;
+        }
+    }
+}, _ComboboxController_initController = function _ComboboxController_initController() {
+    __classPrivateFieldGet(this, _ComboboxController_fc, "f")?.hostDisconnected();
+    const { getOrientation } = this.options;
+    const getItems = () => this.items;
+    const getItemsContainer = () => __classPrivateFieldGet(this, _ComboboxController_listbox, "f");
+    if (__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get)) {
+        __classPrivateFieldSet(this, _ComboboxController_fc, ActivedescendantController.of(this.host, {
+            getItems, getItemsContainer, getOrientation,
+            getActiveDescendantContainer: () => __classPrivateFieldGet(this, _ComboboxController_input, "f"),
+            getControlsElements: () => [
+                this.options.getToggleButton(),
+                this.options.getComboboxInput(),
+            ].filter(x => !!x),
+            setItemActive: this.options.setItemActive,
+        }), "f");
+    }
+    else {
+        __classPrivateFieldSet(this, _ComboboxController_fc, RovingTabindexController.of(this.host, {
+            getItems, getItemsContainer, getOrientation,
+            getControlsElements: () => [
+                this.options.getToggleButton(),
+            ].filter(x => !!x),
+        }), "f");
+    }
+}, _ComboboxController_initItems = function _ComboboxController_initItems() {
+    if (__classPrivateFieldGet(this, _ComboboxController_listbox, "f")) {
+        this.items = this.options.getItems();
+    }
+}, _ComboboxController_show = async function _ComboboxController_show() {
+    const success = await this.options.requestShowListbox();
+    __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_filterItems).call(this);
+    if (success !== false && !__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_hasTextInput_get)) {
+        if (!__classPrivateFieldGet(this, _ComboboxController_preventListboxGainingFocus, "f")) {
+            (__classPrivateFieldGet(this, _ComboboxController_instances, "a", _ComboboxController_focusedItem_get) ?? __classPrivateFieldGet(this, _ComboboxController_fc, "f")?.items.at(0))?.focus();
+            __classPrivateFieldSet(this, _ComboboxController_preventListboxGainingFocus, false, "f");
+        }
+    }
+}, _ComboboxController_hide = async function _ComboboxController_hide() {
+    await this.options.requestHideListbox();
+}, _ComboboxController_toggle = async function _ComboboxController_toggle() {
+    if (this.options.isExpanded()) {
+        return __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_hide).call(this);
+    }
+    else {
+        return __classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_show).call(this);
+    }
+}, _ComboboxController_translate = function _ComboboxController_translate(key, lang) {
+    const strings = __classPrivateFieldGet(this, _ComboboxController_microcopy, "f").get(key);
+    return strings?.[lang] ?? key;
+}, _ComboboxController_announce = function _ComboboxController_announce(item) {
+    const value = this.options.getItemValue(item);
+    __classPrivateFieldGet(_a, _a, "f", _ComboboxController_alert)?.remove();
+    const fragment = __classPrivateFieldGet(_a, _a, "f", _ComboboxController_alertTemplate).content.cloneNode(true);
+    __classPrivateFieldSet(_a, _a, fragment.firstElementChild, "f", _ComboboxController_alert);
+    let text = value;
+    const lang = deepClosest(__classPrivateFieldGet(this, _ComboboxController_listbox, "f"), '[lang]')?.getAttribute('lang') ?? 'en';
+    const langKey = lang?.match(_a.langsRE)?.at(0) ?? 'en';
+    if (this.options.isItemDisabled(item)) {
+        text += ` (${__classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_translate).call(this, 'dimmed', langKey)})`;
+    }
+    if (__classPrivateFieldGet(this, _ComboboxController_lb, "f").isSelected(item)) {
+        text += `, (${__classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_translate).call(this, 'selected', langKey)})`;
+    }
+    if (item.hasAttribute('aria-setsize') && item.hasAttribute('aria-posinset')) {
+        if (langKey === 'ja') {
+            text += `, (${item.getAttribute('aria-setsize')} 件中 ${item.getAttribute('aria-posinset')} 件目)`;
+        }
+        else {
+            text += `, (${item.getAttribute('aria-posinset')} ${__classPrivateFieldGet(this, _ComboboxController_instances, "m", _ComboboxController_translate).call(this, 'of', langKey)} ${item.getAttribute('aria-setsize')})`;
+        }
+    }
+    __classPrivateFieldGet(_a, _a, "f", _ComboboxController_alert).lang = lang;
+    __classPrivateFieldGet(_a, _a, "f", _ComboboxController_alert).innerText = text;
+    document.body.append(__classPrivateFieldGet(_a, _a, "f", _ComboboxController_alert));
+}, _ComboboxController_filterItems = function _ComboboxController_filterItems() {
+    if (__classPrivateFieldGet(this, _ComboboxController_input, "f")) {
+        let value;
+        for (const item of this.items) {
+            const hidden = !!this.options.isExpanded()
+                && !!(value = this.options.getComboboxValue(__classPrivateFieldGet(this, _ComboboxController_input, "f")))
+                && this.options.isItemFiltered?.(item, value)
+                || false;
+            this.options.setItemHidden(item, hidden);
+        }
+    }
+};
+_ComboboxController_alert = { value: void 0 };
+_ComboboxController_alertTemplate = { value: document.createElement('template') };
+ComboboxController.langs = [
+    'en',
+    'es',
+    'de',
+    'fr',
+    'it',
+    'ja',
+    'zh',
+];
+ComboboxController.langsRE = new RegExp(_a.langs.join('|'));
+(() => {
+    // apply visually-hidden styles
+    __classPrivateFieldGet(_a, _a, "f", _ComboboxController_alertTemplate).innerHTML = `
+      <div role="alert" style="
+         border: 0;
+         clip: rect(0, 0, 0, 0);
+         block-size: 1px;
+         margin: -1px;
+         overflow: hidden;
+         padding: 0;
+         position: absolute;
+         white-space: nowrap;
+         inline-size: 1px;
+        "></div>
+      `;
+})();
+//# sourceMappingURL=combobox-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js.map
new file mode 100644
index 0000000..96a4da1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/combobox-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"combobox-controller.js","sourceRoot":"","sources":["combobox-controller.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,OAAO,EAAwD,MAAM,KAAK,CAAC;AAMpF,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACpF,OAAO,EAAE,wBAAwB,EAAE,MAAM,iCAAiC,CAAC;AAC3E,OAAO,EAAE,0BAA0B,EAAE,MAAM,kCAAkC,CAAC;AAC9E,OAAO,EAAE,mBAAmB,EAAE,MAAM,2BAA2B,CAAC;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAUrD,SAAS,WAAW,CAAC,OAAuB,EAAE,QAAgB;IAC5D,IAAI,OAAO,GAAG,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;IACzC,IAAI,IAAI,GAAG,OAAO,EAAE,WAAW,EAAE,CAAC;IAClC,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,OAAO,KAAK,GAAG,GAAG,IAAI,CAAC,OAAO,IAAI,OAAO,EAAE,CAAC;QAC1C,KAAK,EAAE,CAAC;QACR,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAC7B,IAAI,IAAI,YAAY,UAAU,EAAE,CAAC;YAC/B,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;QACtB,CAAC;aAAM,IAAI,IAAI,YAAY,QAAQ,EAAE,CAAC;YACpC,OAAO,GAAG,QAAQ,CAAC,eAAe,CAAC;QACrC,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,YAAY,CAA2B,IAAU;IACxD,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED,SAAS,cAAc,CAA2B,IAAU,EAAE,KAAa;IACzE,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC;SACrB,WAAW,EAAE;SACb,UAAU,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;AACvC,CAAC;AAED,SAAS,aAAa,CAAC,IAAiB,EAAE,MAAe;IACvD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AACvB,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAiB,EAAE,KAAa;IACxD,IAAI,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,EAAE,CAAC;QACvB,sCAAsC;QACtC,OAAO,OAAO,CAAC,IAAI,CAAC,wCAAwC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAChF,CAAC;SAAM,CAAC;QACN,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,QAAqB;IAC7C,IAAI,OAAO,IAAI,QAAQ,IAAI,OAAO,QAAQ,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;QAC9D,OAAO,QAAQ,CAAC,KAAK,CAAC;IACxB,CAAC;SAAM,CAAC;QACN,sCAAsC;QACtC,OAAO,OAAO,CAAC,IAAI,CAAC,0CAA0C,QAAQ,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;IAC1F,CAAC;AACH,CAAC;AAuED;;;;;;;;;;;;GAYG;AACH,MAAM,OAAO,kBAAkB;IAGtB,MAAM,CAAC,EAAE,CACd,IAA4B,EAC5B,OAAqC;QAErC,OAAO,IAAI,EAAkB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED;;OAEG;IACI,MAAM,KAAK,iCAAiC;QACjD,OAAO,0BAA0B,CAAC,iCAAiC,CAAC;IACtE,CAAC;IAoFD,gBAAgB;IAChB,IAAI,KAAK;QACP,OAAO,uBAAA,IAAI,8BAAI,CAAC,KAAK,CAAC;IACxB,CAAC;IAED,IAAI,KAAK,CAAC,KAAa;QACrB,uBAAA,IAAI,8BAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,uCAAuC;IACvC,IAAI,QAAQ;QACV,OAAO,uBAAA,IAAI,8BAAI,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAI,QAAQ,CAAC,KAAc;QACzB,uBAAA,IAAI,8BAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED,qCAAqC;IACrC,IAAI,KAAK;QACP,OAAO,uBAAA,IAAI,8BAAI,CAAC,KAAK,CAAC;IACxB,CAAC;IAED,IAAI,KAAK,CAAC,KAAc;QACtB,uBAAA,IAAI,8BAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACzB,CAAC;IAED,6CAA6C;IAC7C,IAAI,QAAQ;QACV,OAAO,uBAAA,IAAI,8BAAI,CAAC,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAI,QAAQ,CAAC,KAAa;QACxB,uBAAA,IAAI,8BAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC5B,CAAC;IAkBD,YACS,IAA4B,EACnC,OAAwC;;QADjC,SAAI,GAAJ,IAAI,CAAwB;QA3FrC,yCAA6B;QAC7B,yCAA8B;QAC9B,yDAA8B,KAAK,EAAC;QACpC,oCAA6B,IAAI,EAAC;QAClC,qCAA8B,IAAI,EAAC;QACnC,sCAA+B,IAAI,EAAC;QACpC,gDAAoC,IAAI,EAAC;QACzC,iCAAM,IAAI,gBAAgB,CAAC,GAAG,EAAE,CAAC,uBAAA,IAAI,oEAAW,MAAf,IAAI,CAAa,CAAC,EAAC;QACpD,wCAAa,IAAI,GAAG,CAA+B,MAAM,CAAC,OAAO,CAAC;YAChE,MAAM,EAAE;gBACN,EAAE,EAAE,QAAQ;gBACZ,EAAE,EAAE,UAAU;gBACd,EAAE,EAAE,SAAS;gBACb,EAAE,EAAE,UAAU;gBACd,EAAE,EAAE,SAAS;gBACb,EAAE,EAAE,OAAO;gBACX,EAAE,EAAE,IAAI;aACT;YACD,QAAQ,EAAE;gBACR,EAAE,EAAE,UAAU;gBACd,EAAE,EAAE,cAAc;gBAClB,EAAE,EAAE,YAAY;gBAChB,EAAE,EAAE,SAAS;gBACb,EAAE,EAAE,aAAa;gBACjB,EAAE,EAAE,MAAM;gBACV,EAAE,EAAE,GAAG;aACR;YACD,EAAE,EAAE;gBACF,EAAE,EAAE,IAAI;gBACR,EAAE,EAAE,IAAI;gBACR,EAAE,EAAE,KAAK;gBACT,EAAE,EAAE,KAAK;gBACT,EAAE,EAAE,IAAI;gBACR,EAAE,EAAE,IAAI;gBACR,EAAE,EAAE,GAAG;aACR;SACF,CAAC,CAAC,EAAC;QA8RJ,4CAAiB,GAAG,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;gBAC/B,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;YACf,CAAC;iBAAM,CAAC;gBACN,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;YACf,CAAC;QACH,CAAC,EAAC;QAEF,6CAAkB,CAAC,KAAiB,EAAE,EAAE;YACtC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;gBAClE,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;YACf,CAAC;QACH,CAAC,EAAC;QAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAkCG;QACH,6CAAkB,CAAC,KAAoB,EAAE,EAAE;YACzC,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,uBAAA,IAAI,iCAAO,EAAE,CAAC;gBACpD,OAAO;YACT,CAAC;YACD,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;gBAClB,KAAK,WAAW,CAAC;gBACjB,KAAK,SAAS;oBACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,uBAAA,IAAI,kDAA+B,KAAK,CAAC,MAAM,MAAA,CAAC;wBAChD,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACf,CAAC;oBACD,MAAM;gBACR,KAAK,OAAO;oBACV,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;wBAChB,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACf,CAAC;oBACD,MAAM;gBACR,KAAK,QAAQ;oBACX,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,uBAAA,IAAI,iCAAO,EAAE,EAAE,CAAC,CAAC;wBAC/C,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;oBAC5B,CAAC;oBACD,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACb,MAAM;gBACR,KAAK,KAAK,CAAC;gBACX,KAAK,UAAU,CAAC;gBAChB,KAAK,OAAO,CAAC;gBACb,KAAK,SAAS,CAAC;gBACf,KAAK,IAAI,CAAC;gBACV,KAAK,QAAQ,CAAC;gBACd,KAAK,OAAO,CAAC;gBACb,KAAK,OAAO,CAAC;gBACb,KAAK,MAAM,CAAC;gBACZ,KAAK,UAAU,CAAC;gBAChB,KAAK,QAAQ,CAAC;gBACd,KAAK,SAAS,CAAC;gBACf,KAAK,KAAK,CAAC;gBACX,KAAK,YAAY,CAAC;gBAClB,KAAK,YAAY,CAAC;gBAClB,KAAK,GAAG;oBACN,MAAM;gBACR;oBACE,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACf,CAAC;YACL,CAAC;QACH,CAAC,EAAC;QAEF;;;;WAIG;QACH,2CAAgB,CAAC,KAAoB,EAAE,EAAE;YACvC,IAAI,CAAC,uBAAA,IAAI,iCAAO,EAAE,CAAC;gBACjB,OAAO;YACT,CAAC;YACD,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;gBAClB,KAAK,SAAS,CAAC;gBACf,KAAK,WAAW;oBACd;;;;uBAIG;oBACH,IAAI,uBAAA,IAAI,0EAAa;2BACd,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;2BAC/B,mBAAmB,CAAC,QAAQ,EAAE,CAAC;wBACpC,uBAAA,IAAI,mEAAU,MAAd,IAAI,EAAW,uBAAA,IAAI,0EAAa,CAAC,CAAC;oBACpC,CAAC;oBACD,MAAM;gBACR;oBACE,uBAAA,IAAI,sEAAa,MAAjB,IAAI,CAAe,CAAC;YACxB,CAAC;QACH,CAAC,EAAC;QAEF,8CAAmB,CAAC,KAAoB,EAAE,EAAE;YAC1C,IAAI,uBAAA,IAAI,2EAAc,EAAE,CAAC;gBACvB,OAAO,uBAAA,IAAI,0CAAgB,MAApB,IAAI,EAAiB,KAAK,CAAC,CAAC;YACrC,CAAC;iBAAM,CAAC;gBACN,OAAO,uBAAA,IAAI,iDAAuB,MAA3B,IAAI,EAAwB,KAAK,CAAC,CAAC;YAC5C,CAAC;QACH,CAAC,EAAC;QAEF,+CAAoB,CAAC,KAAoB,EAAE,EAAE;YAC3C,IAAI,CAAC,uBAAA,IAAI,2EAAc,EAAE,CAAC;gBACxB,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;oBAClB,KAAK,MAAM,CAAC;oBACZ,KAAK,KAAK;wBACR,uBAAA,IAAI,iDAAuB,MAA3B,IAAI,EAAwB,KAAK,CAAC,CAAC;wBACnC,MAAM;oBACR,KAAK,QAAQ;wBACX,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;wBACb,uBAAA,IAAI,kCAAQ,EAAE,KAAK,EAAE,CAAC;wBACtB,MAAM;oBACR,KAAK,OAAO,CAAC;oBACb,KAAK,GAAG,CAAC,CAAC,CAAC;wBACT,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBACjE,IAAI,SAAS;+BACN,CAAC,IAAI,CAAC,KAAK;+BACX,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;+BACzB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,EAC5C,CAAC;4BACD,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;4BACb,uBAAA,IAAI,kCAAQ,EAAE,KAAK,EAAE,CAAC;wBACxB,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC,EAAC;QAEF,gDAAqB,CAAC,KAAiB,EAAE,EAAE;YACzC,IAAI,CAAC,uBAAA,IAAI,2EAAc,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;gBACrD,MAAM,IAAI,GAAG,uBAAA,IAAI,sEAAS,EAAE,WAAW,EAAE,CAAC;gBAC1C,IAAI,CAAC,IAAI,YAAY,UAAU,IAAI,IAAI,YAAY,QAAQ,CAAC;uBACrD,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAqB,CAAC,EACtD,CAAC;oBACD,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;gBACf,CAAC;YACH,CAAC;QACH,CAAC,EAAC;QAEF,oDAAyB,KAAK,EAAE,KAAoB,EAAE,EAAE;YACtD,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;gBAClB,KAAK,WAAW,CAAC;gBACjB,KAAK,SAAS;oBACZ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACf,CAAC;oBACD,MAAM;gBACR,KAAK,MAAM;oBACT,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,MAAM,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACrB,CAAC;oBACD,IAAI,uBAAA,IAAI,8BAAI,EAAE,CAAC;wBACb,uBAAA,IAAI,8BAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;oBAClC,CAAC;oBACD,MAAM;gBACR,KAAK,KAAK;oBACR,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,MAAM,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;oBACrB,CAAC;oBACD,IAAI,uBAAA,IAAI,8BAAI,EAAE,CAAC;wBACb,uBAAA,IAAI,8BAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;oBACtD,CAAC;oBACD,MAAM;gBACR,KAAK,GAAG,CAAC;gBACT,KAAK,OAAO;oBACV,iBAAiB;oBACjB,KAAK,CAAC,cAAc,EAAE,CAAC;oBACvB,MAAM,uBAAA,IAAI,iEAAQ,MAAZ,IAAI,CAAU,CAAC;oBACrB,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC/B,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;wBAC/B,uBAAA,IAAI,kCAAQ,EAAE,KAAK,EAAE,CAAC;oBACxB,CAAC;oBACD,MAAM;YACV,CAAC;QACH,CAAC,EAAC;QAlbA,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG;YACb,MAAM;YACN,YAAY;YACZ,cAAc;YACd,cAAc;YACd,gBAAgB;YAChB,gBAAgB;YAChB,aAAa;YACb,cAAc,EAAE,GAAG,EAAE,CAAC,UAAU;YAChC,GAAG,OAAO;SACX,CAAC;QACF,uBAAA,IAAI,0BAAO,iBAAiB,CAAC,EAAE,CAAC,IAAI,EAAE;YACpC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;YAC3B,iBAAiB,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB;YACjD,mBAAmB,EAAE,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAC9B,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;aAChC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,gBAAgB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,uBAAA,IAAI,8BAAI,EAAE,kBAAkB,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI;YAC9E,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc;YAC3C,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;SAC9C,CAAC,MAAA,CAAC;IACL,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;QAC/B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,WAAW;QACT,IAAI,CAAC,uBAAA,IAAI,8BAAI,EAAE,CAAC;YACd,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;QACf,CAAC;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;QAC3C,uBAAA,IAAI,kCAAQ,EAAE,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9D,uBAAA,IAAI,iCAAO,EAAE,YAAY,CAAC,eAAe,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC7D,IAAI,uBAAA,IAAI,2EAAc,EAAE,CAAC;YACvB,uBAAA,IAAI,kCAAQ,EAAE,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,uBAAA,IAAI,kCAAQ,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;QAC5C,CAAC;QACD,uBAAA,IAAI,qEAAY,MAAhB,IAAI,CAAc,CAAC;IACrB,CAAC;IAED,gBAAgB;QACd,uBAAA,IAAI,8BAAI,EAAE,gBAAgB,EAAE,CAAC;IAC/B,CAAC;IAqYD;;;;;OAKG;IACI,uBAAuB;QAC5B,IAAI,uBAAA,IAAI,8BAAI,YAAY,0BAA0B,EAAE,CAAC;YACnD,OAAO,uBAAA,IAAI,8BAAI,CAAC,uBAAuB,EAAE,CAAC;QAC5C,CAAC;aAAM,CAAC;YACN,OAAO,OAAO,CAAC;QACjB,CAAC;IACH,CAAC;;;IAndC,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,CAAC;AACzC,CAAC;IAGC,OAAO,uBAAA,IAAI,8BAAI,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,uBAAA,IAAI,8BAAI,EAAE,kBAAkB,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AACrF,CAAC;IAGC,IAAI,IAAI,CAAC,IAAI,YAAY,WAAW,EAAE,CAAC;QACrC,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;SAAM,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,YAAY,WAAW,EAAE,CAAC;QACnE,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;IAC1C,CAAC;AACH,CAAC;AAuDD;;GAEG;AACH,KAAK;IACH,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/B,uBAAA,IAAI,sEAAa,MAAjB,IAAI,CAAe,CAAC;IACpB,uBAAA,IAAI,oEAAW,MAAf,IAAI,CAAa,CAAC;IAClB,uBAAA,IAAI,qEAAY,MAAhB,IAAI,CAAc,CAAC;IACnB,uBAAA,IAAI,oEAAW,MAAf,IAAI,CAAa,CAAC;IAClB,uBAAA,IAAI,qEAAY,MAAhB,IAAI,CAAc,CAAC;IACnB,uBAAA,IAAI,yEAAgB,MAApB,IAAI,CAAkB,CAAC;AACzB,CAAC;;IAGC,uBAAA,IAAI,8BAAI,CAAC,UAAU,EAAE,CAAC;IACtB,uBAAA,IAAI,mCAAS,EAAE,mBAAmB,CAAC,UAAU,EAAE,uBAAA,IAAI,6CAAmB,CAAC,CAAC;IACxE,uBAAA,IAAI,mCAAS,EAAE,mBAAmB,CAAC,SAAS,EAAE,uBAAA,IAAI,4CAAkB,CAAC,CAAC;IACtE,uBAAA,IAAI,mCAAS,EAAE,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,0CAAgB,CAAC,CAAC;IAClE,uBAAA,IAAI,+BAAY,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,MAAA,CAAC;IACjD,IAAI,CAAC,uBAAA,IAAI,mCAAS,EAAE,CAAC;QACnB,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAC;IAC1F,CAAC;IACD,uBAAA,IAAI,mCAAS,CAAC,gBAAgB,CAAC,UAAU,EAAE,uBAAA,IAAI,6CAAmB,CAAC,CAAC;IACpE,uBAAA,IAAI,mCAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,uBAAA,IAAI,4CAAkB,CAAC,CAAC;IAClE,uBAAA,IAAI,mCAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,0CAAgB,CAAC,CAAC;IAC9D,MAAA,uBAAA,IAAI,mCAAS,EAAC,EAAE,QAAF,EAAE,GAAK,WAAW,EAAE,EAAC;IACnC,uBAAA,IAAI,8BAAI,CAAC,OAAO,CAAC,uBAAA,IAAI,mCAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AACvD,CAAC;IAGC,uBAAA,IAAI,kCAAQ,EAAE,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,yCAAe,CAAC,CAAC;IAChE,uBAAA,IAAI,kCAAQ,EAAE,mBAAmB,CAAC,SAAS,EAAE,uBAAA,IAAI,2CAAiB,CAAC,CAAC;IACpE,uBAAA,IAAI,8BAAW,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,MAAA,CAAC;IAC9C,IAAI,CAAC,uBAAA,IAAI,kCAAQ,EAAE,CAAC;QAClB,MAAM,IAAI,KAAK,CAAC,oEAAoE,CAAC,CAAC;IACxF,CAAC;IACD,uBAAA,IAAI,yCAAsB,uBAAA,IAAI,kCAAQ,CAAC,IAAI,MAAA,CAAC;IAC5C,uBAAA,IAAI,kCAAQ,CAAC,IAAI,GAAG,UAAU,CAAC;IAC/B,uBAAA,IAAI,kCAAQ,CAAC,YAAY,CAAC,eAAe,EAAE,uBAAA,IAAI,mCAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IACpE,uBAAA,IAAI,kCAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,yCAAe,CAAC,CAAC;IAC5D,uBAAA,IAAI,kCAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,uBAAA,IAAI,2CAAiB,CAAC,CAAC;AAClE,CAAC;IAGC,uBAAA,IAAI,iCAAO,EAAE,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,yCAAe,CAAC,CAAC;IAC/D,uBAAA,IAAI,iCAAO,EAAE,mBAAmB,CAAC,OAAO,EAAE,uBAAA,IAAI,wCAAc,CAAC,CAAC;IAC9D,uBAAA,IAAI,iCAAO,EAAE,mBAAmB,CAAC,SAAS,EAAE,uBAAA,IAAI,0CAAgB,CAAC,CAAC;IAElE,uBAAA,IAAI,6BAAU,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,MAAA,CAAC;IAC9C,IAAI,uBAAA,IAAI,iCAAO,IAAI,CAAC,CAAC,OAAO,IAAI,uBAAA,IAAI,iCAAO,CAAC,EAAE,CAAC;QAC7C,MAAM,IAAI,KAAK,CAAC,yFAAyF,CAAC,CAAC;IAC7G,CAAC;SAAM,IAAI,uBAAA,IAAI,iCAAO,EAAE,CAAC;QACvB,uBAAA,IAAI,iCAAO,CAAC,IAAI,GAAG,UAAU,CAAC;QAC9B,uBAAA,IAAI,kCAAS,CAAC,IAAI,GAAG,uBAAA,IAAI,6CAAmB,CAAC;QAC7C,uBAAA,IAAI,iCAAO,CAAC,YAAY,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QACtD,uBAAA,IAAI,iCAAO,CAAC,YAAY,CAAC,eAAe,EAAE,uBAAA,IAAI,mCAAS,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;QACnE,uBAAA,IAAI,iCAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,yCAAe,CAAC,CAAC;QAC3D,uBAAA,IAAI,iCAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,uBAAA,IAAI,wCAAc,CAAC,CAAC;QAC1D,uBAAA,IAAI,iCAAO,CAAC,gBAAgB,CAAC,SAAS,EAAE,uBAAA,IAAI,0CAAgB,CAAC,CAAC;IAChE,CAAC;AACH,CAAC;IAGC,MAAM,MAAM,GAAG,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;WACxC,uBAAA,IAAI,sEAAS,EAAE,sBAAsB;WACrC,EAAE,CAAC;IAClB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;WAC5B,uBAAA,IAAI,sEAAS,EAAE,sBAAsB,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;WACvE,IAAI,CAAC;IAEtB,KAAK,MAAM,OAAO,IAAI,CAAC,uBAAA,IAAI,kCAAQ,EAAE,uBAAA,IAAI,mCAAS,EAAE,uBAAA,IAAI,iCAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAClF,IAAI,wBAAwB,IAAI,WAAW,CAAC,SAAS,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;YACxF,OAAO,CAAC,sBAAsB,GAAG,CAAC,GAAG,MAAM,IAAI,EAAE,CAAC,CAAC;QACrD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,SAAS,GAAG,KAAK,CAAC;QAC5B,CAAC;IACH,CAAC;AACH,CAAC;IAGC,uBAAA,IAAI,8BAAI,EAAE,gBAAgB,EAAE,CAAC;IAC7B,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;IACxC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;IAClC,MAAM,iBAAiB,GAAG,GAAG,EAAE,CAAC,uBAAA,IAAI,mCAAS,CAAC;IAC9C,IAAI,uBAAA,IAAI,2EAAc,EAAE,CAAC;QACvB,uBAAA,IAAI,0BAAO,0BAA0B,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;YAClD,QAAQ,EAAE,iBAAiB,EAAE,cAAc;YAC3C,4BAA4B,EAAE,GAAG,EAAE,CAAC,uBAAA,IAAI,iCAAO;YAC/C,mBAAmB,EAAE,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;gBAC9B,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE;aAChC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAClB,aAAa,EAAE,IAAI,CAAC,OAAO,CAAC,aAAa;SAC1C,CAAC,MAAA,CAAC;IACL,CAAC;SAAM,CAAC;QACN,uBAAA,IAAI,0BAAO,wBAAwB,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE;YAChD,QAAQ,EAAE,iBAAiB,EAAE,cAAc;YAC3C,mBAAmB,EAAE,GAAG,EAAE,CAAC;gBACzB,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE;aAC/B,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SACnB,CAAC,MAAA,CAAC;IACL,CAAC;AACH,CAAC;IAGC,IAAI,uBAAA,IAAI,mCAAS,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IACvC,CAAC;AACH,CAAC,6BAED,KAAK;IACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;IACxD,uBAAA,IAAI,sEAAa,MAAjB,IAAI,CAAe,CAAC;IACpB,IAAI,OAAO,KAAK,KAAK,IAAI,CAAC,uBAAA,IAAI,2EAAc,EAAE,CAAC;QAC7C,IAAI,CAAC,uBAAA,IAAI,sDAA4B,EAAE,CAAC;YACtC,CAAC,uBAAA,IAAI,0EAAa,IAAI,uBAAA,IAAI,8BAAI,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC;YACtD,uBAAA,IAAI,kDAA+B,KAAK,MAAA,CAAC;QAC3C,CAAC;IACH,CAAC;AACH,CAAC,6BAED,KAAK;IACH,MAAM,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;AAC1C,CAAC,+BAED,KAAK;IACH,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;QAC9B,OAAO,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;IACtB,CAAC;SAAM,CAAC;QACN,OAAO,uBAAA,IAAI,+DAAM,MAAV,IAAI,CAAQ,CAAC;IACtB,CAAC;AACH,CAAC,yEAEU,GAAW,EAAE,IAAU;IAChC,MAAM,OAAO,GAAG,uBAAA,IAAI,qCAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC,OAAO,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC;AAChC,CAAC,uEAGS,IAAU;IAClB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IAC9C,uBAAA,EAAkB,qCAAO,EAAE,MAAM,EAAE,CAAC;IACpC,MAAM,QAAQ,GAAG,uBAAA,EAAkB,6CAAe,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAqB,CAAC;IAC/F,uBAAA,EAAkB,MAAU,QAAQ,CAAC,iBAAgC,iCAAA,CAAC;IACtE,IAAI,IAAI,GAAG,KAAK,CAAC;IACjB,MAAM,IAAI,GAAG,WAAW,CAAC,uBAAA,IAAI,mCAAS,EAAE,QAAQ,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAChF,MAAM,OAAO,GAAG,IAAI,EAAE,KAAK,CAAC,EAAkB,CAAC,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,CAAS,IAAI,IAAI,CAAC;IAC/E,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC;QACtC,IAAI,IAAI,KAAK,uBAAA,IAAI,oEAAW,MAAf,IAAI,EAAY,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC;IACrD,CAAC;IACD,IAAI,uBAAA,IAAI,8BAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;QAC9B,IAAI,IAAI,MAAM,uBAAA,IAAI,oEAAW,MAAf,IAAI,EAAY,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC;IACxD,CAAC;IACD,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,CAAC;QAC5E,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;YACrB,IAAI,IAAI,MAAM,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,MAAM,CAAC;QACjG,CAAC;aAAM,CAAC;YACN,IAAI,IAAI,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,uBAAA,IAAI,oEAAW,MAAf,IAAI,EAAY,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,GAAG,CAAC;QAC7H,CAAC;IACH,CAAC;IACD,uBAAA,EAAkB,qCAAO,CAAC,IAAI,GAAG,IAAI,CAAC;IACtC,uBAAA,EAAkB,qCAAO,CAAC,SAAS,GAAG,IAAI,CAAC;IAC3C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAA,EAAkB,qCAAO,CAAC,CAAC;AAClD,CAAC;IAGC,IAAI,uBAAA,IAAI,iCAAO,EAAE,CAAC;QAChB,IAAI,KAAa,CAAC;QAClB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YAC9B,MAAM,MAAM,GACV,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;mBACtB,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,uBAAA,IAAI,iCAAO,CAAC,CAAC;mBACtD,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;mBAC1C,KAAK,CAAC;YACb,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;AACH,CAAC;AA5WM,6CAAM,CAAe;AAErB,6CAAiB,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,EAArC,CAAsC;AAE5C,wBAAK,GAAG;IACrB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;CACI,AARU,CAQT;AAEI,0BAAO,GAAG,IAAI,MAAM,CAAC,EAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,AAAjD,CAAkD;AAExE;IACE,+BAA+B;IAC/B,sEAAmB,CAAC,SAAS,GAAG;;;;;;;;;;;;OAY7B,CAAC;AACN,CAAC,GAAA,CAAA","sourcesContent":["import { nothing, type ReactiveController, type ReactiveControllerHost } from 'lit';\nimport type { ActivedescendantControllerOptions } from './activedescendant-controller.js';\nimport type { RovingTabindexControllerOptions } from './roving-tabindex-controller.js';\nimport type { ATFocusController } from './at-focus-controller';\nimport type { ListboxControllerOptions } from './listbox-controller.js';\n\nimport { ListboxController, isItem, isItemDisabled } from './listbox-controller.js';\nimport { RovingTabindexController } from './roving-tabindex-controller.js';\nimport { ActivedescendantController } from './activedescendant-controller.js';\nimport { InternalsController } from './internals-controller.js';\nimport { getRandomId } from '../functions/random.js';\nimport type { RequireProps } from '../core.js';\n\ntype AllOptions<Item extends HTMLElement> =\n    ActivedescendantControllerOptions<Item>\n  & ListboxControllerOptions<Item>\n  & RovingTabindexControllerOptions<Item>;\n\ntype Lang = typeof ComboboxController['langs'][number];\n\nfunction deepClosest(element: Element | null, selector: string) {\n  let closest = element?.closest(selector);\n  let root = element?.getRootNode();\n  let count = 0;\n  while (count < 500 && !closest && element) {\n    count++;\n    root = element.getRootNode();\n    if (root instanceof ShadowRoot) {\n      element = root.host;\n    } else if (root instanceof Document) {\n      element = document.documentElement;\n    } else {\n      return null;\n    }\n    closest = element.closest(selector);\n  }\n  return closest;\n}\n\nfunction getItemValue<Item extends HTMLElement>(item: Item): string {\n  if ('value' in item && typeof item.value === 'string') {\n    return item.value;\n  } else {\n    return '';\n  }\n}\n\nfunction isItemFiltered<Item extends HTMLElement>(item: Item, value: string): boolean {\n  return !getItemValue(item)\n      .toLowerCase()\n      .startsWith(value.toLowerCase());\n}\n\nfunction setItemHidden(item: HTMLElement, hidden: boolean) {\n  item.hidden = hidden;\n}\n\nfunction setComboboxValue(item: HTMLElement, value: string): void {\n  if (!('value' in item)) {\n    // eslint-disable-next-line no-console\n    return console.warn(`Cannot set value on combobox element ${item.localName}`);\n  } else {\n    item.value = value;\n  }\n}\n\nfunction getComboboxValue(combobox: HTMLElement): string {\n  if ('value' in combobox && typeof combobox.value === 'string') {\n    return combobox.value;\n  } else {\n    // eslint-disable-next-line no-console\n    return console.warn(`Cannot get value from combobox element ${combobox.localName}`), '';\n  }\n}\n\nexport interface ComboboxControllerOptions<Item extends HTMLElement> extends\n  Omit<AllOptions<Item>,\n    | 'getATFocusedItem'\n    | 'getControlsElements'\n    | 'getActiveDescendantContainer'\n    | 'getItemsContainer'> {\n  /**\n   * Predicate which establishes whether the listbox is expanded\n   * e.g. `isExpanded: () => this.expanded`, if the host's `expanded` property\n   * should correspond to the listbox expanded state.\n   */\n  isExpanded(): boolean;\n  /**\n   * Callback which the host must implement to change the expanded state to true.\n   * Return or resolve false to prevent the change.\n   */\n  requestShowListbox(): void | boolean | Promise<boolean> | Promise<void>;\n  /**\n   * Callback which the host must implement to change the expanded to false.\n   * Return or resolve false to prevent the default.\n   */\n  requestHideListbox(): void | boolean | Promise<boolean> | Promise<void>;\n  /**\n   * Returns the listbox container element\n   */\n  getListboxElement(): HTMLElement | null;\n  /**\n   * Returns the toggle button, if it exists\n   */\n  getToggleButton(): HTMLElement | null;\n  /**\n   * Returns the combobox input, if it exists\n   */\n  getComboboxInput(): HTMLElement | null;\n  /**\n   * Returns the label for the toggle button, combobox input, and listbox.\n   * when `ariaLabelledByElements` is supported, the label elements associated with\n   * the host element are used instead, and this value is ignored.\n   */\n  getFallbackLabel(): string;\n  /**\n   * Called on an item to retrieve it's value string. By default, returns the `value` property\n   * of the item, as if it implemented the `<option>` element's interface.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n   */\n  getItemValue?(item: Item): string;\n  /**\n   * Optional callback, called on the combobox input element to set its value.\n   * by default, returns the element's `value` DOM property.\n   */\n  getComboboxValue?(combobox: HTMLElement): string;\n  /**\n   * Optional callback, called on the combobox input element to set its value.\n   * by default, sets the element's `value` DOM property.\n   */\n  setComboboxValue?(item: HTMLElement, value: string): void;\n  /**\n   * Called on each item, with the combobox input, to determine if the item should be shown in the\n   * listbox or filtered out. Return false to hide the item. By default, checks whether the item's\n   * value starts with the input value (when both are lowercased).\n   */\n  isItemFiltered?(item: Item, value: string): boolean;\n  /**\n   * Called on each item when the filter changes.\n   * By default, toggles the `hidden` attribute on the item\n   */\n  setItemHidden?(item: Item, hidden: boolean): void;\n}\n\n/**\n * @summary Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].\n *\n * Combobox with keyboard and pointer navigation, using the aria-activedescendant pattern.\n *\n * WARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users\n * rely on the combobox input value being announced when navigating the listbox with the keyboard.\n * We have erred on the side that it may be less-broken to avoid announcing disabled items in that\n * case, rather than announcing the disabled items value without indicating that it is disabled.\n * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)\n *\n * [pattern]: https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-both/\n */\nexport class ComboboxController<\n  Item extends HTMLElement\n> implements ReactiveController {\n  public static of<T extends HTMLElement>(\n    host: ReactiveControllerHost,\n    options: ComboboxControllerOptions<T>,\n  ): ComboboxController<T> {\n    return new ComboboxController(host, options);\n  }\n\n  /**\n   * Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA.\n   */\n  public static get supportsCrossRootActiveDescendant(): boolean {\n    return ActivedescendantController.supportsCrossRootActiveDescendant;\n  }\n\n  static #alert?: HTMLElement;\n\n  static #alertTemplate = document.createElement('template');\n\n  private static langs = [\n    'en',\n    'es',\n    'de',\n    'fr',\n    'it',\n    'ja',\n    'zh',\n  ] as const;\n\n  private static langsRE = new RegExp(ComboboxController.langs.join('|'));\n\n  static {\n    // apply visually-hidden styles\n    this.#alertTemplate.innerHTML = `\n      <div role=\"alert\" style=\"\n         border: 0;\n         clip: rect(0, 0, 0, 0);\n         block-size: 1px;\n         margin: -1px;\n         overflow: hidden;\n         padding: 0;\n         position: absolute;\n         white-space: nowrap;\n         inline-size: 1px;\n        \"></div>\n      `;\n  }\n\n  private options: RequireProps<ComboboxControllerOptions<Item>,\n    | 'isItemDisabled'\n    | 'isItem'\n    | 'isItemFiltered'\n    | 'getItemValue'\n    | 'getOrientation'\n    | 'getComboboxValue'\n    | 'setComboboxValue'\n    | 'setItemHidden'\n  >;\n\n  #lb: ListboxController<Item>;\n  #fc?: ATFocusController<Item>;\n  #preventListboxGainingFocus = false;\n  #input: HTMLElement | null = null;\n  #button: HTMLElement | null = null;\n  #listbox: HTMLElement | null = null;\n  #buttonInitialRole: string | null = null;\n  #mo = new MutationObserver(() => this.#initItems());\n  #microcopy = new Map<string, Record<Lang, string>>(Object.entries({\n    dimmed: {\n      en: 'dimmed',\n      es: 'atenuada',\n      de: 'gedimmt',\n      it: 'oscurato',\n      fr: 'atténué',\n      ja: '暗くなった',\n      zh: '变暗',\n    },\n    selected: {\n      en: 'selected',\n      es: 'seleccionado',\n      de: 'ausgewählt',\n      fr: 'choisie',\n      it: 'selezionato',\n      ja: '選ばれた',\n      zh: '选',\n    },\n    of: {\n      en: 'of',\n      es: 'de',\n      de: 'von',\n      fr: 'sur',\n      it: 'di',\n      ja: '件目',\n      zh: '的',\n    },\n  }));\n\n  /** All items */\n  get items(): Item[] {\n    return this.#lb.items;\n  }\n\n  set items(value: Item[]) {\n    this.#lb.items = value;\n  }\n\n  /** Whether the combobox is disabled */\n  get disabled() {\n    return this.#lb.disabled;\n  }\n\n  set disabled(value: boolean) {\n    this.#lb.disabled = value;\n  }\n\n  /** Whether multiselect is enabled */\n  get multi() {\n    return this.#lb.multi;\n  }\n\n  set multi(value: boolean) {\n    this.#lb.multi = value;\n  }\n\n  /** The current selection: a list of items */\n  get selected() {\n    return this.#lb.selected;\n  }\n\n  set selected(value: Item[]) {\n    this.#lb.selected = value;\n  }\n\n  get #hasTextInput() {\n    return this.options.getComboboxInput();\n  }\n\n  get #focusedItem() {\n    return this.#fc?.items.at(Math.max(this.#fc?.atFocusedItemIndex ?? -1, 0)) ?? null;\n  }\n\n  get #element() {\n    if (this.host instanceof HTMLElement) {\n      return this.host;\n    } else if (this.options.getListboxElement() instanceof HTMLElement) {\n      return this.options.getListboxElement();\n    }\n  }\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    options: ComboboxControllerOptions<Item>,\n  ) {\n    host.addController(this);\n    this.options = {\n      isItem,\n      getItemValue,\n      isItemFiltered,\n      isItemDisabled,\n      getComboboxValue,\n      setComboboxValue,\n      setItemHidden,\n      getOrientation: () => 'vertical',\n      ...options,\n    };\n    this.#lb = ListboxController.of(host, {\n      isItem: this.options.isItem,\n      getItemsContainer: this.options.getListboxElement,\n      getControlsElements: () => [\n        this.options.getToggleButton(),\n        this.options.getComboboxInput(),\n      ].filter(x => !!x),\n      getATFocusedItem: () => this.items[this.#fc?.atFocusedItemIndex ?? -1] ?? null,\n      isItemDisabled: this.options.isItemDisabled,\n      setItemSelected: this.options.setItemSelected,\n    });\n  }\n\n  async hostConnected(): Promise<void> {\n    await this.host.updateComplete;\n    this.hostUpdated();\n  }\n\n  hostUpdated(): void {\n    if (!this.#fc) {\n      this.#init();\n    }\n    const expanded = this.options.isExpanded();\n    this.#button?.setAttribute('aria-expanded', String(expanded));\n    this.#input?.setAttribute('aria-expanded', String(expanded));\n    if (this.#hasTextInput) {\n      this.#button?.setAttribute('tabindex', '-1');\n    } else {\n      this.#button?.removeAttribute('tabindex');\n    }\n    this.#initLabels();\n  }\n\n  hostDisconnected(): void {\n    this.#fc?.hostDisconnected();\n  }\n\n  /**\n   * Order of operations is important\n   */\n  async #init() {\n    await this.host.updateComplete;\n    this.#initListbox();\n    this.#initItems();\n    this.#initButton();\n    this.#initInput();\n    this.#initLabels();\n    this.#initController();\n  }\n\n  #initListbox() {\n    this.#mo.disconnect();\n    this.#listbox?.removeEventListener('focusout', this.#onFocusoutListbox);\n    this.#listbox?.removeEventListener('keydown', this.#onKeydownListbox);\n    this.#listbox?.removeEventListener('click', this.#onClickListbox);\n    this.#listbox = this.options.getListboxElement();\n    if (!this.#listbox) {\n      throw new Error('ComboboxController getListboxElement() option must return an element');\n    }\n    this.#listbox.addEventListener('focusout', this.#onFocusoutListbox);\n    this.#listbox.addEventListener('keydown', this.#onKeydownListbox);\n    this.#listbox.addEventListener('click', this.#onClickListbox);\n    this.#listbox.id ??= getRandomId();\n    this.#mo.observe(this.#listbox, { childList: true });\n  }\n\n  #initButton() {\n    this.#button?.removeEventListener('click', this.#onClickButton);\n    this.#button?.removeEventListener('keydown', this.#onKeydownButton);\n    this.#button = this.options.getToggleButton();\n    if (!this.#button) {\n      throw new Error('ComboboxController getToggleButton() option must return an element');\n    }\n    this.#buttonInitialRole = this.#button.role;\n    this.#button.role = 'combobox';\n    this.#button.setAttribute('aria-controls', this.#listbox?.id ?? '');\n    this.#button.addEventListener('click', this.#onClickButton);\n    this.#button.addEventListener('keydown', this.#onKeydownButton);\n  }\n\n  #initInput() {\n    this.#input?.removeEventListener('click', this.#onClickButton);\n    this.#input?.removeEventListener('keyup', this.#onKeyupInput);\n    this.#input?.removeEventListener('keydown', this.#onKeydownInput);\n\n    this.#input = this.options.getComboboxInput();\n    if (this.#input && !('value' in this.#input)) {\n      throw new Error(`ComboboxController getToggleInput() option must return an element with a value property`);\n    } else if (this.#input) {\n      this.#input.role = 'combobox';\n      this.#button!.role = this.#buttonInitialRole;\n      this.#input.setAttribute('aria-autocomplete', 'both');\n      this.#input.setAttribute('aria-controls', this.#listbox?.id ?? '');\n      this.#input.addEventListener('click', this.#onClickButton);\n      this.#input.addEventListener('keyup', this.#onKeyupInput);\n      this.#input.addEventListener('keydown', this.#onKeydownInput);\n    }\n  }\n\n  #initLabels() {\n    const labels = InternalsController.getLabels(this.host)\n                ?? this.#element?.ariaLabelledByElements\n                ?? [];\n    const label = this.options.getFallbackLabel()\n                  || this.#element?.ariaLabelledByElements?.map(x => x.textContent).join('')\n                  || null;\n\n    for (const element of [this.#button, this.#listbox, this.#input].filter(x => !!x)) {\n      if ('ariaLabelledByElements' in HTMLElement.prototype && labels.filter(x => !!x).length) {\n        element.ariaLabelledByElements = [...labels ?? []];\n      } else {\n        element.ariaLabel = label;\n      }\n    }\n  }\n\n  #initController() {\n    this.#fc?.hostDisconnected();\n    const { getOrientation } = this.options;\n    const getItems = () => this.items;\n    const getItemsContainer = () => this.#listbox;\n    if (this.#hasTextInput) {\n      this.#fc = ActivedescendantController.of(this.host, {\n        getItems, getItemsContainer, getOrientation,\n        getActiveDescendantContainer: () => this.#input,\n        getControlsElements: () => [\n          this.options.getToggleButton(),\n          this.options.getComboboxInput(),\n        ].filter(x => !!x),\n        setItemActive: this.options.setItemActive,\n      });\n    } else {\n      this.#fc = RovingTabindexController.of(this.host, {\n        getItems, getItemsContainer, getOrientation,\n        getControlsElements: () => [\n          this.options.getToggleButton(),\n        ].filter(x => !!x),\n      });\n    }\n  }\n\n  #initItems() {\n    if (this.#listbox) {\n      this.items = this.options.getItems();\n    }\n  }\n\n  async #show(): Promise<void> {\n    const success = await this.options.requestShowListbox();\n    this.#filterItems();\n    if (success !== false && !this.#hasTextInput) {\n      if (!this.#preventListboxGainingFocus) {\n        (this.#focusedItem ?? this.#fc?.items.at(0))?.focus();\n        this.#preventListboxGainingFocus = false;\n      }\n    }\n  }\n\n  async #hide(): Promise<void> {\n    await this.options.requestHideListbox();\n  }\n\n  async #toggle() {\n    if (this.options.isExpanded()) {\n      return this.#hide();\n    } else {\n      return this.#show();\n    }\n  }\n\n  #translate(key: string, lang: Lang) {\n    const strings = this.#microcopy.get(key);\n    return strings?.[lang] ?? key;\n  }\n\n  // TODO(bennypowers): perhaps move this to ActivedescendantController\n  #announce(item: Item) {\n    const value = this.options.getItemValue(item);\n    ComboboxController.#alert?.remove();\n    const fragment = ComboboxController.#alertTemplate.content.cloneNode(true) as DocumentFragment;\n    ComboboxController.#alert = fragment.firstElementChild as HTMLElement;\n    let text = value;\n    const lang = deepClosest(this.#listbox, '[lang]')?.getAttribute('lang') ?? 'en';\n    const langKey = lang?.match(ComboboxController.langsRE)?.at(0) as Lang ?? 'en';\n    if (this.options.isItemDisabled(item)) {\n      text += ` (${this.#translate('dimmed', langKey)})`;\n    }\n    if (this.#lb.isSelected(item)) {\n      text += `, (${this.#translate('selected', langKey)})`;\n    }\n    if (item.hasAttribute('aria-setsize') && item.hasAttribute('aria-posinset')) {\n      if (langKey === 'ja') {\n        text += `, (${item.getAttribute('aria-setsize')} 件中 ${item.getAttribute('aria-posinset')} 件目)`;\n      } else {\n        text += `, (${item.getAttribute('aria-posinset')} ${this.#translate('of', langKey)} ${item.getAttribute('aria-setsize')})`;\n      }\n    }\n    ComboboxController.#alert.lang = lang;\n    ComboboxController.#alert.innerText = text;\n    document.body.append(ComboboxController.#alert);\n  }\n\n  #filterItems() {\n    if (this.#input) {\n      let value: string;\n      for (const item of this.items) {\n        const hidden =\n          !!this.options.isExpanded()\n            && !!(value = this.options.getComboboxValue(this.#input))\n            && this.options.isItemFiltered?.(item, value)\n            || false;\n        this.options.setItemHidden(item, hidden);\n      }\n    }\n  }\n\n  #onClickButton = () => {\n    if (!this.options.isExpanded()) {\n      this.#show();\n    } else {\n      this.#hide();\n    }\n  };\n\n  #onClickListbox = (event: MouseEvent) => {\n    if (!this.multi && event.composedPath().some(this.options.isItem)) {\n      this.#hide();\n    }\n  };\n\n  /**\n   * Handle keypresses on the input\n   * ## `Down Arrow`\n   * - If the textbox is not empty and the listbox is displayed,\n   *   moves visual focus to the first suggested value.\n   * - If the textbox is empty and the listbox is not displayed,\n   *   opens the listbox and moves visual focus to the first option.\n   * - In both cases DOM focus remains on the textbox.\n   *\n   * ## `Alt + Down Arrow`\n   * Opens the listbox without moving focus or changing selection.\n   *\n   * ## `Up Arrow`\n   * - If the textbox is not empty and the listbox is displayed,\n   *   moves visual focus to the last suggested value.\n   * - If the textbox is empty, first opens the listbox if it is not already displayed\n   *   and then moves visual focus to the last option.\n   * - In both cases DOM focus remains on the textbox.\n   *\n   * ## `Enter`\n   * Closes the listbox if it is displayed.\n   *\n   * ## `Escape`\n   * - If the listbox is displayed, closes it.\n   * - If the listbox is not displayed, clears the textbox.\n   *\n   * ## Standard single line text editing keys\n   * - Keys used for cursor movement and text manipulation,\n   *   such as `Delete` and `Shift + Right Arrow`.\n   * - An HTML `input` with `type=\"text\"` is used for the textbox so the browser will provide\n   *   platform-specific editing keys.\n   *\n   * @see https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list\n   * @param event keydown event\n   */\n  #onKeydownInput = (event: KeyboardEvent) => {\n    if (event.ctrlKey || event.shiftKey || !this.#input) {\n      return;\n    }\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'ArrowUp':\n        if (!this.options.isExpanded()) {\n          this.#preventListboxGainingFocus = event.altKey;\n          this.#show();\n        }\n        break;\n      case 'Enter':\n        if (!this.multi) {\n          this.#hide();\n        }\n        break;\n      case 'Escape':\n        if (!this.options.isExpanded()) {\n          this.options.setComboboxValue(this.#input, '');\n          this.host.requestUpdate();\n        }\n        this.#hide();\n        break;\n      case 'Alt':\n      case 'AltGraph':\n      case 'Shift':\n      case 'Control':\n      case 'Fn':\n      case 'Symbol':\n      case 'Hyper':\n      case 'Super':\n      case 'Meta':\n      case 'CapsLock':\n      case 'FnLock':\n      case 'NumLock':\n      case 'Tab':\n      case 'ScrollLock':\n      case 'SymbolLock':\n      case ' ':\n        break;\n      default:\n        if (!this.options.isExpanded()) {\n          this.#show();\n        }\n    }\n  };\n\n  /**\n   * Populates the combobox input with the focused value when navigating the listbox,\n   * and filters the items when typing.\n   * @param event keyup event\n   */\n  #onKeyupInput = (event: KeyboardEvent) => {\n    if (!this.#input) {\n      return;\n    }\n    switch (event.key) {\n      case 'ArrowUp':\n      case 'ArrowDown':\n        /**\n         * Safari VoiceOver does not support aria-activedescendant, so we must.\n         * approximate the correct behaviour by constructing a visually-hidden alert role\n         * @see (https://bugs.webkit.org/show_bug.cgi?id=269026)\n         */\n        if (this.#focusedItem\n            && this.options.getComboboxInput()\n            && InternalsController.isSafari) {\n          this.#announce(this.#focusedItem);\n        }\n        break;\n      default:\n        this.#filterItems();\n    }\n  };\n\n  #onKeydownButton = (event: KeyboardEvent) => {\n    if (this.#hasTextInput) {\n      return this.#onKeydownInput(event);\n    } else {\n      return this.#onKeydownToggleButton(event);\n    }\n  };\n\n  #onKeydownListbox = (event: KeyboardEvent) => {\n    if (!this.#hasTextInput) {\n      switch (event.key) {\n        case 'Home':\n        case 'End':\n          this.#onKeydownToggleButton(event);\n          break;\n        case 'Escape':\n          this.#hide();\n          this.#button?.focus();\n          break;\n        case 'Enter':\n        case ' ': {\n          const eventItem = event.composedPath().find(this.options.isItem);\n          if (eventItem\n              && !this.multi\n              && this.options.isExpanded()\n              && !this.options.isItemDisabled(eventItem)\n          ) {\n            this.#hide();\n            this.#button?.focus();\n          }\n        }\n      }\n    }\n  };\n\n  #onFocusoutListbox = (event: FocusEvent) => {\n    if (!this.#hasTextInput && this.options.isExpanded()) {\n      const root = this.#element?.getRootNode();\n      if ((root instanceof ShadowRoot || root instanceof Document)\n          && !this.items.includes(event.relatedTarget as Item)\n      ) {\n        this.#hide();\n      }\n    }\n  };\n\n  #onKeydownToggleButton = async (event: KeyboardEvent) => {\n    switch (event.key) {\n      case 'ArrowDown':\n      case 'ArrowUp':\n        if (!this.options.isExpanded()) {\n          this.#show();\n        }\n        break;\n      case 'Home':\n        if (!this.options.isExpanded()) {\n          await this.#show();\n        }\n        if (this.#fc) {\n          this.#fc.atFocusedItemIndex = 0;\n        }\n        break;\n      case 'End':\n        if (!this.options.isExpanded()) {\n          await this.#show();\n        }\n        if (this.#fc) {\n          this.#fc.atFocusedItemIndex = this.items.length - 1;\n        }\n        break;\n      case ' ':\n      case 'Enter':\n        // prevent scroll\n        event.preventDefault();\n        await this.#toggle();\n        await this.host.updateComplete;\n        if (!this.options.isExpanded()) {\n          this.#button?.focus();\n        }\n        break;\n    }\n  };\n\n  /**\n   * For Browsers which do not support `ariaActiveDescendantElement`, we must clone\n   * the listbox items into the same root as the combobox input\n   * Call this method to return either an array of (cloned) list box items, to be placed in your\n   * shadow template, or nothing in the case the browser supports cross-root aria.\n   */\n  public renderItemsToShadowRoot(): Node[] | typeof nothing {\n    if (this.#fc instanceof ActivedescendantController) {\n      return this.#fc.renderItemsToShadowRoot();\n    } else {\n      return nothing;\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.d.ts
new file mode 100644
index 0000000..7c0d971
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.d.ts
@@ -0,0 +1,9 @@
+import type { ReactiveElement, ReactiveController } from 'lit';
+export declare class CssVariableController implements ReactiveController {
+    host: ReactiveElement;
+    style?: CSSStyleDeclaration;
+    constructor(host: ReactiveElement);
+    private parseProperty;
+    getVariable(name: string): string | null;
+    hostConnected(): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js
new file mode 100644
index 0000000..62a9944
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js
@@ -0,0 +1,19 @@
+export class CssVariableController {
+    constructor(host) {
+        this.host = host;
+        if (this.host.isConnected) {
+            this.hostConnected();
+        }
+    }
+    parseProperty(name) {
+        return name.substring(0, 2) !== '--' ? `--${name}` : name;
+    }
+    getVariable(name) {
+        return this.style?.getPropertyValue(this.parseProperty(name)).trim() || null;
+    }
+    hostConnected() {
+        this.style = window.getComputedStyle(this.host);
+    }
+    ;
+}
+//# sourceMappingURL=css-variable-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js.map
new file mode 100644
index 0000000..578d0fd
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/css-variable-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"css-variable-controller.js","sourceRoot":"","sources":["css-variable-controller.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,qBAAqB;IAGhC,YAAmB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;QACtC,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YAC1B,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC;IACH,CAAC;IAEO,aAAa,CAAC,IAAY;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC5D,CAAC;IAED,WAAW,CAAC,IAAY;QACtB,OAAO,IAAI,CAAC,KAAK,EAAE,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;IAC/E,CAAC;IAED,aAAa;QACX,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAAA,CAAC;CACH","sourcesContent":["import type { ReactiveElement, ReactiveController } from 'lit';\n\nexport class CssVariableController implements ReactiveController {\n  style?: CSSStyleDeclaration;\n\n  constructor(public host: ReactiveElement) {\n    if (this.host.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  private parseProperty(name: string) {\n    return name.substring(0, 2) !== '--' ? `--${name}` : name;\n  }\n\n  getVariable(name: string): string | null {\n    return this.style?.getPropertyValue(this.parseProperty(name)).trim() || null;\n  }\n\n  hostConnected(): void {\n    this.style = window.getComputedStyle(this.host);\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.d.ts
new file mode 100644
index 0000000..dbcd540
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.d.ts
@@ -0,0 +1,58 @@
+import type { Placement } from '@floating-ui/dom';
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+import type { StyleInfo } from 'lit/directives/style-map.js';
+import type { OffsetOptions as Offset } from '@floating-ui/core';
+export type { Placement };
+type Lazy<T> = T | (() => T | null | undefined);
+interface FloatingDOMControllerOptions {
+    content: Lazy<HTMLElement>;
+    invoker?: Lazy<HTMLElement>;
+    arrow?: Lazy<HTMLElement>;
+    shift?: boolean;
+    padding?: number;
+    fallbackPlacements?: Placement[];
+}
+interface ShowOptions {
+    offset?: Offset;
+    placement?: Placement;
+    flip?: boolean;
+    fallbackPlacements?: Placement[];
+}
+export type Anchor = '' | 'top' | 'left' | 'bottom' | 'right';
+export type Alignment = 'center' | 'start' | 'end';
+/**
+ * Controls floating DOM within a web component, e.g. tooltips and popovers
+ */
+export declare class FloatingDOMController implements ReactiveController {
+    #private;
+    private host;
+    /** The crosswise alignment of the invoker on which to display the floating DOM */
+    get alignment(): Alignment;
+    /** The side of the invoker on which to display the floating DOM */
+    get anchor(): Anchor;
+    /**
+     * When true, the floating DOM is visible
+     */
+    get open(): boolean;
+    /** The computed placement of the floating DOM */
+    get placement(): Placement;
+    /**
+     * Styles to apply to your element's container
+     *
+     * - `--_floating-content-translate`: translate to apply to floating content.
+     */
+    get styles(): StyleInfo;
+    constructor(host: ReactiveControllerHost, options: FloatingDOMControllerOptions);
+    hostDisconnected(): void;
+    /**
+     * Show the floating DOM
+     * @param [options={}]
+     * @param options.offset
+     * @param options.placement
+     * @param options.flip
+     * @param options.fallbackPlacements
+     * */
+    show({ offset, placement, flip, fallbackPlacements }?: ShowOptions): Promise<void>;
+    /** Hide the floating DOM */
+    hide(): Promise<void>;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js
new file mode 100644
index 0000000..880c07a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js
@@ -0,0 +1,142 @@
+var _FloatingDOMController_instances, _FloatingDOMController_open, _FloatingDOMController_opening, _FloatingDOMController_cleanup, _FloatingDOMController_anchor, _FloatingDOMController_alignment, _FloatingDOMController_styles, _FloatingDOMController_placement, _FloatingDOMController_options, _FloatingDOMController_invoker_get, _FloatingDOMController_content_get, _FloatingDOMController_arrow_get, _FloatingDOMController_update;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { autoUpdate, computePosition, offset as offsetMiddleware, shift as shiftMiddleware, flip as flipMiddleware, arrow as arrowMiddleware, } from '@floating-ui/dom';
+/**
+ * Controls floating DOM within a web component, e.g. tooltips and popovers
+ */
+export class FloatingDOMController {
+    /** The crosswise alignment of the invoker on which to display the floating DOM */
+    get alignment() {
+        return __classPrivateFieldGet(this, _FloatingDOMController_alignment, "f") ?? 'center';
+    }
+    /** The side of the invoker on which to display the floating DOM */
+    get anchor() {
+        return __classPrivateFieldGet(this, _FloatingDOMController_anchor, "f") ?? '';
+    }
+    /**
+     * When true, the floating DOM is visible
+     */
+    get open() {
+        return __classPrivateFieldGet(this, _FloatingDOMController_open, "f");
+    }
+    /** The computed placement of the floating DOM */
+    get placement() {
+        return __classPrivateFieldGet(this, _FloatingDOMController_placement, "f") ?? 'top';
+    }
+    /**
+     * Styles to apply to your element's container
+     *
+     * - `--_floating-content-translate`: translate to apply to floating content.
+     */
+    get styles() {
+        return __classPrivateFieldGet(this, _FloatingDOMController_styles, "f") ?? {};
+    }
+    constructor(host, options) {
+        _FloatingDOMController_instances.add(this);
+        this.host = host;
+        _FloatingDOMController_open.set(this, false);
+        _FloatingDOMController_opening.set(this, false);
+        _FloatingDOMController_cleanup.set(this, void 0);
+        _FloatingDOMController_anchor.set(this, void 0);
+        _FloatingDOMController_alignment.set(this, void 0);
+        _FloatingDOMController_styles.set(this, void 0);
+        _FloatingDOMController_placement.set(this, void 0);
+        _FloatingDOMController_options.set(this, void 0);
+        host.addController(this);
+        __classPrivateFieldSet(this, _FloatingDOMController_options, {
+            invoker: (() => host),
+            shift: true,
+            ...options,
+        }, "f");
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(this, _FloatingDOMController_cleanup, "f")?.call(this);
+    }
+    /**
+     * Show the floating DOM
+     * @param [options={}]
+     * @param options.offset
+     * @param options.placement
+     * @param options.flip
+     * @param options.fallbackPlacements
+     * */
+    async show({ offset, placement, flip, fallbackPlacements } = {}) {
+        const invoker = __classPrivateFieldGet(this, _FloatingDOMController_instances, "a", _FloatingDOMController_invoker_get);
+        const content = __classPrivateFieldGet(this, _FloatingDOMController_instances, "a", _FloatingDOMController_content_get);
+        if (!invoker || !content) {
+            return;
+        }
+        if (!__classPrivateFieldGet(this, _FloatingDOMController_opening, "f")) {
+            __classPrivateFieldSet(this, _FloatingDOMController_opening, true, "f");
+            const p = __classPrivateFieldGet(this, _FloatingDOMController_instances, "m", _FloatingDOMController_update).call(this, placement, offset, flip, fallbackPlacements);
+            __classPrivateFieldSet(this, _FloatingDOMController_cleanup, __classPrivateFieldGet(this, _FloatingDOMController_cleanup, "f") ?? autoUpdate(invoker, content, () => __classPrivateFieldGet(this, _FloatingDOMController_instances, "m", _FloatingDOMController_update).call(this, placement, offset, flip, fallbackPlacements)), "f");
+            await p;
+            __classPrivateFieldSet(this, _FloatingDOMController_opening, false, "f");
+        }
+        __classPrivateFieldSet(this, _FloatingDOMController_open, true, "f");
+        this.host.requestUpdate();
+    }
+    /** Hide the floating DOM */
+    async hide() {
+        await this.host.updateComplete;
+        while (__classPrivateFieldGet(this, _FloatingDOMController_opening, "f") && !this.open) {
+            await new Promise(requestAnimationFrame);
+        }
+        __classPrivateFieldSet(this, _FloatingDOMController_open, false, "f");
+        __classPrivateFieldGet(this, _FloatingDOMController_cleanup, "f")?.call(this);
+        this.host.requestUpdate();
+        await this.host.updateComplete;
+    }
+}
+_FloatingDOMController_open = new WeakMap(), _FloatingDOMController_opening = new WeakMap(), _FloatingDOMController_cleanup = new WeakMap(), _FloatingDOMController_anchor = new WeakMap(), _FloatingDOMController_alignment = new WeakMap(), _FloatingDOMController_styles = new WeakMap(), _FloatingDOMController_placement = new WeakMap(), _FloatingDOMController_options = new WeakMap(), _FloatingDOMController_instances = new WeakSet(), _FloatingDOMController_invoker_get = function _FloatingDOMController_invoker_get() {
+    const { invoker } = __classPrivateFieldGet(this, _FloatingDOMController_options, "f");
+    return typeof invoker === 'function' ? invoker() : invoker;
+}, _FloatingDOMController_content_get = function _FloatingDOMController_content_get() {
+    const { content } = __classPrivateFieldGet(this, _FloatingDOMController_options, "f");
+    return typeof content === 'function' ? content() : content;
+}, _FloatingDOMController_arrow_get = function _FloatingDOMController_arrow_get() {
+    const { arrow } = __classPrivateFieldGet(this, _FloatingDOMController_options, "f");
+    return typeof arrow === 'function' ? arrow() : arrow;
+}, _FloatingDOMController_update = async function _FloatingDOMController_update(placement = 'top', offset, flip = true, fallbackPlacements) {
+    var _a, _b;
+    const { padding, shift } = __classPrivateFieldGet(this, _FloatingDOMController_options, "f");
+    const invoker = __classPrivateFieldGet(this, _FloatingDOMController_instances, "a", _FloatingDOMController_invoker_get);
+    const content = __classPrivateFieldGet(this, _FloatingDOMController_instances, "a", _FloatingDOMController_content_get);
+    const arrow = __classPrivateFieldGet(this, _FloatingDOMController_instances, "a", _FloatingDOMController_arrow_get);
+    if (!invoker || !content) {
+        return;
+    }
+    const { x, y, placement: _placement, middlewareData, } = await computePosition(invoker, content, {
+        strategy: 'absolute',
+        placement,
+        middleware: [
+            offsetMiddleware(offset),
+            shift && shiftMiddleware({ padding }),
+            arrow && arrowMiddleware({ element: arrow, padding: arrow.offsetHeight / 2 }),
+            flip && flipMiddleware({ padding, fallbackPlacements }),
+        ].filter(Boolean),
+    });
+    if (arrow) {
+        const { x: arrowX, y: arrowY } = middlewareData.arrow || {};
+        const staticSide = {
+            top: 'bottom',
+            right: 'left',
+            bottom: 'top',
+            left: 'right',
+        }[_placement.split('-')[0]] || '';
+        Object.assign(arrow.style, {
+            left: arrowX != null ? `${arrowX}px` : '',
+            top: arrowY != null && !['top'].includes(_placement) ? `${arrowY}px` : '',
+            right: '',
+            bottom: '',
+            [staticSide]: `-${arrow.offsetHeight / 2}px`,
+        });
+    }
+    __classPrivateFieldSet(this, _FloatingDOMController_placement, _placement, "f");
+    _a = this, _b = this, [({ set value(_c) { __classPrivateFieldSet(_a, _FloatingDOMController_anchor, _c, "f"); } }).value, ({ set value(_c) { __classPrivateFieldSet(_b, _FloatingDOMController_alignment, _c, "f"); } }).value] = (__classPrivateFieldGet(this, _FloatingDOMController_placement, "f").split('-') ?? []);
+    __classPrivateFieldSet(this, _FloatingDOMController_styles, {
+        '--_floating-content-translate': `${x}px ${y}px`,
+    }, "f");
+    this.host.requestUpdate();
+};
+//# sourceMappingURL=floating-dom-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js.map
new file mode 100644
index 0000000..00f099b
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/floating-dom-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"floating-dom-controller.js","sourceRoot":"","sources":["floating-dom-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Placement } from '@floating-ui/dom';\nimport type { LitElement, ReactiveController, ReactiveControllerHost } from 'lit';\nimport type { StyleInfo } from 'lit/directives/style-map.js';\nimport type { OffsetOptions as Offset } from '@floating-ui/core';\n\nexport type { Placement };\n\nimport {\n  autoUpdate,\n  computePosition,\n  offset as offsetMiddleware,\n  shift as shiftMiddleware,\n  flip as flipMiddleware,\n  arrow as arrowMiddleware,\n} from '@floating-ui/dom';\n\ntype Lazy<T> = T | (() => T | null | undefined);\n\ninterface FloatingDOMControllerOptions {\n  content: Lazy<HTMLElement>;\n  invoker?: Lazy<HTMLElement>;\n  arrow?: Lazy<HTMLElement>;\n  shift?: boolean;\n  padding?: number;\n  fallbackPlacements?: Placement[];\n}\n\ninterface ShowOptions {\n  offset?: Offset;\n  placement?: Placement;\n  flip?: boolean;\n  fallbackPlacements?: Placement[];\n}\n\nexport type Anchor = '' | 'top' | 'left' | 'bottom' | 'right';\nexport type Alignment = 'center' | 'start' | 'end';\n\n/**\n * Controls floating DOM within a web component, e.g. tooltips and popovers\n */\nexport class FloatingDOMController implements ReactiveController {\n  #open = false;\n  #opening = false;\n  #cleanup?: () => void;\n  #anchor?: Anchor;\n  #alignment?: Alignment;\n  #styles?: StyleInfo;\n  #placement?: Placement;\n  #options: FloatingDOMControllerOptions;\n\n  get #invoker() {\n    const { invoker } = this.#options;\n    return typeof invoker === 'function' ? invoker() : invoker;\n  }\n\n  get #content() {\n    const { content } = this.#options;\n    return typeof content === 'function' ? content() : content;\n  }\n\n  get #arrow() {\n    const { arrow } = this.#options;\n    return typeof arrow === 'function' ? arrow() : arrow;\n  }\n\n  /** The crosswise alignment of the invoker on which to display the floating DOM */\n  get alignment(): Alignment {\n    return this.#alignment ?? 'center';\n  }\n\n  /** The side of the invoker on which to display the floating DOM */\n  get anchor(): Anchor {\n    return this.#anchor ?? '';\n  }\n\n  /**\n   * When true, the floating DOM is visible\n   */\n  get open(): boolean {\n    return this.#open;\n  }\n\n  /** The computed placement of the floating DOM */\n  get placement(): Placement {\n    return this.#placement ?? 'top';\n  }\n\n  /**\n   * Styles to apply to your element's container\n   *\n   * - `--_floating-content-translate`: translate to apply to floating content.\n   */\n  get styles(): StyleInfo {\n    return this.#styles ?? {};\n  }\n\n  constructor(\n    private host: ReactiveControllerHost,\n    options: FloatingDOMControllerOptions\n  ) {\n    host.addController(this);\n    this.#options = {\n      invoker: (() => host as LitElement),\n      shift: true,\n      ...options,\n    };\n  }\n\n  hostDisconnected(): void {\n    this.#cleanup?.();\n  }\n\n  async #update(\n    placement: Placement = 'top',\n    offset?: Offset,\n    flip = true,\n    fallbackPlacements?: Placement[],\n  ) {\n    const { padding, shift } = this.#options;\n\n    const invoker = this.#invoker;\n    const content = this.#content;\n    const arrow = this.#arrow;\n    if (!invoker || !content) {\n      return;\n    }\n    const {\n      x,\n      y,\n      placement: _placement,\n      middlewareData,\n    } = await computePosition(invoker, content, {\n      strategy: 'absolute',\n      placement,\n      middleware: [\n        offsetMiddleware(offset),\n        shift && shiftMiddleware({ padding }),\n        arrow && arrowMiddleware({ element: arrow, padding: arrow.offsetHeight / 2 }),\n        flip && flipMiddleware({ padding, fallbackPlacements }),\n      ].filter(Boolean),\n    });\n\n    if (arrow) {\n      const { x: arrowX, y: arrowY } = middlewareData.arrow || {};\n\n      const staticSide = {\n        top: 'bottom',\n        right: 'left',\n        bottom: 'top',\n        left: 'right',\n      }[_placement.split('-')[0]] || '';\n\n      Object.assign(arrow.style, {\n        left: arrowX != null ? `${arrowX}px` : '',\n        top: arrowY != null && !['top'].includes(_placement) ? `${arrowY}px` : '',\n        right: '',\n        bottom: '',\n        [staticSide]: `-${arrow.offsetHeight / 2}px`,\n      });\n    }\n\n    this.#placement = _placement;\n    [this.#anchor, this.#alignment] = (this.#placement.split('-') ?? []) as [Anchor, Alignment];\n    this.#styles = {\n      '--_floating-content-translate': `${x}px ${y}px`,\n    };\n    this.host.requestUpdate();\n  }\n\n  /**\n   * Show the floating DOM\n   * @param [options={}]\n   * @param options.offset\n   * @param options.placement\n   * @param options.flip\n   * @param options.fallbackPlacements\n   * */\n  async show({ offset, placement, flip, fallbackPlacements }: ShowOptions = {}): Promise<void> {\n    const invoker = this.#invoker;\n    const content = this.#content;\n    if (!invoker || !content) {\n      return;\n    }\n    if (!this.#opening) {\n      this.#opening = true;\n      const p = this.#update(placement, offset, flip, fallbackPlacements);\n      this.#cleanup ??= autoUpdate(invoker, content, () =>\n        this.#update(placement, offset, flip, fallbackPlacements));\n      await p;\n      this.#opening = false;\n    }\n    this.#open = true;\n    this.host.requestUpdate();\n  }\n\n  /** Hide the floating DOM */\n  async hide(): Promise<void> {\n    await this.host.updateComplete;\n    while (this.#opening && !this.open) {\n      await new Promise(requestAnimationFrame);\n    }\n    this.#open = false;\n    this.#cleanup?.();\n    this.host.requestUpdate();\n    await this.host.updateComplete;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.d.ts
new file mode 100644
index 0000000..7440471
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.d.ts
@@ -0,0 +1,120 @@
+import { type ReactiveController, type ReactiveControllerHost } from 'lit';
+interface InternalsControllerOptions extends Partial<ARIAMixin> {
+    getHTMLElement?(): HTMLElement;
+}
+export declare class InternalsController implements ReactiveController, ARIAMixin {
+    #private;
+    host: ReactiveControllerHost;
+    private options?;
+    private static instances;
+    readonly form: ElementInternals['form'];
+    readonly shadowRoot: ElementInternals['shadowRoot'];
+    readonly states: unknown;
+    readonly willValidate: ElementInternals['willValidate'];
+    readonly validationMessage: ElementInternals['validationMessage'];
+    static getLabels(host: ReactiveControllerHost): Element[];
+    static isSafari: boolean;
+    static of(host: ReactiveControllerHost, options?: InternalsControllerOptions): InternalsController;
+    role: string | null;
+    ariaActivedescendant: string | null;
+    ariaAtomic: string | null;
+    ariaAutoComplete: string | null;
+    ariaBusy: string | null;
+    ariaBrailleLabel: string | null;
+    ariaBrailleRoleDescription: string | null;
+    ariaChecked: string | null;
+    ariaColCount: string | null;
+    ariaColIndex: string | null;
+    ariaColIndexText: string | null;
+    ariaColSpan: string | null;
+    ariaCurrent: string | null;
+    ariaDescription: string | null;
+    ariaDisabled: string | null;
+    ariaExpanded: string | null;
+    ariaHasPopup: string | null;
+    ariaHidden: string | null;
+    ariaInvalid: string | null;
+    ariaKeyShortcuts: string | null;
+    ariaLabel: string | null;
+    ariaLevel: string | null;
+    ariaLive: string | null;
+    ariaModal: string | null;
+    ariaMultiLine: string | null;
+    ariaMultiSelectable: string | null;
+    ariaOrientation: string | null;
+    ariaPlaceholder: string | null;
+    ariaPosInSet: string | null;
+    ariaPressed: string | null;
+    ariaReadOnly: string | null;
+    ariaRequired: string | null;
+    ariaRoleDescription: string | null;
+    ariaRowCount: string | null;
+    ariaRowIndex: string | null;
+    ariaRowIndexText: string | null;
+    ariaRowSpan: string | null;
+    ariaSelected: string | null;
+    ariaSetSize: string | null;
+    ariaSort: string | null;
+    ariaValueMax: string | null;
+    ariaValueMin: string | null;
+    ariaValueNow: string | null;
+    ariaValueText: string | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaActiveDescendantElement: Element | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaControlsElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaDescribedByElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaDetailsElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaErrorMessageElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaFlowToElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaLabelledByElements: Element[] | null;
+    /** WARNING: be careful of cross-root ARIA browser support */
+    ariaOwnsElements: Element[] | null;
+    /** True when the control is disabled via it's containing fieldset element */
+    get formDisabled(): boolean;
+    get labels(): NodeList;
+    get validity(): ValidityState;
+    /** A best-attempt based on observed behaviour in FireFox 115 on fedora 38 */
+    get computedLabelText(): string;
+    private get element();
+    private internals;
+    private _formDisabled;
+    private constructor();
+    /**
+     * Typescript (with experimental decorators) will compile the class
+     * such that the order of operations is:
+     * 1. set up constructor parameter fields
+     * 2. run decorated field setters with initializers as the value
+     * 3. run the rest of the constructor
+     * Because of that, `this.internals` may not be available in the decorator setter
+     * so we cheat here with nullish coalescing assignment operator `??=`;
+     */
+    private attachOrRetrieveInternals;
+    private initializeOptions;
+    hostConnected?(): void;
+    setFormValue(...args: Parameters<ElementInternals['setFormValue']>): void;
+    setValidity(...args: Parameters<ElementInternals['setValidity']>): void;
+    checkValidity(...args: Parameters<ElementInternals['checkValidity']>): boolean;
+    reportValidity(...args: Parameters<ElementInternals['reportValidity']>): boolean;
+    submit(): void;
+    reset(): void;
+}
+/** @see https://w3c.github.io/aria/#ref-for-dom-ariamixin-ariaactivedescendantelement-1 */
+declare global {
+    interface ARIAMixin {
+        ariaActiveDescendantElement: Element | null;
+        ariaControlsElements: readonly Element[] | null;
+        ariaDescribedByElements: readonly Element[] | null;
+        ariaDetailsElements: readonly Element[] | null;
+        ariaErrorMessageElements: readonly Element[] | null;
+        ariaFlowToElements: readonly Element[] | null;
+        ariaLabelledByElements: readonly Element[] | null;
+        ariaOwnsElements: readonly Element[] | null;
+    }
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js
new file mode 100644
index 0000000..bc2508f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js
@@ -0,0 +1,386 @@
+var _InternalsController_instances, _InternalsController_polyfillDisabledPseudo;
+import { __classPrivateFieldGet, __decorate } from "tslib";
+import { isServer, } from 'lit';
+function isARIAMixinProp(key) {
+    return key === 'role' || key.startsWith('aria');
+}
+const protos = new WeakMap();
+let constructingAllowed = false;
+/**
+ * reactively forward the internals object's aria mixin prototype
+ * @param target
+ * @param key
+ */
+function aria(target, key) {
+    if (!protos.has(target)) {
+        protos.set(target, new Set());
+    }
+    if (protos.get(target).has(key)) {
+        return;
+    }
+    if (!isARIAMixinProp(key)) {
+        throw new Error('@aria can only be called on ARIAMixin properties');
+    }
+    // typescript experimental decorator
+    Object.defineProperty(target, key, {
+        enumerable: true,
+        configurable: false,
+        get() {
+            // @ts-expect-error: because i'm bad, i'm bad
+            const internals = this.attachOrRetrieveInternals();
+            return internals[key];
+        },
+        set(value) {
+            // @ts-expect-error: ya know it!
+            const internals = this.attachOrRetrieveInternals();
+            // @ts-expect-error: shamone!
+            internals[key] = value;
+            this.host.requestUpdate();
+        },
+    });
+    protos.get(target).add(key);
+}
+function getLabelText(label) {
+    if (label.hidden) {
+        return '';
+    }
+    else {
+        const ariaLabel = label.getAttribute?.('aria-label');
+        return ariaLabel ?? label.textContent;
+    }
+}
+export class InternalsController {
+    static getLabels(host) {
+        return Array.from(this.instances.get(host)?.internals.labels ?? []);
+    }
+    static of(host, options) {
+        constructingAllowed = true;
+        // implement the singleton pattern
+        // using a public static constructor method is much easier to manage,
+        // due to the quirks of our typescript config
+        const instance = InternalsController.instances.get(host)
+            ?? new InternalsController(host, options);
+        instance.initializeOptions(options);
+        constructingAllowed = false;
+        return instance;
+    }
+    /** True when the control is disabled via it's containing fieldset element */
+    get formDisabled() {
+        if (isServer) {
+            return this._formDisabled;
+        }
+        else {
+            return this.element?.matches(':disabled') || this._formDisabled;
+        }
+    }
+    get labels() {
+        return this.internals.labels;
+    }
+    get validity() {
+        return this.internals.validity;
+    }
+    /** A best-attempt based on observed behaviour in FireFox 115 on fedora 38 */
+    get computedLabelText() {
+        return this.internals.ariaLabel
+            || Array.from(this.internals.labels)
+                .reduce((acc, label) => `${acc}${getLabelText(label)}`, '');
+    }
+    get element() {
+        if (isServer) {
+            // FIXME(bennyp): a little white lie, which may break
+            // when the controller is applied to non-lit frameworks.
+            return this.host;
+        }
+        else {
+            return this.host instanceof HTMLElement ? this.host : this.options?.getHTMLElement?.();
+        }
+    }
+    constructor(host, options) {
+        _InternalsController_instances.add(this);
+        this.host = host;
+        this.options = options;
+        this.role = null;
+        this.ariaActivedescendant = null;
+        this.ariaAtomic = null;
+        this.ariaAutoComplete = null;
+        this.ariaBusy = null;
+        this.ariaBrailleLabel = null;
+        this.ariaBrailleRoleDescription = null;
+        this.ariaChecked = null;
+        this.ariaColCount = null;
+        this.ariaColIndex = null;
+        this.ariaColIndexText = null;
+        this.ariaColSpan = null;
+        this.ariaCurrent = null;
+        this.ariaDescription = null;
+        this.ariaDisabled = null;
+        this.ariaExpanded = null;
+        this.ariaHasPopup = null;
+        this.ariaHidden = null;
+        this.ariaInvalid = null;
+        this.ariaKeyShortcuts = null;
+        this.ariaLabel = null;
+        this.ariaLevel = null;
+        this.ariaLive = null;
+        this.ariaModal = null;
+        this.ariaMultiLine = null;
+        this.ariaMultiSelectable = null;
+        this.ariaOrientation = null;
+        this.ariaPlaceholder = null;
+        this.ariaPosInSet = null;
+        this.ariaPressed = null;
+        this.ariaReadOnly = null;
+        this.ariaRequired = null;
+        this.ariaRoleDescription = null;
+        this.ariaRowCount = null;
+        this.ariaRowIndex = null;
+        this.ariaRowIndexText = null;
+        this.ariaRowSpan = null;
+        this.ariaSelected = null;
+        this.ariaSetSize = null;
+        this.ariaSort = null;
+        this.ariaValueMax = null;
+        this.ariaValueMin = null;
+        this.ariaValueNow = null;
+        this.ariaValueText = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaActiveDescendantElement = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaControlsElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaDescribedByElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaDetailsElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaErrorMessageElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaFlowToElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaLabelledByElements = null;
+        /** WARNING: be careful of cross-root ARIA browser support */
+        this.ariaOwnsElements = null;
+        this._formDisabled = false;
+        if (!constructingAllowed) {
+            throw new Error('InternalsController must be constructed with `InternalsController.for()`');
+        }
+        if (!this.element) {
+            throw new Error(`InternalsController must be instantiated with an HTMLElement or a \`getHTMLElement\` function`);
+        }
+        this.attachOrRetrieveInternals();
+        this.initializeOptions(options);
+        InternalsController.instances.set(host, this);
+        __classPrivateFieldGet(this, _InternalsController_instances, "m", _InternalsController_polyfillDisabledPseudo).call(this);
+    }
+    /**
+     * Typescript (with experimental decorators) will compile the class
+     * such that the order of operations is:
+     * 1. set up constructor parameter fields
+     * 2. run decorated field setters with initializers as the value
+     * 3. run the rest of the constructor
+     * Because of that, `this.internals` may not be available in the decorator setter
+     * so we cheat here with nullish coalescing assignment operator `??=`;
+     */
+    attachOrRetrieveInternals() {
+        this.internals ?? (this.internals = this.element.attachInternals());
+        return this.internals;
+    }
+    initializeOptions(options) {
+        var _a;
+        this.options ?? (this.options = options ?? {});
+        const { getHTMLElement, ...aria } = this.options;
+        (_a = this.options).getHTMLElement ?? (_a.getHTMLElement = getHTMLElement);
+        for (const [key, val] of Object.entries(aria)) {
+            if (isARIAMixinProp(key)) {
+                this[key] = val;
+            }
+        }
+    }
+    setFormValue(...args) {
+        return this.internals.setFormValue(...args);
+    }
+    setValidity(...args) {
+        return this.internals.setValidity(...args);
+    }
+    checkValidity(...args) {
+        return this.internals.checkValidity(...args);
+    }
+    reportValidity(...args) {
+        return this.internals.reportValidity(...args);
+    }
+    submit() {
+        this.internals.form?.requestSubmit();
+    }
+    reset() {
+        this.internals.form?.reset();
+    }
+}
+_InternalsController_instances = new WeakSet(), _InternalsController_polyfillDisabledPseudo = function _InternalsController_polyfillDisabledPseudo() {
+    // START polyfill-disabled
+    // We need to polyfill :disabled
+    // see https://github.com/calebdwilliams/element-internals-polyfill/issues/88
+    const orig = this.element.formDisabledCallback;
+    this.element.formDisabledCallback = disabled => {
+        this._formDisabled = disabled;
+        orig?.call(this.host, disabled);
+        // END polyfill-disabled
+    };
+};
+InternalsController.instances = new WeakMap();
+InternalsController.isSafari = !isServer && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
+__decorate([
+    aria
+], InternalsController.prototype, "role", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaActivedescendant", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaAtomic", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaAutoComplete", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaBusy", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaBrailleLabel", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaBrailleRoleDescription", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaChecked", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaColCount", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaColIndex", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaColIndexText", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaColSpan", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaCurrent", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaDescription", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaDisabled", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaExpanded", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaHasPopup", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaHidden", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaInvalid", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaKeyShortcuts", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaLabel", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaLevel", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaLive", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaModal", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaMultiLine", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaMultiSelectable", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaOrientation", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaPlaceholder", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaPosInSet", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaPressed", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaReadOnly", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRequired", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRoleDescription", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRowCount", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRowIndex", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRowIndexText", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaRowSpan", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaSelected", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaSetSize", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaSort", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaValueMax", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaValueMin", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaValueNow", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaValueText", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaActiveDescendantElement", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaControlsElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaDescribedByElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaDetailsElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaErrorMessageElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaFlowToElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaLabelledByElements", void 0);
+__decorate([
+    aria
+], InternalsController.prototype, "ariaOwnsElements", void 0);
+//# sourceMappingURL=internals-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js.map
new file mode 100644
index 0000000..2d8a348
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/internals-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"internals-controller.js","sourceRoot":"","sources":["internals-controller.ts"],"names":[],"mappings":";;AAAA,OAAO,EACL,QAAQ,GAIT,MAAM,KAAK,CAAC;AAEb,SAAS,eAAe,CAAC,GAAW;IAClC,OAAO,GAAG,KAAK,MAAM,IAAI,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AAClD,CAAC;AAMD,MAAM,MAAM,GAAG,IAAI,OAAO,EAAE,CAAC;AAE7B,IAAI,mBAAmB,GAAG,KAAK,CAAC;AAMhC;;;;GAIG;AACH,SAAS,IAAI,CACX,MAA2B,EAC3B,GAA8B;IAE9B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QACxB,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;IAChC,CAAC;IACD,IAAI,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;QAChC,OAAO;IACT,CAAC;IACD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACtE,CAAC;IACD,oCAAoC;IACpC,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE;QACjC,UAAU,EAAE,IAAI;QAChB,YAAY,EAAE,KAAK;QACnB,GAAG;YACD,6CAA6C;YAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACnD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;QACxB,CAAC;QACD,GAAG,CAA4B,KAAoB;YACjD,gCAAgC;YAChC,MAAM,SAAS,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACnD,6BAA6B;YAC7B,SAAS,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAC5B,CAAC;KACF,CAAC,CAAC;IACH,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC9B,CAAC;AAED,SAAS,YAAY,CAAC,KAAkB;IACtC,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;QACjB,OAAO,EAAE,CAAC;IACZ,CAAC;SAAM,CAAC;QACN,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC;QACrD,OAAO,SAAS,IAAI,KAAK,CAAC,WAAW,CAAC;IACxC,CAAC;AACH,CAAC;AAED,MAAM,OAAO,mBAAmB;IAWvB,MAAM,CAAC,SAAS,CAAC,IAA4B;QAClD,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,MAAM,IAAI,EAAE,CAAc,CAAC;IACnF,CAAC;IAKM,MAAM,CAAC,EAAE,CACd,IAA4B,EAC5B,OAAoC;QAEpC,mBAAmB,GAAG,IAAI,CAAC;QAC3B,kCAAkC;QAClC,qEAAqE;QACrE,6CAA6C;QAC7C,MAAM,QAAQ,GACZ,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC;eACpC,IAAI,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5C,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpC,mBAAmB,GAAG,KAAK,CAAC;QAC5B,OAAO,QAAQ,CAAC;IAClB,CAAC;IAiED,6EAA6E;IAC7E,IAAI,YAAY;QACd,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC;QAClE,CAAC;IACH,CAAC;IAED,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IAC/B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACjC,CAAC;IAED,6EAA6E;IAC7E,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS;eAC1B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAiC,CAAC;iBAC1D,MAAM,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CACrB,GAAG,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,IAAY,OAAO;QACjB,IAAI,QAAQ,EAAE,CAAC;YACb,qDAAqD;YACrD,wDAAwD;YACxD,OAAO,IAAI,CAAC,IAAkB,CAAC;QACjC,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC,IAAI,YAAY,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,EAAE,EAAE,CAAC;QACzF,CAAC;IACH,CAAC;IAMD,YACS,IAA4B,EAC3B,OAAoC;;QADrC,SAAI,GAAJ,IAAI,CAAwB;QAC3B,YAAO,GAAP,OAAO,CAA6B;QAxGxC,SAAI,GAAkB,IAAI,CAAC;QAE3B,yBAAoB,GAAkB,IAAI,CAAC;QAC3C,eAAU,GAAkB,IAAI,CAAC;QACjC,qBAAgB,GAAkB,IAAI,CAAC;QACvC,aAAQ,GAAkB,IAAI,CAAC;QAC/B,qBAAgB,GAAkB,IAAI,CAAC;QACvC,+BAA0B,GAAkB,IAAI,CAAC;QACjD,gBAAW,GAAkB,IAAI,CAAC;QAClC,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,qBAAgB,GAAkB,IAAI,CAAC;QACvC,gBAAW,GAAkB,IAAI,CAAC;QAClC,gBAAW,GAAkB,IAAI,CAAC;QAClC,oBAAe,GAAkB,IAAI,CAAC;QACtC,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,eAAU,GAAkB,IAAI,CAAC;QACjC,gBAAW,GAAkB,IAAI,CAAC;QAClC,qBAAgB,GAAkB,IAAI,CAAC;QACvC,cAAS,GAAkB,IAAI,CAAC;QAChC,cAAS,GAAkB,IAAI,CAAC;QAChC,aAAQ,GAAkB,IAAI,CAAC;QAC/B,cAAS,GAAkB,IAAI,CAAC;QAChC,kBAAa,GAAkB,IAAI,CAAC;QACpC,wBAAmB,GAAkB,IAAI,CAAC;QAC1C,oBAAe,GAAkB,IAAI,CAAC;QACtC,oBAAe,GAAkB,IAAI,CAAC;QACtC,iBAAY,GAAkB,IAAI,CAAC;QACnC,gBAAW,GAAkB,IAAI,CAAC;QAClC,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,wBAAmB,GAAkB,IAAI,CAAC;QAC1C,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,qBAAgB,GAAkB,IAAI,CAAC;QACvC,gBAAW,GAAkB,IAAI,CAAC;QAClC,iBAAY,GAAkB,IAAI,CAAC;QACnC,gBAAW,GAAkB,IAAI,CAAC;QAClC,aAAQ,GAAkB,IAAI,CAAC;QAC/B,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,iBAAY,GAAkB,IAAI,CAAC;QACnC,kBAAa,GAAkB,IAAI,CAAC;QAE1C,6DAA6D;QACvD,gCAA2B,GAAmB,IAAI,CAAC;QACzD,6DAA6D;QACvD,yBAAoB,GAAqB,IAAI,CAAC;QACpD,6DAA6D;QACvD,4BAAuB,GAAqB,IAAI,CAAC;QACvD,6DAA6D;QACvD,wBAAmB,GAAqB,IAAI,CAAC;QACnD,6DAA6D;QACvD,6BAAwB,GAAqB,IAAI,CAAC;QACxD,6DAA6D;QACvD,uBAAkB,GAAqB,IAAI,CAAC;QAClD,6DAA6D;QACvD,2BAAsB,GAAqB,IAAI,CAAC;QACtD,6DAA6D;QACvD,qBAAgB,GAAqB,IAAI,CAAC;QAuCxC,kBAAa,GAAG,KAAK,CAAC;QAM5B,IAAI,CAAC,mBAAmB,EAAE,CAAC;YACzB,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;QAC9F,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CACb,+FAA+F,CAChG,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QAChC,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC9C,uBAAA,IAAI,mFAAwB,MAA5B,IAAI,CAA0B,CAAC;IACjC,CAAC;IAkBD;;;;;;;;OAQG;IACK,yBAAyB;QAC/B,IAAI,CAAC,SAAS,KAAd,IAAI,CAAC,SAAS,GAAK,IAAI,CAAC,OAAQ,CAAC,eAAe,EAAE,EAAC;QACnD,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEO,iBAAiB,CAAC,OAA4B;;QACpD,IAAI,CAAC,OAAO,KAAZ,IAAI,CAAC,OAAO,GAAK,OAAO,IAAI,EAAE,EAAC;QAC/B,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC;QACjD,MAAA,IAAI,CAAC,OAAO,EAAC,cAAc,QAAd,cAAc,GAAK,cAAc,EAAC;QAC/C,KAAK,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9C,IAAI,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,GAAiB,CAAC,GAAG,GAAuB,CAAC;YACpD,CAAC;QACH,CAAC;IACH,CAAC;IAID,YAAY,CAAC,GAAG,IAAkD;QAChE,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,WAAW,CAAC,GAAG,IAAiD;QAC9D,OAAO,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,aAAa,CAAC,GAAG,IAAmD;QAClE,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,GAAG,IAAoD;QACpE,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;IAChD,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC;IACvC,CAAC;IAED,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;IAC/B,CAAC;;;IA5DC,0BAA0B;IAC1B,gCAAgC;IAChC,6EAA6E;IAC7E,MAAM,IAAI,GAAI,IAAI,CAAC,OAAgB,CAAC,oBAAoB,CAAC;IACxD,IAAI,CAAC,OAAgB,CAAC,oBAAoB,GAAG,QAAQ,CAAC,EAAE;QACvD,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClC,wBAAwB;IACxB,CAAC,CAAC;AACJ,CAAC;AAvKc,6BAAS,GAAG,IAAI,OAAO,EAA+C,AAA7D,CAA8D;AAcxE,4BAAQ,GACpB,CAAC,QAAQ,IAAI,gCAAgC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,AADnD,CACoD;AAkBpE;IAAL,IAAI;iDAA4B;AAE3B;IAAL,IAAI;iEAA4C;AAC3C;IAAL,IAAI;uDAAkC;AACjC;IAAL,IAAI;6DAAwC;AACvC;IAAL,IAAI;qDAAgC;AAC/B;IAAL,IAAI;6DAAwC;AACvC;IAAL,IAAI;uEAAkD;AACjD;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;6DAAwC;AACvC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;4DAAuC;AACtC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;uDAAkC;AACjC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;6DAAwC;AACvC;IAAL,IAAI;sDAAiC;AAChC;IAAL,IAAI;sDAAiC;AAChC;IAAL,IAAI;qDAAgC;AAC/B;IAAL,IAAI;sDAAiC;AAChC;IAAL,IAAI;0DAAqC;AACpC;IAAL,IAAI;gEAA2C;AAC1C;IAAL,IAAI;4DAAuC;AACtC;IAAL,IAAI;4DAAuC;AACtC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;gEAA2C;AAC1C;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;6DAAwC;AACvC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;wDAAmC;AAClC;IAAL,IAAI;qDAAgC;AAC/B;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;yDAAoC;AACnC;IAAL,IAAI;0DAAqC;AAGpC;IAAL,IAAI;wEAAoD;AAEnD;IAAL,IAAI;iEAA+C;AAE9C;IAAL,IAAI;oEAAkD;AAEjD;IAAL,IAAI;gEAA8C;AAE7C;IAAL,IAAI;qEAAmD;AAElD;IAAL,IAAI;+DAA6C;AAE5C;IAAL,IAAI;mEAAiD;AAEhD;IAAL,IAAI;6DAA2C","sourcesContent":["import {\n  isServer,\n  type ReactiveController,\n  type ReactiveControllerHost,\n  type LitElement,\n} from 'lit';\n\nfunction isARIAMixinProp(key: string): key is keyof ARIAMixin {\n  return key === 'role' || key.startsWith('aria');\n}\n\ntype FACE = HTMLElement & {\n  formDisabledCallback?(disabled: boolean): void;\n};\n\nconst protos = new WeakMap();\n\nlet constructingAllowed = false;\n\ninterface InternalsControllerOptions extends Partial<ARIAMixin> {\n  getHTMLElement?(): HTMLElement;\n}\n\n/**\n * reactively forward the internals object's aria mixin prototype\n * @param target\n * @param key\n */\nfunction aria(\n  target: InternalsController,\n  key: keyof InternalsController,\n) {\n  if (!protos.has(target)) {\n    protos.set(target, new Set());\n  }\n  if (protos.get(target).has(key)) {\n    return;\n  }\n  if (!isARIAMixinProp(key)) {\n    throw new Error('@aria can only be called on ARIAMixin properties');\n  }\n  // typescript experimental decorator\n  Object.defineProperty(target, key, {\n    enumerable: true,\n    configurable: false,\n    get(this: InternalsController) {\n      // @ts-expect-error: because i'm bad, i'm bad\n      const internals = this.attachOrRetrieveInternals();\n      return internals[key];\n    },\n    set(this: InternalsController, value: string | null) {\n      // @ts-expect-error: ya know it!\n      const internals = this.attachOrRetrieveInternals();\n      // @ts-expect-error: shamone!\n      internals[key] = value;\n      this.host.requestUpdate();\n    },\n  });\n  protos.get(target).add(key);\n}\n\nfunction getLabelText(label: HTMLElement) {\n  if (label.hidden) {\n    return '';\n  } else {\n    const ariaLabel = label.getAttribute?.('aria-label');\n    return ariaLabel ?? label.textContent;\n  }\n}\n\nexport class InternalsController implements ReactiveController, ARIAMixin {\n  private static instances = new WeakMap<ReactiveControllerHost, InternalsController>();\n\n  declare readonly form: ElementInternals['form'];\n  declare readonly shadowRoot: ElementInternals['shadowRoot'];\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/states\n  declare readonly states: unknown;\n  declare readonly willValidate: ElementInternals['willValidate'];\n  declare readonly validationMessage: ElementInternals['validationMessage'];\n\n  public static getLabels(host: ReactiveControllerHost): Element[] {\n    return Array.from(this.instances.get(host)?.internals.labels ?? []) as Element[];\n  }\n\n  public static isSafari: boolean =\n    !isServer && /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n\n  public static of(\n    host: ReactiveControllerHost,\n    options?: InternalsControllerOptions,\n  ): InternalsController {\n    constructingAllowed = true;\n    // implement the singleton pattern\n    // using a public static constructor method is much easier to manage,\n    // due to the quirks of our typescript config\n    const instance: InternalsController =\n      InternalsController.instances.get(host)\n      ?? new InternalsController(host, options);\n    instance.initializeOptions(options);\n    constructingAllowed = false;\n    return instance;\n  }\n\n  @aria role: string | null = null;\n\n  @aria ariaActivedescendant: string | null = null;\n  @aria ariaAtomic: string | null = null;\n  @aria ariaAutoComplete: string | null = null;\n  @aria ariaBusy: string | null = null;\n  @aria ariaBrailleLabel: string | null = null;\n  @aria ariaBrailleRoleDescription: string | null = null;\n  @aria ariaChecked: string | null = null;\n  @aria ariaColCount: string | null = null;\n  @aria ariaColIndex: string | null = null;\n  @aria ariaColIndexText: string | null = null;\n  @aria ariaColSpan: string | null = null;\n  @aria ariaCurrent: string | null = null;\n  @aria ariaDescription: string | null = null;\n  @aria ariaDisabled: string | null = null;\n  @aria ariaExpanded: string | null = null;\n  @aria ariaHasPopup: string | null = null;\n  @aria ariaHidden: string | null = null;\n  @aria ariaInvalid: string | null = null;\n  @aria ariaKeyShortcuts: string | null = null;\n  @aria ariaLabel: string | null = null;\n  @aria ariaLevel: string | null = null;\n  @aria ariaLive: string | null = null;\n  @aria ariaModal: string | null = null;\n  @aria ariaMultiLine: string | null = null;\n  @aria ariaMultiSelectable: string | null = null;\n  @aria ariaOrientation: string | null = null;\n  @aria ariaPlaceholder: string | null = null;\n  @aria ariaPosInSet: string | null = null;\n  @aria ariaPressed: string | null = null;\n  @aria ariaReadOnly: string | null = null;\n  @aria ariaRequired: string | null = null;\n  @aria ariaRoleDescription: string | null = null;\n  @aria ariaRowCount: string | null = null;\n  @aria ariaRowIndex: string | null = null;\n  @aria ariaRowIndexText: string | null = null;\n  @aria ariaRowSpan: string | null = null;\n  @aria ariaSelected: string | null = null;\n  @aria ariaSetSize: string | null = null;\n  @aria ariaSort: string | null = null;\n  @aria ariaValueMax: string | null = null;\n  @aria ariaValueMin: string | null = null;\n  @aria ariaValueNow: string | null = null;\n  @aria ariaValueText: string | null = null;\n\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaActiveDescendantElement: Element | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaControlsElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaDescribedByElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaDetailsElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaErrorMessageElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaFlowToElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaLabelledByElements: Element[] | null = null;\n  /** WARNING: be careful of cross-root ARIA browser support */\n  @aria ariaOwnsElements: Element[] | null = null;\n\n  /** True when the control is disabled via it's containing fieldset element */\n  get formDisabled(): boolean {\n    if (isServer) {\n      return this._formDisabled;\n    } else {\n      return this.element?.matches(':disabled') || this._formDisabled;\n    }\n  }\n\n  get labels(): NodeList {\n    return this.internals.labels;\n  }\n\n  get validity(): ValidityState {\n    return this.internals.validity;\n  }\n\n  /** A best-attempt based on observed behaviour in FireFox 115 on fedora 38 */\n  get computedLabelText(): string {\n    return this.internals.ariaLabel\n      || Array.from(this.internals.labels as NodeListOf<HTMLElement>)\n          .reduce((acc, label) =>\n            `${acc}${getLabelText(label)}`, '');\n  }\n\n  private get element() {\n    if (isServer) {\n      // FIXME(bennyp): a little white lie, which may break\n      // when the controller is applied to non-lit frameworks.\n      return this.host as LitElement;\n    } else {\n      return this.host instanceof HTMLElement ? this.host : this.options?.getHTMLElement?.();\n    }\n  }\n\n  private internals!: ElementInternals;\n\n  private _formDisabled = false;\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    private options?: InternalsControllerOptions,\n  ) {\n    if (!constructingAllowed) {\n      throw new Error('InternalsController must be constructed with `InternalsController.for()`');\n    }\n    if (!this.element) {\n      throw new Error(\n        `InternalsController must be instantiated with an HTMLElement or a \\`getHTMLElement\\` function`,\n      );\n    }\n    this.attachOrRetrieveInternals();\n    this.initializeOptions(options);\n    InternalsController.instances.set(host, this);\n    this.#polyfillDisabledPseudo();\n  }\n\n  /**\n   * We need to polyfill :disabled\n   * see https://github.com/calebdwilliams/element-internals-polyfill/issues/88\n   */\n  #polyfillDisabledPseudo() {\n    // START polyfill-disabled\n    // We need to polyfill :disabled\n    // see https://github.com/calebdwilliams/element-internals-polyfill/issues/88\n    const orig = (this.element as FACE).formDisabledCallback;\n    (this.element as FACE).formDisabledCallback = disabled => {\n      this._formDisabled = disabled;\n      orig?.call(this.host, disabled);\n    // END polyfill-disabled\n    };\n  }\n\n  /**\n   * Typescript (with experimental decorators) will compile the class\n   * such that the order of operations is:\n   * 1. set up constructor parameter fields\n   * 2. run decorated field setters with initializers as the value\n   * 3. run the rest of the constructor\n   * Because of that, `this.internals` may not be available in the decorator setter\n   * so we cheat here with nullish coalescing assignment operator `??=`;\n   */\n  private attachOrRetrieveInternals() {\n    this.internals ??= this.element!.attachInternals();\n    return this.internals;\n  }\n\n  private initializeOptions(options?: Partial<ARIAMixin>) {\n    this.options ??= options ?? {};\n    const { getHTMLElement, ...aria } = this.options;\n    this.options.getHTMLElement ??= getHTMLElement;\n    for (const [key, val] of Object.entries(aria)) {\n      if (isARIAMixinProp(key)) {\n        this[key as keyof this] = val as this[keyof this];\n      }\n    }\n  }\n\n  hostConnected?(): void;\n\n  setFormValue(...args: Parameters<ElementInternals['setFormValue']>): void {\n    return this.internals.setFormValue(...args);\n  }\n\n  setValidity(...args: Parameters<ElementInternals['setValidity']>): void {\n    return this.internals.setValidity(...args);\n  }\n\n  checkValidity(...args: Parameters<ElementInternals['checkValidity']>): boolean {\n    return this.internals.checkValidity(...args);\n  }\n\n  reportValidity(...args: Parameters<ElementInternals['reportValidity']>): boolean {\n    return this.internals.reportValidity(...args);\n  }\n\n  submit(): void {\n    this.internals.form?.requestSubmit();\n  }\n\n  reset(): void {\n    this.internals.form?.reset();\n  }\n}\n\n/** @see https://w3c.github.io/aria/#ref-for-dom-ariamixin-ariaactivedescendantelement-1 */\ndeclare global {\n  interface ARIAMixin {\n    ariaActiveDescendantElement: Element | null;\n    ariaControlsElements: readonly Element[] | null;\n    ariaDescribedByElements: readonly Element[] | null;\n    ariaDetailsElements: readonly Element[] | null;\n    ariaErrorMessageElements: readonly Element[] | null;\n    ariaFlowToElements: readonly Element[] | null;\n    ariaLabelledByElements: readonly Element[] | null;\n    ariaOwnsElements: readonly Element[] | null;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.d.ts
new file mode 100644
index 0000000..4bf8ba4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.d.ts
@@ -0,0 +1,20 @@
+import { type ReactiveController, type ReactiveElement } from 'lit';
+export interface Options {
+    observe?: boolean | MutationObserverInit;
+    emptyWarning?: string;
+}
+export declare class LightDOMController implements ReactiveController {
+    private host;
+    private options?;
+    private mo;
+    private logger;
+    private initializer;
+    constructor(host: ReactiveElement, initializer: () => void, options?: Options | undefined);
+    hostConnected(): void;
+    hostDisconnected(): void;
+    private initObserver;
+    /**
+     * Returns a boolean statement of whether or not this component contains any light DOM.
+     */
+    hasLightDOM(): boolean;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js
new file mode 100644
index 0000000..3c82ece
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js
@@ -0,0 +1,44 @@
+import { isServer } from 'lit';
+import { Logger } from './logger.js';
+export class LightDOMController {
+    constructor(host, initializer, options) {
+        this.host = host;
+        this.options = options;
+        this.initializer = initializer.bind(host);
+        this.mo = new MutationObserver(this.initializer);
+        this.logger = new Logger(this.host);
+        host.addController(this);
+    }
+    hostConnected() {
+        if (this.hasLightDOM()) {
+            this.initializer();
+        }
+        else if (this.options?.emptyWarning) {
+            this.logger.warn(this.options?.emptyWarning);
+        }
+        this.initObserver();
+    }
+    hostDisconnected() {
+        this.mo.disconnect();
+    }
+    initObserver() {
+        if (this.options?.observe ?? true) {
+            // Use the provided options, or their defaults
+            this.mo.observe(this.host, typeof this.options?.observe !== 'object' ? { childList: true }
+                : this.options?.observe);
+        }
+    }
+    /**
+     * Returns a boolean statement of whether or not this component contains any light DOM.
+     */
+    hasLightDOM() {
+        if (isServer) {
+            return false;
+        }
+        else {
+            return !!(this.host.children.length > 0
+                || (this.host.textContent ?? '').trim().length > 0);
+        }
+    }
+}
+//# sourceMappingURL=light-dom-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js.map
new file mode 100644
index 0000000..b6d1bf9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/light-dom-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"light-dom-controller.js","sourceRoot":"","sources":["light-dom-controller.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAiD,MAAM,KAAK,CAAC;AAE9E,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AAOrC,MAAM,OAAO,kBAAkB;IAK7B,YACU,IAAqB,EAC7B,WAAuB,EACf,OAA6B;QAF7B,SAAI,GAAJ,IAAI,CAAiB;QAErB,YAAO,GAAP,OAAO,CAAsB;QAErC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,EAAE,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;aAAM,IAAI,IAAI,CAAC,OAAO,EAAE,YAAY,EAAE,CAAC;YACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAC/C,CAAC;QAED,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC;IACvB,CAAC;IAEO,YAAY;QAClB,IAAI,IAAI,CAAC,OAAO,EAAE,OAAO,IAAI,IAAI,EAAE,CAAC;YAClC,8CAA8C;YAC9C,IAAI,CAAC,EAAE,CAAC,OAAO,CACb,IAAI,CAAC,IAAI,EACP,OAAO,IAAI,CAAC,OAAO,EAAE,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE;gBACjE,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,OAA+B,CAChD,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,QAAQ,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,CAAC,CACP,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;mBAC1B,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CACnD,CAAC;QACJ,CAAC;IACH,CAAC;CACF","sourcesContent":["import { isServer, type ReactiveController, type ReactiveElement } from 'lit';\n\nimport { Logger } from './logger.js';\n\nexport interface Options {\n  observe?: boolean | MutationObserverInit;\n  emptyWarning?: string;\n}\n\nexport class LightDOMController implements ReactiveController {\n  private mo: MutationObserver;\n  private logger: Logger;\n  private initializer: () => void;\n\n  constructor(\n    private host: ReactiveElement,\n    initializer: () => void,\n    private options?: Options | undefined,\n  ) {\n    this.initializer = initializer.bind(host);\n    this.mo = new MutationObserver(this.initializer);\n    this.logger = new Logger(this.host);\n    host.addController(this);\n  }\n\n  hostConnected(): void {\n    if (this.hasLightDOM()) {\n      this.initializer();\n    } else if (this.options?.emptyWarning) {\n      this.logger.warn(this.options?.emptyWarning);\n    }\n\n    this.initObserver();\n  }\n\n  hostDisconnected(): void {\n    this.mo.disconnect();\n  }\n\n  private initObserver() {\n    if (this.options?.observe ?? true) {\n      // Use the provided options, or their defaults\n      this.mo.observe(\n        this.host,\n          typeof this.options?.observe !== 'object' ? { childList: true }\n        : this.options?.observe as MutationObserverInit\n      );\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not this component contains any light DOM.\n   */\n  hasLightDOM(): boolean {\n    if (isServer) {\n      return false;\n    } else {\n      return !!(\n        this.host.children.length > 0\n        || (this.host.textContent ?? '').trim().length > 0\n      );\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.d.ts
new file mode 100644
index 0000000..5dce7e8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.d.ts
@@ -0,0 +1,143 @@
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+/**
+ * Options for listbox controller
+ */
+export interface ListboxControllerOptions<Item extends HTMLElement> {
+    /**
+     * Whether the listbox supports multiple selections.
+     */
+    multi?: boolean;
+    /**
+     * Optional callback to control the selection behavior of items. By default, ListboxController
+     * will set the `aria-selected` attribute. When overriding this option, it will call it on your
+     * element with the selected state.
+     * Callers **must** ensure that the correct ARIA state is set.
+     */
+    setItemSelected?(item: Item, selected: boolean): void;
+    /**
+     * Optional predicate to ascertain whether a custom element item is disabled or not
+     * By default, if the item matches any of these conditions, it is considered disabled:
+     * 1. it's `disabled` DOM property is `true`
+     * 1. it has the `aria-disabled="true"` attribute
+     * 2. it has the `disabled` attribute present
+     * 3. it matches the `:disabled` pseudo selector
+     */
+    isItemDisabled?(item: Item): boolean;
+    /**
+     * Predicate which determines if a given element is in fact an item
+     * instead of e.g a presentational divider. By default, elements must meet the following criteria
+     * 1. element a child of a listbox role,
+     * 2. element does not have role="presentation"
+     * 2. element is not an `<hr>`
+     * **NB**: When overriding, you must avoid outside references. This predicate must
+     * only consider the element itself, without reference to the host element's items array.
+     * @example ```js
+     *          isItem: (item) => item instanceof MyCustomItem
+     *          ```
+     */
+    isItem?(item: EventTarget | null): item is Item;
+    /**
+     * Function returning the item which currently has assistive technology focus.
+     * In most cases, this should be the `atFocusedItem` of an ATFocusController
+     * i.e. RovingTabindexController or ActivedescendantController.
+     *
+     */
+    getATFocusedItem(): Item | null;
+    /**
+     * Function returning the DOM node which is the direct parent of the item elements
+     * Defaults to the controller host.
+     * If the controller host is not an HTMLElement, this *must* be set
+     */
+    getItemsContainer?(): HTMLElement | null;
+    /**
+     * Optional function returning an additional DOM node which controls the listbox, e.g.
+     * a combobox input.
+     */
+    getControlsElements?(): HTMLElement[];
+}
+/**
+ * @param item possible disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export declare function isItem<Item extends HTMLElement>(item: EventTarget | null): item is Item;
+/**
+ * This is a fib. aria-disabled might not be present on an element that uses internals,
+ * and the `disabled` attribute may not accurately represent the disabled state.
+ * short of patching the `attachInternals` constructor, it may not be possible at
+ * runtime to know with certainty that an arbitrary custom element is disabled or not.
+ * @param item possibly disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export declare function isItemDisabled<Item extends HTMLElement>(item: Item): boolean;
+/**
+ * Implements listbox semantics and accesibility. As there are two recognized
+ * patterns for implementing keyboard interactions with listbox patterns,
+ * provide a secondary controller (either RovingTabindexController or
+ * ActiveDescendantController) to complete the implementation.
+ *
+ * @see https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_vs_selection
+ *
+ * > Occasionally, it may appear as if two elements on the page have focus at the same time.
+ * > For example, in a multi-select list box, when an option is selected it may be greyed.
+ * > Yet, the focus indicator can still be moved to other options, which may also be selected.
+ * > Similarly, when a user activates a tab in a tablist, the selected state is set on the tab
+ * > and its visual appearance changes. However, the user can still navigate, moving the focus
+ * > indicator elsewhere on the page while the tab retains its selected appearance and state.
+ * >
+ * > Focus and selection are quite different. From the keyboard user's perspective,
+ * > focus is a pointer, like a mouse pointer; it tracks the path of navigation.
+ * > There is only one point of focus at any time and all operations take place at the
+ * > point of focus. On the other hand, selection is an operation that can be performed in
+ * > some widgets, such as list boxes, trees, and tablists. If a widget supports only single
+ * > selection, then only one item can be selected and very often the selected state will simply
+ * > follow the focus when focus is moved inside of the widget.
+ * > That is, in some widgets, moving focus may also perform the select operation.
+ * > However, if the widget supports multiple selection, then more than one item can be in a
+ * > selected state, and keys for moving focus do not perform selection. Some multi-select widgets
+ * > do support key commands that both move focus and change selection, but those keys are
+ * > different from the normal navigation keys. Finally, when focus leaves a widget that includes
+ * > a selected element, the selected state persists.
+ * >
+ * > From the developer's perspective, the difference is simple -- the focused element is the
+ * > active element (document.activeElement). Selected elements are elements that have
+ * > aria-selected="true".
+ * >
+ * > With respect to focus and the selected state, the most important considerations for designers
+ * > and developers are:
+ * >
+ * > - The visual focus indicator must always be visible.
+ * > - The selected state must be visually distinct from the focus indicator.
+ */
+export declare class ListboxController<Item extends HTMLElement> implements ReactiveController {
+    #private;
+    host: ReactiveControllerHost;
+    private static instances;
+    static of<Item extends HTMLElement>(host: ReactiveControllerHost, options: ListboxControllerOptions<Item>): ListboxController<Item>;
+    /** Whether listbox is disabled */
+    disabled: boolean;
+    get container(): HTMLElement;
+    get multi(): boolean;
+    set multi(v: boolean);
+    get items(): Item[];
+    /**
+     * register's the host's Item elements as listbox controller items
+     * sets aria-setsize and aria-posinset on items
+     * @param items items
+     */
+    set items(items: Item[]);
+    /**
+     * sets the listbox value based on selected options
+     * @param selected item or items
+     */
+    set selected(selected: Item[]);
+    /**
+     * array of options which are selected
+     */
+    get selected(): Item[];
+    private constructor();
+    hostConnected(): Promise<void>;
+    hostUpdate(): void;
+    hostUpdated(): void;
+    hostDisconnected(): void;
+    isSelected(item: Item): boolean;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js
new file mode 100644
index 0000000..a02b83a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js
@@ -0,0 +1,443 @@
+var _ListboxController_instances, _ListboxController_shiftStartingItem, _ListboxController_options, _ListboxController_items, _ListboxController_selectedItems, _ListboxController_listening, _ListboxController_controlsElements, _ListboxController_removeControlsListeners, _ListboxController_isExpanded_get, _ListboxController_getItemFromEvent, _ListboxController_onClick, _ListboxController_onKeyup, _ListboxController_onKeydown, _ListboxController_selectItem;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
+import { arraysAreEquivalent } from '../functions/arraysAreEquivalent.js';
+/**
+ * This is the default method for setting the selected state on an item element
+ * @param item the item
+ * @param selected is this item selected
+ */
+function setItemSelected(item, selected) {
+    if (selected) {
+        item.setAttribute('aria-selected', 'true');
+    }
+    else {
+        item.removeAttribute('aria-selected');
+    }
+}
+/**
+ * @param item possible disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export function isItem(item) {
+    return item instanceof Element
+        && item?.parentElement?.role === 'listbox'
+        && item?.role !== 'presentation'
+        && item?.localName !== 'hr';
+}
+/**
+ * This is a fib. aria-disabled might not be present on an element that uses internals,
+ * and the `disabled` attribute may not accurately represent the disabled state.
+ * short of patching the `attachInternals` constructor, it may not be possible at
+ * runtime to know with certainty that an arbitrary custom element is disabled or not.
+ * @param item possibly disabled item
+ * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time
+ */
+export function isItemDisabled(item) {
+    return ('disabled' in item && typeof item.disabled === 'boolean' && item.disabled)
+        || item.getAttribute('aria-disabled') === 'true'
+        || item.hasAttribute('disabled')
+        || item.hasAttribute('inert')
+        || item.matches(':disabled');
+}
+let constructingAllowed = false;
+/**
+ * Implements listbox semantics and accesibility. As there are two recognized
+ * patterns for implementing keyboard interactions with listbox patterns,
+ * provide a secondary controller (either RovingTabindexController or
+ * ActiveDescendantController) to complete the implementation.
+ *
+ * @see https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_vs_selection
+ *
+ * > Occasionally, it may appear as if two elements on the page have focus at the same time.
+ * > For example, in a multi-select list box, when an option is selected it may be greyed.
+ * > Yet, the focus indicator can still be moved to other options, which may also be selected.
+ * > Similarly, when a user activates a tab in a tablist, the selected state is set on the tab
+ * > and its visual appearance changes. However, the user can still navigate, moving the focus
+ * > indicator elsewhere on the page while the tab retains its selected appearance and state.
+ * >
+ * > Focus and selection are quite different. From the keyboard user's perspective,
+ * > focus is a pointer, like a mouse pointer; it tracks the path of navigation.
+ * > There is only one point of focus at any time and all operations take place at the
+ * > point of focus. On the other hand, selection is an operation that can be performed in
+ * > some widgets, such as list boxes, trees, and tablists. If a widget supports only single
+ * > selection, then only one item can be selected and very often the selected state will simply
+ * > follow the focus when focus is moved inside of the widget.
+ * > That is, in some widgets, moving focus may also perform the select operation.
+ * > However, if the widget supports multiple selection, then more than one item can be in a
+ * > selected state, and keys for moving focus do not perform selection. Some multi-select widgets
+ * > do support key commands that both move focus and change selection, but those keys are
+ * > different from the normal navigation keys. Finally, when focus leaves a widget that includes
+ * > a selected element, the selected state persists.
+ * >
+ * > From the developer's perspective, the difference is simple -- the focused element is the
+ * > active element (document.activeElement). Selected elements are elements that have
+ * > aria-selected="true".
+ * >
+ * > With respect to focus and the selected state, the most important considerations for designers
+ * > and developers are:
+ * >
+ * > - The visual focus indicator must always be visible.
+ * > - The selected state must be visually distinct from the focus indicator.
+ */
+export class ListboxController {
+    static of(host, options) {
+        constructingAllowed = true;
+        const instance = new ListboxController(host, options);
+        constructingAllowed = false;
+        return instance;
+    }
+    get container() {
+        return __classPrivateFieldGet(this, _ListboxController_options, "f").getItemsContainer?.() ?? this.host;
+    }
+    get multi() {
+        return !!__classPrivateFieldGet(this, _ListboxController_options, "f").multi;
+    }
+    set multi(v) {
+        __classPrivateFieldGet(this, _ListboxController_options, "f").multi = v;
+        this.host.requestUpdate();
+    }
+    get items() {
+        return __classPrivateFieldGet(this, _ListboxController_items, "f");
+    }
+    /**
+     * register's the host's Item elements as listbox controller items
+     * sets aria-setsize and aria-posinset on items
+     * @param items items
+     */
+    set items(items) {
+        __classPrivateFieldSet(this, _ListboxController_items, items, "f");
+        __classPrivateFieldGet(this, _ListboxController_items, "f").forEach((item, index, _items) => {
+            item.ariaSetSize = _items.length.toString();
+            item.ariaPosInSet = (index + 1).toString();
+        });
+    }
+    /**
+     * sets the listbox value based on selected options
+     * @param selected item or items
+     */
+    set selected(selected) {
+        if (!arraysAreEquivalent(selected, Array.from(__classPrivateFieldGet(this, _ListboxController_selectedItems, "f")))) {
+            __classPrivateFieldSet(this, _ListboxController_selectedItems, new Set(selected), "f");
+            for (const item of this.items) {
+                __classPrivateFieldGet(this, _ListboxController_options, "f").setItemSelected(item, __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(item));
+            }
+            this.host.requestUpdate();
+        }
+    }
+    /**
+     * array of options which are selected
+     */
+    get selected() {
+        return [...__classPrivateFieldGet(this, _ListboxController_selectedItems, "f")];
+    }
+    constructor(host, options) {
+        _ListboxController_instances.add(this);
+        this.host = host;
+        /** Current active descendant when shift key is pressed */
+        _ListboxController_shiftStartingItem.set(this, null);
+        _ListboxController_options.set(this, void 0);
+        /** All items */
+        _ListboxController_items.set(this, []);
+        _ListboxController_selectedItems.set(this, new Set);
+        _ListboxController_listening.set(this, false);
+        /** Whether listbox is disabled */
+        this.disabled = false;
+        _ListboxController_controlsElements.set(this, []);
+        /**
+         * handles clicking on a listbox option:
+         * which selects an item by default
+         * or toggles selection if multiselectable
+         * @param event click event
+         */
+        _ListboxController_onClick.set(this, (event) => {
+            const item = __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_getItemFromEvent).call(this, event);
+            __classPrivateFieldSet(this, _ListboxController_shiftStartingItem, __classPrivateFieldGet(this, _ListboxController_shiftStartingItem, "f") ?? __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_getItemFromEvent).call(this, event), "f");
+            if (item && !__classPrivateFieldGet(this, _ListboxController_options, "f").isItemDisabled(item)) {
+                // Case: single select?
+                //       just reset the selected list.
+                if (!this.multi) {
+                    // select target and deselect all other options
+                    this.selected = [item];
+                    // Case: multi select, but no shift key
+                    //       toggle target, keep all other previously selected
+                }
+                else if (!event.shiftKey) {
+                    this.selected = this.items.filter(possiblySelectedItem => __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(possiblySelectedItem) ? possiblySelectedItem !== item
+                        : possiblySelectedItem === item);
+                    // Case: multi select, with shift key
+                    //       find all items between previously selected and target,
+                    //       and select them (if reference item is selected) or deselect them (if reference item is deselected)
+                    //       Do not wrap around from end to start, rather, only select withing the range of 0-end
+                }
+                else {
+                    const startingItem = __classPrivateFieldGet(this, _ListboxController_shiftStartingItem, "f");
+                    // whether options will be selected (true) or deselected (false)
+                    const selecting = __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(startingItem);
+                    const [start, end] = [this.items.indexOf(startingItem), this.items.indexOf(item)].sort();
+                    // de/select all options between active descendant and target
+                    this.selected = this.items.filter((item, i) => {
+                        if (i >= start && i <= end) {
+                            return selecting;
+                        }
+                        else {
+                            return __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(item);
+                        }
+                    });
+                }
+            }
+            __classPrivateFieldSet(this, _ListboxController_shiftStartingItem, item, "f");
+            this.host.requestUpdate();
+        });
+        /**
+         * track whether shift key is being used for multiselectable listbox
+         * @param event keyup event
+         */
+        _ListboxController_onKeyup.set(this, (event) => {
+            if (event.key === 'Shift') {
+                __classPrivateFieldSet(this, _ListboxController_shiftStartingItem, null, "f");
+            }
+        });
+        /**
+         * filters listbox by keyboard event when slotted option has focus,
+         * or by external element such as a text field
+         * @param event keydown event
+         */
+        _ListboxController_onKeydown.set(this, (event) => {
+            const item = __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_getItemFromEvent).call(this, event);
+            if (this.disabled
+                || event.altKey
+                || event.metaKey
+                || !__classPrivateFieldGet(this, _ListboxController_instances, "a", _ListboxController_isExpanded_get)) {
+                return;
+            }
+            // need to set for keyboard support of multiselect
+            if (event.key === 'Shift' && this.multi) {
+                __classPrivateFieldSet(this, _ListboxController_shiftStartingItem, __classPrivateFieldGet(this, _ListboxController_shiftStartingItem, "f") ?? (__classPrivateFieldGet(this, _ListboxController_options, "f").getATFocusedItem() ?? null), "f");
+            }
+            switch (event.key) {
+                // ctrl+A de/selects all options
+                case 'a':
+                case 'A':
+                    if (event.ctrlKey
+                        && (event.target === this.container
+                            || __classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target))) {
+                        const selectableItems = this.items.filter(item => !__classPrivateFieldGet(this, _ListboxController_options, "f").isItemDisabled(item));
+                        if (arraysAreEquivalent(this.selected, selectableItems)) {
+                            this.selected = [];
+                        }
+                        else {
+                            this.selected = selectableItems;
+                        }
+                        event.preventDefault();
+                    }
+                    break;
+                case 'Enter':
+                    // enter and space are only applicable if a listbox option is clicked
+                    // an external text input should not trigger multiselect
+                    if (item && !event.shiftKey) {
+                        const focused = item;
+                        __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_selectItem).call(this, focused, event.shiftKey);
+                        event.preventDefault();
+                    }
+                    break;
+                case 'ArrowUp':
+                    if (this.multi && event.shiftKey && __classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target)) {
+                        const item = event.target;
+                        this.selected = this.items.filter((x, i) => __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(x)
+                            || i === this.items.indexOf(item) - 1)
+                            .filter(x => !__classPrivateFieldGet(this, _ListboxController_options, "f").isItemDisabled(x));
+                    }
+                    break;
+                case 'ArrowDown':
+                    if (this.multi && event.shiftKey && __classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target)) {
+                        const item = event.target;
+                        this.selected = this.items.filter((x, i) => __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(x)
+                            || i === this.items.indexOf(item) + 1)
+                            .filter(x => !__classPrivateFieldGet(this, _ListboxController_options, "f").isItemDisabled(x));
+                    }
+                    break;
+                case ' ':
+                    // enter and space are only applicable if a listbox option is clicked
+                    // an external text input should not trigger multiselect
+                    if (item && event.target === this.container) {
+                        __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_selectItem).call(this, item, event.shiftKey);
+                        event.preventDefault();
+                    }
+                    else if (__classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target)) {
+                        __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_selectItem).call(this, event.target, event.shiftKey);
+                        event.preventDefault();
+                    }
+                    break;
+                default:
+                    break;
+            }
+            this.host.requestUpdate();
+        });
+        __classPrivateFieldSet(this, _ListboxController_options, { setItemSelected, isItemDisabled, isItem, ...options }, "f");
+        if (!constructingAllowed) {
+            throw new Error('ListboxController must be constructed with `ListboxController.of()`');
+        }
+        if (!isServer
+            && !(host instanceof HTMLElement)
+            && typeof options.getItemsContainer !== 'function') {
+            throw new Error([
+                'ListboxController requires the host to be an HTMLElement',
+                'or for the initializer to include a getItemsContainer() function',
+            ].join(' '));
+        }
+        const instance = ListboxController.instances.get(host);
+        if (instance) {
+            return instance;
+        }
+        ListboxController.instances.set(host, this);
+        this.host.addController(this);
+        this.multi = __classPrivateFieldGet(this, _ListboxController_options, "f").multi ?? false;
+        if (this.container?.isConnected) {
+            this.hostConnected();
+        }
+    }
+    async hostConnected() {
+        await this.host.updateComplete;
+        this.hostUpdate();
+        this.hostUpdated();
+    }
+    hostUpdate() {
+        const last = __classPrivateFieldGet(this, _ListboxController_controlsElements, "f");
+        __classPrivateFieldSet(this, _ListboxController_controlsElements, __classPrivateFieldGet(this, _ListboxController_options, "f").getControlsElements?.() ?? [], "f");
+        if (!arraysAreEquivalent(last, __classPrivateFieldGet(this, _ListboxController_controlsElements, "f"))) {
+            __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_removeControlsListeners).call(this, last);
+            for (const el of __classPrivateFieldGet(this, _ListboxController_controlsElements, "f")) {
+                el.addEventListener('keydown', __classPrivateFieldGet(this, _ListboxController_onKeydown, "f"));
+                el.addEventListener('keyup', __classPrivateFieldGet(this, _ListboxController_onKeyup, "f"));
+            }
+        }
+    }
+    hostUpdated() {
+        if (!__classPrivateFieldGet(this, _ListboxController_listening, "f")) {
+            this.container?.addEventListener('click', __classPrivateFieldGet(this, _ListboxController_onClick, "f"));
+            this.container?.addEventListener('keydown', __classPrivateFieldGet(this, _ListboxController_onKeydown, "f"));
+            this.container?.addEventListener('keyup', __classPrivateFieldGet(this, _ListboxController_onKeyup, "f"));
+            __classPrivateFieldSet(this, _ListboxController_listening, true, "f");
+        }
+        this.container?.setAttribute('role', 'listbox');
+        this.container?.setAttribute('aria-disabled', String(!!this.disabled));
+        this.container?.setAttribute('aria-multiselectable', String(!!__classPrivateFieldGet(this, _ListboxController_options, "f").multi));
+    }
+    hostDisconnected() {
+        this.container?.removeEventListener('click', __classPrivateFieldGet(this, _ListboxController_onClick, "f"));
+        this.container?.removeEventListener('keydown', __classPrivateFieldGet(this, _ListboxController_onKeydown, "f"));
+        this.container?.removeEventListener('keyup', __classPrivateFieldGet(this, _ListboxController_onKeyup, "f"));
+        __classPrivateFieldGet(this, _ListboxController_instances, "m", _ListboxController_removeControlsListeners).call(this);
+        __classPrivateFieldSet(this, _ListboxController_listening, false, "f");
+    }
+    isSelected(item) {
+        return __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(item);
+    }
+}
+_ListboxController_shiftStartingItem = new WeakMap(), _ListboxController_options = new WeakMap(), _ListboxController_items = new WeakMap(), _ListboxController_selectedItems = new WeakMap(), _ListboxController_listening = new WeakMap(), _ListboxController_controlsElements = new WeakMap(), _ListboxController_onClick = new WeakMap(), _ListboxController_onKeyup = new WeakMap(), _ListboxController_onKeydown = new WeakMap(), _ListboxController_instances = new WeakSet(), _ListboxController_removeControlsListeners = function _ListboxController_removeControlsListeners(els = __classPrivateFieldGet(this, _ListboxController_controlsElements, "f")) {
+    for (const el of els) {
+        el.removeEventListener('keydown', __classPrivateFieldGet(this, _ListboxController_onKeydown, "f"));
+        el.removeEventListener('keyup', __classPrivateFieldGet(this, _ListboxController_onKeyup, "f"));
+    }
+}, _ListboxController_isExpanded_get = function _ListboxController_isExpanded_get() {
+    return !__classPrivateFieldGet(this, _ListboxController_controlsElements, "f").length ? true
+        : __classPrivateFieldGet(this, _ListboxController_controlsElements, "f").every(x => x.ariaExpanded === 'true');
+}, _ListboxController_getItemFromEvent = function _ListboxController_getItemFromEvent(event) {
+    // NOTE(bennypowers): I am aware that this function *sucks*
+    // you're more than welcome to improve it.
+    // make sure there are unit tests first
+    const path = event.composedPath();
+    const tabindexed = this.items.some(x => x.hasAttribute('tabindex'));
+    if (tabindexed) {
+        const item = path.find(__classPrivateFieldGet(this, _ListboxController_options, "f").isItem);
+        if (item) {
+            return item;
+        }
+    }
+    else if (__classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target)
+        && event.target.getRootNode() !== this.container.getRootNode()
+        && 'ariaActiveDescendantElement' in HTMLElement.prototype) {
+        return event.target;
+    }
+    else if (event.target instanceof HTMLElement && event.target.ariaActiveDescendantElement) {
+        return event.target.ariaActiveDescendantElement;
+    }
+    else if (event.type === 'click'
+        && __classPrivateFieldGet(this, _ListboxController_options, "f").isItem(event.target)
+        && event.target.id) {
+        const element = event.target;
+        const root = element.getRootNode();
+        if (root instanceof ShadowRoot && this.container.getRootNode() === root) {
+            const shadowRootListboxElement = this.container;
+            const shadowRootItem = element;
+            if (shadowRootItem && shadowRootListboxElement) {
+                if (this.items.includes(shadowRootItem)) {
+                    return shadowRootItem;
+                }
+                else {
+                    const index = Array.from(shadowRootListboxElement?.children ?? [])
+                        .filter(__classPrivateFieldGet(this, _ListboxController_options, "f").isItem)
+                        .filter(x => !x.hidden)
+                        .indexOf(shadowRootItem);
+                    return __classPrivateFieldGet(this, _ListboxController_items, "f").filter(x => !x.hidden)[index];
+                }
+            }
+        }
+    }
+    else {
+        // otherwise, query the root (e.g. shadow root) for the associated element
+        const element = event.target;
+        const root = element.getRootNode();
+        const controlsId = element?.getAttribute('aria-controls');
+        const shadowRootListboxElement = __classPrivateFieldGet(this, _ListboxController_options, "f").isItem(element) ? this.container
+            : controlsId ? root.getElementById(controlsId)
+                : null;
+        const shadowRootHasActiveDescendantElement = root.querySelector(`[aria-controls="${shadowRootListboxElement?.id}"][aria-activedescendant]`);
+        const shadowRootItemId = shadowRootHasActiveDescendantElement?.getAttribute('aria-activedescendant');
+        const shadowRootItem = shadowRootItemId && root.getElementById(shadowRootItemId);
+        if (shadowRootItem && shadowRootListboxElement) {
+            if (this.items.includes(shadowRootItem)) {
+                return shadowRootItem;
+            }
+            else {
+                const index = Array.from(shadowRootListboxElement?.children ?? [])
+                    .filter(__classPrivateFieldGet(this, _ListboxController_options, "f").isItem)
+                    .filter(x => !x.hidden)
+                    .indexOf(shadowRootItem);
+                return __classPrivateFieldGet(this, _ListboxController_items, "f").filter(x => !x.hidden)[index];
+            }
+        }
+        const itemFromEventContainer = shadowRootListboxElement ? shadowRootListboxElement
+            : path.find(x => x instanceof HTMLElement && x.role === 'listbox');
+        if (itemFromEventContainer) {
+            const possiblyShadowRootContainerItems = Array.from(itemFromEventContainer.children)
+                .filter(__classPrivateFieldGet(this, _ListboxController_options, "f").isItem);
+            const index = possiblyShadowRootContainerItems
+                .findIndex(node => path.includes(node));
+            if (index >= 0) {
+                return this.items[index] ?? null;
+            }
+        }
+    }
+    return null;
+}, _ListboxController_selectItem = function _ListboxController_selectItem(item, shiftDown = false) {
+    if (__classPrivateFieldGet(this, _ListboxController_options, "f").isItemDisabled(item)) {
+        return;
+    }
+    else if (this.multi && shiftDown) {
+        // update starting item for other multiselect
+        this.selected = [...this.selected, item];
+    }
+    else if (this.multi && __classPrivateFieldGet(this, _ListboxController_selectedItems, "f").has(item)) {
+        this.selected = this.selected.filter(x => x !== item);
+    }
+    else if (this.multi) {
+        this.selected = this.selected.concat(item);
+    }
+    else {
+        this.selected = [item];
+    }
+};
+ListboxController.instances = new WeakMap();
+//# sourceMappingURL=listbox-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js.map
new file mode 100644
index 0000000..c94674f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/listbox-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"listbox-controller.js","sourceRoot":"","sources":["listbox-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\nimport type { RequireProps } from '../core.ts';\n\nimport { isServer } from 'lit';\nimport { arraysAreEquivalent } from '../functions/arraysAreEquivalent.js';\n\n/**\n * Options for listbox controller\n */\nexport interface ListboxControllerOptions<Item extends HTMLElement> {\n  /**\n   * Whether the listbox supports multiple selections.\n   */\n  multi?: boolean;\n  /**\n   * Optional callback to control the selection behavior of items. By default, ListboxController\n   * will set the `aria-selected` attribute. When overriding this option, it will call it on your\n   * element with the selected state.\n   * Callers **must** ensure that the correct ARIA state is set.\n   */\n  setItemSelected?(item: Item, selected: boolean): void;\n  /**\n   * Optional predicate to ascertain whether a custom element item is disabled or not\n   * By default, if the item matches any of these conditions, it is considered disabled:\n   * 1. it's `disabled` DOM property is `true`\n   * 1. it has the `aria-disabled=\"true\"` attribute\n   * 2. it has the `disabled` attribute present\n   * 3. it matches the `:disabled` pseudo selector\n   */\n  isItemDisabled?(item: Item): boolean;\n  /**\n   * Predicate which determines if a given element is in fact an item\n   * instead of e.g a presentational divider. By default, elements must meet the following criteria\n   * 1. element a child of a listbox role,\n   * 2. element does not have role=\"presentation\"\n   * 2. element is not an `<hr>`\n   * **NB**: When overriding, you must avoid outside references. This predicate must\n   * only consider the element itself, without reference to the host element's items array.\n   * @example ```js\n   *          isItem: (item) => item instanceof MyCustomItem\n   *          ```\n   */\n  isItem?(item: EventTarget | null): item is Item;\n  /**\n   * Function returning the item which currently has assistive technology focus.\n   * In most cases, this should be the `atFocusedItem` of an ATFocusController\n   * i.e. RovingTabindexController or ActivedescendantController.\n   *\n   */\n  getATFocusedItem(): Item | null;\n  /**\n   * Function returning the DOM node which is the direct parent of the item elements\n   * Defaults to the controller host.\n   * If the controller host is not an HTMLElement, this *must* be set\n   */\n  getItemsContainer?(): HTMLElement | null;\n  /**\n   * Optional function returning an additional DOM node which controls the listbox, e.g.\n   * a combobox input.\n   */\n  getControlsElements?(): HTMLElement[];\n}\n\n/**\n * This is the default method for setting the selected state on an item element\n * @param item the item\n * @param selected is this item selected\n */\nfunction setItemSelected<Item extends HTMLElement>(item: Item, selected: boolean) {\n  if (selected) {\n    item.setAttribute('aria-selected', 'true');\n  } else {\n    item.removeAttribute('aria-selected');\n  }\n}\n\n/**\n * @param item possible disabled item\n * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time\n */\nexport function isItem<Item extends HTMLElement>(item: EventTarget | null): item is Item {\n  return item instanceof Element\n    && item?.parentElement?.role === 'listbox'\n    && item?.role !== 'presentation'\n    && item?.localName !== 'hr';\n}\n\n/**\n * This is a fib. aria-disabled might not be present on an element that uses internals,\n * and the `disabled` attribute may not accurately represent the disabled state.\n * short of patching the `attachInternals` constructor, it may not be possible at\n * runtime to know with certainty that an arbitrary custom element is disabled or not.\n * @param item possibly disabled item\n * @package do not import this outside of `@patternfly/pfe-core`, it is subject to change at any time\n */\nexport function isItemDisabled<Item extends HTMLElement>(item: Item): boolean {\n  return ('disabled' in item && typeof item.disabled === 'boolean' && item.disabled)\n      || item.getAttribute('aria-disabled') === 'true'\n      || item.hasAttribute('disabled')\n      || item.hasAttribute('inert')\n      || item.matches(':disabled');\n}\n\nlet constructingAllowed = false;\n\n/**\n * Implements listbox semantics and accesibility. As there are two recognized\n * patterns for implementing keyboard interactions with listbox patterns,\n * provide a secondary controller (either RovingTabindexController or\n * ActiveDescendantController) to complete the implementation.\n *\n * @see https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_vs_selection\n *\n * > Occasionally, it may appear as if two elements on the page have focus at the same time.\n * > For example, in a multi-select list box, when an option is selected it may be greyed.\n * > Yet, the focus indicator can still be moved to other options, which may also be selected.\n * > Similarly, when a user activates a tab in a tablist, the selected state is set on the tab\n * > and its visual appearance changes. However, the user can still navigate, moving the focus\n * > indicator elsewhere on the page while the tab retains its selected appearance and state.\n * >\n * > Focus and selection are quite different. From the keyboard user's perspective,\n * > focus is a pointer, like a mouse pointer; it tracks the path of navigation.\n * > There is only one point of focus at any time and all operations take place at the\n * > point of focus. On the other hand, selection is an operation that can be performed in\n * > some widgets, such as list boxes, trees, and tablists. If a widget supports only single\n * > selection, then only one item can be selected and very often the selected state will simply\n * > follow the focus when focus is moved inside of the widget.\n * > That is, in some widgets, moving focus may also perform the select operation.\n * > However, if the widget supports multiple selection, then more than one item can be in a\n * > selected state, and keys for moving focus do not perform selection. Some multi-select widgets\n * > do support key commands that both move focus and change selection, but those keys are\n * > different from the normal navigation keys. Finally, when focus leaves a widget that includes\n * > a selected element, the selected state persists.\n * >\n * > From the developer's perspective, the difference is simple -- the focused element is the\n * > active element (document.activeElement). Selected elements are elements that have\n * > aria-selected=\"true\".\n * >\n * > With respect to focus and the selected state, the most important considerations for designers\n * > and developers are:\n * >\n * > - The visual focus indicator must always be visible.\n * > - The selected state must be visually distinct from the focus indicator.\n */\nexport class ListboxController<Item extends HTMLElement> implements ReactiveController {\n  private static instances = new WeakMap<ReactiveControllerHost, ListboxController<HTMLElement>>();\n\n  public static of<Item extends HTMLElement>(\n    host: ReactiveControllerHost,\n    options: ListboxControllerOptions<Item>,\n  ): ListboxController<Item> {\n    constructingAllowed = true;\n    const instance = new ListboxController<Item>(host, options);\n    constructingAllowed = false;\n    return instance as ListboxController<Item>;\n  }\n\n  /** Current active descendant when shift key is pressed */\n  #shiftStartingItem: Item | null = null;\n\n  #options: RequireProps<ListboxControllerOptions<Item>,\n    | 'setItemSelected'\n    | 'isItemDisabled'\n    | 'isItem'\n  >;\n\n  /** All items */\n  #items: Item[] = [];\n\n  #selectedItems = new Set<Item>;\n\n  #listening = false;\n\n  /** Whether listbox is disabled */\n  disabled = false;\n\n  get container(): HTMLElement {\n    return this.#options.getItemsContainer?.() ?? this.host as unknown as HTMLElement;\n  }\n\n  get multi(): boolean {\n    return !!this.#options.multi;\n  }\n\n  set multi(v: boolean) {\n    this.#options.multi = v;\n    this.host.requestUpdate();\n  }\n\n  get items(): Item[] {\n    return this.#items;\n  }\n\n  /**\n   * register's the host's Item elements as listbox controller items\n   * sets aria-setsize and aria-posinset on items\n   * @param items items\n   */\n  set items(items: Item[]) {\n    this.#items = items;\n    this.#items.forEach((item, index, _items) => {\n      item.ariaSetSize = _items.length.toString();\n      item.ariaPosInSet = (index + 1).toString();\n    });\n  }\n\n  /**\n   * sets the listbox value based on selected options\n   * @param selected item or items\n   */\n  set selected(selected: Item[]) {\n    if (!arraysAreEquivalent(selected, Array.from(this.#selectedItems))) {\n      this.#selectedItems = new Set(selected);\n      for (const item of this.items) {\n        this.#options.setItemSelected(item, this.#selectedItems.has(item));\n      }\n      this.host.requestUpdate();\n    }\n  }\n\n  /**\n   * array of options which are selected\n   */\n  get selected(): Item[] {\n    return [...this.#selectedItems];\n  }\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    options: ListboxControllerOptions<Item>,\n  ) {\n    this.#options = { setItemSelected, isItemDisabled, isItem, ...options };\n    if (!constructingAllowed) {\n      throw new Error('ListboxController must be constructed with `ListboxController.of()`');\n    }\n    if (!isServer\n        && !(host instanceof HTMLElement)\n        && typeof options.getItemsContainer !== 'function') {\n      throw new Error([\n        'ListboxController requires the host to be an HTMLElement',\n        'or for the initializer to include a getItemsContainer() function',\n      ].join(' '));\n    }\n    const instance = ListboxController.instances.get(host) as unknown as ListboxController<Item>;\n    if (instance) {\n      return instance as ListboxController<Item>;\n    }\n    ListboxController.instances.set(host, this as unknown as ListboxController<HTMLElement>);\n    this.host.addController(this);\n    this.multi = this.#options.multi ?? false;\n    if (this.container?.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  async hostConnected(): Promise<void> {\n    await this.host.updateComplete;\n    this.hostUpdate();\n    this.hostUpdated();\n  }\n\n  #controlsElements: HTMLElement[] = [];\n\n  #removeControlsListeners(els = this.#controlsElements) {\n    for (const el of els) {\n      el.removeEventListener('keydown', this.#onKeydown);\n      el.removeEventListener('keyup', this.#onKeyup);\n    }\n  }\n\n  hostUpdate(): void {\n    const last = this.#controlsElements;\n    this.#controlsElements = this.#options.getControlsElements?.() ?? [];\n    if (!arraysAreEquivalent(last, this.#controlsElements)) {\n      this.#removeControlsListeners(last);\n      for (const el of this.#controlsElements) {\n        el.addEventListener('keydown', this.#onKeydown);\n        el.addEventListener('keyup', this.#onKeyup);\n      }\n    }\n  }\n\n  hostUpdated(): void {\n    if (!this.#listening) {\n      this.container?.addEventListener('click', this.#onClick);\n      this.container?.addEventListener('keydown', this.#onKeydown);\n      this.container?.addEventListener('keyup', this.#onKeyup);\n      this.#listening = true;\n    }\n    this.container?.setAttribute('role', 'listbox');\n    this.container?.setAttribute('aria-disabled', String(!!this.disabled));\n    this.container?.setAttribute('aria-multiselectable', String(!!this.#options.multi));\n  }\n\n  hostDisconnected(): void {\n    this.container?.removeEventListener('click', this.#onClick);\n    this.container?.removeEventListener('keydown', this.#onKeydown);\n    this.container?.removeEventListener('keyup', this.#onKeyup);\n    this.#removeControlsListeners();\n    this.#listening = false;\n  }\n\n  public isSelected(item: Item): boolean {\n    return this.#selectedItems.has(item);\n  }\n\n  get #isExpanded() {\n    return !this.#controlsElements.length ? true\n      : this.#controlsElements.every(x => x.ariaExpanded === 'true');\n  }\n\n  /**\n   * In the case where aria IDL attributes are not supported,\n   * we need to correlate the item in the event path (i.e. the shadow dom clone)\n   * with the item in listbox controller's root (i.e. the hidden light dom original)\n   * XXX: as long as there is no DOM preceeding the shadow root clones, this will work\n   * @param event click or keyboard event\n   */\n  #getItemFromEvent(event: Event): Item | null {\n    // NOTE(bennypowers): I am aware that this function *sucks*\n    // you're more than welcome to improve it.\n    // make sure there are unit tests first\n    const path = event.composedPath();\n    const tabindexed = this.items.some(x => x.hasAttribute('tabindex'));\n    if (tabindexed) {\n      const item = path.find(this.#options.isItem);\n      if (item) {\n        return item;\n      }\n    } else if (this.#options.isItem(event.target)\n               && event.target.getRootNode() !== this.container.getRootNode()\n               && 'ariaActiveDescendantElement' in HTMLElement.prototype) {\n      return event.target;\n    } else if (event.target instanceof HTMLElement && event.target.ariaActiveDescendantElement) {\n      return event.target.ariaActiveDescendantElement as Item;\n    } else if (event.type === 'click'\n               && this.#options.isItem(event.target)\n               && event.target.id) {\n      const element = event.target;\n      const root = element.getRootNode();\n      if (root instanceof ShadowRoot && this.container.getRootNode() === root) {\n        const shadowRootListboxElement = this.container;\n        const shadowRootItem = element;\n        if (shadowRootItem && shadowRootListboxElement) {\n          if (this.items.includes(shadowRootItem)) {\n            return shadowRootItem;\n          } else {\n            const index =\n              Array.from(shadowRootListboxElement?.children ?? [])\n                  .filter(this.#options.isItem)\n                  .filter(x => !x.hidden)\n                  .indexOf(shadowRootItem);\n            return this.#items.filter(x => !x.hidden)[index];\n          }\n        }\n      }\n    } else {\n      // otherwise, query the root (e.g. shadow root) for the associated element\n      const element = event.target as HTMLElement;\n\n      const root = element.getRootNode() as ShadowRoot | Document;\n\n      const controlsId = element?.getAttribute('aria-controls');\n      const shadowRootListboxElement =\n          this.#options.isItem(element) ? this.container\n        : controlsId ? root.getElementById(controlsId)\n        : null;\n\n      const shadowRootHasActiveDescendantElement =\n        root.querySelector(`[aria-controls=\"${shadowRootListboxElement?.id}\"][aria-activedescendant]`);\n\n      const shadowRootItemId =\n        shadowRootHasActiveDescendantElement?.getAttribute('aria-activedescendant');\n\n      const shadowRootItem =\n        shadowRootItemId && root.getElementById(shadowRootItemId) as Item | null;\n\n      if (shadowRootItem && shadowRootListboxElement) {\n        if (this.items.includes(shadowRootItem)) {\n          return shadowRootItem;\n        } else {\n          const index =\n            Array.from(shadowRootListboxElement?.children ?? [])\n                .filter(this.#options.isItem)\n                .filter(x => !x.hidden)\n                .indexOf(shadowRootItem);\n          return this.#items.filter(x => !x.hidden)[index];\n        }\n      }\n\n      const itemFromEventContainer =\n        shadowRootListboxElement ? shadowRootListboxElement\n      : path.find(x =>\n        x instanceof HTMLElement && x.role === 'listbox') as HTMLElement;\n\n      if (itemFromEventContainer) {\n        const possiblyShadowRootContainerItems = Array.from(itemFromEventContainer.children)\n            .filter(this.#options.isItem);\n\n        const index = possiblyShadowRootContainerItems\n            .findIndex(node => path.includes(node));\n\n        if (index >= 0) {\n          return this.items[index] ?? null;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * handles clicking on a listbox option:\n   * which selects an item by default\n   * or toggles selection if multiselectable\n   * @param event click event\n   */\n  #onClick = (event: MouseEvent) => {\n    const item = this.#getItemFromEvent(event);\n    this.#shiftStartingItem ??= this.#getItemFromEvent(event);\n    if (item && !this.#options.isItemDisabled(item)) {\n      // Case: single select?\n      //       just reset the selected list.\n      if (!this.multi) {\n        // select target and deselect all other options\n        this.selected = [item];\n      // Case: multi select, but no shift key\n      //       toggle target, keep all other previously selected\n      } else if (!event.shiftKey) {\n        this.selected = this.items.filter(possiblySelectedItem =>\n            this.#selectedItems.has(possiblySelectedItem) ? possiblySelectedItem !== item\n          : possiblySelectedItem === item);\n      // Case: multi select, with shift key\n      //       find all items between previously selected and target,\n      //       and select them (if reference item is selected) or deselect them (if reference item is deselected)\n      //       Do not wrap around from end to start, rather, only select withing the range of 0-end\n      } else {\n        const startingItem = this.#shiftStartingItem!;\n        // whether options will be selected (true) or deselected (false)\n        const selecting = this.#selectedItems.has(startingItem);\n        const [start, end] = [this.items.indexOf(startingItem), this.items.indexOf(item)].sort();\n        // de/select all options between active descendant and target\n        this.selected = this.items.filter((item, i) => {\n          if (i >= start && i <= end) {\n            return selecting;\n          } else {\n            return this.#selectedItems.has(item);\n          }\n        });\n      }\n    }\n    this.#shiftStartingItem = item;\n    this.host.requestUpdate();\n  };\n\n  /**\n   * track whether shift key is being used for multiselectable listbox\n   * @param event keyup event\n   */\n  #onKeyup = (event: KeyboardEvent) => {\n    if (event.key === 'Shift') {\n      this.#shiftStartingItem = null;\n    }\n  };\n\n  /**\n   * filters listbox by keyboard event when slotted option has focus,\n   * or by external element such as a text field\n   * @param event keydown event\n   */\n  #onKeydown = (event: KeyboardEvent) => {\n    const item = this.#getItemFromEvent(event);\n\n    if (this.disabled\n      || event.altKey\n      || event.metaKey\n      || !this.#isExpanded) {\n      return;\n    }\n\n    // need to set for keyboard support of multiselect\n    if (event.key === 'Shift' && this.multi) {\n      this.#shiftStartingItem ??= this.#options.getATFocusedItem() ?? null;\n    }\n\n    switch (event.key) {\n      // ctrl+A de/selects all options\n      case 'a':\n      case 'A':\n        if (event.ctrlKey\n            && (event.target === this.container\n                || this.#options.isItem(event.target))) {\n          const selectableItems = this.items.filter(item => !this.#options.isItemDisabled(item));\n          if (arraysAreEquivalent(this.selected, selectableItems)) {\n            this.selected = [];\n          } else {\n            this.selected = selectableItems;\n          }\n          event.preventDefault();\n        }\n        break;\n      case 'Enter':\n        // enter and space are only applicable if a listbox option is clicked\n        // an external text input should not trigger multiselect\n        if (item && !event.shiftKey) {\n          const focused = item;\n          this.#selectItem(focused, event.shiftKey);\n          event.preventDefault();\n        }\n        break;\n      case 'ArrowUp':\n        if (this.multi && event.shiftKey && this.#options.isItem(event.target)) {\n          const item = event.target;\n          this.selected = this.items.filter((x, i) =>\n            this.#selectedItems.has(x)\n            || i === this.items.indexOf(item) - 1)\n              .filter(x => !this.#options.isItemDisabled(x));\n        }\n        break;\n      case 'ArrowDown':\n        if (this.multi && event.shiftKey && this.#options.isItem(event.target)) {\n          const item = event.target;\n          this.selected = this.items.filter((x, i) =>\n            this.#selectedItems.has(x)\n            || i === this.items.indexOf(item) + 1)\n              .filter(x => !this.#options.isItemDisabled(x));\n        }\n        break;\n      case ' ':\n        // enter and space are only applicable if a listbox option is clicked\n        // an external text input should not trigger multiselect\n        if (item && event.target === this.container) {\n          this.#selectItem(item, event.shiftKey);\n          event.preventDefault();\n        } else if (this.#options.isItem(event.target)) {\n          this.#selectItem(event.target, event.shiftKey);\n          event.preventDefault();\n        }\n        break;\n      default:\n        break;\n    }\n    this.host.requestUpdate();\n  };\n\n  #selectItem(item: Item, shiftDown = false) {\n    if (this.#options.isItemDisabled(item)) {\n      return;\n    } else if (this.multi && shiftDown) {\n      // update starting item for other multiselect\n      this.selected = [...this.selected, item];\n    } else if (this.multi && this.#selectedItems.has(item)) {\n      this.selected = this.selected.filter(x => x !== item);\n    } else if (this.multi) {\n      this.selected = this.selected.concat(item);\n    } else {\n      this.selected = [item];\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/logger.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/logger.d.ts
new file mode 100644
index 0000000..262283c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/logger.d.ts
@@ -0,0 +1,79 @@
+import { type ReactiveController, type ReactiveControllerHost } from 'lit';
+export declare class Logger implements ReactiveController {
+    private host;
+    private static logDebug;
+    private static instances;
+    private get prefix();
+    /**
+     * A boolean value that indicates if the logging should be printed to the console; used for debugging.
+     * For use in a JS file or script tag; can also be added in the constructor of a component during development.
+     * @example Logger.debugLog(true);
+     * @param [preference=null]
+     */
+    static debugLog(preference?: null): boolean;
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.debug("Hello");
+     * @param msgs console.log params
+     */
+    static debug(...msgs: unknown[]): void;
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.info("Hello");
+     * @param msgs console.log params
+     */
+    static info(...msgs: unknown[]): void;
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.log("Hello");
+     * @param msgs console.log params
+     */
+    static log(...msgs: unknown[]): void;
+    /**
+     * A console warning wrapper which formats your output with useful debugging information.
+     * @example Logger.warn("Hello");
+     * @param msgs console.log params
+     */
+    static warn(...msgs: unknown[]): void;
+    /**
+     * A console error wrapper which formats your output with useful debugging information.
+     * For use inside a component's function.
+     * @example Logger.error("Hello");
+     * @param msgs console.log params
+     */
+    static error(...msgs: unknown[]): void;
+    /**
+     * Debug logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    debug(...msgs: unknown[]): void;
+    /**
+     * Info logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    info(...msgs: unknown[]): void;
+    /**
+     * Local logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    log(...msgs: unknown[]): void;
+    /**
+     * Local warning wrapper that outputs the tag name as a prefix automatically.
+     * For use inside a component's function.
+     * @example this.logger.warn("Hello");
+     * @param msgs console.log params
+     */
+    warn(...msgs: unknown[]): void;
+    /**
+     * Local error wrapper that outputs the tag name as a prefix automatically.
+     * For use inside a component's function.
+     * @example this.logger.error("Hello");
+     * @param msgs console.log params
+     */
+    error(...msgs: unknown[]): void;
+    constructor(host: ReactiveControllerHost);
+    hostConnected(): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/logger.js b/node_modules/@patternfly/pfe-core/package/controllers/logger.js
new file mode 100644
index 0000000..f5b6095
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/logger.js
@@ -0,0 +1,136 @@
+import { isServer } from 'lit';
+export class Logger {
+    get prefix() {
+        if (!isServer && this.host instanceof HTMLElement) {
+            return `[${this.host.localName}${this.host.id ? `#${this.host.id}` : ''}]`;
+        }
+        else {
+            return `[${this.host.constructor.name}]`;
+        }
+    }
+    /**
+     * A boolean value that indicates if the logging should be printed to the console; used for debugging.
+     * For use in a JS file or script tag; can also be added in the constructor of a component during development.
+     * @example Logger.debugLog(true);
+     * @param [preference=null]
+     */
+    static debugLog(preference = null) {
+        // wrap localStorage references in a try/catch; merely referencing it can
+        // throw errors in some locked down environments
+        try {
+            if (preference !== null) {
+                Logger.logDebug = !!preference;
+                localStorage.pfeLog = !!preference;
+            }
+            return localStorage.pfeLog === 'true';
+        }
+        catch {
+            return Logger.logDebug;
+        }
+    }
+    /* eslint-disable no-console */
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.debug("Hello");
+     * @param msgs console.log params
+     */
+    static debug(...msgs) {
+        if (Logger.debugLog()) {
+            console.debug(...msgs);
+        }
+    }
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.info("Hello");
+     * @param msgs console.log params
+     */
+    static info(...msgs) {
+        if (Logger.debugLog()) {
+            console.info(...msgs);
+        }
+    }
+    /**
+     * A logging wrapper which checks the debugLog boolean and prints to the console if true.
+     * @example Logger.log("Hello");
+     * @param msgs console.log params
+     */
+    static log(...msgs) {
+        if (Logger.debugLog()) {
+            console.log(...msgs);
+        }
+    }
+    /**
+     * A console warning wrapper which formats your output with useful debugging information.
+     * @example Logger.warn("Hello");
+     * @param msgs console.log params
+     */
+    static warn(...msgs) {
+        console.warn(...msgs);
+    }
+    /**
+     * A console error wrapper which formats your output with useful debugging information.
+     * For use inside a component's function.
+     * @example Logger.error("Hello");
+     * @param msgs console.log params
+     */
+    static error(...msgs) {
+        console.error([...msgs].join(' '));
+    }
+    /* eslint-enable no-console */
+    /**
+     * Debug logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    debug(...msgs) {
+        Logger.debug(this.prefix, ...msgs);
+    }
+    /**
+     * Info logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    info(...msgs) {
+        Logger.info(this.prefix, ...msgs);
+    }
+    /**
+     * Local logging that outputs the tag name as a prefix automatically
+     * @example this.logger.log("Hello");
+     * @param msgs console.log params
+     */
+    log(...msgs) {
+        Logger.log(this.prefix, ...msgs);
+    }
+    /**
+     * Local warning wrapper that outputs the tag name as a prefix automatically.
+     * For use inside a component's function.
+     * @example this.logger.warn("Hello");
+     * @param msgs console.log params
+     */
+    warn(...msgs) {
+        Logger.warn(this.prefix, ...msgs);
+    }
+    /**
+     * Local error wrapper that outputs the tag name as a prefix automatically.
+     * For use inside a component's function.
+     * @example this.logger.error("Hello");
+     * @param msgs console.log params
+     */
+    error(...msgs) {
+        Logger.error(this.prefix, ...msgs);
+    }
+    constructor(host) {
+        this.host = host;
+        // We only need one logger instance per host
+        if (Logger.instances.get(host)) {
+            return Logger.instances.get(host);
+        }
+        host.addController(this);
+        Logger.instances.set(host, this);
+    }
+    hostConnected() {
+        this.debug('connected');
+    }
+}
+Logger.instances = new WeakMap();
+//# sourceMappingURL=logger.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/logger.js.map b/node_modules/@patternfly/pfe-core/package/controllers/logger.js.map
new file mode 100644
index 0000000..5265e66
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/logger.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"logger.js","sourceRoot":"","sources":["logger.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport class Logger implements ReactiveController {\n  private static logDebug: boolean;\n\n  private static instances = new WeakMap<ReactiveControllerHost, Logger>();\n\n  private get prefix() {\n    if (!isServer && this.host instanceof HTMLElement) {\n      return `[${this.host.localName}${this.host.id ? `#${this.host.id}` : ''}]`;\n    } else {\n      return `[${this.host.constructor.name}]`;\n    }\n  }\n\n  /**\n   * A boolean value that indicates if the logging should be printed to the console; used for debugging.\n   * For use in a JS file or script tag; can also be added in the constructor of a component during development.\n   * @example Logger.debugLog(true);\n   * @param [preference=null]\n   */\n  static debugLog(preference = null): boolean {\n    // wrap localStorage references in a try/catch; merely referencing it can\n    // throw errors in some locked down environments\n    try {\n      if (preference !== null) {\n        Logger.logDebug = !!preference;\n        localStorage.pfeLog = !!preference;\n      }\n      return localStorage.pfeLog === 'true';\n    } catch {\n      return Logger.logDebug;\n    }\n  }\n\n  /* eslint-disable no-console */\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   * @example Logger.debug(\"Hello\");\n   * @param msgs console.log params\n   */\n  static debug(...msgs: unknown[]): void {\n    if (Logger.debugLog()) {\n      console.debug(...msgs);\n    }\n  }\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   * @example Logger.info(\"Hello\");\n   * @param msgs console.log params\n   */\n  static info(...msgs: unknown[]): void {\n    if (Logger.debugLog()) {\n      console.info(...msgs);\n    }\n  }\n\n  /**\n   * A logging wrapper which checks the debugLog boolean and prints to the console if true.\n   * @example Logger.log(\"Hello\");\n   * @param msgs console.log params\n   */\n  static log(...msgs: unknown[]): void {\n    if (Logger.debugLog()) {\n      console.log(...msgs);\n    }\n  }\n\n  /**\n   * A console warning wrapper which formats your output with useful debugging information.\n   * @example Logger.warn(\"Hello\");\n   * @param msgs console.log params\n   */\n  static warn(...msgs: unknown[]): void {\n    console.warn(...msgs);\n  }\n\n  /**\n   * A console error wrapper which formats your output with useful debugging information.\n   * For use inside a component's function.\n   * @example Logger.error(\"Hello\");\n   * @param msgs console.log params\n   */\n  static error(...msgs: unknown[]): void {\n    console.error([...msgs].join(' '));\n  }\n\n  /* eslint-enable no-console */\n\n  /**\n   * Debug logging that outputs the tag name as a prefix automatically\n   * @example this.logger.log(\"Hello\");\n   * @param msgs console.log params\n   */\n  debug(...msgs: unknown[]): void {\n    Logger.debug(this.prefix, ...msgs);\n  }\n\n  /**\n   * Info logging that outputs the tag name as a prefix automatically\n   * @example this.logger.log(\"Hello\");\n   * @param msgs console.log params\n   */\n  info(...msgs: unknown[]): void {\n    Logger.info(this.prefix, ...msgs);\n  }\n\n  /**\n   * Local logging that outputs the tag name as a prefix automatically\n   * @example this.logger.log(\"Hello\");\n   * @param msgs console.log params\n   */\n  log(...msgs: unknown[]): void {\n    Logger.log(this.prefix, ...msgs);\n  }\n\n  /**\n   * Local warning wrapper that outputs the tag name as a prefix automatically.\n   * For use inside a component's function.\n   * @example this.logger.warn(\"Hello\");\n   * @param msgs console.log params\n   */\n  warn(...msgs: unknown[]): void {\n    Logger.warn(this.prefix, ...msgs);\n  }\n\n  /**\n   * Local error wrapper that outputs the tag name as a prefix automatically.\n   * For use inside a component's function.\n   * @example this.logger.error(\"Hello\");\n   * @param msgs console.log params\n   */\n  error(...msgs: unknown[]): void {\n    Logger.error(this.prefix, ...msgs);\n  }\n\n  constructor(private host: ReactiveControllerHost) {\n    // We only need one logger instance per host\n    if (Logger.instances.get(host)) {\n      return Logger.instances.get(host) as Logger;\n    }\n    host.addController(this);\n    Logger.instances.set(host, this);\n  }\n\n  hostConnected(): void {\n    this.debug('connected');\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.d.ts
new file mode 100644
index 0000000..ab57450
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.d.ts
@@ -0,0 +1,28 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+export interface Options {
+    /**
+     * Force hide the scroll buttons regardless of overflow
+     */
+    hideOverflowButtons?: boolean;
+    /**
+     * Delay in ms to wait before checking for overflow
+     */
+    scrollTimeoutDelay?: number;
+}
+export declare class OverflowController implements ReactiveController {
+    #private;
+    host: ReactiveElement;
+    private options?;
+    showScrollButtons: boolean;
+    overflowLeft: boolean;
+    overflowRight: boolean;
+    get firstItem(): HTMLElement | undefined;
+    get lastItem(): HTMLElement | undefined;
+    constructor(host: ReactiveElement, options?: Options | undefined);
+    init(container: HTMLElement, items: HTMLElement[]): void;
+    onScroll: () => void;
+    scrollLeft(): void;
+    scrollRight(): void;
+    update(): void;
+    hostConnected(): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js
new file mode 100644
index 0000000..c43fcea
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js
@@ -0,0 +1,117 @@
+var _OverflowController_instances, _a, _OverflowController_instances_1, _OverflowController_container, _OverflowController_items, _OverflowController_scrollTimeoutDelay, _OverflowController_scrollTimeout, _OverflowController_hideOverflowButtons, _OverflowController_mo, _OverflowController_ro, _OverflowController_setOverflowState;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isElementInView } from '@patternfly/pfe-core/functions/isElementInView.js';
+export class OverflowController {
+    get firstItem() {
+        return __classPrivateFieldGet(this, _OverflowController_items, "f").at(0);
+    }
+    get lastItem() {
+        return __classPrivateFieldGet(this, _OverflowController_items, "f").at(-1);
+    }
+    constructor(
+    // TODO: widen this type to ReactiveControllerHost
+    host, options) {
+        _OverflowController_instances.add(this);
+        this.host = host;
+        this.options = options;
+        /** Overflow container */
+        _OverflowController_container.set(this, void 0);
+        /** Children that can overflow */
+        _OverflowController_items.set(this, []);
+        _OverflowController_scrollTimeoutDelay.set(this, void 0);
+        _OverflowController_scrollTimeout.set(this, void 0);
+        /** Default state */
+        _OverflowController_hideOverflowButtons.set(this, void 0);
+        _OverflowController_mo.set(this, new MutationObserver(mutations => {
+            for (const mutation of mutations) {
+                if (mutation.type === 'childList') {
+                    __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+                }
+            }
+        }));
+        _OverflowController_ro.set(this, new ResizeObserver(() => {
+            requestAnimationFrame(() => {
+                __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+            });
+        }));
+        this.showScrollButtons = false;
+        this.overflowLeft = false;
+        this.overflowRight = false;
+        this.onScroll = () => {
+            clearTimeout(__classPrivateFieldGet(this, _OverflowController_scrollTimeout, "f"));
+            __classPrivateFieldSet(this, _OverflowController_scrollTimeout, setTimeout(() => __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this), __classPrivateFieldGet(this, _OverflowController_scrollTimeoutDelay, "f")), "f");
+        };
+        __classPrivateFieldSet(this, _OverflowController_hideOverflowButtons, options?.hideOverflowButtons ?? false, "f");
+        __classPrivateFieldSet(this, _OverflowController_scrollTimeoutDelay, options?.scrollTimeoutDelay ?? 0, "f");
+        if (host.isConnected) {
+            __classPrivateFieldGet(_a, _a, "f", _OverflowController_instances_1).add(this);
+        }
+        host.addController(this);
+        if (host.isConnected) {
+            this.hostConnected();
+        }
+    }
+    init(container, items) {
+        __classPrivateFieldSet(this, _OverflowController_container, container, "f");
+        // convert HTMLCollection to HTMLElement[]
+        __classPrivateFieldSet(this, _OverflowController_items, items, "f");
+    }
+    scrollLeft() {
+        if (!__classPrivateFieldGet(this, _OverflowController_container, "f")) {
+            return;
+        }
+        const leftScroll = __classPrivateFieldGet(this, _OverflowController_container, "f").scrollLeft - __classPrivateFieldGet(this, _OverflowController_container, "f").clientWidth;
+        __classPrivateFieldGet(this, _OverflowController_container, "f").scroll({ left: leftScroll, behavior: 'smooth' });
+        __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+    }
+    scrollRight() {
+        if (!__classPrivateFieldGet(this, _OverflowController_container, "f")) {
+            return;
+        }
+        const leftScroll = __classPrivateFieldGet(this, _OverflowController_container, "f").scrollLeft + __classPrivateFieldGet(this, _OverflowController_container, "f").clientWidth;
+        __classPrivateFieldGet(this, _OverflowController_container, "f").scroll({ left: leftScroll, behavior: 'smooth' });
+        __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+    }
+    update() {
+        __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+    }
+    hostConnected() {
+        __classPrivateFieldGet(this, _OverflowController_mo, "f").observe(this.host, { attributes: false, childList: true, subtree: true });
+        __classPrivateFieldGet(this, _OverflowController_ro, "f").observe(this.host);
+        this.onScroll();
+        __classPrivateFieldGet(this, _OverflowController_instances, "m", _OverflowController_setOverflowState).call(this);
+    }
+}
+_a = OverflowController, _OverflowController_container = new WeakMap(), _OverflowController_items = new WeakMap(), _OverflowController_scrollTimeoutDelay = new WeakMap(), _OverflowController_scrollTimeout = new WeakMap(), _OverflowController_hideOverflowButtons = new WeakMap(), _OverflowController_mo = new WeakMap(), _OverflowController_ro = new WeakMap(), _OverflowController_instances = new WeakSet(), _OverflowController_setOverflowState = function _OverflowController_setOverflowState() {
+    if (!this.firstItem || !this.lastItem || !__classPrivateFieldGet(this, _OverflowController_container, "f")) {
+        return;
+    }
+    const prevLeft = this.overflowLeft;
+    const prevRight = this.overflowRight;
+    this.overflowLeft = !__classPrivateFieldGet(this, _OverflowController_hideOverflowButtons, "f")
+        && !isElementInView(__classPrivateFieldGet(this, _OverflowController_container, "f"), this.firstItem);
+    this.overflowRight = !__classPrivateFieldGet(this, _OverflowController_hideOverflowButtons, "f")
+        && !isElementInView(__classPrivateFieldGet(this, _OverflowController_container, "f"), this.lastItem);
+    let scrollButtonsWidth = 0;
+    if (this.overflowLeft || this.overflowRight) {
+        scrollButtonsWidth =
+            (__classPrivateFieldGet(this, _OverflowController_container, "f").parentElement?.querySelector('button')?.getBoundingClientRect().width || 0)
+                * 2;
+    }
+    this.showScrollButtons = !__classPrivateFieldGet(this, _OverflowController_hideOverflowButtons, "f")
+        && __classPrivateFieldGet(this, _OverflowController_container, "f").scrollWidth > (__classPrivateFieldGet(this, _OverflowController_container, "f").clientWidth + scrollButtonsWidth);
+    // only request update if there has been a change
+    if ((prevLeft !== this.overflowLeft) || (prevRight !== this.overflowRight)) {
+        this.host.requestUpdate();
+    }
+};
+_OverflowController_instances_1 = { value: new Set() };
+(() => {
+    // on resize check for overflows to add or remove scroll buttons
+    globalThis.addEventListener?.('resize', () => {
+        for (const instance of __classPrivateFieldGet(_a, _a, "f", _OverflowController_instances_1)) {
+            instance.onScroll();
+        }
+    }, { capture: false, passive: true });
+})();
+//# sourceMappingURL=overflow-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js.map
new file mode 100644
index 0000000..02ea1d1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/overflow-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"overflow-controller.js","sourceRoot":"","sources":["overflow-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { isElementInView } from '@patternfly/pfe-core/functions/isElementInView.js';\n\nexport interface Options {\n  /**\n   * Force hide the scroll buttons regardless of overflow\n   */\n  hideOverflowButtons?: boolean;\n  /**\n   * Delay in ms to wait before checking for overflow\n   */\n  scrollTimeoutDelay?: number;\n}\n\nexport class OverflowController implements ReactiveController {\n  static #instances = new Set<OverflowController>();\n\n  static {\n    // on resize check for overflows to add or remove scroll buttons\n    globalThis.addEventListener?.('resize', () => {\n      for (const instance of this.#instances) {\n        instance.onScroll();\n      }\n    }, { capture: false, passive: true });\n  }\n\n  /** Overflow container */\n  #container?: HTMLElement;\n  /** Children that can overflow */\n  #items: HTMLElement[] = [];\n\n  #scrollTimeoutDelay: number;\n  #scrollTimeout?: ReturnType<typeof setTimeout>;\n\n  /** Default state */\n  #hideOverflowButtons: boolean;\n\n  #mo = new MutationObserver(mutations => {\n    for (const mutation of mutations) {\n      if (mutation.type === 'childList') {\n        this.#setOverflowState();\n      }\n    }\n  });\n\n  #ro = new ResizeObserver(() => {\n    requestAnimationFrame(() => {\n      this.#setOverflowState();\n    });\n  });\n\n  showScrollButtons = false;\n  overflowLeft = false;\n  overflowRight = false;\n\n  get firstItem(): HTMLElement | undefined {\n    return this.#items.at(0);\n  }\n\n  get lastItem(): HTMLElement | undefined {\n    return this.#items.at(-1);\n  }\n\n  constructor(\n    // TODO: widen this type to ReactiveControllerHost\n    public host: ReactiveElement,\n    private options?: Options | undefined,\n  ) {\n    this.#hideOverflowButtons = options?.hideOverflowButtons ?? false;\n    this.#scrollTimeoutDelay = options?.scrollTimeoutDelay ?? 0;\n    if (host.isConnected) {\n      OverflowController.#instances.add(this);\n    }\n    host.addController(this);\n    if (host.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  #setOverflowState(): void {\n    if (!this.firstItem || !this.lastItem || !this.#container) {\n      return;\n    }\n    const prevLeft = this.overflowLeft;\n    const prevRight = this.overflowRight;\n\n    this.overflowLeft = !this.#hideOverflowButtons\n      && !isElementInView(this.#container, this.firstItem);\n    this.overflowRight = !this.#hideOverflowButtons\n      && !isElementInView(this.#container, this.lastItem);\n    let scrollButtonsWidth = 0;\n    if (this.overflowLeft || this.overflowRight) {\n      scrollButtonsWidth =\n        (this.#container.parentElement?.querySelector('button')?.getBoundingClientRect().width || 0)\n      * 2;\n    }\n    this.showScrollButtons = !this.#hideOverflowButtons\n    && this.#container.scrollWidth > (this.#container.clientWidth + scrollButtonsWidth);\n\n    // only request update if there has been a change\n    if ((prevLeft !== this.overflowLeft) || (prevRight !== this.overflowRight)) {\n      this.host.requestUpdate();\n    }\n  }\n\n  init(container: HTMLElement, items: HTMLElement[]): void {\n    this.#container = container;\n    // convert HTMLCollection to HTMLElement[]\n    this.#items = items;\n  }\n\n  onScroll = (): void => {\n    clearTimeout(this.#scrollTimeout);\n    this.#scrollTimeout = setTimeout(() => this.#setOverflowState(), this.#scrollTimeoutDelay);\n  };\n\n  scrollLeft(): void {\n    if (!this.#container) {\n      return;\n    }\n    const leftScroll = this.#container.scrollLeft - this.#container.clientWidth;\n    this.#container.scroll({ left: leftScroll, behavior: 'smooth' });\n    this.#setOverflowState();\n  }\n\n  scrollRight(): void {\n    if (!this.#container) {\n      return;\n    }\n    const leftScroll = this.#container.scrollLeft + this.#container.clientWidth;\n    this.#container.scroll({ left: leftScroll, behavior: 'smooth' });\n    this.#setOverflowState();\n  }\n\n  update(): void {\n    this.#setOverflowState();\n  }\n\n  hostConnected(): void {\n    this.#mo.observe(this.host, { attributes: false, childList: true, subtree: true });\n    this.#ro.observe(this.host);\n    this.onScroll();\n    this.#setOverflowState();\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.d.ts
new file mode 100644
index 0000000..7c1a44e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.d.ts
@@ -0,0 +1,9 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+export declare class PerfController implements ReactiveController {
+    private host;
+    hasMeasured: boolean;
+    markId: string;
+    constructor(host: ReactiveElement);
+    hostUpdate(): void;
+    measure(): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js
new file mode 100644
index 0000000..aeeecf8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js
@@ -0,0 +1,36 @@
+import { getRandomId } from '../functions/random.js';
+export class PerfController {
+    constructor(host) {
+        this.host = host;
+        this.hasMeasured = false;
+        host.addController(this);
+        // Set up the mark ID based on existing ID on component if it exists
+        if (!host.id) {
+            this.markId = getRandomId(host.localName);
+        }
+        else if (host.id.startsWith('pf-') && !host.id.startsWith(host.localName)) {
+            this.markId = host.id.replace('pf', host.localName);
+        }
+        else {
+            this.markId = `${host.localName}-${host.id}`;
+        }
+        performance.mark(`${this.markId}-defined`);
+    }
+    hostUpdate() {
+        if (!this.hasMeasured) {
+            this.measure();
+        }
+    }
+    measure() {
+        this.hasMeasured = true;
+        performance.mark(`${this.markId}-rendered`);
+        // Navigation start, i.e., the browser first sees that the user has navigated to the page
+        performance.measure(`${this.markId}-from-navigation-to-first-render`, undefined, `${this.markId}-rendered`);
+        // Render is run before connection unless delayRender is used
+        performance.measure(`${this.markId}-from-defined-to-first-render`, `${this.markId}-defined`, `${this.markId}-rendered`);
+        // Once we've measured time to render, we no longer need the controller,
+        // so we allow it to be garbage-collected
+        this.host.removeController(this);
+    }
+}
+//# sourceMappingURL=perf-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js.map
new file mode 100644
index 0000000..25db5f1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/perf-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"perf-controller.js","sourceRoot":"","sources":["perf-controller.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAErD,MAAM,OAAO,cAAc;IAKzB,YAAoB,IAAqB;QAArB,SAAI,GAAJ,IAAI,CAAiB;QAJzC,gBAAW,GAAG,KAAK,CAAC;QAKlB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAEzB,oEAAoE;QACpE,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YACb,IAAI,CAAC,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,CAAC;aAAM,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YAC5E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;QAC/C,CAAC;QAED,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED,UAAU;QACR,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAED,OAAO;QACL,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;QAE5C,yFAAyF;QACzF,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,kCAAkC,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,MAAM,WAAW,CAAC,CAAC;QAE5G,6DAA6D;QAC7D,WAAW,CAAC,OAAO,CACjB,GAAG,IAAI,CAAC,MAAM,+BAA+B,EAC7C,GAAG,IAAI,CAAC,MAAM,UAAU,EACxB,GAAG,IAAI,CAAC,MAAM,WAAW,CAC1B,CAAC;QAEF,wEAAwE;QACxE,yCAAyC;QACzC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IACnC,CAAC;CACF","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { getRandomId } from '../functions/random.js';\n\nexport class PerfController implements ReactiveController {\n  hasMeasured = false;\n\n  markId: string;\n\n  constructor(private host: ReactiveElement) {\n    host.addController(this);\n\n    // Set up the mark ID based on existing ID on component if it exists\n    if (!host.id) {\n      this.markId = getRandomId(host.localName);\n    } else if (host.id.startsWith('pf-') && !host.id.startsWith(host.localName)) {\n      this.markId = host.id.replace('pf', host.localName);\n    } else {\n      this.markId = `${host.localName}-${host.id}`;\n    }\n\n    performance.mark(`${this.markId}-defined`);\n  }\n\n  hostUpdate(): void {\n    if (!this.hasMeasured) {\n      this.measure();\n    }\n  }\n\n  measure(): void {\n    this.hasMeasured = true;\n\n    performance.mark(`${this.markId}-rendered`);\n\n    // Navigation start, i.e., the browser first sees that the user has navigated to the page\n    performance.measure(`${this.markId}-from-navigation-to-first-render`, undefined, `${this.markId}-rendered`);\n\n    // Render is run before connection unless delayRender is used\n    performance.measure(\n      `${this.markId}-from-defined-to-first-render`,\n      `${this.markId}-defined`,\n      `${this.markId}-rendered`\n    );\n\n    // Once we've measured time to render, we no longer need the controller,\n    // so we allow it to be garbage-collected\n    this.host.removeController(this);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.d.ts
new file mode 100644
index 0000000..43ac6b9
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.d.ts
@@ -0,0 +1,17 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+export type ChangeCallback<T extends ReactiveElement, V = T[keyof T]> = (this: T, old?: V, newV?: V) => void;
+export interface PropertyObserverOptions<T extends ReactiveElement> {
+    propertyName: string & keyof T;
+    callback: ChangeCallback<T>;
+    waitFor?: 'connected' | 'updated' | 'firstUpdated';
+}
+export declare class PropertyObserverController<T extends ReactiveElement> implements ReactiveController {
+    #private;
+    private host;
+    private options;
+    private oldVal;
+    constructor(host: T, options: PropertyObserverOptions<T>);
+    hostConnected(): void;
+    /** Set any cached valued accumulated between constructor and connectedCallback */
+    hostUpdate(): Promise<void>;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js
new file mode 100644
index 0000000..b3af900
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js
@@ -0,0 +1,62 @@
+var _PropertyObserverController_instances, _PropertyObserverController_neverRan, _PropertyObserverController_init;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { notEqual } from 'lit';
+const UNINITIALIZED = Symbol('uninitialized');
+export class PropertyObserverController {
+    constructor(host, options) {
+        _PropertyObserverController_instances.add(this);
+        this.host = host;
+        this.options = options;
+        this.oldVal = UNINITIALIZED;
+        _PropertyObserverController_neverRan.set(this, true);
+    }
+    hostConnected() {
+        __classPrivateFieldGet(this, _PropertyObserverController_instances, "m", _PropertyObserverController_init).call(this);
+    }
+    /** Set any cached valued accumulated between constructor and connectedCallback */
+    async hostUpdate() {
+        __classPrivateFieldGet(this, _PropertyObserverController_instances, "m", _PropertyObserverController_init).call(this);
+        const { oldVal, options: { waitFor, propertyName, callback } } = this;
+        if (!callback) {
+            throw new Error(`no callback for ${propertyName}`);
+        }
+        const newVal = this.host[propertyName];
+        this.oldVal = newVal;
+        if (newVal !== oldVal) {
+            switch (waitFor) {
+                case 'connected':
+                    if (!this.host.isConnected) {
+                        const origConnected = this.host.connectedCallback;
+                        await new Promise(resolve => {
+                            this.host.connectedCallback = function () {
+                                resolve(origConnected?.call(this));
+                            };
+                        });
+                    }
+                    break;
+                case 'firstUpdated':
+                    if (!this.host.hasUpdated) {
+                        await this.host.updateComplete;
+                    }
+                    break;
+                case 'updated':
+                    await this.host.updateComplete;
+                    break;
+            }
+        }
+        const Class = this.host.constructor;
+        const hasChanged = Class
+            .getPropertyOptions(this.options.propertyName)
+            .hasChanged ?? notEqual;
+        if (__classPrivateFieldGet(this, _PropertyObserverController_neverRan, "f") || hasChanged(oldVal, newVal)) {
+            callback.call(this.host, oldVal, newVal);
+            __classPrivateFieldSet(this, _PropertyObserverController_neverRan, false, "f");
+        }
+    }
+}
+_PropertyObserverController_neverRan = new WeakMap(), _PropertyObserverController_instances = new WeakSet(), _PropertyObserverController_init = function _PropertyObserverController_init() {
+    if (this.oldVal === UNINITIALIZED) {
+        this.oldVal = this.host[this.options.propertyName];
+    }
+};
+//# sourceMappingURL=property-observer-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js.map
new file mode 100644
index 0000000..3bcecc8
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/property-observer-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"property-observer-controller.js","sourceRoot":"","sources":["property-observer-controller.ts"],"names":[],"mappings":";;AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAc/B,MAAM,aAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAE9C,MAAM,OAAO,0BAA0B;IAKrC,YACU,IAAO,EACP,OAAmC;;QADnC,SAAI,GAAJ,IAAI,CAAG;QACP,YAAO,GAAP,OAAO,CAA4B;QAJrC,WAAM,GAAe,aAA2B,CAAC;QAQzD,+CAAY,IAAI,EAAC;IAFjB,CAAC;IAID,aAAa;QACX,uBAAA,IAAI,+EAAM,MAAV,IAAI,CAAQ,CAAC;IACf,CAAC;IAiBD,kFAAkF;IAClF,KAAK,CAAC,UAAU;QACd,uBAAA,IAAI,+EAAM,MAAV,IAAI,CAAQ,CAAC;QACb,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,EAAE,GAAG,IAAI,CAAC;QACtE,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,mBAAmB,YAAY,EAAE,CAAC,CAAC;QACrD,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,MAAM,KAAK,MAAM,EAAE,CAAC;YACtB,QAAQ,OAAO,EAAE,CAAC;gBAChB,KAAK,WAAW;oBACd,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;wBAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;wBAClD,MAAM,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;4BAChC,IAAI,CAAC,IAAI,CAAC,iBAAiB,GAAG;gCAC5B,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;4BACrC,CAAC,CAAC;wBACJ,CAAC,CAAC,CAAC;oBACL,CAAC;oBACD,MAAM;gBACR,KAAK,cAAc;oBACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;wBAC1B,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBACjC,CAAC;oBACD,MAAM;gBACR,KAAK,SAAS;oBACZ,MAAM,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC;oBAC/B,MAAM;YACV,CAAC;QACH,CAAC;QACD,MAAM,KAAK,GAAI,IAAI,CAAC,IAAI,CAAC,WAAsC,CAAC;QAChE,MAAM,UAAU,GAAG,KAAK;aACnB,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;aAC7C,UAAU,IAAI,QAAQ,CAAC;QAC5B,IAAI,uBAAA,IAAI,4CAAU,IAAI,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE,CAAC;YACjD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAoB,EAAE,MAAM,CAAC,CAAC;YACvD,uBAAA,IAAI,wCAAa,KAAK,MAAA,CAAC;QACzB,CAAC;IACH,CAAC;CACF;;IA7CG,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,EAAE,CAAC;QAClC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC;AACH,CAAC","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { notEqual } from 'lit';\n\nexport type ChangeCallback<T extends ReactiveElement, V = T[keyof T]> = (\n  this: T,\n  old?: V,\n  newV?: V,\n) => void;\n\nexport interface PropertyObserverOptions<T extends ReactiveElement> {\n  propertyName: string & keyof T;\n  callback: ChangeCallback<T>;\n  waitFor?: 'connected' | 'updated' | 'firstUpdated';\n}\n\nconst UNINITIALIZED = Symbol('uninitialized');\n\nexport class PropertyObserverController<\n  T extends ReactiveElement\n> implements ReactiveController {\n  private oldVal: T[keyof T] = UNINITIALIZED as T[keyof T];\n\n  constructor(\n    private host: T,\n    private options: PropertyObserverOptions<T>\n  ) {\n  }\n\n  #neverRan = true;\n\n  hostConnected(): void {\n    this.#init();\n  }\n\n  /**\n   * Because of how typescript transpiles private fields,\n   * the __accessPrivate helper might not be entirely initialized\n   * by the time this constructor runs (in `addInitializer`'s instance callback')\n   * Therefore, we pull this shtick.\n   *\n   * When browser support improves to the point we can ship decorated private fields,\n   * we'll be able to get rid of this.\n   */\n  #init() {\n    if (this.oldVal === UNINITIALIZED) {\n      this.oldVal = this.host[this.options.propertyName];\n    }\n  }\n\n  /** Set any cached valued accumulated between constructor and connectedCallback */\n  async hostUpdate(): Promise<void> {\n    this.#init();\n    const { oldVal, options: { waitFor, propertyName, callback } } = this;\n    if (!callback) {\n      throw new Error(`no callback for ${propertyName}`);\n    }\n    const newVal = this.host[propertyName];\n    this.oldVal = newVal;\n    if (newVal !== oldVal) {\n      switch (waitFor) {\n        case 'connected':\n          if (!this.host.isConnected) {\n            const origConnected = this.host.connectedCallback;\n            await new Promise<void>(resolve => {\n              this.host.connectedCallback = function() {\n                resolve(origConnected?.call(this));\n              };\n            });\n          }\n          break;\n        case 'firstUpdated':\n          if (!this.host.hasUpdated) {\n            await this.host.updateComplete;\n          }\n          break;\n        case 'updated':\n          await this.host.updateComplete;\n          break;\n      }\n    }\n    const Class = (this.host.constructor as typeof ReactiveElement);\n    const hasChanged = Class\n        .getPropertyOptions(this.options.propertyName)\n        .hasChanged ?? notEqual;\n    if (this.#neverRan || hasChanged(oldVal, newVal)) {\n      callback.call(this.host, oldVal as T[keyof T], newVal);\n      this.#neverRan = false;\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.d.ts
new file mode 100644
index 0000000..9482f09
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.d.ts
@@ -0,0 +1,24 @@
+import { type ReactiveControllerHost } from 'lit';
+import { ATFocusController, type ATFocusControllerOptions } from './at-focus-controller.js';
+export type RovingTabindexControllerOptions<Item extends HTMLElement> = ATFocusControllerOptions<Item>;
+/**
+ * Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within
+ * Components Using a Roving tabindex][rti]
+ *
+ * [rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex
+ */
+export declare class RovingTabindexController<Item extends HTMLElement = HTMLElement> extends ATFocusController<Item> {
+    #private;
+    host: ReactiveControllerHost;
+    static of<Item extends HTMLElement>(host: ReactiveControllerHost, options: RovingTabindexControllerOptions<Item>): RovingTabindexController<Item>;
+    get atFocusedItemIndex(): number;
+    /**
+     * Sets the DOM Focus on the item with assistive technology focus
+     * @param item item
+     */
+    set atFocusedItemIndex(index: number);
+    get items(): Item[];
+    set items(items: Item[]);
+    private constructor();
+    protected onKeydown(event: KeyboardEvent): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js
new file mode 100644
index 0000000..f0bd33c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js
@@ -0,0 +1,82 @@
+var _RovingTabindexController_logger, _RovingTabindexController_gainedInitialFocus, _RovingTabindexController_itemsSet;
+import { __classPrivateFieldGet, __classPrivateFieldSet, __decorate } from "tslib";
+import { isServer } from 'lit';
+import { ATFocusController } from './at-focus-controller.js';
+import { Logger } from './logger.js';
+import { bound } from '../decorators/bound.js';
+/**
+ * Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within
+ * Components Using a Roving tabindex][rti]
+ *
+ * [rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex
+ */
+export class RovingTabindexController extends ATFocusController {
+    static of(host, options) {
+        return new RovingTabindexController(host, options);
+    }
+    get atFocusedItemIndex() {
+        return super.atFocusedItemIndex;
+    }
+    /**
+     * Sets the DOM Focus on the item with assistive technology focus
+     * @param item item
+     */
+    set atFocusedItemIndex(index) {
+        super.atFocusedItemIndex = index;
+        const item = this.items.at(this.atFocusedItemIndex);
+        for (const i of this.items) {
+            i.tabIndex = item === i ? 0 : -1;
+        }
+        if (__classPrivateFieldGet(this, _RovingTabindexController_gainedInitialFocus, "f")) {
+            item?.focus();
+        }
+        this.host.requestUpdate();
+    }
+    get items() {
+        return this._items;
+    }
+    set items(items) {
+        this._items = items;
+        __classPrivateFieldSet(this, _RovingTabindexController_itemsSet, new Set(items), "f");
+        const pivot = Math.max(0, this.atFocusedItemIndex);
+        const [firstFocusable] = this.atFocusableItems;
+        const firstFocusableIndex = firstFocusable ? items.indexOf(firstFocusable) : -1;
+        const pivotFocusableIndex = items.indexOf(this.items
+            .slice(pivot)
+            .concat(this.items.slice(0, pivot))
+            .find(item => this.atFocusableItems.includes(item)));
+        this.atFocusedItemIndex = Math.max(firstFocusableIndex, pivotFocusableIndex);
+        this.host.requestUpdate();
+    }
+    constructor(host, options) {
+        super(host, options);
+        this.host = host;
+        _RovingTabindexController_logger.set(this, new Logger(this.host));
+        _RovingTabindexController_gainedInitialFocus.set(this, false);
+        _RovingTabindexController_itemsSet.set(this, new Set());
+        this.initItems();
+        const container = options.getItemsContainer?.() ?? this.host;
+        if (!isServer) {
+            if (container instanceof HTMLElement) {
+                container.addEventListener('focusin', () => __classPrivateFieldSet(this, _RovingTabindexController_gainedInitialFocus, true, "f"), { once: true });
+            }
+            else {
+                __classPrivateFieldGet(this, _RovingTabindexController_logger, "f").warn('RovingTabindexController requires a getItemsContainer function');
+            }
+        }
+    }
+    onKeydown(event) {
+        if (!event.ctrlKey
+            && !event.altKey
+            && !event.metaKey
+            && !!this.atFocusableItems.length
+            && !!event.composedPath().some(node => __classPrivateFieldGet(this, _RovingTabindexController_itemsSet, "f").has(node))) {
+            super.onKeydown(event);
+        }
+    }
+}
+_RovingTabindexController_logger = new WeakMap(), _RovingTabindexController_gainedInitialFocus = new WeakMap(), _RovingTabindexController_itemsSet = new WeakMap();
+__decorate([
+    bound
+], RovingTabindexController.prototype, "onKeydown", null);
+//# sourceMappingURL=roving-tabindex-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js.map
new file mode 100644
index 0000000..6129899
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/roving-tabindex-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"roving-tabindex-controller.js","sourceRoot":"","sources":["roving-tabindex-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveControllerHost } from 'lit';\nimport { ATFocusController, type ATFocusControllerOptions } from './at-focus-controller.js';\nimport { Logger } from './logger.js';\nimport { bound } from '../decorators/bound.js';\n\nexport type RovingTabindexControllerOptions<Item extends HTMLElement> =\n  ATFocusControllerOptions<Item>;\n\n/**\n * Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\n * Components Using a Roving tabindex][rti]\n *\n * [rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n */\nexport class RovingTabindexController<\n  Item extends HTMLElement = HTMLElement\n> extends ATFocusController<Item> {\n  static of<Item extends HTMLElement>(\n    host: ReactiveControllerHost,\n    options: RovingTabindexControllerOptions<Item>,\n  ): RovingTabindexController<Item> {\n    return new RovingTabindexController(host, options);\n  }\n\n  #logger = new Logger(this.host);\n\n  #gainedInitialFocus = false;\n\n  #itemsSet = new Set<Item>();\n\n  get atFocusedItemIndex(): number {\n    return super.atFocusedItemIndex;\n  }\n\n  /**\n   * Sets the DOM Focus on the item with assistive technology focus\n   * @param item item\n   */\n  set atFocusedItemIndex(index: number) {\n    super.atFocusedItemIndex = index;\n    const item = this.items.at(this.atFocusedItemIndex);\n    for (const i of this.items) {\n      i.tabIndex = item === i ? 0 : -1;\n    }\n    if (this.#gainedInitialFocus) {\n      item?.focus();\n    }\n    this.host.requestUpdate();\n  }\n\n  get items() {\n    return this._items;\n  }\n\n  public set items(items: Item[]) {\n    this._items = items;\n    this.#itemsSet = new Set(items);\n    const pivot = Math.max(0, this.atFocusedItemIndex);\n    const [firstFocusable] = this.atFocusableItems;\n    const firstFocusableIndex = firstFocusable ? items.indexOf(firstFocusable) : -1;\n    const pivotFocusableIndex = items.indexOf(this.items\n        .slice(pivot)\n        .concat(this.items.slice(0, pivot))\n        .find(item => this.atFocusableItems.includes(item))!);\n    this.atFocusedItemIndex = Math.max(firstFocusableIndex, pivotFocusableIndex);\n    this.host.requestUpdate();\n  }\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    options: RovingTabindexControllerOptions<Item>,\n  ) {\n    super(host, options);\n    this.initItems();\n    const container = options.getItemsContainer?.() ?? this.host;\n    if (!isServer) {\n      if (container instanceof HTMLElement) {\n        container.addEventListener('focusin', () =>\n          this.#gainedInitialFocus = true, { once: true });\n      } else {\n        this.#logger.warn('RovingTabindexController requires a getItemsContainer function');\n      }\n    }\n  }\n\n  @bound\n  protected override onKeydown(event: KeyboardEvent): void {\n    if (!event.ctrlKey\n        && !event.altKey\n        && !event.metaKey\n        && !!this.atFocusableItems.length\n        && !!event.composedPath().some(node => this.#itemsSet.has(node as Item))) {\n      super.onKeydown(event);\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.d.ts
new file mode 100644
index 0000000..addc933
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.d.ts
@@ -0,0 +1,45 @@
+import { type ReactiveController, type ReactiveControllerHost } from 'lit';
+export interface ScrollSpyControllerOptions extends IntersectionObserverInit {
+    /**
+     * Tag names of legal link children.
+     * Legal children must have an `href` property/attribute pair, like `<a>`.
+     */
+    tagNames: string[];
+    /**
+     * Attribute to set on the active link element.
+     * @default 'active'
+     */
+    activeAttribute?: string;
+    /**
+     * The root node to query content for
+     * @default the host's root node
+     */
+    rootNode?: Node;
+    /**
+     * function to call on link children to get their URL hash (i.e. id to scroll to)
+     * @default el => el.getAttribute('href');
+     */
+    getHash?: (el: Element) => string | null;
+    /**
+     * Optional callback for when an intersection occurs
+     */
+    onIntersection?(): void;
+}
+export declare class ScrollSpyController implements ReactiveController {
+    #private;
+    private host;
+    get root(): Element | Document | null | undefined;
+    set root(v: Element | Document | null | undefined);
+    get rootMargin(): string | undefined;
+    set rootMargin(v: string | undefined);
+    get threshold(): number | number[];
+    set threshold(v: number | number[]);
+    constructor(host: ReactiveControllerHost & HTMLElement, options: ScrollSpyControllerOptions);
+    hostConnected(): void;
+    hostDisconnected(): void;
+    /**
+     * Explicitly set the active item
+     * @param link usually an `<a>`
+     */
+    setActive(link: EventTarget | null): Promise<void>;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js
new file mode 100644
index 0000000..1e8466d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js
@@ -0,0 +1,191 @@
+var _ScrollSpyController_instances, _a, _ScrollSpyController_instances_1, _ScrollSpyController_tagNames, _ScrollSpyController_activeAttribute, _ScrollSpyController_io, _ScrollSpyController_passedLinks, _ScrollSpyController_force, _ScrollSpyController_intersected, _ScrollSpyController_root, _ScrollSpyController_rootMargin, _ScrollSpyController_threshold, _ScrollSpyController_intersectingTargets, _ScrollSpyController_linkTargetMap, _ScrollSpyController_getRootNode, _ScrollSpyController_getHash, _ScrollSpyController_onIntersection, _ScrollSpyController_linkChildren_get, _ScrollSpyController_initializing, _ScrollSpyController_initIo, _ScrollSpyController_markPassed, _ScrollSpyController_setActive, _ScrollSpyController_activateHash, _ScrollSpyController_nextIntersection, _ScrollSpyController_onIo;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
+export class ScrollSpyController {
+    get root() {
+        return __classPrivateFieldGet(this, _ScrollSpyController_root, "f");
+    }
+    set root(v) {
+        __classPrivateFieldSet(this, _ScrollSpyController_root, v, "f");
+        __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.disconnect();
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_initIo).call(this);
+    }
+    get rootMargin() {
+        return __classPrivateFieldGet(this, _ScrollSpyController_rootMargin, "f");
+    }
+    set rootMargin(v) {
+        __classPrivateFieldSet(this, _ScrollSpyController_rootMargin, v, "f");
+        __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.disconnect();
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_initIo).call(this);
+    }
+    get threshold() {
+        return __classPrivateFieldGet(this, _ScrollSpyController_threshold, "f");
+    }
+    set threshold(v) {
+        __classPrivateFieldSet(this, _ScrollSpyController_threshold, v, "f");
+        __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.disconnect();
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_initIo).call(this);
+    }
+    constructor(host, options) {
+        _ScrollSpyController_instances.add(this);
+        this.host = host;
+        _ScrollSpyController_tagNames.set(this, void 0);
+        _ScrollSpyController_activeAttribute.set(this, void 0);
+        _ScrollSpyController_io.set(this, void 0);
+        /** Which link's targets have already scrolled past? */
+        _ScrollSpyController_passedLinks.set(this, new Set());
+        /** Ignore intersections? */
+        _ScrollSpyController_force.set(this, false);
+        /** Has the intersection observer found an element? */
+        _ScrollSpyController_intersected.set(this, false);
+        _ScrollSpyController_root.set(this, void 0);
+        _ScrollSpyController_rootMargin.set(this, void 0);
+        _ScrollSpyController_threshold.set(this, void 0);
+        _ScrollSpyController_intersectingTargets.set(this, new Set());
+        _ScrollSpyController_linkTargetMap.set(this, new Map());
+        _ScrollSpyController_getRootNode.set(this, void 0);
+        _ScrollSpyController_getHash.set(this, void 0);
+        _ScrollSpyController_onIntersection.set(this, void 0);
+        _ScrollSpyController_initializing.set(this, true);
+        host.addController(this);
+        __classPrivateFieldSet(this, _ScrollSpyController_tagNames, options.tagNames, "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_root, options.root, "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_rootMargin, options.rootMargin, "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_activeAttribute, options.activeAttribute ?? 'active', "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_threshold, options.threshold ?? 0.85, "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_getRootNode, () => options.rootNode ?? host.getRootNode?.() ?? null, "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_getHash, options?.getHash ?? ((el) => el.getAttribute('href')), "f");
+        __classPrivateFieldSet(this, _ScrollSpyController_onIntersection, options?.onIntersection, "f");
+    }
+    hostConnected() {
+        __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).add(this);
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_initIo).call(this);
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).delete(this);
+        __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.disconnect();
+    }
+    /**
+     * Explicitly set the active item
+     * @param link usually an `<a>`
+     */
+    async setActive(link) {
+        __classPrivateFieldSet(this, _ScrollSpyController_force, true, "f");
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
+        let sawActive = false;
+        for (const child of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
+            __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_markPassed).call(this, child, !sawActive);
+            if (child === link) {
+                sawActive = true;
+            }
+        }
+        await __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_nextIntersection).call(this);
+        __classPrivateFieldSet(this, _ScrollSpyController_force, false, "f");
+    }
+}
+_a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttribute = new WeakMap(), _ScrollSpyController_io = new WeakMap(), _ScrollSpyController_passedLinks = new WeakMap(), _ScrollSpyController_force = new WeakMap(), _ScrollSpyController_intersected = new WeakMap(), _ScrollSpyController_root = new WeakMap(), _ScrollSpyController_rootMargin = new WeakMap(), _ScrollSpyController_threshold = new WeakMap(), _ScrollSpyController_intersectingTargets = new WeakMap(), _ScrollSpyController_linkTargetMap = new WeakMap(), _ScrollSpyController_getRootNode = new WeakMap(), _ScrollSpyController_getHash = new WeakMap(), _ScrollSpyController_onIntersection = new WeakMap(), _ScrollSpyController_initializing = new WeakMap(), _ScrollSpyController_instances = new WeakSet(), _ScrollSpyController_linkChildren_get = function _ScrollSpyController_linkChildren_get() {
+    if (isServer) {
+        return [];
+    }
+    else {
+        return Array.from(this.host.querySelectorAll(__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')))
+            .filter(__classPrivateFieldGet(this, _ScrollSpyController_getHash, "f"));
+    }
+}, _ScrollSpyController_initIo = async function _ScrollSpyController_initIo() {
+    const rootNode = __classPrivateFieldGet(this, _ScrollSpyController_getRootNode, "f").call(this);
+    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {
+        const { rootMargin, threshold, root } = this;
+        __classPrivateFieldSet(this, _ScrollSpyController_io, new IntersectionObserver(r => __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_onIo).call(this, r), { root, rootMargin, threshold }), "f");
+        for (const link of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
+            const id = __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, link)?.replace('#', '');
+            if (id) {
+                const target = document.getElementById(id);
+                if (target) {
+                    __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.observe(target);
+                    __classPrivateFieldGet(this, _ScrollSpyController_linkTargetMap, "f").set(link, target);
+                }
+            }
+        }
+    }
+}, _ScrollSpyController_markPassed = function _ScrollSpyController_markPassed(link, force) {
+    if (force) {
+        __classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f").add(link);
+    }
+    else {
+        __classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f").delete(link);
+    }
+}, _ScrollSpyController_setActive = function _ScrollSpyController_setActive(link) {
+    for (const child of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
+        child.toggleAttribute(__classPrivateFieldGet(this, _ScrollSpyController_activeAttribute, "f"), child === link);
+    }
+}, _ScrollSpyController_activateHash = async function _ScrollSpyController_activateHash() {
+    const links = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get);
+    const { hash } = location;
+    if (!hash) {
+        this.setActive(links.at(0) ?? null);
+    }
+    else {
+        await __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_nextIntersection).call(this);
+        this.setActive(links.find(x => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, x) === hash) ?? null);
+    }
+}, _ScrollSpyController_nextIntersection = async function _ScrollSpyController_nextIntersection() {
+    __classPrivateFieldSet(this, _ScrollSpyController_intersected, false, "f");
+    // safeguard the loop
+    setTimeout(() => __classPrivateFieldSet(this, _ScrollSpyController_intersected, false, "f"), 3000);
+    while (!__classPrivateFieldGet(this, _ScrollSpyController_intersected, "f")) {
+        await new Promise(requestAnimationFrame);
+    }
+}, _ScrollSpyController_onIo = async function _ScrollSpyController_onIo(entries) {
+    if (!__classPrivateFieldGet(this, _ScrollSpyController_force, "f")) {
+        for (const { target, boundingClientRect, intersectionRect } of entries) {
+            const selector = `:is(${__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')})[href="#${target.id}"]`;
+            const link = this.host.querySelector(selector);
+            if (link) {
+                __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_markPassed).call(this, link, boundingClientRect.top < intersectionRect.top);
+            }
+        }
+        const link = [...__classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f")];
+        const last = link.at(-1);
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, last ?? __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(0));
+    }
+    __classPrivateFieldSet(this, _ScrollSpyController_intersected, true, "f");
+    __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").clear();
+    for (const entry of entries) {
+        if (entry.isIntersecting) {
+            __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").add(entry.target);
+        }
+    }
+    if (__classPrivateFieldGet(this, _ScrollSpyController_initializing, "f")) {
+        const ints = entries?.filter(x => x.isIntersecting) ?? [];
+        if (__classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").size > 0) {
+            const [{ target = null } = {}] = ints;
+            const { id } = target ?? {};
+            if (id) {
+                const link = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).find(link => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, link) === `#${id}`);
+                if (link) {
+                    __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
+                }
+            }
+        }
+        __classPrivateFieldSet(this, _ScrollSpyController_initializing, false, "f");
+    }
+    __classPrivateFieldGet(this, _ScrollSpyController_onIntersection, "f")?.call(this);
+};
+_ScrollSpyController_instances_1 = { value: new Set };
+(() => {
+    if (!isServer) {
+        addEventListener('scroll', () => {
+            if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {
+                __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+                    __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(ssc, __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(-1));
+                });
+            }
+        }, { passive: true });
+        addEventListener('hashchange', () => {
+            __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+                __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_activateHash).call(ssc);
+            });
+        });
+    }
+})();
+//# sourceMappingURL=scroll-spy-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js.map
new file mode 100644
index 0000000..f350c7e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/scroll-spy-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n\n  /**\n   * Optional callback for when an intersection occurs\n   */\n  onIntersection?(): void;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  static #instances = new Set<ScrollSpyController>;\n\n  static {\n    if (!isServer) {\n      addEventListener('scroll', () => {\n        if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {\n          this.#instances.forEach(ssc => {\n            ssc.#setActive(ssc.#linkChildren.at(-1));\n          });\n        }\n      }, { passive: true });\n      addEventListener('hashchange', () => {\n        this.#instances.forEach(ssc => {\n          ssc.#activateHash();\n        });\n      });\n    }\n  }\n\n  #tagNames: string[];\n\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n\n  #rootMargin?: string;\n\n  #threshold: number | number[];\n\n  #intersectingTargets = new Set<Element>();\n\n  #linkTargetMap = new Map<Element, Element | null>();\n\n  #getRootNode: () => Node | null;\n\n  #getHash: (el: Element) => string | null;\n\n  #onIntersection?: () => void;\n\n  get #linkChildren(): Element[] {\n    if (isServer) {\n      return [];\n    } else {\n      return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n          .filter(this.#getHash);\n    }\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode?.() ?? null;\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n    this.#onIntersection = options?.onIntersection;\n  }\n\n  hostConnected(): void {\n    ScrollSpyController.#instances.add(this);\n    this.#initIo();\n  }\n\n  hostDisconnected(): void {\n    ScrollSpyController.#instances.delete(this);\n    this.#io?.disconnect();\n  }\n\n  #initializing = true;\n\n  async #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      for (const link of this.#linkChildren) {\n        const id = this.#getHash(link)?.replace('#', '');\n        if (id) {\n          const target = document.getElementById(id);\n          if (target) {\n            this.#io?.observe(target);\n            this.#linkTargetMap.set(link, target);\n          }\n        }\n      }\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #activateHash() {\n    const links = this.#linkChildren;\n    const { hash } = location;\n    if (!hash) {\n      this.setActive(links.at(0) ?? null);\n    } else {\n      await this.#nextIntersection();\n      this.setActive(links.find(x => this.#getHash(x) === hash) ?? null);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n    this.#intersectingTargets.clear();\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        this.#intersectingTargets.add(entry.target);\n      }\n    }\n    if (this.#initializing) {\n      const ints = entries?.filter(x => x.isIntersecting) ?? [];\n      if (this.#intersectingTargets.size > 0) {\n        const [{ target = null } = {}] = ints;\n        const { id } = target ?? {};\n        if (id) {\n          const link = this.#linkChildren.find(link => this.#getHash(link) === `#${id}`);\n          if (link) {\n            this.#setActive(link);\n          }\n        }\n      }\n      this.#initializing = false;\n    }\n    this.#onIntersection?.();\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.d.ts
new file mode 100644
index 0000000..a6cf023
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.d.ts
@@ -0,0 +1,16 @@
+import type { ReactiveElement } from 'lit';
+import { type SlotControllerArgs, type SlotControllerPublicAPI } from './slot-controller.js';
+export declare class SlotController implements SlotControllerPublicAPI {
+    host: ReactiveElement;
+    static default: symbol;
+    /** @deprecated use `default` */
+    static anonymous: symbol;
+    static attribute: "ssr-hint-has-slotted";
+    static anonymousAttribute: "ssr-hint-has-slotted-default";
+    constructor(host: ReactiveElement, ..._: SlotControllerArgs);
+    hostConnected?(): Promise<void>;
+    private fromAttribute;
+    getSlotted<T extends Element = Element>(..._: string[]): T[];
+    hasSlotted(...names: (string | null)[]): boolean;
+    isEmpty(...names: (string | null)[]): boolean;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js
new file mode 100644
index 0000000..27cf45e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js
@@ -0,0 +1,32 @@
+var _a;
+import {} from './slot-controller.js';
+export class SlotController {
+    constructor(host, ..._) {
+        this.host = host;
+        host.addController(this);
+    }
+    fromAttribute(slots) {
+        return (slots ?? '')
+            .split(/[, ]/)
+            .map(x => x.trim());
+    }
+    getSlotted(..._) {
+        return [];
+    }
+    hasSlotted(...names) {
+        const attr = this.host.getAttribute(_a.attribute);
+        const anon = this.host.hasAttribute(_a.anonymousAttribute);
+        const hints = new Set(this.fromAttribute(attr));
+        return names.every(x => x === null ? anon : hints.has(x));
+    }
+    isEmpty(...names) {
+        return !this.hasSlotted(...names);
+    }
+}
+_a = SlotController;
+SlotController.default = Symbol('default slot');
+/** @deprecated use `default` */
+SlotController.anonymous = _a.default;
+SlotController.attribute = 'ssr-hint-has-slotted';
+SlotController.anonymousAttribute = 'ssr-hint-has-slotted-default';
+//# sourceMappingURL=slot-controller-server.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js.map b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js.map
new file mode 100644
index 0000000..2621058
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller-server.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"slot-controller-server.js","sourceRoot":"","sources":["slot-controller-server.ts"],"names":[],"mappings":";AACA,OAAO,EAGN,MAAM,sBAAsB,CAAC;AAE9B,MAAM,OAAO,cAAc;IAUzB,YAAmB,IAAqB,EAAE,GAAG,CAAqB;QAA/C,SAAI,GAAJ,IAAI,CAAiB;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAIO,aAAa,CAAC,KAAoB;QACxC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;aACf,KAAK,CAAC,MAAM,CAAC;aACb,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU,CAA8B,GAAG,CAAW;QACpD,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,UAAU,CAAC,GAAG,KAAwB;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAc,CAAC,SAAS,CAAC,CAAC;QAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAc,CAAC,kBAAkB,CAAC,CAAC;QACvE,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAChD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,CAAC,GAAG,KAAwB;QACjC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC;IACpC,CAAC;;;AAlCa,sBAAO,GAAG,MAAM,CAAC,cAAc,CAA4B,AAApD,CAAqD;AAE1E,gCAAgC;AAClB,wBAAS,GAAW,EAAI,CAAC,OAAO,AAAvB,CAAwB;AAExC,wBAAS,GAAG,sBAA+B,AAAlC,CAAmC;AAE5C,iCAAkB,GAAG,8BAAuC,AAA1C,CAA2C","sourcesContent":["import type { ReactiveElement } from 'lit';\nimport {\n  type SlotControllerArgs,\n  type SlotControllerPublicAPI,\n} from './slot-controller.js';\n\nexport class SlotController implements SlotControllerPublicAPI {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  static attribute = 'ssr-hint-has-slotted' as const;\n\n  static anonymousAttribute = 'ssr-hint-has-slotted-default' as const;\n\n  constructor(public host: ReactiveElement, ..._: SlotControllerArgs) {\n    host.addController(this);\n  }\n\n  hostConnected?(): Promise<void>;\n\n  private fromAttribute(slots: string | null) {\n    return (slots ?? '')\n        .split(/[, ]/)\n        .map(x => x.trim());\n  }\n\n  getSlotted<T extends Element = Element>(..._: string[]): T[] {\n    return [];\n  }\n\n  hasSlotted(...names: (string | null)[]): boolean {\n    const attr = this.host.getAttribute(SlotController.attribute);\n    const anon = this.host.hasAttribute(SlotController.anonymousAttribute);\n    const hints = new Set(this.fromAttribute(attr));\n    return names.every(x => x === null ? anon : hints.has(x));\n  }\n\n  isEmpty(...names: (string | null)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.d.ts
new file mode 100644
index 0000000..cbb4f78
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.d.ts
@@ -0,0 +1,114 @@
+import type { ReactiveController, ReactiveElement } from 'lit';
+interface AnonymousSlot {
+    hasContent: boolean;
+    elements: Element[];
+    slot: HTMLSlotElement | null;
+}
+interface NamedSlot extends AnonymousSlot {
+    name: string;
+    initialized: true;
+}
+export type Slot = NamedSlot | AnonymousSlot;
+export type SlotName = string | null;
+export interface SlotsConfig {
+    slots: SlotName[];
+    /**
+     * Object mapping new slot name keys to deprecated slot name values
+     * @example `pf-modal--header` is deprecated in favour of `header`
+     * ```js
+     * new SlotController(this, {
+     *   slots: ['header'],
+     *   deprecations: {
+     *     'header': 'pf-modal--header'
+     *   }
+     * })
+     * ```
+     */
+    deprecations?: Record<string, string>;
+}
+export type SlotControllerArgs = [SlotsConfig] | SlotName[];
+export declare function isObjectSpread(config: SlotControllerArgs): config is [SlotsConfig];
+export declare class SlotControllerPublicAPI implements ReactiveController {
+    static default: symbol;
+    host: ReactiveElement;
+    constructor(host: ReactiveElement, ...args: SlotControllerArgs);
+    hostConnected?(): Promise<void>;
+    hostDisconnected?(): void;
+    hostUpdated?(): void;
+    /**
+     * Given a slot name or slot names, returns elements assigned to the requested slots as an array.
+     * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).
+     * @param slotNames slots to query
+     * @example Get header-slotted elements
+     *          ```js
+     *          this.getSlotted('header')
+     *          ```
+     * @example Get header- and footer-slotted elements
+     *          ```js
+     *          this.getSlotted('header', 'footer')
+     *          ```
+     * @example Get default-slotted elements
+     *          ```js
+     *          this.getSlotted();
+     *          ```
+     */
+    getSlotted<T extends Element = Element>(...slotNames: string[]): T[];
+    /**
+     * Returns a boolean statement of whether or not any of those slots exists in the light DOM.
+     * @param names The slot names to check.
+     * @example this.hasSlotted('header');
+     */
+    hasSlotted(...names: (string | null | undefined)[]): boolean;
+    /**
+     * Whether or not all the requested slots are empty.
+     * @param  names The slot names to query.  If no value is provided, it returns the default slot.
+     * @example this.isEmpty('header', 'footer');
+     * @example this.isEmpty();
+     * @returns
+     */
+    isEmpty(...names: (string | null | undefined)[]): boolean;
+}
+export declare class SlotController implements SlotControllerPublicAPI {
+    #private;
+    host: ReactiveElement;
+    static default: symbol;
+    /** @deprecated use `default` */
+    static anonymous: symbol;
+    constructor(host: ReactiveElement, ...args: SlotControllerArgs);
+    hostConnected(): Promise<void>;
+    hostUpdated(): void;
+    hostDisconnected(): void;
+    /**
+     * Given a slot name or slot names, returns elements assigned to the requested slots as an array.
+     * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).
+     * @param slotNames slots to query
+     * @example Get header-slotted elements
+     *          ```js
+     *          this.getSlotted('header')
+     *          ```
+     * @example Get header- and footer-slotted elements
+     *          ```js
+     *          this.getSlotted('header', 'footer')
+     *          ```
+     * @example Get default-slotted elements
+     *          ```js
+     *          this.getSlotted();
+     *          ```
+     */
+    getSlotted<T extends Element = Element>(...slotNames: string[]): T[];
+    /**
+     * Returns a boolean statement of whether or not any of those slots exists in the light DOM.
+     * @param names The slot names to check.
+     * @example this.hasSlotted('header');
+     */
+    hasSlotted(...names: (string | null | undefined)[]): boolean;
+    /**
+     * Whether or not all the requested slots are empty.
+     * @param  names The slot names to query.  If no value is provided, it returns the default slot.
+     * @example this.isEmpty('header', 'footer');
+     * @example this.isEmpty();
+     * @returns
+     */
+    isEmpty(...names: (string | null | undefined)[]): boolean;
+}
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js
new file mode 100644
index 0000000..2cc4f4a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js
@@ -0,0 +1,131 @@
+var _SlotController_instances, _a, _SlotController_nodes, _SlotController_slotMapInitialized, _SlotController_slotNames, _SlotController_deprecations, _SlotController_mo, _SlotController_initialize, _SlotController_initSlotMap, _SlotController_getSlotElement, _SlotController_getChildrenForSlot;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+export function isObjectSpread(config) {
+    return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;
+}
+/**
+ * If it's a named slot, return its children,
+ * for the default slot, look for direct children not assigned to a slot
+ * @param n slot name
+ */
+const isSlot = (n) => (child) => n === SlotController.default ? !child.hasAttribute('slot')
+    : child.getAttribute('slot') === n;
+export class SlotController {
+    constructor(host, ...args) {
+        _SlotController_instances.add(this);
+        this.host = host;
+        _SlotController_nodes.set(this, new Map());
+        _SlotController_slotMapInitialized.set(this, false);
+        _SlotController_slotNames.set(this, []);
+        _SlotController_deprecations.set(this, {});
+        _SlotController_mo.set(this, new MutationObserver(__classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_initSlotMap).bind(this)));
+        __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_initialize).call(this, ...args);
+        host.addController(this);
+        if (!__classPrivateFieldGet(this, _SlotController_slotNames, "f").length) {
+            __classPrivateFieldSet(this, _SlotController_slotNames, [null], "f");
+        }
+    }
+    async hostConnected() {
+        __classPrivateFieldGet(this, _SlotController_mo, "f").observe(this.host, { childList: true });
+        // Map the defined slots into an object that is easier to query
+        __classPrivateFieldGet(this, _SlotController_nodes, "f").clear();
+        __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_initSlotMap).call(this);
+        // insurance for framework integrations
+        await this.host.updateComplete;
+        this.host.requestUpdate();
+    }
+    hostUpdated() {
+        if (!__classPrivateFieldGet(this, _SlotController_slotMapInitialized, "f")) {
+            __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_initSlotMap).call(this);
+        }
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(this, _SlotController_mo, "f").disconnect();
+    }
+    /**
+     * Given a slot name or slot names, returns elements assigned to the requested slots as an array.
+     * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).
+     * @param slotNames slots to query
+     * @example Get header-slotted elements
+     *          ```js
+     *          this.getSlotted('header')
+     *          ```
+     * @example Get header- and footer-slotted elements
+     *          ```js
+     *          this.getSlotted('header', 'footer')
+     *          ```
+     * @example Get default-slotted elements
+     *          ```js
+     *          this.getSlotted();
+     *          ```
+     */
+    getSlotted(...slotNames) {
+        if (!slotNames.length) {
+            return (__classPrivateFieldGet(this, _SlotController_nodes, "f").get(_a.default)?.elements ?? []);
+        }
+        else {
+            return slotNames.flatMap(slotName => __classPrivateFieldGet(this, _SlotController_nodes, "f").get(slotName)?.elements ?? []);
+        }
+    }
+    /**
+     * Returns a boolean statement of whether or not any of those slots exists in the light DOM.
+     * @param names The slot names to check.
+     * @example this.hasSlotted('header');
+     */
+    hasSlotted(...names) {
+        const slotNames = Array.from(names, x => x == null ? _a.default : x);
+        if (!slotNames.length) {
+            slotNames.push(_a.default);
+        }
+        return slotNames.some(x => __classPrivateFieldGet(this, _SlotController_nodes, "f").get(x)?.hasContent ?? false);
+    }
+    /**
+     * Whether or not all the requested slots are empty.
+     * @param  names The slot names to query.  If no value is provided, it returns the default slot.
+     * @example this.isEmpty('header', 'footer');
+     * @example this.isEmpty();
+     * @returns
+     */
+    isEmpty(...names) {
+        return !this.hasSlotted(...names);
+    }
+}
+_a = SlotController, _SlotController_nodes = new WeakMap(), _SlotController_slotMapInitialized = new WeakMap(), _SlotController_slotNames = new WeakMap(), _SlotController_deprecations = new WeakMap(), _SlotController_mo = new WeakMap(), _SlotController_instances = new WeakSet(), _SlotController_initialize = function _SlotController_initialize(...config) {
+    if (isObjectSpread(config)) {
+        const [{ slots, deprecations }] = config;
+        __classPrivateFieldSet(this, _SlotController_slotNames, slots, "f");
+        __classPrivateFieldSet(this, _SlotController_deprecations, deprecations ?? {}, "f");
+    }
+    else if (config.length >= 1) {
+        __classPrivateFieldSet(this, _SlotController_slotNames, config, "f");
+        __classPrivateFieldSet(this, _SlotController_deprecations, {}, "f");
+    }
+}, _SlotController_initSlotMap = function _SlotController_initSlotMap() {
+    // Loop over the properties provided by the schema
+    for (const slotName of __classPrivateFieldGet(this, _SlotController_slotNames, "f")
+        .concat(Object.values(__classPrivateFieldGet(this, _SlotController_deprecations, "f")))) {
+        const slotId = slotName || _a.default;
+        const name = slotName ?? '';
+        const elements = __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_getChildrenForSlot).call(this, slotId);
+        const slot = __classPrivateFieldGet(this, _SlotController_instances, "m", _SlotController_getSlotElement).call(this, slotId);
+        const hasContent = !!elements.length || !!slot?.assignedNodes?.()?.filter(x => x.textContent?.trim()).length;
+        __classPrivateFieldGet(this, _SlotController_nodes, "f").set(slotId, { elements, name, hasContent, slot });
+    }
+    this.host.requestUpdate();
+    __classPrivateFieldSet(this, _SlotController_slotMapInitialized, true, "f");
+}, _SlotController_getSlotElement = function _SlotController_getSlotElement(slotId) {
+    const selector = slotId === _a.default ? 'slot:not([name])' : `slot[name="${slotId}"]`;
+    return this.host.shadowRoot?.querySelector?.(selector) ?? null;
+}, _SlotController_getChildrenForSlot = function _SlotController_getChildrenForSlot(name) {
+    if (__classPrivateFieldGet(this, _SlotController_nodes, "f").has(name)) {
+        return (__classPrivateFieldGet(this, _SlotController_nodes, "f").get(name).slot?.assignedElements?.() ?? []);
+    }
+    else {
+        const children = Array.from(this.host.children);
+        return children.filter(isSlot(name));
+    }
+};
+SlotController.default = Symbol('default slot');
+/** @deprecated use `default` */
+SlotController.anonymous = _a.default;
+//# sourceMappingURL=slot-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js.map
new file mode 100644
index 0000000..d4535ed
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/slot-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"slot-controller.js","sourceRoot":"","sources":["slot-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\ninterface AnonymousSlot {\n  hasContent: boolean;\n  elements: Element[];\n  slot: HTMLSlotElement | null;\n}\n\ninterface NamedSlot extends AnonymousSlot {\n  name: string;\n  initialized: true;\n}\n\nexport type Slot = NamedSlot | AnonymousSlot;\n\nexport type SlotName = string | null;\n\nexport interface SlotsConfig {\n  slots: SlotName[];\n  /**\n   * Object mapping new slot name keys to deprecated slot name values\n   * @example `pf-modal--header` is deprecated in favour of `header`\n   * ```js\n   * new SlotController(this, {\n   *   slots: ['header'],\n   *   deprecations: {\n   *     'header': 'pf-modal--header'\n   *   }\n   * })\n   * ```\n   */\n  deprecations?: Record<string, string>;\n}\n\nexport type SlotControllerArgs = [SlotsConfig] | SlotName[];\n\nexport function isObjectSpread(config: SlotControllerArgs): config is [SlotsConfig] {\n  return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;\n}\n\n/**\n * If it's a named slot, return its children,\n * for the default slot, look for direct children not assigned to a slot\n * @param n slot name\n */\nconst isSlot =\n  <T extends Element = Element>(n: string | typeof SlotController.default) =>\n    (child: Element): child is T =>\n        n === SlotController.default ? !child.hasAttribute('slot')\n      : child.getAttribute('slot') === n;\n\nexport declare class SlotControllerPublicAPI implements ReactiveController {\n  static default: symbol;\n\n  public host: ReactiveElement;\n\n  constructor(host: ReactiveElement, ...args: SlotControllerArgs);\n\n  hostConnected?(): Promise<void>;\n\n  hostDisconnected?(): void;\n\n  hostUpdated?(): void;\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  getSlotted<T extends Element = Element>(...slotNames: string[]): T[];\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  hasSlotted(...names: (string | null | undefined)[]): boolean;\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  isEmpty(...names: (string | null | undefined)[]): boolean;\n}\n\nexport class SlotController implements SlotControllerPublicAPI {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  #nodes = new Map<string | typeof SlotController.default, Slot>();\n\n  #slotMapInitialized = false;\n\n  #slotNames: (string | null)[] = [];\n\n  #deprecations: Record<string, string> = {};\n\n  #mo = new MutationObserver(this.#initSlotMap.bind(this));\n\n  constructor(public host: ReactiveElement, ...args: SlotControllerArgs) {\n    this.#initialize(...args);\n    host.addController(this);\n    if (!this.#slotNames.length) {\n      this.#slotNames = [null];\n    }\n  }\n\n  #initialize(...config: SlotControllerArgs) {\n    if (isObjectSpread(config)) {\n      const [{ slots, deprecations }] = config;\n      this.#slotNames = slots;\n      this.#deprecations = deprecations ?? {};\n    } else if (config.length >= 1) {\n      this.#slotNames = config;\n      this.#deprecations = {};\n    }\n  }\n\n  async hostConnected(): Promise<void> {\n    this.#mo.observe(this.host, { childList: true });\n    // Map the defined slots into an object that is easier to query\n    this.#nodes.clear();\n    this.#initSlotMap();\n    // insurance for framework integrations\n    await this.host.updateComplete;\n    this.host.requestUpdate();\n  }\n\n  hostUpdated(): void {\n    if (!this.#slotMapInitialized) {\n      this.#initSlotMap();\n    }\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  #initSlotMap() {\n    // Loop over the properties provided by the schema\n    for (const slotName of this.#slotNames\n        .concat(Object.values(this.#deprecations))) {\n      const slotId = slotName || SlotController.default;\n      const name = slotName ?? '';\n      const elements = this.#getChildrenForSlot(slotId);\n      const slot = this.#getSlotElement(slotId);\n      const hasContent =\n        !!elements.length || !!slot?.assignedNodes?.()?.filter(x => x.textContent?.trim()).length;\n      this.#nodes.set(slotId, { elements, name, hasContent, slot });\n    }\n    this.host.requestUpdate();\n    this.#slotMapInitialized = true;\n  }\n\n  #getSlotElement(slotId: string | symbol) {\n    const selector =\n      slotId === SlotController.default ? 'slot:not([name])' : `slot[name=\"${slotId as string}\"]`;\n    return this.host.shadowRoot?.querySelector?.<HTMLSlotElement>(selector) ?? null;\n  }\n\n  #getChildrenForSlot<T extends Element = Element>(\n    name: string | typeof SlotController.default,\n  ): T[] {\n    if (this.#nodes.has(name)) {\n      return (this.#nodes.get(name)!.slot?.assignedElements?.() ?? []) as T[];\n    } else {\n      const children = Array.from(this.host.children) as T[];\n      return children.filter(isSlot(name));\n    }\n  }\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  getSlotted<T extends Element = Element>(...slotNames: string[]): T[] {\n    if (!slotNames.length) {\n      return (this.#nodes.get(SlotController.default)?.elements ?? []) as T[];\n    } else {\n      return slotNames.flatMap(slotName =>\n        this.#nodes.get(slotName)?.elements ?? []) as T[];\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  hasSlotted(...names: (string | null | undefined)[]): boolean {\n    const slotNames = Array.from(names, x => x == null ? SlotController.default : x);\n    if (!slotNames.length) {\n      slotNames.push(SlotController.default);\n    }\n    return slotNames.some(x => this.#nodes.get(x)?.hasContent ?? false);\n  }\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  isEmpty(...names: (string | null | undefined)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/style-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.d.ts
new file mode 100644
index 0000000..c9a5b0e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.d.ts
@@ -0,0 +1,21 @@
+import type { ReactiveController, ReactiveElement, CSSResultGroup } from 'lit';
+declare global {
+    interface ShadowRoot {
+        adoptedStyleSheets: CSSStyleSheet[];
+    }
+}
+/**
+ * Controller which adds styles to it's host element.
+ * Like `static styles = []`, except a controller.
+ * Should typically only be used within other controllers.
+ */
+export declare class StyleController implements ReactiveController {
+    private host;
+    /** These styles will be applied to the host element */
+    private styles;
+    private stylesAdopted;
+    constructor(host: ReactiveElement, 
+    /** These styles will be applied to the host element */
+    styles: CSSResultGroup);
+    hostConnected(): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js
new file mode 100644
index 0000000..cf469e3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js
@@ -0,0 +1,44 @@
+import { getCompatibleStyle, supportsAdoptingStyleSheets } from 'lit';
+/**
+ * Controller which adds styles to it's host element.
+ * Like `static styles = []`, except a controller.
+ * Should typically only be used within other controllers.
+ */
+export class StyleController {
+    constructor(host, 
+    /** These styles will be applied to the host element */
+    styles) {
+        this.host = host;
+        this.styles = styles;
+        this.stylesAdopted = false;
+        host.addController(this);
+    }
+    hostConnected() {
+        if (this.stylesAdopted || !(this.host.renderRoot instanceof ShadowRoot)) {
+            return;
+        }
+        const styles = [this.styles]
+            .flatMap(x => getCompatibleStyle(x))
+            .filter(x => !!x);
+        if (supportsAdoptingStyleSheets) {
+            this.host.renderRoot.adoptedStyleSheets = [
+                ...styles.map(x => x instanceof CSSStyleSheet ? x : x.styleSheet),
+                ...this.host.renderRoot.adoptedStyleSheets ?? [],
+            ];
+        }
+        else {
+            styles.forEach(s => {
+                const style = document.createElement('style');
+                // eslint-disable-next-line @typescript-eslint/no-explicit-any
+                const nonce = window['litNonce'];
+                if (nonce !== undefined) {
+                    style.setAttribute('nonce', nonce);
+                }
+                style.textContent = s.cssText;
+                this.host.renderRoot.appendChild(style);
+            });
+        }
+        this.stylesAdopted = true;
+    }
+}
+//# sourceMappingURL=style-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js.map
new file mode 100644
index 0000000..de02aad
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/style-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"style-controller.js","sourceRoot":"","sources":["style-controller.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,kBAAkB,EAAE,2BAA2B,EAAE,MAAM,KAAK,CAAC;AAQtE;;;;GAIG;AACH,MAAM,OAAO,eAAe;IAG1B,YACU,IAAqB;IAC7B,uDAAuD;IAC/C,MAAsB;QAFtB,SAAI,GAAJ,IAAI,CAAiB;QAErB,WAAM,GAAN,MAAM,CAAgB;QALxB,kBAAa,GAAG,KAAK,CAAC;QAO5B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,YAAY,UAAU,CAAC,EAAE,CAAC;YACxE,OAAO;QACT,CAAC;QAED,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;aACvB,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAsB,CAAC,CAAC;aACxD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtB,IAAI,2BAA2B,EAAE,CAAC;YAChC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,GAAG;gBACxC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAA2B,CAAC;gBAClF,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,kBAAkB,IAAI,EAAE;aACjD,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;gBACjB,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBAC9C,8DAA8D;gBAC9D,MAAM,KAAK,GAAI,MAAc,CAAC,UAAU,CAAC,CAAC;gBAC1C,IAAI,KAAK,KAAK,SAAS,EAAE,CAAC;oBACxB,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACrC,CAAC;gBACD,KAAK,CAAC,WAAW,GAAI,CAAe,CAAC,OAAO,CAAC;gBAC7C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import type {\n  ReactiveController,\n  ReactiveElement,\n  CSSResultGroup,\n  CSSResultOrNative,\n  CSSResult,\n} from 'lit';\nimport { getCompatibleStyle, supportsAdoptingStyleSheets } from 'lit';\n\ndeclare global {\n  interface ShadowRoot {\n    adoptedStyleSheets: CSSStyleSheet[];\n  }\n}\n\n/**\n * Controller which adds styles to it's host element.\n * Like `static styles = []`, except a controller.\n * Should typically only be used within other controllers.\n */\nexport class StyleController implements ReactiveController {\n  private stylesAdopted = false;\n\n  constructor(\n    private host: ReactiveElement,\n    /** These styles will be applied to the host element */\n    private styles: CSSResultGroup,\n  ) {\n    host.addController(this);\n  }\n\n  hostConnected(): void {\n    if (this.stylesAdopted || !(this.host.renderRoot instanceof ShadowRoot)) {\n      return;\n    }\n\n    const styles = [this.styles]\n        .flatMap(x => getCompatibleStyle(x as CSSResultOrNative))\n        .filter(x => !!x);\n\n    if (supportsAdoptingStyleSheets) {\n      this.host.renderRoot.adoptedStyleSheets = [\n        ...styles.map(x => x instanceof CSSStyleSheet ? x : x.styleSheet as CSSStyleSheet),\n        ...this.host.renderRoot.adoptedStyleSheets ?? [],\n      ];\n    } else {\n      styles.forEach(s => {\n        const style = document.createElement('style');\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const nonce = (window as any)['litNonce'];\n        if (nonce !== undefined) {\n          style.setAttribute('nonce', nonce);\n        }\n        style.textContent = (s as CSSResult).cssText;\n        this.host.renderRoot.appendChild(style);\n      });\n    }\n\n    this.stylesAdopted = true;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.d.ts
new file mode 100644
index 0000000..52b5b42
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.d.ts
@@ -0,0 +1,31 @@
+import { type ReactiveController, type ReactiveControllerHost } from 'lit';
+export interface TabsAriaControllerOptions<Tab, Panel> {
+    /** Add an `isTab` predicate to ensure this tabs instance' state does not leak into parent tabs' state */
+    isTab: (node: unknown) => node is Tab;
+    isActiveTab: (tab: Tab) => boolean;
+    /** Add an `isPanel` predicate to ensure this tabs instance' state does not leak into parent tabs' state */
+    isPanel: (node: unknown) => node is Panel;
+    getHTMLElement?: () => HTMLElement;
+}
+export declare class TabsAriaController<Tab extends HTMLElement = HTMLElement, Panel extends HTMLElement = HTMLElement> implements ReactiveController {
+    #private;
+    get tabs(): Tab[];
+    get activeTab(): Tab | undefined;
+    /**
+     * @param host controller host
+     * @param options controller options
+     * @example Usage in PfTab
+     *          ```ts
+     *          new TabsController(this, {
+     *             isTab: (x): x is PfTab => x instanceof PfTab,
+     *             isPanel: (x): x is PfTabPanel => x instanceof PfTabPanel
+     *          });
+     *          ```
+     */
+    constructor(host: ReactiveControllerHost, options: TabsAriaControllerOptions<Tab, Panel>);
+    hostConnected(): void;
+    hostUpdated(): void;
+    hostDisconnected(): void;
+    panelFor(tab: Tab): Panel | undefined;
+    tabFor(panel: Panel): Tab | undefined;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js
new file mode 100644
index 0000000..d730f15
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js
@@ -0,0 +1,101 @@
+var _TabsAriaController_instances, _TabsAriaController_logger, _TabsAriaController_host, _TabsAriaController_element, _TabsAriaController_tabPanelMap, _TabsAriaController_options, _TabsAriaController_mo, _TabsAriaController_onSlotchange;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+import { isServer } from 'lit';
+import { Logger } from '@patternfly/pfe-core/controllers/logger.js';
+export class TabsAriaController {
+    get tabs() {
+        return [...__classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f").keys()];
+    }
+    get activeTab() {
+        return this.tabs.find(x => __classPrivateFieldGet(this, _TabsAriaController_options, "f").isActiveTab(x));
+    }
+    /**
+     * @param host controller host
+     * @param options controller options
+     * @example Usage in PfTab
+     *          ```ts
+     *          new TabsController(this, {
+     *             isTab: (x): x is PfTab => x instanceof PfTab,
+     *             isPanel: (x): x is PfTabPanel => x instanceof PfTabPanel
+     *          });
+     *          ```
+     */
+    constructor(host, options) {
+        _TabsAriaController_instances.add(this);
+        _TabsAriaController_logger.set(this, void 0);
+        _TabsAriaController_host.set(this, void 0);
+        _TabsAriaController_element.set(this, void 0);
+        _TabsAriaController_tabPanelMap.set(this, new Map());
+        _TabsAriaController_options.set(this, void 0);
+        _TabsAriaController_mo.set(this, new MutationObserver(__classPrivateFieldGet(this, _TabsAriaController_instances, "m", _TabsAriaController_onSlotchange).bind(this)));
+        __classPrivateFieldSet(this, _TabsAriaController_options, options, "f");
+        __classPrivateFieldSet(this, _TabsAriaController_logger, new Logger(host), "f");
+        (__classPrivateFieldSet(this, _TabsAriaController_host, host, "f")).addController(this);
+        if (isServer) {
+            return;
+        }
+        if (host instanceof HTMLElement) {
+            __classPrivateFieldSet(this, _TabsAriaController_element, host, "f");
+        }
+        else {
+            const element = options.getHTMLElement?.();
+            if (!element) {
+                throw new Error('TabsController must be instantiated with an HTMLElement or a `getHTMLElement()` option');
+            }
+            __classPrivateFieldSet(this, _TabsAriaController_element, element, "f");
+        }
+        __classPrivateFieldGet(this, _TabsAriaController_element, "f").addEventListener('slotchange', __classPrivateFieldGet(this, _TabsAriaController_instances, "m", _TabsAriaController_onSlotchange));
+        if (__classPrivateFieldGet(this, _TabsAriaController_element, "f").isConnected) {
+            this.hostConnected();
+        }
+    }
+    hostConnected() {
+        __classPrivateFieldGet(this, _TabsAriaController_mo, "f").observe(__classPrivateFieldGet(this, _TabsAriaController_element, "f"), { attributes: false, childList: true, subtree: false });
+        __classPrivateFieldGet(this, _TabsAriaController_instances, "m", _TabsAriaController_onSlotchange).call(this);
+    }
+    hostUpdated() {
+        for (const [tab, panel] of __classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f")) {
+            panel.setAttribute('aria-labelledby', tab.id);
+            tab.setAttribute('aria-controls', panel.id);
+        }
+    }
+    hostDisconnected() {
+        __classPrivateFieldGet(this, _TabsAriaController_mo, "f").disconnect();
+    }
+    panelFor(tab) {
+        return __classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f").get(tab);
+    }
+    tabFor(panel) {
+        for (const [tab, panelToCheck] of __classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f")) {
+            if (panel === panelToCheck) {
+                return tab;
+            }
+        }
+    }
+}
+_TabsAriaController_logger = new WeakMap(), _TabsAriaController_host = new WeakMap(), _TabsAriaController_element = new WeakMap(), _TabsAriaController_tabPanelMap = new WeakMap(), _TabsAriaController_options = new WeakMap(), _TabsAriaController_mo = new WeakMap(), _TabsAriaController_instances = new WeakSet(), _TabsAriaController_onSlotchange = function _TabsAriaController_onSlotchange() {
+    __classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f").clear();
+    const tabs = [];
+    const panels = [];
+    for (const child of __classPrivateFieldGet(this, _TabsAriaController_element, "f")?.children ?? []) {
+        if (__classPrivateFieldGet(this, _TabsAriaController_options, "f").isTab(child)) {
+            tabs.push(child);
+            child.role ?? (child.role = 'tab');
+        }
+        else if (__classPrivateFieldGet(this, _TabsAriaController_options, "f").isPanel(child)) {
+            panels.push(child);
+            child.role ?? (child.role = 'tabpanel');
+        }
+    }
+    if (tabs.length > panels.length) {
+        __classPrivateFieldGet(this, _TabsAriaController_logger, "f").warn('Too many tabs!');
+    }
+    else if (panels.length > tabs.length) {
+        __classPrivateFieldGet(this, _TabsAriaController_logger, "f").warn('Too many panels!');
+    }
+    while (tabs.length) {
+        __classPrivateFieldGet(this, _TabsAriaController_tabPanelMap, "f").set(tabs.shift(), panels.shift());
+    }
+    __classPrivateFieldGet(this, _TabsAriaController_host, "f").requestUpdate();
+};
+//# sourceMappingURL=tabs-aria-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js.map
new file mode 100644
index 0000000..66b9f1c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/tabs-aria-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"tabs-aria-controller.js","sourceRoot":"","sources":["tabs-aria-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nexport interface TabsAriaControllerOptions<Tab, Panel> {\n  /** Add an `isTab` predicate to ensure this tabs instance' state does not leak into parent tabs' state */\n  isTab: (node: unknown) => node is Tab;\n  isActiveTab: (tab: Tab) => boolean;\n  /** Add an `isPanel` predicate to ensure this tabs instance' state does not leak into parent tabs' state */\n  isPanel: (node: unknown) => node is Panel;\n  getHTMLElement?: () => HTMLElement;\n}\n\nexport class TabsAriaController<\n  Tab extends HTMLElement = HTMLElement,\n  Panel extends HTMLElement = HTMLElement\n> implements ReactiveController {\n  #logger: Logger;\n\n  #host: ReactiveControllerHost;\n\n  #element!: HTMLElement;\n\n  #tabPanelMap = new Map<Tab, Panel>();\n\n  #options: TabsAriaControllerOptions<Tab, Panel>;\n\n  #mo = new MutationObserver(this.#onSlotchange.bind(this));\n\n  get tabs() {\n    return [...this.#tabPanelMap.keys()] as Tab[];\n  }\n\n  get activeTab(): Tab | undefined {\n    return this.tabs.find(x => this.#options.isActiveTab(x));\n  }\n\n  /**\n   * @param host controller host\n   * @param options controller options\n   * @example Usage in PfTab\n   *          ```ts\n   *          new TabsController(this, {\n   *             isTab: (x): x is PfTab => x instanceof PfTab,\n   *             isPanel: (x): x is PfTabPanel => x instanceof PfTabPanel\n   *          });\n   *          ```\n   */\n  constructor(\n    host: ReactiveControllerHost,\n    options: TabsAriaControllerOptions<Tab, Panel>,\n  ) {\n    this.#options = options;\n    this.#logger = new Logger(host);\n    (this.#host = host).addController(this);\n    if (isServer) {\n      return;\n    }\n    if (host instanceof HTMLElement) {\n      this.#element = host;\n    } else {\n      const element = options.getHTMLElement?.();\n      if (!element) {\n        throw new Error(\n          'TabsController must be instantiated with an HTMLElement or a `getHTMLElement()` option',\n        );\n      }\n      this.#element = element;\n    }\n    this.#element.addEventListener('slotchange', this.#onSlotchange);\n    if (this.#element.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  hostConnected(): void {\n    this.#mo.observe(this.#element, { attributes: false, childList: true, subtree: false });\n    this.#onSlotchange();\n  }\n\n  hostUpdated(): void {\n    for (const [tab, panel] of this.#tabPanelMap) {\n      panel.setAttribute('aria-labelledby', tab.id);\n      tab.setAttribute('aria-controls', panel.id);\n    }\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  /**\n   * zip the tabs and panels together into #tabPanelMap\n   */\n  #onSlotchange() {\n    this.#tabPanelMap.clear();\n    const tabs = [];\n    const panels = [];\n    for (const child of this.#element?.children ?? []) {\n      if (this.#options.isTab(child)) {\n        tabs.push(child);\n        child.role ??= 'tab';\n      } else if (this.#options.isPanel(child)) {\n        panels.push(child);\n        child.role ??= 'tabpanel';\n      }\n    }\n    if (tabs.length > panels.length) {\n      this.#logger.warn('Too many tabs!');\n    } else if (panels.length > tabs.length) {\n      this.#logger.warn('Too many panels!');\n    }\n    while (tabs.length) {\n      this.#tabPanelMap.set(tabs.shift()!, panels.shift()!);\n    }\n    this.#host.requestUpdate();\n  }\n\n  panelFor(tab: Tab): Panel | undefined {\n    return this.#tabPanelMap.get(tab);\n  }\n\n  tabFor(panel: Panel): Tab | undefined {\n    for (const [tab, panelToCheck] of this.#tabPanelMap) {\n      if (panel === panelToCheck) {\n        return tab;\n      }\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js
new file mode 100644
index 0000000..dfff1a4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js
@@ -0,0 +1,282 @@
+var _a;
+import { __decorate } from "tslib";
+import { expect, fixture, nextFrame } from '@open-wc/testing';
+import { sendKeys } from '@web/test-runner-commands';
+import { a11ySnapshot } from '@patternfly/pfe-tools/test/a11y-snapshot.js';
+import { customElement } from 'lit/decorators/custom-element.js';
+import { query } from 'lit/decorators/query.js';
+import { ReactiveElement, html, render } from 'lit';
+import { ComboboxController } from '../combobox-controller.js';
+function press(key) {
+    return async function () {
+        await sendKeys({ press: key });
+    };
+}
+class TestCombobox extends ReactiveElement {
+    constructor() {
+        super(...arguments);
+        this.controller = ComboboxController.of(this, {
+            multi: false,
+            getItems: () => this.options,
+            isItem: item => item instanceof HTMLOptionElement,
+            getFallbackLabel: () => 'options',
+            getListboxElement: () => this.listbox ?? null,
+            getToggleButton: () => this.button ?? null,
+            getComboboxInput: () => this.combobox ?? null,
+            isExpanded: () => !this.listbox.hidden,
+            requestShowListbox: () => void (this.listbox.hidden = false),
+            requestHideListbox: () => void (this.listbox.hidden = true),
+            setItemActive: (item, active) => item.classList.toggle('active', active),
+            setItemSelected: (item, selected) => item.selected = selected,
+        });
+    }
+    /** List of options */
+    get options() {
+        return [
+            ...new Set([
+                this.placeholder,
+                ...this.querySelectorAll('option'),
+                ...this.renderRoot.querySelectorAll('option'),
+            ]),
+        ].filter(x => !!x);
+    }
+    get selected() {
+        return this.options.filter(x => x.selected);
+    }
+    get activeOption() {
+        return this.options.find(x => x.classList.contains('active'));
+    }
+    update(changed) {
+        render(this.render(), this.renderRoot);
+        super.update(changed);
+        this.placeholder.inert = !!this.controller.selected.length;
+    }
+    connectedCallback() {
+        super.connectedCallback();
+        const root = this.renderRoot.getRootNode();
+        root.adoptedStyleSheets = [...root.adoptedStyleSheets ?? [], _a.styles];
+    }
+    static async test() {
+        let element;
+        const updateComplete = () => element.updateComplete;
+        const { template } = this;
+        if (!template) {
+            throw new Error(`${this.constructor.name} must implement template`);
+        }
+        beforeEach(async function () {
+            element = await fixture(template);
+        });
+        describe('Tab', function () {
+            beforeEach(press('Tab'));
+            beforeEach(updateComplete);
+            it('focuses the combobox', async function () {
+                expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+            });
+            describe('Tab', function () {
+                beforeEach(press('Tab'));
+                beforeEach(updateComplete);
+                beforeEach(nextFrame);
+                it('does not focus the toggle button', async function () {
+                    expect(await a11ySnapshot()).to.not.axContainQuery({ focused: true });
+                });
+            });
+            describe('ArrowDown', function () {
+                beforeEach(press('ArrowDown'));
+                beforeEach(updateComplete);
+                it('expands the listbox', async function () {
+                    expect(await a11ySnapshot())
+                        .to.axContainRole('listbox')
+                        .and
+                        .to.axContainQuery({ role: 'combobox', expanded: true });
+                });
+                it('maintains DOM focus on the combobox', async function () {
+                    expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+                });
+                it('sets active state on the placeholder', function () {
+                    expect(element.activeOption).to.equal(element.placeholder);
+                });
+                describe('Enter', function () {
+                    beforeEach(press('Enter'));
+                    beforeEach(updateComplete);
+                    it('maintains DOM focus on the combobox', async function () {
+                        expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+                    });
+                    it('selects nothing', function () {
+                        expect(element.selected).to.have.length(0);
+                    });
+                });
+                describe('ArrowDown', function () {
+                    beforeEach(press('ArrowDown'));
+                    beforeEach(updateComplete);
+                    it('maintains DOM focus on the combobox', async function () {
+                        expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+                    });
+                    it('sets active state on the 1st option', function () {
+                        expect(element.activeOption).to.have.text('1');
+                    });
+                    describe('Enter', function () {
+                        beforeEach(press('Enter'));
+                        beforeEach(updateComplete);
+                        it('maintains DOM focus on the combobox', async function () {
+                            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+                        });
+                        it('selects the first option', function () {
+                            expect(element.selected).to.have.length(1);
+                            expect(element.selected.at(0)).to.have.text('1');
+                        });
+                        it('collapses the listbox', async function () {
+                            expect(await a11ySnapshot())
+                                .to.not.axContainRole('listbox')
+                                .and
+                                .to.axContainQuery({ role: 'combobox', expanded: false });
+                        });
+                    });
+                });
+                describe('Escape', function () {
+                    beforeEach(press('Escape'));
+                    beforeEach(updateComplete);
+                    it('collapses the listbox', async function () {
+                        expect(await a11ySnapshot())
+                            .to.not.axContainRole('listbox')
+                            .and
+                            .to.axContainQuery({ role: 'combobox', expanded: false });
+                    });
+                    it('maintains DOM focus on the combobox', async function () {
+                        expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');
+                    });
+                });
+            });
+        });
+    }
+    ;
+}
+_a = TestCombobox;
+TestCombobox.styles = new CSSStyleSheet();
+(() => {
+    _a.styles.replaceSync(/* css */ `
+      option {
+        &.active {
+          outline: 1px solid black;
+        }
+        &[selected] {
+          background: lightblue;
+        }
+      }
+    `);
+})();
+__decorate([
+    query('#listbox')
+], TestCombobox.prototype, "listbox", void 0);
+__decorate([
+    query('#button')
+], TestCombobox.prototype, "button", void 0);
+__decorate([
+    query('#combobox')
+], TestCombobox.prototype, "combobox", void 0);
+__decorate([
+    query('#placeholder')
+], TestCombobox.prototype, "placeholder", void 0);
+let XComboboxCrossRoot = class XComboboxCrossRoot extends TestCombobox {
+    /** List of options */
+    get options() {
+        return [
+            ...new Set([
+                this.placeholder,
+                ...this.querySelectorAll('option'),
+            ]),
+        ].filter(x => !!x);
+    }
+    render() {
+        return html `
+      <div id="toggle">
+        <input id="combobox">
+        <button id="button">Show Options</button>
+      </div>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        ${this.controller.renderItemsToShadowRoot()}
+        <div ?hidden=${!ComboboxController.supportsCrossRootActiveDescendant}>
+          <slot></slot>
+        </div>
+      </div>
+    `;
+    }
+};
+XComboboxCrossRoot.template = html `
+    <x-combobox-cross-root>
+      <option>1</option>
+      <option>2</option>
+      <option>3</option>
+      <option>4</option>
+      <option>5</option>
+      <option>6</option>
+      <option>7</option>
+      <option>8</option>
+      <option>9</option>
+      <option>10</option>
+    </x-combobox-cross-root>
+  `;
+XComboboxCrossRoot = __decorate([
+    customElement('x-combobox-cross-root')
+], XComboboxCrossRoot);
+let XComboboxLight = class XComboboxLight extends TestCombobox {
+    createRenderRoot() {
+        return this;
+    }
+    render() {
+        return html `
+      <input id="combobox">
+      <button id="button">Show Options</button>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        <option>1</option>
+        <option>2</option>
+        <option>3</option>
+        <option>4</option>
+        <option>5</option>
+        <option>6</option>
+        <option>7</option>
+        <option>8</option>
+        <option>9</option>
+        <option>10</option>
+      </div>`;
+    }
+};
+XComboboxLight.template = html `
+    <x-combobox-light></x-combobox-light>
+  `;
+XComboboxLight = __decorate([
+    customElement('x-combobox-light')
+], XComboboxLight);
+let XComboboxShadow = class XComboboxShadow extends TestCombobox {
+    render() {
+        return html `
+      <input id="combobox">
+      <button id="button">Show Options</button>
+      <div id="listbox">
+        <option id="placeholder" aria-disabled="true">Select an Option</option>
+        <option>1</option>
+        <option>2</option>
+        <option>3</option>
+        <option>4</option>
+        <option>5</option>
+        <option>6</option>
+        <option>7</option>
+        <option>8</option>
+        <option>9</option>
+        <option>10</option>
+      </div>`;
+    }
+};
+XComboboxShadow.template = html `
+    <x-combobox-shadow></x-combobox-shadow>
+  `;
+XComboboxShadow = __decorate([
+    customElement('x-combobox-shadow')
+], XComboboxShadow);
+describe('ComboboxController', function () {
+    describe('Cross-root ARIA', XComboboxCrossRoot.test.bind(XComboboxCrossRoot));
+    describe('Light-DOM only', XComboboxLight.test.bind(XComboboxLight));
+    describe('Shadow-DOM only', XComboboxShadow.test.bind(XComboboxShadow));
+});
+//# sourceMappingURL=combobox-controller.spec.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js.map b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js.map
new file mode 100644
index 0000000..82864d1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/test/combobox-controller.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"combobox-controller.spec.js","sourceRoot":"","sources":["combobox-controller.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, nextFrame } from '@open-wc/testing';\nimport { sendKeys } from '@web/test-runner-commands';\nimport { a11ySnapshot } from '@patternfly/pfe-tools/test/a11y-snapshot.js';\n\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { query } from 'lit/decorators/query.js';\nimport { ReactiveElement, html, render, type PropertyValues, type TemplateResult } from 'lit';\n\nimport { ComboboxController } from '../combobox-controller.js';\n\nfunction press(key: string) {\n  return async function() {\n    await sendKeys({ press: key });\n  };\n}\n\nabstract class TestCombobox extends ReactiveElement {\n  declare static template: TemplateResult;\n\n  static styles = new CSSStyleSheet();\n\n  static {\n    this.styles.replaceSync(/* css */`\n      option {\n        &.active {\n          outline: 1px solid black;\n        }\n        &[selected] {\n          background: lightblue;\n        }\n      }\n    `);\n  }\n\n  controller = ComboboxController.of(this, {\n    multi: false,\n    getItems: () => this.options,\n    isItem: item => item instanceof HTMLOptionElement,\n    getFallbackLabel: () => 'options',\n    getListboxElement: () => this.listbox ?? null,\n    getToggleButton: () => this.button ?? null,\n    getComboboxInput: () => this.combobox ?? null,\n    isExpanded: () => !this.listbox.hidden,\n    requestShowListbox: () => void (this.listbox.hidden = false),\n    requestHideListbox: () => void (this.listbox.hidden = true),\n    setItemActive: (item, active) => item.classList.toggle('active', active),\n    setItemSelected: (item, selected) => item.selected = selected,\n  });\n\n  @query('#listbox') listbox!: HTMLElement;\n  @query('#button') button!: HTMLButtonElement;\n  @query('#combobox') combobox!: HTMLInputElement;\n  @query('#placeholder') placeholder!: HTMLOptionElement;\n\n  /** List of options */\n  get options(): HTMLOptionElement[] {\n    return [\n      ...new Set([\n        this.placeholder,\n        ...this.querySelectorAll('option'),\n        ...this.renderRoot.querySelectorAll('option'),\n      ]),\n    ].filter(x => !!x);\n  }\n\n  get selected() {\n    return this.options.filter(x => x.selected);\n  }\n\n  get activeOption() {\n    return this.options.find(x => x.classList.contains('active'));\n  }\n\n  abstract render(): TemplateResult;\n\n  override update(changed: PropertyValues<this>) {\n    render(this.render(), this.renderRoot);\n    super.update(changed);\n    this.placeholder.inert = !!this.controller.selected.length;\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    const root = this.renderRoot.getRootNode() as Document | ShadowRoot;\n    root.adoptedStyleSheets = [...root.adoptedStyleSheets ?? [], TestCombobox.styles];\n  }\n\n  static async test() {\n    let element: TestCombobox;\n\n    const updateComplete = () => element.updateComplete;\n\n    const { template } = this;\n\n    if (!template) {\n      throw new Error(`${this.constructor.name} must implement template`);\n    }\n\n    beforeEach(async function() {\n      element = await fixture<TestCombobox>(template);\n    });\n\n    describe('Tab', function() {\n      beforeEach(press('Tab'));\n      beforeEach(updateComplete);\n\n      it('focuses the combobox', async function() {\n        expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n      });\n\n      describe('Tab', function() {\n        beforeEach(press('Tab'));\n        beforeEach(updateComplete);\n        beforeEach(nextFrame);\n\n        it('does not focus the toggle button', async function() {\n          expect(await a11ySnapshot()).to.not.axContainQuery({ focused: true });\n        });\n      });\n\n      describe('ArrowDown', function() {\n        beforeEach(press('ArrowDown'));\n        beforeEach(updateComplete);\n\n        it('expands the listbox', async function() {\n          expect(await a11ySnapshot())\n              .to.axContainRole('listbox')\n              .and\n              .to.axContainQuery({ role: 'combobox', expanded: true });\n        });\n\n        it('maintains DOM focus on the combobox', async function() {\n          expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n        });\n\n        it('sets active state on the placeholder', function() {\n          expect(element.activeOption).to.equal(element.placeholder);\n        });\n\n        describe('Enter', function() {\n          beforeEach(press('Enter'));\n          beforeEach(updateComplete);\n\n          it('maintains DOM focus on the combobox', async function() {\n            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n          });\n\n          it('selects nothing', function() {\n            expect(element.selected).to.have.length(0);\n          });\n        });\n\n        describe('ArrowDown', function() {\n          beforeEach(press('ArrowDown'));\n          beforeEach(updateComplete);\n\n          it('maintains DOM focus on the combobox', async function() {\n            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n          });\n\n          it('sets active state on the 1st option', function() {\n            expect(element.activeOption).to.have.text('1');\n          });\n\n          describe('Enter', function() {\n            beforeEach(press('Enter'));\n            beforeEach(updateComplete);\n\n            it('maintains DOM focus on the combobox', async function() {\n              expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n            });\n\n            it('selects the first option', function() {\n              expect(element.selected).to.have.length(1);\n              expect(element.selected.at(0)).to.have.text('1');\n            });\n\n            it('collapses the listbox', async function() {\n              expect(await a11ySnapshot())\n                  .to.not.axContainRole('listbox')\n                  .and\n                  .to.axContainQuery({ role: 'combobox', expanded: false });\n            });\n          });\n        });\n\n        describe('Escape', function() {\n          beforeEach(press('Escape'));\n          beforeEach(updateComplete);\n\n          it('collapses the listbox', async function() {\n            expect(await a11ySnapshot())\n                .to.not.axContainRole('listbox')\n                .and\n                .to.axContainQuery({ role: 'combobox', expanded: false });\n          });\n\n          it('maintains DOM focus on the combobox', async function() {\n            expect(await a11ySnapshot()).axTreeFocusedNode.to.have.axRole('combobox');\n          });\n        });\n      });\n    });\n  };\n}\n\n@customElement('x-combobox-cross-root')\nclass XComboboxCrossRoot extends TestCombobox {\n  static template = html`\n    <x-combobox-cross-root>\n      <option>1</option>\n      <option>2</option>\n      <option>3</option>\n      <option>4</option>\n      <option>5</option>\n      <option>6</option>\n      <option>7</option>\n      <option>8</option>\n      <option>9</option>\n      <option>10</option>\n    </x-combobox-cross-root>\n  `;\n\n\n  /** List of options */\n  override get options(): HTMLOptionElement[] {\n    return [\n      ...new Set([\n        this.placeholder,\n        ...this.querySelectorAll('option'),\n      ]),\n    ].filter(x => !!x);\n  }\n\n  render() {\n    return html`\n      <div id=\"toggle\">\n        <input id=\"combobox\">\n        <button id=\"button\">Show Options</button>\n      </div>\n      <div id=\"listbox\">\n        <option id=\"placeholder\" aria-disabled=\"true\">Select an Option</option>\n        ${this.controller.renderItemsToShadowRoot()}\n        <div ?hidden=${!ComboboxController.supportsCrossRootActiveDescendant}>\n          <slot></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\n@customElement('x-combobox-light')\nclass XComboboxLight extends TestCombobox {\n  static template = html`\n    <x-combobox-light></x-combobox-light>\n  `;\n\n  protected createRenderRoot(): HTMLElement | DocumentFragment {\n    return this;\n  }\n\n  render() {\n    return html`\n      <input id=\"combobox\">\n      <button id=\"button\">Show Options</button>\n      <div id=\"listbox\">\n        <option id=\"placeholder\" aria-disabled=\"true\">Select an Option</option>\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n        <option>6</option>\n        <option>7</option>\n        <option>8</option>\n        <option>9</option>\n        <option>10</option>\n      </div>`;\n  }\n}\n\n@customElement('x-combobox-shadow')\nclass XComboboxShadow extends TestCombobox {\n  static template = html`\n    <x-combobox-shadow></x-combobox-shadow>\n  `;\n\n  render() {\n    return html`\n      <input id=\"combobox\">\n      <button id=\"button\">Show Options</button>\n      <div id=\"listbox\">\n        <option id=\"placeholder\" aria-disabled=\"true\">Select an Option</option>\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n        <option>6</option>\n        <option>7</option>\n        <option>8</option>\n        <option>9</option>\n        <option>10</option>\n      </div>`;\n  }\n}\n\ndescribe('ComboboxController', function() {\n  describe('Cross-root ARIA', XComboboxCrossRoot.test.bind(XComboboxCrossRoot));\n  describe('Light-DOM only', XComboboxLight.test.bind(XComboboxLight));\n  describe('Shadow-DOM only', XComboboxShadow.test.bind(XComboboxShadow));\n});\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.d.ts b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.d.ts
new file mode 100644
index 0000000..f85e343
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.d.ts
@@ -0,0 +1,23 @@
+import type { ReactiveController, ReactiveControllerHost } from 'lit';
+export type DateTimeFormat = 'full' | 'long' | 'medium' | 'short';
+export interface TimestampOptions {
+    dateFormat?: DateTimeFormat;
+    timeFormat?: DateTimeFormat;
+    customFormat?: Intl.DateTimeFormatOptions;
+    displaySuffix: string;
+    locale: Intl.LocalesArgument;
+    relative: boolean;
+    utc: boolean;
+    hour12: boolean;
+}
+export declare class TimestampController implements ReactiveController {
+    #private;
+    get localeString(): string;
+    get date(): Date;
+    set date(string: Date);
+    get isoString(): string;
+    get time(): string;
+    constructor(host: ReactiveControllerHost, options?: Partial<TimestampOptions>);
+    hostConnected?(): void;
+    set(prop: PropertyKey, value: unknown): void;
+}
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js
new file mode 100644
index 0000000..51e45b3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js
@@ -0,0 +1,111 @@
+var _TimestampController_instances, _a, _TimestampController_isTimestampOptionKey, _TimestampController_date, _TimestampController_options, _TimestampController_host, _TimestampController_getTimeRelative;
+import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
+const defaults = {
+    dateFormat: undefined,
+    timeFormat: undefined,
+    customFormat: undefined,
+    displaySuffix: '',
+    locale: undefined,
+    relative: false,
+    utc: false,
+    hour12: false,
+};
+export class TimestampController {
+    get localeString() {
+        return __classPrivateFieldGet(this, _TimestampController_date, "f").toLocaleString(__classPrivateFieldGet(this, _TimestampController_options, "f").locale);
+    }
+    get date() {
+        return __classPrivateFieldGet(this, _TimestampController_date, "f");
+    }
+    set date(string) {
+        __classPrivateFieldSet(this, _TimestampController_date, new Date(string), "f");
+    }
+    get isoString() {
+        return __classPrivateFieldGet(this, _TimestampController_date, "f").toISOString();
+    }
+    get time() {
+        if (__classPrivateFieldGet(this, _TimestampController_options, "f").relative) {
+            return __classPrivateFieldGet(this, _TimestampController_instances, "m", _TimestampController_getTimeRelative).call(this);
+        }
+        else {
+            let { displaySuffix } = __classPrivateFieldGet(this, _TimestampController_options, "f");
+            const { locale } = __classPrivateFieldGet(this, _TimestampController_options, "f");
+            if (__classPrivateFieldGet(this, _TimestampController_options, "f").utc) {
+                displaySuffix || (displaySuffix = 'UTC');
+            }
+            const localeString = __classPrivateFieldGet(this, _TimestampController_date, "f").toLocaleString(locale, __classPrivateFieldGet(this, _TimestampController_options, "f").customFormat ?? {
+                hour12: __classPrivateFieldGet(this, _TimestampController_options, "f").hour12,
+                timeStyle: __classPrivateFieldGet(this, _TimestampController_options, "f").timeFormat,
+                dateStyle: __classPrivateFieldGet(this, _TimestampController_options, "f").dateFormat,
+                ...__classPrivateFieldGet(this, _TimestampController_options, "f").utc && { timeZone: 'UTC' },
+            });
+            return `${localeString} ${displaySuffix ?? ''}`.trim();
+        }
+    }
+    constructor(host, options) {
+        _TimestampController_instances.add(this);
+        _TimestampController_date.set(this, new Date());
+        _TimestampController_options.set(this, {});
+        _TimestampController_host.set(this, void 0);
+        __classPrivateFieldSet(this, _TimestampController_host, host, "f");
+        host.addController(this);
+        for (const [name, value] of Object.entries(__classPrivateFieldGet(this, _TimestampController_options, "f"))) {
+            // @ts-expect-error: seems typescript compiler isn't up to the task here
+            __classPrivateFieldGet(this, _TimestampController_options, "f")[name] = options?.[name] ?? value;
+        }
+    }
+    set(prop, value) {
+        if (__classPrivateFieldGet(_a, _a, "m", _TimestampController_isTimestampOptionKey).call(_a, prop)) {
+            // @ts-expect-error: seems typescript compiler isn't up to the task here
+            __classPrivateFieldGet(this, _TimestampController_options, "f")[prop] = value;
+            __classPrivateFieldGet(this, _TimestampController_host, "f").requestUpdate();
+        }
+    }
+}
+_a = TimestampController, _TimestampController_date = new WeakMap(), _TimestampController_options = new WeakMap(), _TimestampController_host = new WeakMap(), _TimestampController_instances = new WeakSet(), _TimestampController_isTimestampOptionKey = function _TimestampController_isTimestampOptionKey(prop) {
+    return prop in defaults;
+}, _TimestampController_getTimeRelative = function _TimestampController_getTimeRelative() {
+    const date = __classPrivateFieldGet(this, _TimestampController_date, "f");
+    const { locale } = __classPrivateFieldGet(this, _TimestampController_options, "f");
+    const rtf = new Intl.RelativeTimeFormat(locale, {
+        localeMatcher: 'best fit',
+        numeric: 'auto',
+        style: 'long',
+    });
+    const ms = date.getTime() - Date.now();
+    const tense = ms > 0 ? 1 : -1;
+    let qty = 0;
+    let units;
+    const s = Math.round(Math.abs(ms) / 1000);
+    const min = Math.round(s / 60);
+    const h = Math.round(min / 60);
+    const d = Math.round(h / 24);
+    const m = Math.round(d / 30);
+    const y = Math.round(m / 12);
+    if (m >= 12) {
+        qty = y;
+        units = 'year';
+    }
+    else if (d >= 30) {
+        qty = m;
+        units = 'month';
+    }
+    else if (h >= 24) {
+        qty = d;
+        units = 'day';
+    }
+    else if (min >= 45) {
+        qty = h;
+        units = 'hour';
+    }
+    else if (s >= 45) {
+        qty = min;
+        units = 'minute';
+    }
+    else if (s >= 10) {
+        qty = s;
+        units = 'second';
+    }
+    return typeof (units) !== 'undefined' ? rtf.format(tense * qty, units) : 'just now';
+};
+//# sourceMappingURL=timestamp-controller.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js.map b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js.map
new file mode 100644
index 0000000..2ad67fa
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/controllers/timestamp-controller.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"timestamp-controller.js","sourceRoot":"","sources":["timestamp-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport type DateTimeFormat = 'full' | 'long' | 'medium' | 'short';\n\nexport interface TimestampOptions {\n  dateFormat?: DateTimeFormat;\n  timeFormat?: DateTimeFormat;\n  customFormat?: Intl.DateTimeFormatOptions;\n  displaySuffix: string;\n  locale: Intl.LocalesArgument;\n  relative: boolean;\n  utc: boolean;\n  hour12: boolean;\n}\n\nconst defaults = {\n  dateFormat: undefined,\n  timeFormat: undefined,\n  customFormat: undefined,\n  displaySuffix: '',\n  locale: undefined,\n  relative: false,\n  utc: false,\n  hour12: false,\n} as const;\n\nexport class TimestampController implements ReactiveController {\n  static #isTimestampOptionKey(prop: PropertyKey): prop is keyof TimestampOptions {\n    return prop in defaults;\n  }\n\n  #date = new Date();\n\n  #options: TimestampOptions = {} as TimestampOptions;\n\n  #host: ReactiveControllerHost;\n\n  get localeString(): string {\n    return this.#date.toLocaleString(this.#options.locale);\n  }\n\n  get date(): Date {\n    return this.#date;\n  }\n\n  set date(string) {\n    this.#date = new Date(string);\n  }\n\n  get isoString(): string {\n    return this.#date.toISOString();\n  }\n\n  get time(): string {\n    if (this.#options.relative) {\n      return this.#getTimeRelative();\n    } else {\n      let { displaySuffix } = this.#options;\n      const { locale } = this.#options;\n      if (this.#options.utc) {\n        displaySuffix ||= 'UTC';\n      }\n      const localeString = this.#date.toLocaleString(locale, this.#options.customFormat ?? {\n        hour12: this.#options.hour12,\n        timeStyle: this.#options.timeFormat,\n        dateStyle: this.#options.dateFormat,\n        ...this.#options.utc && { timeZone: 'UTC' },\n      });\n\n      return `${localeString} ${displaySuffix ?? ''}`.trim();\n    }\n  }\n\n  constructor(host: ReactiveControllerHost, options?: Partial<TimestampOptions>) {\n    this.#host = host;\n    host.addController(this);\n    for (const [name, value] of Object.entries(this.#options)) {\n      // @ts-expect-error: seems typescript compiler isn't up to the task here\n      this.#options[name] = options?.[name] ?? value;\n    }\n  }\n\n  hostConnected?(): void;\n\n  /**\n   * Based off of Github Relative Time\n   * https://github.com/github/time-elements/blob/master/src/relative-time.js\n   */\n  #getTimeRelative() {\n    const date = this.#date;\n    const { locale } = this.#options;\n    const rtf = new Intl.RelativeTimeFormat(locale as string, {\n      localeMatcher: 'best fit',\n      numeric: 'auto',\n      style: 'long',\n    });\n    const ms: number = date.getTime() - Date.now();\n    const tense = ms > 0 ? 1 : -1;\n    let qty = 0;\n    let units: Intl.RelativeTimeFormatUnit | undefined;\n    const s = Math.round(Math.abs(ms) / 1000);\n    const min = Math.round(s / 60);\n    const h = Math.round(min / 60);\n    const d = Math.round(h / 24);\n    const m = Math.round(d / 30);\n    const y = Math.round(m / 12);\n    if (m >= 12) {\n      qty = y;\n      units = 'year';\n    } else if (d >= 30) {\n      qty = m;\n      units = 'month';\n    } else if (h >= 24) {\n      qty = d;\n      units = 'day';\n    } else if (min >= 45) {\n      qty = h;\n      units = 'hour';\n    } else if (s >= 45) {\n      qty = min;\n      units = 'minute';\n    } else if (s >= 10) {\n      qty = s;\n      units = 'second';\n    }\n\n    return typeof (units) !== 'undefined' ? rtf.format(tense * qty, units) : 'just now';\n  }\n\n  set(prop: PropertyKey, value: unknown): void {\n    if (TimestampController.#isTimestampOptionKey(prop)) {\n      // @ts-expect-error: seems typescript compiler isn't up to the task here\n      this.#options[prop] = value;\n      this.#host.requestUpdate();\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/core.d.ts b/node_modules/@patternfly/pfe-core/package/core.d.ts
new file mode 100644
index 0000000..5e5582a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/core.d.ts
@@ -0,0 +1,21 @@
+import type { ComplexAttributeConverter } from 'lit';
+export type RequireProps<T, Ps extends keyof T> = T & {
+    [P in Ps]-?: T[P];
+};
+/**
+ * A LitElement property converter which represents a list of numbers as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export declare const NumberListConverter: ComplexAttributeConverter<number[] | null, unknown>;
+/**
+ * A LitElement property converter which represents a list of strings as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export declare const StringListConverter: ComplexAttributeConverter<string[] | null, unknown>;
+/**
+ * A composed, bubbling event for UI interactions
+ * e.g. when an accordion panel opens.
+ */
+export declare class ComposedEvent extends Event {
+    constructor(type: string, init?: EventInit);
+}
diff --git a/node_modules/@patternfly/pfe-core/package/core.js b/node_modules/@patternfly/pfe-core/package/core.js
new file mode 100644
index 0000000..2406356
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/core.js
@@ -0,0 +1,39 @@
+function makeConverter(f) {
+    return {
+        fromAttribute(value) {
+            if (typeof value !== 'string') {
+                return null;
+            }
+            else {
+                return value.split(',').map(f);
+            }
+        },
+        toAttribute(value) {
+            return value.join(',');
+        },
+    };
+}
+/**
+ * A LitElement property converter which represents a list of numbers as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export const NumberListConverter = makeConverter(x => parseInt(x?.trim(), 10));
+/**
+ * A LitElement property converter which represents a list of strings as a comma separated string
+ * @see https://lit.dev/docs/components/properties/#conversion-converter
+ */
+export const StringListConverter = makeConverter(x => x.trim());
+/**
+ * A composed, bubbling event for UI interactions
+ * e.g. when an accordion panel opens.
+ */
+export class ComposedEvent extends Event {
+    constructor(type, init) {
+        super(type, {
+            bubbles: true,
+            composed: true,
+            ...init,
+        });
+    }
+}
+//# sourceMappingURL=core.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/core.js.map b/node_modules/@patternfly/pfe-core/package/core.js.map
new file mode 100644
index 0000000..28c95dd
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/core.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"core.js","sourceRoot":"","sources":["core.ts"],"names":[],"mappings":"AAMA,SAAS,aAAa,CACpB,CAAmC;IAEnC,OAAO;QACL,aAAa,CAAC,KAAa;YACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC9B,OAAO,IAAI,CAAC;YACd,CAAC;iBAAM,CAAC;gBACN,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjC,CAAC;QACH,CAAC;QACD,WAAW,CAAC,KAAU;YACpB,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC;KACF,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAC9B,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AAE9C;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAC9B,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AAE/B;;;GAGG;AACH,MAAM,OAAO,aAAc,SAAQ,KAAK;IACtC,YAAY,IAAY,EAAE,IAAgB;QACxC,KAAK,CAAC,IAAI,EAAE;YACV,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,IAAI;YACd,GAAG,IAAI;SACR,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import type { ComplexAttributeConverter } from 'lit';\n\nexport type RequireProps<T, Ps extends keyof T> = T & {\n  [P in Ps]-?: T[P];\n};\n\nfunction makeConverter<T>(\n  f: (x: string, type?: unknown) => T,\n): ComplexAttributeConverter<null | T[]> {\n  return {\n    fromAttribute(value: string) {\n      if (typeof value !== 'string') {\n        return null;\n      } else {\n        return value.split(',').map(f);\n      }\n    },\n    toAttribute(value: T[]) {\n      return value.join(',');\n    },\n  };\n}\n\n/**\n * A LitElement property converter which represents a list of numbers as a comma separated string\n * @see https://lit.dev/docs/components/properties/#conversion-converter\n */\nexport const NumberListConverter: ComplexAttributeConverter<number[] | null, unknown> =\n  makeConverter(x => parseInt(x?.trim(), 10));\n\n/**\n * A LitElement property converter which represents a list of strings as a comma separated string\n * @see https://lit.dev/docs/components/properties/#conversion-converter\n */\nexport const StringListConverter: ComplexAttributeConverter<string[] | null, unknown> =\n  makeConverter(x => x.trim());\n\n/**\n * A composed, bubbling event for UI interactions\n * e.g. when an accordion panel opens.\n */\nexport class ComposedEvent extends Event {\n  constructor(type: string, init?: EventInit) {\n    super(type, {\n      bubbles: true,\n      composed: true,\n      ...init,\n    });\n  }\n}\n\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/custom-elements.json b/node_modules/@patternfly/pfe-core/package/custom-elements.json
new file mode 100644
index 0000000..aabde1c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/custom-elements.json
@@ -0,0 +1,11937 @@
+{
+  "schemaVersion": "1.0.0",
+  "readme": "",
+  "modules": [
+    {
+      "kind": "javascript-module",
+      "path": "core.d.ts",
+      "declarations": [
+        {
+          "kind": "variable",
+          "name": "NumberListConverter",
+          "type": {
+            "text": "ComplexAttributeConverter<number[] | null, unknown>"
+          },
+          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
+        },
+        {
+          "kind": "variable",
+          "name": "StringListConverter",
+          "type": {
+            "text": "ComplexAttributeConverter<string[] | null, unknown>"
+          },
+          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
+        },
+        {
+          "kind": "class",
+          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
+          "name": "ComposedEvent",
+          "superclass": {
+            "name": "Event",
+            "module": "global:"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "NumberListConverter",
+          "declaration": {
+            "name": "NumberListConverter",
+            "module": "core.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "StringListConverter",
+          "declaration": {
+            "name": "StringListConverter",
+            "module": "core.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ComposedEvent",
+          "declaration": {
+            "name": "ComposedEvent",
+            "module": "core.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "core.js",
+      "declarations": [
+        {
+          "kind": "variable",
+          "name": "NumberListConverter",
+          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
+        },
+        {
+          "kind": "variable",
+          "name": "StringListConverter",
+          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
+        },
+        {
+          "kind": "class",
+          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
+          "name": "ComposedEvent",
+          "superclass": {
+            "name": "Event",
+            "module": "global:"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "NumberListConverter",
+          "declaration": {
+            "name": "NumberListConverter",
+            "module": "core.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "StringListConverter",
+          "declaration": {
+            "name": "StringListConverter",
+            "module": "core.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ComposedEvent",
+          "declaration": {
+            "name": "ComposedEvent",
+            "module": "core.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "core.ts",
+      "declarations": [
+        {
+          "kind": "variable",
+          "name": "NumberListConverter",
+          "type": {
+            "text": "ComplexAttributeConverter<number[] | null, unknown>"
+          },
+          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
+        },
+        {
+          "kind": "variable",
+          "name": "StringListConverter",
+          "type": {
+            "text": "ComplexAttributeConverter<string[] | null, unknown>"
+          },
+          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
+        },
+        {
+          "kind": "class",
+          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
+          "name": "ComposedEvent",
+          "superclass": {
+            "name": "Event",
+            "module": "global:"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "NumberListConverter",
+          "declaration": {
+            "name": "NumberListConverter",
+            "module": "core.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "StringListConverter",
+          "declaration": {
+            "name": "StringListConverter",
+            "module": "core.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ComposedEvent",
+          "declaration": {
+            "name": "ComposedEvent",
+            "module": "core.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators.d.ts",
+      "declarations": [],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/bound.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/cascades.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/deprecation.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/initializer.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/listen.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observed.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observes.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/time.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/trace.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators.js",
+      "declarations": [],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/bound.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/cascades.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/deprecation.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/initializer.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/listen.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observed.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observes.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/time.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/trace.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators.ts",
+      "declarations": [],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/bound.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/cascades.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/deprecation.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/initializer.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/listen.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observed.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/observes.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/time.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "*",
+          "declaration": {
+            "name": "*",
+            "package": "./decorators/trace.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "ssr-shims.d.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "ssr-shims.js",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "ssr-shims.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/activedescendant-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements activedescendant pattern, as described in WAI-ARIA practices,\n[Managing Focus in Composites Using aria-activedescendant][ad]\n\nThe steps for using the aria-activedescendant method of managing focus are as follows.\n\n - When the container element that has a role that supports aria-activedescendant is loaded\n   or created, ensure that:\n   - The container element is included in the tab sequence as described in\n     Keyboard Navigation Between Components or is a focusable element of a composite\n     that implements a roving tabindex.\n   - It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\n     the container that should be identified as active when the widget receives focus.\n     The referenced element needs to meet the DOM relationship requirements described below.\n - When the container element receives DOM focus, draw a visual focus indicator on the active\n   element and ensure the active element is scrolled into view.\n - When the composite widget contains focus and the user presses a navigation key that moves\n   focus within the widget, such as an arrow key:\n   - Change the value of aria-activedescendant on the container to refer to the element\n     that should be reported to assistive technologies as active.\n   - Move the visual focus indicator and, if necessary, scrolled the active element into view.\n - If the design calls for a specific element to be focused the next time a user moves focus\n   into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\n   that target element when the container loses focus. If it is not, set aria-activedescendant\n   to refer to the target element.\n\nThe specification for aria-activedescendant places important restrictions on the\nDOM relationship between the focused element that has the aria-activedescendant attribute\nand the element referenced as active by the value of the attribute.\nOne of the following three conditions must be met.\n\n1. The element referenced as active is a DOM descendant of the focused referencing element.\n2. The focused referencing element has a value specified for the aria-owns property that\n   includes the ID of the element referenced as active.\n3. The focused referencing element has role of combobox, textbox, or searchbox\n   and has aria-controls property referring to an element with a role that supports\n   aria-activedescendant and either:\n  1. The element referenced as active is a descendant of the controlled element.\n  2. The controlled element has a value specified for the aria-owns property that includes\n     the ID of the element referenced as active.\n\n[ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant",
+          "name": "ActivedescendantController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "type": {
+                "text": "boolean"
+              },
+              "static": true,
+              "description": "When true, the browser supports cross-root ARIA such that the controller does not need\nto copy item nodes into the controlling nodes' root"
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ActivedescendantController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ActivedescendantControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\nusing AriaIDLAttributes for cross-root aria, if supported by the browser",
+              "type": {
+                "text": "number"
+              },
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "Sets the list of items and activates the next activatable item after the current one",
+              "parameters": [
+                {
+                  "description": "tabindex items",
+                  "name": "items"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  }
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "renderItemsToShadowRoot",
+              "return": {
+                "type": {
+                  "text": "typeof nothing | Node[]"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ActivedescendantController",
+          "declaration": {
+            "name": "ActivedescendantController",
+            "module": "controllers/activedescendant-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/activedescendant-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements activedescendant pattern, as described in WAI-ARIA practices,\n[Managing Focus in Composites Using aria-activedescendant][ad]\n\nThe steps for using the aria-activedescendant method of managing focus are as follows.\n\n - When the container element that has a role that supports aria-activedescendant is loaded\n   or created, ensure that:\n   - The container element is included in the tab sequence as described in\n     Keyboard Navigation Between Components or is a focusable element of a composite\n     that implements a roving tabindex.\n   - It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\n     the container that should be identified as active when the widget receives focus.\n     The referenced element needs to meet the DOM relationship requirements described below.\n - When the container element receives DOM focus, draw a visual focus indicator on the active\n   element and ensure the active element is scrolled into view.\n - When the composite widget contains focus and the user presses a navigation key that moves\n   focus within the widget, such as an arrow key:\n   - Change the value of aria-activedescendant on the container to refer to the element\n     that should be reported to assistive technologies as active.\n   - Move the visual focus indicator and, if necessary, scrolled the active element into view.\n - If the design calls for a specific element to be focused the next time a user moves focus\n   into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\n   that target element when the container loses focus. If it is not, set aria-activedescendant\n   to refer to the target element.\n\nThe specification for aria-activedescendant places important restrictions on the\nDOM relationship between the focused element that has the aria-activedescendant attribute\nand the element referenced as active by the value of the attribute.\nOne of the following three conditions must be met.\n\n1. The element referenced as active is a DOM descendant of the focused referencing element.\n2. The focused referencing element has a value specified for the aria-owns property that\n   includes the ID of the element referenced as active.\n3. The focused referencing element has role of combobox, textbox, or searchbox\n   and has aria-controls property referring to an element with a role that supports\n   aria-activedescendant and either:\n  1. The element referenced as active is a descendant of the controlled element.\n  2. The controlled element has a value specified for the aria-owns property that includes\n     the ID of the element referenced as active.\n\n[ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant",
+          "name": "ActivedescendantController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "static": true,
+              "description": "When true, the browser supports cross-root ARIA such that the controller does not need\nto copy item nodes into the controlling nodes' root"
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                },
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\nusing AriaIDLAttributes for cross-root aria, if supported by the browser",
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "Sets the list of items and activates the next activatable item after the current one",
+              "parameters": [
+                {
+                  "description": "tabindex items",
+                  "name": "items"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event"
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "renderItemsToShadowRoot"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "default": "host",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "default": "options",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "getItemValue",
+              "default": "(_a.getItemValue = function () {\n            return this.value;\n        })"
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ActivedescendantController",
+          "declaration": {
+            "name": "ActivedescendantController",
+            "module": "controllers/activedescendant-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/activedescendant-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements activedescendant pattern, as described in WAI-ARIA practices,\n[Managing Focus in Composites Using aria-activedescendant][ad]\n\nThe steps for using the aria-activedescendant method of managing focus are as follows.\n\n - When the container element that has a role that supports aria-activedescendant is loaded\n   or created, ensure that:\n   - The container element is included in the tab sequence as described in\n     Keyboard Navigation Between Components or is a focusable element of a composite\n     that implements a roving tabindex.\n   - It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\n     the container that should be identified as active when the widget receives focus.\n     The referenced element needs to meet the DOM relationship requirements described below.\n - When the container element receives DOM focus, draw a visual focus indicator on the active\n   element and ensure the active element is scrolled into view.\n - When the composite widget contains focus and the user presses a navigation key that moves\n   focus within the widget, such as an arrow key:\n   - Change the value of aria-activedescendant on the container to refer to the element\n     that should be reported to assistive technologies as active.\n   - Move the visual focus indicator and, if necessary, scrolled the active element into view.\n - If the design calls for a specific element to be focused the next time a user moves focus\n   into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\n   that target element when the container loses focus. If it is not, set aria-activedescendant\n   to refer to the target element.\n\nThe specification for aria-activedescendant places important restrictions on the\nDOM relationship between the focused element that has the aria-activedescendant attribute\nand the element referenced as active by the value of the attribute.\nOne of the following three conditions must be met.\n\n1. The element referenced as active is a DOM descendant of the focused referencing element.\n2. The focused referencing element has a value specified for the aria-owns property that\n   includes the ID of the element referenced as active.\n3. The focused referencing element has role of combobox, textbox, or searchbox\n   and has aria-controls property referring to an element with a role that supports\n   aria-activedescendant and either:\n  1. The element referenced as active is a descendant of the controlled element.\n  2. The controlled element has a value specified for the aria-owns property that includes\n     the ID of the element referenced as active.\n\n[ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant",
+          "name": "ActivedescendantController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "public",
+              "static": true,
+              "description": "When true, the browser supports cross-root ARIA such that the controller does not need\nto copy item nodes into the controlling nodes' root"
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ActivedescendantController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ActivedescendantControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#lightToShadowMap",
+              "privacy": "private",
+              "default": "new WeakMap<Item, Item>()",
+              "description": "Maps from original element to shadow DOM clone"
+            },
+            {
+              "kind": "field",
+              "name": "#shadowToLightMap",
+              "privacy": "private",
+              "default": "new WeakMap<Item, Item>()",
+              "description": "Maps from shadow DOM clone to original element"
+            },
+            {
+              "kind": "field",
+              "name": "#noCloneSet",
+              "privacy": "private",
+              "default": "new WeakSet<Item>()",
+              "description": "Set of item which should not be cloned"
+            },
+            {
+              "kind": "field",
+              "name": "#controlsElements",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "default": "[]",
+              "description": "Element which controls the list i.e. combobox"
+            },
+            {
+              "kind": "field",
+              "name": "#observing",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "#listMO",
+              "privacy": "private",
+              "default": "new MutationObserver(records => this.#onItemsDOMChange(records))"
+            },
+            {
+              "kind": "field",
+              "name": "#attrMO",
+              "privacy": "private",
+              "default": "new MutationObserver(records => this.#onItemAttributeChange(records))"
+            },
+            {
+              "kind": "method",
+              "name": "#syncAttr",
+              "parameters": [
+                {
+                  "name": "attributeName",
+                  "type": {
+                    "text": "string"
+                  }
+                },
+                {
+                  "name": "fromNode",
+                  "type": {
+                    "text": "Item"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\nusing AriaIDLAttributes for cross-root aria, if supported by the browser",
+              "type": {
+                "text": "number"
+              },
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "Sets the list of items and activates the next activatable item after the current one",
+              "parameters": [
+                {
+                  "description": "tabindex items",
+                  "name": "items"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#onItemsDOMChange",
+              "parameters": [
+                {
+                  "name": "records",
+                  "type": {
+                    "text": "MutationRecord[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "#onItemAttributeChange",
+              "parameters": [
+                {
+                  "name": "records",
+                  "type": {
+                    "text": "MutationRecord[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  }
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "renderItemsToShadowRoot",
+              "privacy": "public",
+              "return": {
+                "type": {
+                  "text": "typeof nothing | Node[]"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "getItemValue",
+              "default": "function(this: Item) {\n      return (this as unknown as HTMLOptionElement).value;\n    }"
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ActivedescendantController",
+          "declaration": {
+            "name": "ActivedescendantController",
+            "module": "controllers/activedescendant-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/at-focus-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ATFocusController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveControllerHost"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>"
+              },
+              "privacy": "protected"
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected"
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "type": {
+                "text": "number"
+              },
+              "description": "Index of the Item which currently has assistive technology focus\nSet this to change focus. Setting to an out-of-bounds value will\nwrap around to the other side of the list."
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus"
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "description": "The element containing focusable items, e.g. a listbox"
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  },
+                  "description": "keyboard event"
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ATFocusController",
+          "declaration": {
+            "name": "ATFocusController",
+            "module": "controllers/at-focus-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/at-focus-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ATFocusController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Index of the Item which currently has assistive technology focus\nSet this to change focus. Setting to an out-of-bounds value will\nwrap around to the other side of the list."
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "description": "Elements which control the items container e.g. a combobox input"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "description": "All items which are able to receive assistive technology focus"
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox"
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "description": "Initialize the items and itemsContainerElement fields"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate"
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "parameters": [
+                {
+                  "name": "event",
+                  "description": "keyboard event"
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "array"
+              },
+              "default": "[]"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ATFocusController",
+          "declaration": {
+            "name": "ATFocusController",
+            "module": "controllers/at-focus-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/at-focus-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ATFocusController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1"
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]"
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Index of the Item which currently has assistive technology focus\nSet this to change focus. Setting to an out-of-bounds value will\nwrap around to the other side of the list."
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus"
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox"
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer"
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  },
+                  "description": "keyboard event"
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ATFocusController",
+          "declaration": {
+            "name": "ATFocusController",
+            "module": "controllers/at-focus-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/cascade-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CascadeController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "E"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "type": {
+                "text": "Options<E> | undefined | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "class",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "type": {
+                "text": "WeakMap<ReactiveElement, CascadeController<ReactiveElement>>"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "mo",
+              "type": {
+                "text": "MutationObserver"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "cache",
+              "type": {
+                "text": "Map<string, string[]>"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "cascadeProperties",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "nodeList",
+                  "optional": true,
+                  "type": {
+                    "text": "HTMLCollection | NodeList"
+                  }
+                }
+              ],
+              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
+            },
+            {
+              "kind": "method",
+              "name": "initProp",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "propName",
+                  "type": {
+                    "text": "string"
+                  }
+                },
+                {
+                  "name": "cascade",
+                  "type": {
+                    "text": "string | string[]"
+                  }
+                }
+              ],
+              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
+            },
+            {
+              "kind": "field",
+              "name": "parse",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "_copyAttribute",
+              "privacy": "private",
+              "description": "Copy the named attribute to a target element.",
+              "parameters": [
+                {
+                  "description": "attr name",
+                  "name": "name"
+                },
+                {
+                  "description": "element",
+                  "name": "el"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "_cascadeAttributes",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "_cascadeAttribute",
+              "privacy": "private",
+              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM.",
+              "parameters": [
+                {
+                  "description": "The name of the attribute to cascade (not necessarily the same as the property name).",
+                  "name": "name"
+                },
+                {
+                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.",
+                  "name": "to"
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CascadeController",
+          "declaration": {
+            "name": "CascadeController",
+            "module": "controllers/cascade-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/cascade-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CascadeController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostUpdated"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "cascadeProperties",
+              "parameters": [
+                {
+                  "name": "nodeList",
+                  "default": "this.host.children",
+                  "optional": true
+                }
+              ],
+              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
+            },
+            {
+              "kind": "method",
+              "name": "initProp",
+              "parameters": [
+                {
+                  "name": "propName"
+                },
+                {
+                  "name": "cascade"
+                }
+              ],
+              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
+            },
+            {
+              "kind": "method",
+              "name": "parse",
+              "parameters": [
+                {
+                  "name": "mutations"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "_copyAttribute",
+              "parameters": [
+                {
+                  "name": "name",
+                  "description": "attr name"
+                },
+                {
+                  "name": "el",
+                  "description": "element"
+                }
+              ],
+              "description": "Copy the named attribute to a target element."
+            },
+            {
+              "kind": "method",
+              "name": "_cascadeAttributes",
+              "parameters": [
+                {
+                  "name": "selectors"
+                },
+                {
+                  "name": "set"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "_cascadeAttribute",
+              "parameters": [
+                {
+                  "name": "name",
+                  "description": "The name of the attribute to cascade (not necessarily the same as the property name)."
+                },
+                {
+                  "name": "to",
+                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees."
+                }
+              ],
+              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM."
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "mo",
+              "default": "new MutationObserver(this.parse)"
+            },
+            {
+              "kind": "field",
+              "name": "cache",
+              "default": "new Map()"
+            },
+            {
+              "kind": "field",
+              "name": "class"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "default": "new Logger(this.host)"
+            },
+            {
+              "kind": "field",
+              "name": "cascadeProperties"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CascadeController",
+          "declaration": {
+            "name": "CascadeController",
+            "module": "controllers/cascade-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/cascade-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CascadeController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "class",
+              "type": {
+                "text": "typeof ReactiveElement"
+              },
+              "privacy": "private",
+              "default": "host.constructor"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "type": {
+                "text": "Logger"
+              },
+              "privacy": "private",
+              "default": "new Logger(this.host)"
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "type": {
+                "text": "WeakMap<ReactiveElement, CascadeController<ReactiveElement>>"
+              },
+              "static": true,
+              "default": "new WeakMap<ReactiveElement, CascadeController<ReactiveElement>>()"
+            },
+            {
+              "kind": "field",
+              "name": "mo",
+              "type": {
+                "text": "MutationObserver"
+              },
+              "default": "new MutationObserver(this.parse)"
+            },
+            {
+              "kind": "field",
+              "name": "cache",
+              "type": {
+                "text": "Map<string, string[]>"
+              },
+              "default": "new Map<string, string[]>()"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "cascadeProperties",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "nodeList",
+                  "default": "this.host.children",
+                  "type": {
+                    "text": "HTMLCollection | NodeList"
+                  },
+                  "optional": true
+                }
+              ],
+              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
+            },
+            {
+              "kind": "method",
+              "name": "initProp",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "propName",
+                  "type": {
+                    "text": "string"
+                  }
+                },
+                {
+                  "name": "cascade",
+                  "type": {
+                    "text": "string | string[]"
+                  }
+                }
+              ],
+              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
+            },
+            {
+              "kind": "method",
+              "name": "parse",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "mutations",
+                  "type": {
+                    "text": "MutationRecord[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "_copyAttribute",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "name",
+                  "type": {
+                    "text": "string"
+                  },
+                  "description": "attr name"
+                },
+                {
+                  "name": "el",
+                  "type": {
+                    "text": "Element"
+                  },
+                  "description": "element"
+                }
+              ],
+              "description": "Copy the named attribute to a target element."
+            },
+            {
+              "kind": "method",
+              "name": "_cascadeAttributes",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "selectors",
+                  "type": {
+                    "text": "IterableIterator<string>"
+                  }
+                },
+                {
+                  "name": "set",
+                  "type": {
+                    "text": "this['cache']"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "_cascadeAttribute",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "name",
+                  "type": {
+                    "text": "string"
+                  },
+                  "description": "The name of the attribute to cascade (not necessarily the same as the property name)."
+                },
+                {
+                  "name": "to",
+                  "type": {
+                    "text": "string"
+                  },
+                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees."
+                }
+              ],
+              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM."
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "E",
+                "name": "E"
+              },
+              "name": "host",
+              "privacy": "public"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "Options<E> | undefined",
+                "name": "Options<E> | undefined"
+              },
+              "name": "options",
+              "privacy": "public"
+            },
+            {
+              "kind": "field",
+              "name": "cascadeProperties"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CascadeController",
+          "declaration": {
+            "name": "CascadeController",
+            "module": "controllers/cascade-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/combobox-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ComboboxController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveControllerHost"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ComboboxController<T>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ComboboxControllerOptions<T>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "type": {
+                "text": "boolean"
+              },
+              "static": true,
+              "description": "Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA."
+            },
+            {
+              "kind": "field",
+              "name": "langs",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "langsRE",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items"
+            },
+            {
+              "kind": "field",
+              "name": "disabled",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "Whether the combobox is disabled"
+            },
+            {
+              "kind": "field",
+              "name": "multi",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "Whether multiselect is enabled"
+            },
+            {
+              "kind": "field",
+              "name": "selected",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "The current selection: a list of items"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "renderItemsToShadowRoot",
+              "return": {
+                "type": {
+                  "text": "Node[] | typeof nothing"
+                }
+              },
+              "description": "For Browsers which do not support `ariaActiveDescendantElement`, we must clone\nthe listbox items into the same root as the combobox input\nCall this method to return either an array of (cloned) list box items, to be placed in your\nshadow template, or nothing in the case the browser supports cross-root aria."
+            }
+          ],
+          "summary": "Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].\n\nCombobox with keyboard and pointer navigation, using the aria-activedescendant pattern.\n\nWARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users\nrely on the combobox input value being announced when navigating the listbox with the keyboard.\nWe have erred on the side that it may be less-broken to avoid announcing disabled items in that\ncase, rather than announcing the disabled items value without indicating that it is disabled."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ComboboxController",
+          "declaration": {
+            "name": "ComboboxController",
+            "module": "controllers/combobox-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/combobox-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ComboboxController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                },
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "static": true,
+              "description": "Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA."
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "description": "All items"
+            },
+            {
+              "kind": "field",
+              "name": "disabled",
+              "description": "Whether the combobox is disabled"
+            },
+            {
+              "kind": "field",
+              "name": "multi",
+              "description": "Whether multiselect is enabled"
+            },
+            {
+              "kind": "field",
+              "name": "selected",
+              "description": "The current selection: a list of items"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "renderItemsToShadowRoot",
+              "description": "For Browsers which do not support `ariaActiveDescendantElement`, we must clone\nthe listbox items into the same root as the combobox input\nCall this method to return either an array of (cloned) list box items, to be placed in your\nshadow template, or nothing in the case the browser supports cross-root aria."
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "type": {
+                "text": "object"
+              },
+              "default": "{\n            isItem,\n            getItemValue,\n            isItemFiltered,\n            isItemDisabled,\n            getComboboxValue,\n            setComboboxValue,\n            setItemHidden,\n            getOrientation: () => 'vertical',\n            ...options,\n        }"
+            }
+          ],
+          "summary": "Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].\n\nCombobox with keyboard and pointer navigation, using the aria-activedescendant pattern.\n\nWARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users\nrely on the combobox input value being announced when navigating the listbox with the keyboard.\nWe have erred on the side that it may be less-broken to avoid announcing disabled items in that\ncase, rather than announcing the disabled items value without indicating that it is disabled."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ComboboxController",
+          "declaration": {
+            "name": "ComboboxController",
+            "module": "controllers/combobox-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/combobox-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ComboboxController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "of",
+              "privacy": "public",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ComboboxController<T>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ComboboxControllerOptions<T>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "supportsCrossRootActiveDescendant",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "public",
+              "static": true,
+              "description": "Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA."
+            },
+            {
+              "kind": "field",
+              "name": "#alert",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | undefined"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "#alertTemplate",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "langs",
+              "privacy": "private",
+              "static": true,
+              "default": "[\n    'en',\n    'es',\n    'de',\n    'fr',\n    'it',\n    'ja',\n    'zh',\n  ]",
+              "type": {
+                "text": "[\n    'en',\n    'es',\n    'de',\n    'fr',\n    'it',\n    'ja',\n    'zh',\n  ]"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "langsRE",
+              "privacy": "private",
+              "static": true,
+              "default": "new RegExp(ComboboxController.langs.join('|'))"
+            },
+            {
+              "kind": "field",
+              "name": "",
+              "static": true
+            }
+          ],
+          "summary": "Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].\n\nCombobox with keyboard and pointer navigation, using the aria-activedescendant pattern.\n\nWARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users\nrely on the combobox input value being announced when navigating the listbox with the keyboard.\nWe have erred on the side that it may be less-broken to avoid announcing disabled items in that\ncase, rather than announcing the disabled items value without indicating that it is disabled."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ComboboxController",
+          "declaration": {
+            "name": "ComboboxController",
+            "module": "controllers/combobox-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/css-variable-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CssVariableController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "style",
+              "type": {
+                "text": "CSSStyleDeclaration | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "parseProperty",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "getVariable",
+              "return": {
+                "type": {
+                  "text": "string | null"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "name",
+                  "type": {
+                    "text": "string"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CssVariableController",
+          "declaration": {
+            "name": "CssVariableController",
+            "module": "controllers/css-variable-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/css-variable-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CssVariableController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "parseProperty",
+              "parameters": [
+                {
+                  "name": "name"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "getVariable",
+              "parameters": [
+                {
+                  "name": "name"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CssVariableController",
+          "declaration": {
+            "name": "CssVariableController",
+            "module": "controllers/css-variable-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/css-variable-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "CssVariableController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "style",
+              "type": {
+                "text": "CSSStyleDeclaration | undefined"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "parseProperty",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "name",
+                  "type": {
+                    "text": "string"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "getVariable",
+              "return": {
+                "type": {
+                  "text": "string | null"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "name",
+                  "type": {
+                    "text": "string"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveElement",
+                "name": "ReactiveElement",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "CssVariableController",
+          "declaration": {
+            "name": "CssVariableController",
+            "module": "controllers/css-variable-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/floating-dom-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
+          "name": "FloatingDOMController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "alignment",
+              "type": {
+                "text": "Alignment"
+              },
+              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "anchor",
+              "type": {
+                "text": "Anchor"
+              },
+              "description": "The side of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "open",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "When true, the floating DOM is visible"
+            },
+            {
+              "kind": "field",
+              "name": "placement",
+              "type": {
+                "text": "Placement"
+              },
+              "description": "The computed placement of the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "styles",
+              "type": {
+                "text": "StyleInfo"
+              },
+              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "show",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "{ offset, placement, flip, fallbackPlacements }",
+                  "optional": true,
+                  "type": {
+                    "text": "ShowOptions"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true
+                },
+                {
+                  "name": "options.offset"
+                },
+                {
+                  "name": "options.placement"
+                },
+                {
+                  "name": "options.flip"
+                },
+                {
+                  "name": "options.fallbackPlacements"
+                }
+              ],
+              "description": "Show the floating DOM"
+            },
+            {
+              "kind": "method",
+              "name": "hide",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "description": "Hide the floating DOM"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "Placement",
+          "declaration": {
+            "name": "Placement",
+            "module": "controllers/floating-dom-controller.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "FloatingDOMController",
+          "declaration": {
+            "name": "FloatingDOMController",
+            "module": "controllers/floating-dom-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/floating-dom-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
+          "name": "FloatingDOMController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "alignment",
+              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "anchor",
+              "description": "The side of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "open",
+              "description": "When true, the floating DOM is visible"
+            },
+            {
+              "kind": "field",
+              "name": "placement",
+              "description": "The computed placement of the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "styles",
+              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "show",
+              "parameters": [
+                {
+                  "name": "{ offset, placement, flip, fallbackPlacements }",
+                  "default": "{}"
+                },
+                {
+                  "name": "options",
+                  "optional": true
+                },
+                {
+                  "name": "options.offset"
+                },
+                {
+                  "name": "options.placement"
+                },
+                {
+                  "name": "options.flip"
+                },
+                {
+                  "name": "options.fallbackPlacements"
+                }
+              ],
+              "description": "Show the floating DOM"
+            },
+            {
+              "kind": "method",
+              "name": "hide",
+              "description": "Hide the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "FloatingDOMController",
+          "declaration": {
+            "name": "FloatingDOMController",
+            "module": "controllers/floating-dom-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/floating-dom-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
+          "name": "FloatingDOMController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#open",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "#opening",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "#cleanup",
+              "privacy": "private",
+              "type": {
+                "text": "() => void | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#anchor",
+              "privacy": "private",
+              "type": {
+                "text": "Anchor | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#alignment",
+              "privacy": "private",
+              "type": {
+                "text": "Alignment | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#styles",
+              "privacy": "private",
+              "type": {
+                "text": "StyleInfo | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#placement",
+              "privacy": "private",
+              "type": {
+                "text": "Placement | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#options",
+              "privacy": "private",
+              "type": {
+                "text": "FloatingDOMControllerOptions"
+              },
+              "default": "{\n      invoker: (() => host as LitElement),\n      shift: true,\n      ...options,\n    }"
+            },
+            {
+              "kind": "field",
+              "name": "#invoker",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "#content",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "#arrow",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "alignment",
+              "type": {
+                "text": "Alignment"
+              },
+              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "anchor",
+              "type": {
+                "text": "Anchor"
+              },
+              "description": "The side of the invoker on which to display the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "open",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "When true, the floating DOM is visible"
+            },
+            {
+              "kind": "field",
+              "name": "placement",
+              "type": {
+                "text": "Placement"
+              },
+              "description": "The computed placement of the floating DOM"
+            },
+            {
+              "kind": "field",
+              "name": "styles",
+              "type": {
+                "text": "StyleInfo"
+              },
+              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#update",
+              "parameters": [
+                {
+                  "name": "placement",
+                  "default": "'top'",
+                  "type": {
+                    "text": "Placement"
+                  }
+                },
+                {
+                  "name": "offset",
+                  "optional": true,
+                  "type": {
+                    "text": "Offset"
+                  }
+                },
+                {
+                  "name": "flip",
+                  "default": "true"
+                },
+                {
+                  "name": "fallbackPlacements",
+                  "optional": true,
+                  "type": {
+                    "text": "Placement[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "show",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "{ offset, placement, flip, fallbackPlacements }",
+                  "default": "{}",
+                  "type": {
+                    "text": "ShowOptions"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true
+                },
+                {
+                  "name": "options.offset"
+                },
+                {
+                  "name": "options.placement"
+                },
+                {
+                  "name": "options.flip"
+                },
+                {
+                  "name": "options.fallbackPlacements"
+                }
+              ],
+              "description": "Show the floating DOM"
+            },
+            {
+              "kind": "method",
+              "name": "hide",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "description": "Hide the floating DOM"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "Placement",
+          "declaration": {
+            "name": "Placement",
+            "module": "controllers/floating-dom-controller.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "FloatingDOMController",
+          "declaration": {
+            "name": "FloatingDOMController",
+            "module": "controllers/floating-dom-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/internals-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "InternalsController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveControllerHost"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "form",
+              "type": {
+                "text": "ElementInternals['form']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "shadowRoot",
+              "type": {
+                "text": "ElementInternals['shadowRoot']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "states",
+              "type": {
+                "text": "unknown"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "willValidate",
+              "type": {
+                "text": "ElementInternals['willValidate']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "validationMessage",
+              "type": {
+                "text": "ElementInternals['validationMessage']"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "getLabels",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "Element[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "isSafari",
+              "type": {
+                "text": "boolean"
+              },
+              "static": true
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "InternalsController"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "type": {
+                    "text": "InternalsControllerOptions"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "role",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaActivedescendant",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaAtomic",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaAutoComplete",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaBusy",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleLabel",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleRoleDescription",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaChecked",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaColCount",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndex",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndexText",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaColSpan",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaCurrent",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescription",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaDisabled",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaExpanded",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaHasPopup",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaHidden",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaInvalid",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaKeyShortcuts",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabel",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaLevel",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaLive",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaModal",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiLine",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiSelectable",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaOrientation",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaPlaceholder",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaPosInSet",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaPressed",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaReadOnly",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRequired",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRoleDescription",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowCount",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndex",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndexText",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowSpan",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaSelected",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaSetSize",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaSort",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMax",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMin",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueNow",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueText",
+              "type": {
+                "text": "string | null"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "ariaActiveDescendantElement",
+              "type": {
+                "text": "Element | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaControlsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescribedByElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDetailsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaErrorMessageElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaFlowToElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabelledByElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaOwnsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "formDisabled",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "True when the control is disabled via it's containing fieldset element"
+            },
+            {
+              "kind": "field",
+              "name": "labels",
+              "type": {
+                "text": "NodeList"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "validity",
+              "type": {
+                "text": "ValidityState"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "computedLabelText",
+              "type": {
+                "text": "string"
+              },
+              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
+            },
+            {
+              "kind": "field",
+              "name": "element",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "internals",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "_formDisabled",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "attachOrRetrieveInternals",
+              "privacy": "private",
+              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
+            },
+            {
+              "kind": "field",
+              "name": "initializeOptions",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "setFormValue",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['setFormValue']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "setValidity",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['setValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "checkValidity",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['checkValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "reportValidity",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['reportValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "submit",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "reset",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "InternalsController",
+          "declaration": {
+            "name": "InternalsController",
+            "module": "controllers/internals-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/internals-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "InternalsController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "getLabels",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                },
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "formDisabled",
+              "description": "True when the control is disabled via it's containing fieldset element"
+            },
+            {
+              "kind": "field",
+              "name": "labels"
+            },
+            {
+              "kind": "field",
+              "name": "validity"
+            },
+            {
+              "kind": "field",
+              "name": "computedLabelText",
+              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
+            },
+            {
+              "kind": "field",
+              "name": "element"
+            },
+            {
+              "kind": "method",
+              "name": "attachOrRetrieveInternals",
+              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
+            },
+            {
+              "kind": "method",
+              "name": "initializeOptions",
+              "parameters": [
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "setFormValue",
+              "parameters": [
+                {
+                  "name": "args"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "setValidity",
+              "parameters": [
+                {
+                  "name": "args"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "checkValidity",
+              "parameters": [
+                {
+                  "name": "args"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "reportValidity",
+              "parameters": [
+                {
+                  "name": "args"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "submit"
+            },
+            {
+              "kind": "method",
+              "name": "reset"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "role",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaActivedescendant",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaAtomic",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaAutoComplete",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBusy",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleLabel",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleRoleDescription",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaChecked",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColCount",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndex",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndexText",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColSpan",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaCurrent",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescription",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDisabled",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaExpanded",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaHasPopup",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaHidden",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaInvalid",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaKeyShortcuts",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabel",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLevel",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLive",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaModal",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiLine",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiSelectable",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaOrientation",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPlaceholder",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPosInSet",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPressed",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaReadOnly",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRequired",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRoleDescription",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowCount",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndex",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndexText",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowSpan",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSelected",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSetSize",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSort",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMax",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMin",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueNow",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueText",
+              "type": {
+                "text": "null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaActiveDescendantElement",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaControlsElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescribedByElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDetailsElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaErrorMessageElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaFlowToElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabelledByElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaOwnsElements",
+              "type": {
+                "text": "null"
+              },
+              "description": "WARNING: be careful of cross-root ARIA browser support",
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "_formDisabled",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "InternalsController",
+          "declaration": {
+            "name": "InternalsController",
+            "module": "controllers/internals-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/internals-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "InternalsController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true,
+              "default": "new WeakMap<ReactiveControllerHost, InternalsController>()"
+            },
+            {
+              "kind": "field",
+              "name": "form",
+              "type": {
+                "text": "ElementInternals['form']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "shadowRoot",
+              "type": {
+                "text": "ElementInternals['shadowRoot']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "states",
+              "type": {
+                "text": "unknown"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "willValidate",
+              "type": {
+                "text": "ElementInternals['willValidate']"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "validationMessage",
+              "type": {
+                "text": "ElementInternals['validationMessage']"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "getLabels",
+              "privacy": "public",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "Element[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "isSafari",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "public",
+              "static": true
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "privacy": "public",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "InternalsController"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "optional": true,
+                  "type": {
+                    "text": "InternalsControllerOptions"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "role",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaActivedescendant",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaAtomic",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaAutoComplete",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBusy",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleLabel",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaBrailleRoleDescription",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaChecked",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColCount",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndex",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColIndexText",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaColSpan",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaCurrent",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescription",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDisabled",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaExpanded",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaHasPopup",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaHidden",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaInvalid",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaKeyShortcuts",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabel",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLevel",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLive",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaModal",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiLine",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaMultiSelectable",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaOrientation",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPlaceholder",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPosInSet",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaPressed",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaReadOnly",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRequired",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRoleDescription",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowCount",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndex",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowIndexText",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaRowSpan",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSelected",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSetSize",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaSort",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMax",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueMin",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueNow",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaValueText",
+              "type": {
+                "text": "string | null"
+              },
+              "default": "null"
+            },
+            {
+              "kind": "field",
+              "name": "ariaActiveDescendantElement",
+              "type": {
+                "text": "Element | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaControlsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDescribedByElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaDetailsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaErrorMessageElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaFlowToElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaLabelledByElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "ariaOwnsElements",
+              "type": {
+                "text": "Element[] | null"
+              },
+              "default": "null",
+              "description": "WARNING: be careful of cross-root ARIA browser support"
+            },
+            {
+              "kind": "field",
+              "name": "formDisabled",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "True when the control is disabled via it's containing fieldset element"
+            },
+            {
+              "kind": "field",
+              "name": "labels",
+              "type": {
+                "text": "NodeList"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "validity",
+              "type": {
+                "text": "ValidityState"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "computedLabelText",
+              "type": {
+                "text": "string"
+              },
+              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
+            },
+            {
+              "kind": "field",
+              "name": "element",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "internals",
+              "type": {
+                "text": "ElementInternals"
+              },
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "_formDisabled",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "private",
+              "default": "false"
+            },
+            {
+              "kind": "method",
+              "name": "#polyfillDisabledPseudo",
+              "description": "We need to polyfill :disabled\nsee https://github.com/calebdwilliams/element-internals-polyfill/issues/88"
+            },
+            {
+              "kind": "method",
+              "name": "attachOrRetrieveInternals",
+              "privacy": "private",
+              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
+            },
+            {
+              "kind": "method",
+              "name": "initializeOptions",
+              "privacy": "private",
+              "parameters": [
+                {
+                  "name": "options",
+                  "optional": true,
+                  "type": {
+                    "text": "Partial<ARIAMixin>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "setFormValue",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['setFormValue']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "setValidity",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['setValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "checkValidity",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['checkValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "reportValidity",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "args",
+                  "type": {
+                    "text": "Parameters<ElementInternals['reportValidity']>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "submit",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "reset",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "InternalsControllerOptions",
+                "name": "InternalsControllerOptions"
+              },
+              "name": "options",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "InternalsController",
+          "declaration": {
+            "name": "InternalsController",
+            "module": "controllers/internals-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/light-dom-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "LightDOMController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "mo",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "initializer",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "name": "initObserver",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hasLightDOM",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "LightDOMController",
+          "declaration": {
+            "name": "LightDOMController",
+            "module": "controllers/light-dom-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/light-dom-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "LightDOMController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "initObserver"
+            },
+            {
+              "kind": "method",
+              "name": "hasLightDOM",
+              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "initializer"
+            },
+            {
+              "kind": "field",
+              "name": "mo",
+              "default": "new MutationObserver(this.initializer)"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "default": "new Logger(this.host)"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "LightDOMController",
+          "declaration": {
+            "name": "LightDOMController",
+            "module": "controllers/light-dom-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/light-dom-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "LightDOMController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "mo",
+              "type": {
+                "text": "MutationObserver"
+              },
+              "privacy": "private",
+              "default": "new MutationObserver(this.initializer)"
+            },
+            {
+              "kind": "field",
+              "name": "logger",
+              "type": {
+                "text": "Logger"
+              },
+              "privacy": "private",
+              "default": "new Logger(this.host)"
+            },
+            {
+              "kind": "field",
+              "name": "initializer",
+              "type": {
+                "text": "() => void"
+              },
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initObserver",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hasLightDOM",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveElement",
+                "name": "ReactiveElement",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "Options | undefined",
+                "name": "Options | undefined"
+              },
+              "name": "options",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "LightDOMController",
+          "declaration": {
+            "name": "LightDOMController",
+            "module": "controllers/light-dom-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/listbox-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isItem",
+          "return": {
+            "type": {
+              "text": "item is Item"
+            }
+          },
+          "parameters": [
+            {
+              "name": "item",
+              "type": {
+                "text": "EventTarget | null"
+              },
+              "description": "possible disabled item"
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "isItemDisabled",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "item",
+              "type": {
+                "text": "Item"
+              },
+              "description": "possibly disabled item"
+            }
+          ],
+          "description": "This is a fib. aria-disabled might not be present on an element that uses internals,\nand the `disabled` attribute may not accurately represent the disabled state.\nshort of patching the `attachInternals` constructor, it may not be possible at\nruntime to know with certainty that an arbitrary custom element is disabled or not."
+        },
+        {
+          "kind": "class",
+          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
+          "name": "ListboxController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveControllerHost"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ListboxController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ListboxControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "disabled",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "Whether listbox is disabled"
+            },
+            {
+              "kind": "field",
+              "name": "container",
+              "type": {
+                "text": "HTMLElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "multi",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "register's the host's Item elements as listbox controller items\nsets aria-setsize and aria-posinset on items",
+              "parameters": [
+                {
+                  "description": "items",
+                  "name": "items"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "selected",
+              "description": "array of options which are selected",
+              "parameters": [
+                {
+                  "description": "item or items",
+                  "name": "selected"
+                }
+              ],
+              "type": {
+                "text": "Item[]"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "isSelected",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "item",
+                  "type": {
+                    "text": "Item"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isItem",
+          "declaration": {
+            "name": "isItem",
+            "module": "controllers/listbox-controller.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "isItemDisabled",
+          "declaration": {
+            "name": "isItemDisabled",
+            "module": "controllers/listbox-controller.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ListboxController",
+          "declaration": {
+            "name": "ListboxController",
+            "module": "controllers/listbox-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/listbox-controller.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isItem",
+          "parameters": [
+            {
+              "name": "item",
+              "description": "possible disabled item"
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "isItemDisabled",
+          "parameters": [
+            {
+              "name": "item",
+              "description": "possibly disabled item"
+            }
+          ],
+          "description": "This is a fib. aria-disabled might not be present on an element that uses internals,\nand the `disabled` attribute may not accurately represent the disabled state.\nshort of patching the `attachInternals` constructor, it may not be possible at\nruntime to know with certainty that an arbitrary custom element is disabled or not."
+        },
+        {
+          "kind": "class",
+          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
+          "name": "ListboxController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                },
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "container"
+            },
+            {
+              "kind": "field",
+              "name": "multi"
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "description": "register's the host's Item elements as listbox controller items\nsets aria-setsize and aria-posinset on items",
+              "parameters": [
+                {
+                  "description": "items",
+                  "name": "items"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "selected",
+              "description": "array of options which are selected",
+              "parameters": [
+                {
+                  "description": "item or items",
+                  "name": "selected"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "isSelected",
+              "parameters": [
+                {
+                  "name": "item"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "disabled",
+              "type": {
+                "text": "boolean"
+              },
+              "description": "Whether listbox is disabled",
+              "default": "false"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isItem",
+          "declaration": {
+            "name": "isItem",
+            "module": "controllers/listbox-controller.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "isItemDisabled",
+          "declaration": {
+            "name": "isItemDisabled",
+            "module": "controllers/listbox-controller.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ListboxController",
+          "declaration": {
+            "name": "ListboxController",
+            "module": "controllers/listbox-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/listbox-controller.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isItem",
+          "return": {
+            "type": {
+              "text": "item is Item"
+            }
+          },
+          "parameters": [
+            {
+              "name": "item",
+              "type": {
+                "text": "EventTarget | null"
+              },
+              "description": "possible disabled item"
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "isItemDisabled",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "item",
+              "type": {
+                "text": "Item"
+              },
+              "description": "possibly disabled item"
+            }
+          ],
+          "description": "This is a fib. aria-disabled might not be present on an element that uses internals,\nand the `disabled` attribute may not accurately represent the disabled state.\nshort of patching the `attachInternals` constructor, it may not be possible at\nruntime to know with certainty that an arbitrary custom element is disabled or not."
+        },
+        {
+          "kind": "class",
+          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
+          "name": "ListboxController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true,
+              "default": "new WeakMap<ReactiveControllerHost, ListboxController<HTMLElement>>()"
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "privacy": "public",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "ListboxController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "ListboxControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#shiftStartingItem",
+              "privacy": "private",
+              "type": {
+                "text": "Item | null"
+              },
+              "default": "null",
+              "description": "Current active descendant when shift key is pressed"
+            },
+            {
+              "kind": "field",
+              "name": "#options",
+              "privacy": "private",
+              "type": {
+                "text": "RequireProps<ListboxControllerOptions<Item>,\n    | 'setItemSelected'\n    | 'isItemDisabled'\n    | 'isItem'\n  >"
+              },
+              "default": "{ setItemSelected, isItemDisabled, isItem, ...options }"
+            },
+            {
+              "kind": "field",
+              "name": "#items",
+              "privacy": "private",
+              "type": {
+                "text": "Item[]"
+              },
+              "default": "[]",
+              "description": "All items"
+            },
+            {
+              "kind": "field",
+              "name": "#selectedItems",
+              "privacy": "private",
+              "default": "new Set<Item>"
+            },
+            {
+              "kind": "field",
+              "name": "#listening",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "disabled",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false",
+              "description": "Whether listbox is disabled"
+            },
+            {
+              "kind": "field",
+              "name": "container",
+              "type": {
+                "text": "HTMLElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "multi",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "register's the host's Item elements as listbox controller items\nsets aria-setsize and aria-posinset on items",
+              "parameters": [
+                {
+                  "description": "items",
+                  "name": "items"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "selected",
+              "description": "array of options which are selected",
+              "parameters": [
+                {
+                  "description": "item or items",
+                  "name": "selected"
+                }
+              ],
+              "type": {
+                "text": "Item[]"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#controlsElements",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "default": "[]"
+            },
+            {
+              "kind": "method",
+              "name": "#removeControlsListeners",
+              "parameters": [
+                {
+                  "name": "els",
+                  "default": "this.#controlsElements"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "isSelected",
+              "privacy": "public",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "item",
+                  "type": {
+                    "text": "Item"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#isExpanded",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "#getItemFromEvent",
+              "return": {
+                "type": {
+                  "text": "Item | null"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "Event"
+                  },
+                  "description": "click or keyboard event"
+                }
+              ],
+              "description": "In the case where aria IDL attributes are not supported,\nwe need to correlate the item in the event path (i.e. the shadow dom clone)\nwith the item in listbox controller's root (i.e. the hidden light dom original)\nXXX: as long as there is no DOM preceeding the shadow root clones, this will work"
+            },
+            {
+              "kind": "field",
+              "name": "#onClick",
+              "privacy": "private",
+              "description": "handles clicking on a listbox option:\nwhich selects an item by default\nor toggles selection if multiselectable",
+              "parameters": [
+                {
+                  "description": "click event",
+                  "name": "event"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#onKeyup",
+              "privacy": "private",
+              "description": "track whether shift key is being used for multiselectable listbox",
+              "parameters": [
+                {
+                  "description": "keyup event",
+                  "name": "event"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#onKeydown",
+              "privacy": "private",
+              "description": "filters listbox by keyboard event when slotted option has focus,\nor by external element such as a text field",
+              "parameters": [
+                {
+                  "description": "keydown event",
+                  "name": "event"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "#selectItem",
+              "parameters": [
+                {
+                  "name": "item",
+                  "type": {
+                    "text": "Item"
+                  }
+                },
+                {
+                  "name": "shiftDown",
+                  "default": "false"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isItem",
+          "declaration": {
+            "name": "isItem",
+            "module": "controllers/listbox-controller.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "isItemDisabled",
+          "declaration": {
+            "name": "isItemDisabled",
+            "module": "controllers/listbox-controller.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "ListboxController",
+          "declaration": {
+            "name": "ListboxController",
+            "module": "controllers/listbox-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/logger.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "Logger",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "logDebug",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "prefix",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "debugLog",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "preference",
+                  "optional": true,
+                  "type": {
+                    "text": "null"
+                  }
+                }
+              ],
+              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console warning wrapper which formats your output with useful debugging information."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Debug logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Info logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "Logger",
+          "declaration": {
+            "name": "Logger",
+            "module": "controllers/logger.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/logger.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "Logger",
+          "members": [
+            {
+              "kind": "field",
+              "name": "prefix"
+            },
+            {
+              "kind": "method",
+              "name": "debugLog",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "preference",
+                  "default": "null",
+                  "optional": true
+                }
+              ],
+              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console warning wrapper which formats your output with useful debugging information."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Debug logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Info logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "Logger",
+          "declaration": {
+            "name": "Logger",
+            "module": "controllers/logger.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/logger.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "Logger",
+          "members": [
+            {
+              "kind": "field",
+              "name": "logDebug",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "private",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "instances",
+              "privacy": "private",
+              "static": true,
+              "default": "new WeakMap<ReactiveControllerHost, Logger>()"
+            },
+            {
+              "kind": "field",
+              "name": "prefix",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "debugLog",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "preference",
+                  "default": "null",
+                  "optional": true
+                }
+              ],
+              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console warning wrapper which formats your output with useful debugging information."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "debug",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Debug logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "info",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Info logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "log",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local logging that outputs the tag name as a prefix automatically"
+            },
+            {
+              "kind": "method",
+              "name": "warn",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "error",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "msgs",
+                  "type": {
+                    "text": "unknown[]"
+                  },
+                  "description": "console.log params"
+                }
+              ],
+              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "Logger",
+          "declaration": {
+            "name": "Logger",
+            "module": "controllers/logger.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/overflow-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "OverflowController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "showScrollButtons",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "overflowLeft",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "overflowRight",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "firstItem",
+              "type": {
+                "text": "HTMLElement | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "lastItem",
+              "type": {
+                "text": "HTMLElement | undefined"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "init",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "container",
+                  "type": {
+                    "text": "HTMLElement"
+                  }
+                },
+                {
+                  "name": "items",
+                  "type": {
+                    "text": "HTMLElement[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "onScroll",
+              "type": {
+                "text": "() => void"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "scrollLeft",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "scrollRight",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "update",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "OverflowController",
+          "declaration": {
+            "name": "OverflowController",
+            "module": "controllers/overflow-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/overflow-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "OverflowController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "firstItem"
+            },
+            {
+              "kind": "field",
+              "name": "lastItem"
+            },
+            {
+              "kind": "method",
+              "name": "init",
+              "parameters": [
+                {
+                  "name": "container"
+                },
+                {
+                  "name": "items"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "scrollLeft"
+            },
+            {
+              "kind": "method",
+              "name": "scrollRight"
+            },
+            {
+              "kind": "method",
+              "name": "update"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "showScrollButtons",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "overflowLeft",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "overflowRight",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "onScroll"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "OverflowController",
+          "declaration": {
+            "name": "OverflowController",
+            "module": "controllers/overflow-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/overflow-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "OverflowController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#instances",
+              "privacy": "private",
+              "static": true,
+              "default": "new Set<OverflowController>()"
+            },
+            {
+              "kind": "field",
+              "name": "",
+              "static": true
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "OverflowController",
+          "declaration": {
+            "name": "OverflowController",
+            "module": "controllers/overflow-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/perf-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PerfController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "hasMeasured",
+              "type": {
+                "text": "boolean"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "markId",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "measure",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PerfController",
+          "declaration": {
+            "name": "PerfController",
+            "module": "controllers/perf-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/perf-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PerfController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostUpdate"
+            },
+            {
+              "kind": "method",
+              "name": "measure"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "hasMeasured",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PerfController",
+          "declaration": {
+            "name": "PerfController",
+            "module": "controllers/perf-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/perf-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PerfController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "hasMeasured",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "markId",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "measure",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveElement",
+                "name": "ReactiveElement",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PerfController",
+          "declaration": {
+            "name": "PerfController",
+            "module": "controllers/perf-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/property-observer-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PropertyObserverController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "oldVal",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "description": "Set any cached valued accumulated between constructor and connectedCallback"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PropertyObserverController",
+          "declaration": {
+            "name": "PropertyObserverController",
+            "module": "controllers/property-observer-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/property-observer-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PropertyObserverController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "description": "Set any cached valued accumulated between constructor and connectedCallback"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "options",
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "oldVal",
+              "default": "UNINITIALIZED"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PropertyObserverController",
+          "declaration": {
+            "name": "PropertyObserverController",
+            "module": "controllers/property-observer-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/property-observer-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "PropertyObserverController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "oldVal",
+              "type": {
+                "text": "T[keyof T]"
+              },
+              "privacy": "private",
+              "default": "UNINITIALIZED"
+            },
+            {
+              "kind": "field",
+              "name": "#neverRan",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "true"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#init",
+              "description": "Because of how typescript transpiles private fields,\nthe __accessPrivate helper might not be entirely initialized\nby the time this constructor runs (in `addInitializer`'s instance callback')\nTherefore, we pull this shtick.\n\nWhen browser support improves to the point we can ship decorated private fields,\nwe'll be able to get rid of this."
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "description": "Set any cached valued accumulated between constructor and connectedCallback"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "T",
+                "name": "T"
+              },
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "PropertyObserverOptions<T>",
+                "name": "PropertyObserverOptions<T>"
+              },
+              "name": "options",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "PropertyObserverController",
+          "declaration": {
+            "name": "PropertyObserverController",
+            "module": "controllers/property-observer-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/roving-tabindex-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
+          "name": "RovingTabindexController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "RovingTabindexController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "RovingTabindexControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Sets the DOM Focus on the item with assistive technology focus",
+              "type": {
+                "text": "number"
+              },
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  }
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "RovingTabindexController",
+          "declaration": {
+            "name": "RovingTabindexController",
+            "module": "controllers/roving-tabindex-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/roving-tabindex-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
+          "name": "RovingTabindexController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "parameters": [
+                {
+                  "name": "host"
+                },
+                {
+                  "name": "options"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Sets the DOM Focus on the item with assistive technology focus",
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event"
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "default": "host",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "RovingTabindexController",
+          "declaration": {
+            "name": "RovingTabindexController",
+            "module": "controllers/roving-tabindex-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/roving-tabindex-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
+          "name": "RovingTabindexController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "of",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "RovingTabindexController<Item>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "host",
+                  "type": {
+                    "text": "ReactiveControllerHost"
+                  }
+                },
+                {
+                  "name": "options",
+                  "type": {
+                    "text": "RovingTabindexControllerOptions<Item>"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#logger",
+              "privacy": "private",
+              "default": "new Logger(this.host)"
+            },
+            {
+              "kind": "field",
+              "name": "#gainedInitialFocus",
+              "privacy": "private",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            },
+            {
+              "kind": "field",
+              "name": "#itemsSet",
+              "privacy": "private",
+              "default": "new Set<Item>()"
+            },
+            {
+              "kind": "field",
+              "name": "atFocusedItemIndex",
+              "description": "Sets the DOM Focus on the item with assistive technology focus",
+              "type": {
+                "text": "number"
+              },
+              "parameters": [
+                {
+                  "description": "item",
+                  "name": "item"
+                }
+              ],
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "items",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items",
+              "privacy": "public",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "onKeydown",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "event",
+                  "type": {
+                    "text": "KeyboardEvent"
+                  }
+                }
+              ],
+              "description": "Override and conditionally call `super.onKeydown` to filter out keyboard events\nwhich should not result in a focus change. Ensure that subclass' method is bound",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveControllerHost",
+                "name": "ReactiveControllerHost",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "public",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#itemsContainerElement",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement | null"
+              },
+              "default": "null",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#atFocusedItemIndex",
+              "privacy": "private",
+              "type": {
+                "text": "number"
+              },
+              "default": "-1",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "_items",
+              "type": {
+                "text": "Item[]"
+              },
+              "privacy": "protected",
+              "default": "[]",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "controlsElements",
+              "type": {
+                "text": "HTMLElement[]"
+              },
+              "privacy": "protected",
+              "description": "Elements which control the items container e.g. a combobox input",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "atFocusableItems",
+              "type": {
+                "text": "Item[]"
+              },
+              "description": "All items which are able to receive assistive technology focus",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "itemsContainerElement",
+              "description": "The element containing focusable items, e.g. a listbox",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "initItems",
+              "privacy": "protected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "description": "Initialize the items and itemsContainerElement fields",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdate",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#initContainer",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ATFocusControllerOptions<Item>",
+                "name": "ATFocusControllerOptions<Item>"
+              },
+              "name": "options",
+              "privacy": "protected",
+              "inheritedFrom": {
+                "name": "ATFocusController",
+                "module": "controllers/at-focus-controller.ts"
+              }
+            }
+          ],
+          "superclass": {
+            "name": "ATFocusController",
+            "module": "/controllers/at-focus-controller.js"
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "RovingTabindexController",
+          "declaration": {
+            "name": "RovingTabindexController",
+            "module": "controllers/roving-tabindex-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/scroll-spy-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ScrollSpyController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "root",
+              "type": {
+                "text": "Element | Document | null | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "rootMargin",
+              "type": {
+                "text": "string | undefined"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "threshold",
+              "type": {
+                "text": "number | number[]"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "setActive",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "link",
+                  "type": {
+                    "text": "EventTarget | null"
+                  },
+                  "description": "usually an `<a>`"
+                }
+              ],
+              "description": "Explicitly set the active item"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ScrollSpyController",
+          "declaration": {
+            "name": "ScrollSpyController",
+            "module": "controllers/scroll-spy-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/scroll-spy-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ScrollSpyController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "root"
+            },
+            {
+              "kind": "field",
+              "name": "rootMargin"
+            },
+            {
+              "kind": "field",
+              "name": "threshold"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "setActive",
+              "parameters": [
+                {
+                  "name": "link",
+                  "description": "usually an `<a>`"
+                }
+              ],
+              "description": "Explicitly set the active item"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ScrollSpyController",
+          "declaration": {
+            "name": "ScrollSpyController",
+            "module": "controllers/scroll-spy-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/scroll-spy-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "ScrollSpyController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#instances",
+              "privacy": "private",
+              "static": true,
+              "default": "new Set<ScrollSpyController>"
+            },
+            {
+              "kind": "field",
+              "name": "",
+              "static": true
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "ScrollSpyController",
+          "declaration": {
+            "name": "ScrollSpyController",
+            "module": "controllers/scroll-spy-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller-server.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "default",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "anonymous",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true,
+              "deprecated": "use `default`"
+            },
+            {
+              "kind": "field",
+              "name": "attribute",
+              "type": {
+                "text": "\"ssr-hint-has-slotted\""
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "anonymousAttribute",
+              "type": {
+                "text": "\"ssr-hint-has-slotted-default\""
+              },
+              "static": true
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "name": "fromAttribute",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "return": {
+                "type": {
+                  "text": "T[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "_",
+                  "type": {
+                    "text": "string[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null)[]"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null)[]"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller-server.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller-server.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "fromAttribute",
+              "parameters": [
+                {
+                  "name": "slots"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "parameters": [
+                {
+                  "name": "_"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "parameters": [
+                {
+                  "name": "names"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "parameters": [
+                {
+                  "name": "names"
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller-server.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller-server.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "default",
+              "privacy": "public",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "satisfies"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller-server.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isObjectSpread",
+          "return": {
+            "type": {
+              "text": "config is [SlotsConfig]"
+            }
+          },
+          "parameters": [
+            {
+              "name": "config",
+              "type": {
+                "text": "SlotControllerArgs"
+              }
+            }
+          ]
+        },
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotControllerPublicAPI",
+          "members": [
+            {
+              "kind": "field",
+              "name": "default",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "return": {
+                "type": {
+                  "text": "T[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "slotNames",
+                  "type": {
+                    "text": "string[]"
+                  },
+                  "description": "slots to query"
+                }
+              ],
+              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to check."
+                }
+              ],
+              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "return": {
+                "type": {
+                  "text": ""
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to query.  If no value is provided, it returns the default slot."
+                }
+              ],
+              "description": "Whether or not all the requested slots are empty."
+            }
+          ]
+        },
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "default",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "anonymous",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true,
+              "deprecated": "use `default`"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "return": {
+                "type": {
+                  "text": "T[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "slotNames",
+                  "type": {
+                    "text": "string[]"
+                  },
+                  "description": "slots to query"
+                }
+              ],
+              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to check."
+                }
+              ],
+              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "return": {
+                "type": {
+                  "text": ""
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to query.  If no value is provided, it returns the default slot."
+                }
+              ],
+              "description": "Whether or not all the requested slots are empty."
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isObjectSpread",
+          "declaration": {
+            "name": "isObjectSpread",
+            "module": "controllers/slot-controller.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "SlotControllerPublicAPI",
+          "declaration": {
+            "name": "SlotControllerPublicAPI",
+            "module": "controllers/slot-controller.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isObjectSpread",
+          "parameters": [
+            {
+              "name": "config"
+            }
+          ]
+        },
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "parameters": [
+                {
+                  "name": "slotNames",
+                  "description": "slots to query"
+                }
+              ],
+              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "parameters": [
+                {
+                  "name": "names",
+                  "description": "The slot names to check."
+                }
+              ],
+              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "parameters": [
+                {
+                  "name": "names",
+                  "description": "The slot names to query.  If no value is provided, it returns the default slot."
+                }
+              ],
+              "description": "Whether or not all the requested slots are empty.",
+              "return": {
+                "type": {
+                  "text": ""
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isObjectSpread",
+          "declaration": {
+            "name": "isObjectSpread",
+            "module": "controllers/slot-controller.js"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/slot-controller.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isObjectSpread",
+          "return": {
+            "type": {
+              "text": "config is [SlotsConfig]"
+            }
+          },
+          "parameters": [
+            {
+              "name": "config",
+              "type": {
+                "text": "SlotControllerArgs"
+              }
+            }
+          ]
+        },
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotControllerPublicAPI",
+          "members": [
+            {
+              "kind": "field",
+              "name": "default",
+              "type": {
+                "text": "symbol"
+              },
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "type": {
+                "text": "ReactiveElement"
+              },
+              "privacy": "public"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "Promise<void>"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "getSlotted",
+              "return": {
+                "type": {
+                  "text": "T[]"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "slotNames",
+                  "type": {
+                    "text": "string[]"
+                  },
+                  "description": "slots to query"
+                }
+              ],
+              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
+            },
+            {
+              "kind": "method",
+              "name": "hasSlotted",
+              "return": {
+                "type": {
+                  "text": "boolean"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to check."
+                }
+              ],
+              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
+            },
+            {
+              "kind": "method",
+              "name": "isEmpty",
+              "return": {
+                "type": {
+                  "text": ""
+                }
+              },
+              "parameters": [
+                {
+                  "name": "names",
+                  "type": {
+                    "text": "(string | null | undefined)[]"
+                  },
+                  "description": "The slot names to query.  If no value is provided, it returns the default slot."
+                }
+              ],
+              "description": "Whether or not all the requested slots are empty."
+            }
+          ]
+        },
+        {
+          "kind": "class",
+          "description": "",
+          "name": "SlotController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "default",
+              "privacy": "public",
+              "static": true
+            },
+            {
+              "kind": "field",
+              "name": "satisfies"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isObjectSpread",
+          "declaration": {
+            "name": "isObjectSpread",
+            "module": "controllers/slot-controller.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "SlotControllerPublicAPI",
+          "declaration": {
+            "name": "SlotControllerPublicAPI",
+            "module": "controllers/slot-controller.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "SlotController",
+          "declaration": {
+            "name": "SlotController",
+            "module": "controllers/slot-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/style-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
+          "name": "StyleController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "styles",
+              "privacy": "private",
+              "description": "These styles will be applied to the host element"
+            },
+            {
+              "kind": "field",
+              "name": "stylesAdopted",
+              "privacy": "private"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "StyleController",
+          "declaration": {
+            "name": "StyleController",
+            "module": "controllers/style-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/style-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
+          "name": "StyleController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "field",
+              "name": "host",
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "styles",
+              "default": "styles"
+            },
+            {
+              "kind": "field",
+              "name": "stylesAdopted",
+              "type": {
+                "text": "boolean"
+              },
+              "default": "false"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "StyleController",
+          "declaration": {
+            "name": "StyleController",
+            "module": "controllers/style-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/style-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
+          "name": "StyleController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "stylesAdopted",
+              "type": {
+                "text": "boolean"
+              },
+              "privacy": "private",
+              "default": "false"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "field",
+              "type": {
+                "text": "ReactiveElement",
+                "name": "ReactiveElement",
+                "package": "lit"
+              },
+              "name": "host",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "description": "These styles will be applied to the host element",
+              "type": {
+                "text": "CSSResultGroup",
+                "name": "CSSResultGroup",
+                "package": "lit"
+              },
+              "name": "styles",
+              "privacy": "private"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "StyleController",
+          "declaration": {
+            "name": "StyleController",
+            "module": "controllers/style-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/tabs-aria-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TabsAriaController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "tabs",
+              "type": {
+                "text": "Tab[]"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "activeTab",
+              "type": {
+                "text": "Tab | undefined"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "panelFor",
+              "return": {
+                "type": {
+                  "text": "Panel | undefined"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "tab",
+                  "type": {
+                    "text": "Tab"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "tabFor",
+              "return": {
+                "type": {
+                  "text": "Tab | undefined"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "panel",
+                  "type": {
+                    "text": "Panel"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TabsAriaController",
+          "declaration": {
+            "name": "TabsAriaController",
+            "module": "controllers/tabs-aria-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/tabs-aria-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TabsAriaController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "tabs"
+            },
+            {
+              "kind": "field",
+              "name": "activeTab"
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected"
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated"
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected"
+            },
+            {
+              "kind": "method",
+              "name": "panelFor",
+              "parameters": [
+                {
+                  "name": "tab"
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "tabFor",
+              "parameters": [
+                {
+                  "name": "panel"
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TabsAriaController",
+          "declaration": {
+            "name": "TabsAriaController",
+            "module": "controllers/tabs-aria-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/tabs-aria-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TabsAriaController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#logger",
+              "privacy": "private",
+              "type": {
+                "text": "Logger"
+              },
+              "default": "new Logger(host)"
+            },
+            {
+              "kind": "field",
+              "name": "#host",
+              "privacy": "private",
+              "type": {
+                "text": "ReactiveControllerHost"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#element",
+              "privacy": "private",
+              "type": {
+                "text": "HTMLElement"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "#tabPanelMap",
+              "privacy": "private",
+              "default": "new Map<Tab, Panel>()"
+            },
+            {
+              "kind": "field",
+              "name": "#options",
+              "privacy": "private",
+              "type": {
+                "text": "TabsAriaControllerOptions<Tab, Panel>"
+              },
+              "default": "options"
+            },
+            {
+              "kind": "field",
+              "name": "#mo",
+              "privacy": "private",
+              "default": "new MutationObserver(this.#onSlotchange.bind(this))"
+            },
+            {
+              "kind": "field",
+              "name": "tabs"
+            },
+            {
+              "kind": "field",
+              "name": "activeTab",
+              "type": {
+                "text": "Tab | undefined"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostUpdated",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostDisconnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#onSlotchange",
+              "description": "zip the tabs and panels together into #tabPanelMap"
+            },
+            {
+              "kind": "method",
+              "name": "panelFor",
+              "return": {
+                "type": {
+                  "text": "Panel | undefined"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "tab",
+                  "type": {
+                    "text": "Tab"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "method",
+              "name": "tabFor",
+              "return": {
+                "type": {
+                  "text": "Tab | undefined"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "panel",
+                  "type": {
+                    "text": "Panel"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TabsAriaController",
+          "declaration": {
+            "name": "TabsAriaController",
+            "module": "controllers/tabs-aria-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/timestamp-controller.d.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TimestampController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "#private",
+              "privacy": "private"
+            },
+            {
+              "kind": "field",
+              "name": "localeString",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "date",
+              "type": {
+                "text": "Date"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "isoString",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "time",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "set",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "prop",
+                  "type": {
+                    "text": "PropertyKey"
+                  }
+                },
+                {
+                  "name": "value",
+                  "type": {
+                    "text": "unknown"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TimestampController",
+          "declaration": {
+            "name": "TimestampController",
+            "module": "controllers/timestamp-controller.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/timestamp-controller.js",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TimestampController",
+          "members": [
+            {
+              "kind": "field",
+              "name": "localeString"
+            },
+            {
+              "kind": "field",
+              "name": "date"
+            },
+            {
+              "kind": "field",
+              "name": "isoString"
+            },
+            {
+              "kind": "field",
+              "name": "time"
+            },
+            {
+              "kind": "method",
+              "name": "set",
+              "parameters": [
+                {
+                  "name": "prop"
+                },
+                {
+                  "name": "value"
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TimestampController",
+          "declaration": {
+            "name": "TimestampController",
+            "module": "controllers/timestamp-controller.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/timestamp-controller.ts",
+      "declarations": [
+        {
+          "kind": "class",
+          "description": "",
+          "name": "TimestampController",
+          "members": [
+            {
+              "kind": "method",
+              "name": "#isTimestampOptionKey",
+              "static": true,
+              "return": {
+                "type": {
+                  "text": "prop is keyof TimestampOptions"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "prop",
+                  "type": {
+                    "text": "PropertyKey"
+                  }
+                }
+              ]
+            },
+            {
+              "kind": "field",
+              "name": "#date",
+              "privacy": "private",
+              "default": "new Date()"
+            },
+            {
+              "kind": "field",
+              "name": "#options",
+              "privacy": "private",
+              "type": {
+                "text": "TimestampOptions"
+              },
+              "default": "{}"
+            },
+            {
+              "kind": "field",
+              "name": "#host",
+              "privacy": "private",
+              "type": {
+                "text": "ReactiveControllerHost"
+              },
+              "default": "host"
+            },
+            {
+              "kind": "field",
+              "name": "localeString",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "date",
+              "type": {
+                "text": "Date"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "isoString",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "field",
+              "name": "time",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "kind": "method",
+              "name": "hostConnected",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              }
+            },
+            {
+              "kind": "method",
+              "name": "#getTimeRelative",
+              "description": "Based off of Github Relative Time\nhttps://github.com/github/time-elements/blob/master/src/relative-time.js"
+            },
+            {
+              "kind": "method",
+              "name": "set",
+              "return": {
+                "type": {
+                  "text": "void"
+                }
+              },
+              "parameters": [
+                {
+                  "name": "prop",
+                  "type": {
+                    "text": "PropertyKey"
+                  }
+                },
+                {
+                  "name": "value",
+                  "type": {
+                    "text": "unknown"
+                  }
+                }
+              ]
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "TimestampController",
+          "declaration": {
+            "name": "TimestampController",
+            "module": "controllers/timestamp-controller.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/bound.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "bound",
+          "return": {
+            "type": {
+              "text": "PropertyDescriptor"
+            }
+          },
+          "parameters": [
+            {
+              "name": "_",
+              "type": {
+                "text": "unknown"
+              }
+            },
+            {
+              "name": "key",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "name": "descriptor",
+              "type": {
+                "text": "PropertyDescriptor"
+              }
+            }
+          ],
+          "description": "Binds a class method to the instance"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "bound",
+          "declaration": {
+            "name": "bound",
+            "module": "decorators/bound.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/bound.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "bound",
+          "parameters": [
+            {
+              "name": "_"
+            },
+            {
+              "name": "key"
+            },
+            {
+              "name": "descriptor"
+            }
+          ],
+          "description": "Binds a class method to the instance"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "bound",
+          "declaration": {
+            "name": "bound",
+            "module": "decorators/bound.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/bound.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "bound",
+          "return": {
+            "type": {
+              "text": "PropertyDescriptor"
+            }
+          },
+          "parameters": [
+            {
+              "name": "_",
+              "type": {
+                "text": "unknown"
+              }
+            },
+            {
+              "name": "key",
+              "type": {
+                "text": "string"
+              }
+            },
+            {
+              "name": "descriptor",
+              "type": {
+                "text": "PropertyDescriptor"
+              }
+            }
+          ],
+          "description": "Binds a class method to the instance"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "bound",
+          "declaration": {
+            "name": "bound",
+            "module": "decorators/bound.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/cascades.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "cascades",
+          "return": {
+            "type": {
+              "text": "PropertyDecorator"
+            }
+          },
+          "parameters": [
+            {
+              "name": "items",
+              "type": {
+                "text": "string[]"
+              }
+            }
+          ],
+          "description": "Cascades the decorated attribute to children",
+          "deprecated": "use context, especially via `@patternfly/pfe-core/functions/context.js`;"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "cascades",
+          "declaration": {
+            "name": "cascades",
+            "module": "decorators/cascades.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/cascades.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "cascades",
+          "parameters": [
+            {
+              "name": "items"
+            }
+          ],
+          "description": "Cascades the decorated attribute to children",
+          "deprecated": "use context, especially via `@patternfly/pfe-core/functions/context.js`;"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "cascades",
+          "declaration": {
+            "name": "cascades",
+            "module": "decorators/cascades.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/cascades.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "cascades",
+          "return": {
+            "type": {
+              "text": "PropertyDecorator"
+            }
+          },
+          "parameters": [
+            {
+              "name": "items",
+              "type": {
+                "text": "string[]"
+              }
+            }
+          ],
+          "description": "Cascades the decorated attribute to children",
+          "deprecated": "use context, especially via `@patternfly/pfe-core/functions/context.js`;"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "cascades",
+          "declaration": {
+            "name": "cascades",
+            "module": "decorators/cascades.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/deprecation.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "deprecation",
+          "return": {
+            "type": {
+              "text": "<T extends ReactiveElement, L extends PropertyKey>(proto: Partial<Record<K | L, T>>, key: string & keyof T) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "options",
+              "type": {
+                "text": "DeprecationDeclaration<K>"
+              },
+              "description": "alias is a drop in replacement"
+            }
+          ],
+          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "deprecation",
+          "declaration": {
+            "name": "deprecation",
+            "module": "decorators/deprecation.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/deprecation.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "deprecation",
+          "parameters": [
+            {
+              "name": "options",
+              "description": "alias is a drop in replacement"
+            }
+          ],
+          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "deprecation",
+          "declaration": {
+            "name": "deprecation",
+            "module": "decorators/deprecation.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/deprecation.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "deprecation",
+          "parameters": [
+            {
+              "name": "options",
+              "type": {
+                "text": "DeprecationDeclaration<K>"
+              },
+              "description": "alias is a drop in replacement"
+            }
+          ],
+          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "deprecation",
+          "declaration": {
+            "name": "deprecation",
+            "module": "decorators/deprecation.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/initializer.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "initializer",
+          "return": {
+            "type": {
+              "text": "(proto: T, key: string) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "Options"
+              },
+              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
+            }
+          ],
+          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "initializer",
+          "declaration": {
+            "name": "initializer",
+            "module": "decorators/initializer.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/initializer.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "initializer",
+          "parameters": [
+            {
+              "name": "options",
+              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
+            }
+          ],
+          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "initializer",
+          "declaration": {
+            "name": "initializer",
+            "module": "decorators/initializer.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/initializer.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "initializer",
+          "parameters": [
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "Options"
+              },
+              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
+            }
+          ],
+          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "initializer",
+          "declaration": {
+            "name": "initializer",
+            "module": "decorators/initializer.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/listen.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "listen",
+          "return": {
+            "type": {
+              "text": "(proto: LitElement, methodName: string) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "type",
+              "type": {
+                "text": "keyof HTMLElementEventMap"
+              },
+              "description": "event type e.g. `click`"
+            },
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "AddEventListenerOptions"
+              },
+              "description": "event listener options object e.g. `{ passive: true }`"
+            }
+          ],
+          "description": "Listens for a given event on the custom element.\nequivalent to calling `this.addEventListener` in the constructor"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "listen",
+          "declaration": {
+            "name": "listen",
+            "module": "decorators/listen.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/listen.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "listen",
+          "parameters": [
+            {
+              "name": "type",
+              "description": "event type e.g. `click`"
+            },
+            {
+              "name": "options",
+              "description": "event listener options object e.g. `{ passive: true }`"
+            }
+          ],
+          "description": "Listens for a given event on the custom element.\nequivalent to calling `this.addEventListener` in the constructor"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "listen",
+          "declaration": {
+            "name": "listen",
+            "module": "decorators/listen.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/listen.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "listen",
+          "parameters": [
+            {
+              "name": "type",
+              "type": {
+                "text": "keyof HTMLElementEventMap"
+              },
+              "description": "event type e.g. `click`"
+            },
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "AddEventListenerOptions"
+              },
+              "description": "event listener options object e.g. `{ passive: true }`"
+            }
+          ],
+          "description": "Listens for a given event on the custom element.\nequivalent to calling `this.addEventListener` in the constructor"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "listen",
+          "declaration": {
+            "name": "listen",
+            "module": "decorators/listen.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observed.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "TypedFieldDecorator<T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "cb",
+              "type": {
+                "text": "ChangeCallback<T, V>"
+              }
+            }
+          ],
+          "description": "Calls a _fooChanged method on the instance when the value changes.\nWorks on any class field. When using on lit observed properties,\nMake sure `@observed` is to the left (i.e. called after) the `@property`\nor `@state` decorator."
+        },
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "TypedFieldDecorator<T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "methodName",
+              "type": {
+                "text": "string"
+              }
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "proto",
+              "type": {
+                "text": "T"
+              }
+            },
+            {
+              "name": "key",
+              "type": {
+                "text": "string"
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.d.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observed.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observed",
+          "parameters": [
+            {
+              "name": "as"
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observed.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "TypedFieldDecorator<T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "cb",
+              "type": {
+                "text": "ChangeCallback<T, V>"
+              }
+            }
+          ],
+          "description": "Calls a _fooChanged method on the instance when the value changes.\nWorks on any class field. When using on lit observed properties,\nMake sure `@observed` is to the left (i.e. called after) the `@property`\nor `@state` decorator."
+        },
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "TypedFieldDecorator<T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "methodName",
+              "type": {
+                "text": "string"
+              }
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "proto",
+              "type": {
+                "text": "T"
+              }
+            },
+            {
+              "name": "key",
+              "type": {
+                "text": "string"
+              }
+            }
+          ]
+        },
+        {
+          "kind": "function",
+          "name": "observed",
+          "return": {
+            "type": {
+              "text": "void | TypedFieldDecorator<T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "as",
+              "type": {
+                "text": "any[]"
+              }
+            }
+          ]
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.ts"
+          }
+        },
+        {
+          "kind": "js",
+          "name": "observed",
+          "declaration": {
+            "name": "observed",
+            "module": "decorators/observed.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observes.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observes",
+          "return": {
+            "type": {
+              "text": "(proto: T, methodName: string) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "propertyName",
+              "type": {
+                "text": "string & keyof T"
+              },
+              "description": "property to react to"
+            },
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>"
+              },
+              "description": "options including lifecycle to wait on."
+            }
+          ],
+          "description": "Observes changes on the given property and calls the decorated method\nwith the old and new values when it changes. In cases where the decorated method\nneeds to access uninitialized class fields, You may need to wait for the element to connect\nbefore running your effects. In that case, you can optionally specify which\nlifecycle state to wait for. e.g.:\n- `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n- `waitFor: 'updated'` waits until the next update cycle has completed\n- `waitFor: 'connected'` waits until the element connects"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observes",
+          "declaration": {
+            "name": "observes",
+            "module": "decorators/observes.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observes.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observes",
+          "parameters": [
+            {
+              "name": "propertyName",
+              "description": "property to react to"
+            },
+            {
+              "name": "options",
+              "description": "options including lifecycle to wait on.",
+              "optional": true
+            }
+          ],
+          "description": "Observes changes on the given property and calls the decorated method\nwith the old and new values when it changes. In cases where the decorated method\nneeds to access uninitialized class fields, You may need to wait for the element to connect\nbefore running your effects. In that case, you can optionally specify which\nlifecycle state to wait for. e.g.:\n- `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n- `waitFor: 'updated'` waits until the next update cycle has completed\n- `waitFor: 'connected'` waits until the element connects"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observes",
+          "declaration": {
+            "name": "observes",
+            "module": "decorators/observes.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/observes.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "observes",
+          "parameters": [
+            {
+              "name": "propertyName",
+              "type": {
+                "text": "string & keyof T"
+              },
+              "description": "property to react to"
+            },
+            {
+              "name": "options",
+              "optional": true,
+              "type": {
+                "text": "Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>"
+              },
+              "description": "options including lifecycle to wait on."
+            }
+          ],
+          "description": "Observes changes on the given property and calls the decorated method\nwith the old and new values when it changes. In cases where the decorated method\nneeds to access uninitialized class fields, You may need to wait for the element to connect\nbefore running your effects. In that case, you can optionally specify which\nlifecycle state to wait for. e.g.:\n- `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n- `waitFor: 'updated'` waits until the next update cycle has completed\n- `waitFor: 'connected'` waits until the element connects"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "observes",
+          "declaration": {
+            "name": "observes",
+            "module": "decorators/observes.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/time.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "time",
+          "return": {
+            "type": {
+              "text": "(_: unknown, key: string, descriptor: PropertyDescriptor) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "tag",
+              "optional": true,
+              "type": {
+                "text": "string"
+              },
+              "description": "short string to identify the method name"
+            }
+          ],
+          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "time",
+          "declaration": {
+            "name": "time",
+            "module": "decorators/time.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/time.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "time",
+          "parameters": [
+            {
+              "name": "tag",
+              "description": "short string to identify the method name"
+            }
+          ],
+          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "time",
+          "declaration": {
+            "name": "time",
+            "module": "decorators/time.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/time.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "time",
+          "parameters": [
+            {
+              "name": "tag",
+              "optional": true,
+              "type": {
+                "text": "string"
+              },
+              "description": "short string to identify the method name"
+            }
+          ],
+          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "time",
+          "declaration": {
+            "name": "time",
+            "module": "decorators/time.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/trace.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "trace",
+          "return": {
+            "type": {
+              "text": "(_: unknown, key: string, descriptor: PropertyDescriptor) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "tag",
+              "optional": true,
+              "type": {
+                "text": "string"
+              },
+              "description": "log tag, prepended to outputs"
+            }
+          ],
+          "description": "Logs the result of a class method"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "trace",
+          "declaration": {
+            "name": "trace",
+            "module": "decorators/trace.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/trace.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "trace",
+          "parameters": [
+            {
+              "name": "tag",
+              "description": "log tag, prepended to outputs"
+            }
+          ],
+          "description": "Logs the result of a class method"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "trace",
+          "declaration": {
+            "name": "trace",
+            "module": "decorators/trace.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "decorators/trace.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "trace",
+          "parameters": [
+            {
+              "name": "tag",
+              "optional": true,
+              "type": {
+                "text": "string"
+              },
+              "description": "log tag, prepended to outputs"
+            }
+          ],
+          "description": "Logs the result of a class method"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "trace",
+          "declaration": {
+            "name": "trace",
+            "module": "decorators/trace.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/arraysAreEquivalent.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "arraysAreEquivalent",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "a",
+              "type": {
+                "text": "unknown"
+              },
+              "description": "first array"
+            },
+            {
+              "name": "b",
+              "type": {
+                "text": "unknown"
+              },
+              "description": "second array"
+            }
+          ],
+          "description": "Whether the two arrays are equivalent\nArrays are equivalent when they are both empty, or when their lengths are equal and each of\ntheir members is equal (===) to the corresponding member in the other array.\nIf either argument is not an array, the result will be strict equivalence (===)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "arraysAreEquivalent",
+          "declaration": {
+            "name": "arraysAreEquivalent",
+            "module": "functions/arraysAreEquivalent.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/arraysAreEquivalent.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "arraysAreEquivalent",
+          "parameters": [
+            {
+              "name": "a",
+              "description": "first array"
+            },
+            {
+              "name": "b",
+              "description": "second array"
+            }
+          ],
+          "description": "Whether the two arrays are equivalent\nArrays are equivalent when they are both empty, or when their lengths are equal and each of\ntheir members is equal (===) to the corresponding member in the other array.\nIf either argument is not an array, the result will be strict equivalence (===)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "arraysAreEquivalent",
+          "declaration": {
+            "name": "arraysAreEquivalent",
+            "module": "functions/arraysAreEquivalent.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/arraysAreEquivalent.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "arraysAreEquivalent",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "a",
+              "type": {
+                "text": "unknown"
+              },
+              "description": "first array"
+            },
+            {
+              "name": "b",
+              "type": {
+                "text": "unknown"
+              },
+              "description": "second array"
+            }
+          ],
+          "description": "Whether the two arrays are equivalent\nArrays are equivalent when they are both empty, or when their lengths are equal and each of\ntheir members is equal (===) to the corresponding member in the other array.\nIf either argument is not an array, the result will be strict equivalence (===)"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "arraysAreEquivalent",
+          "declaration": {
+            "name": "arraysAreEquivalent",
+            "module": "functions/arraysAreEquivalent.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/containsDeep.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "containsDeep",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "container",
+              "type": {
+                "text": "Element"
+              },
+              "description": "haystack"
+            },
+            {
+              "name": "node",
+              "type": {
+                "text": "Node"
+              },
+              "description": "needle"
+            }
+          ],
+          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "containsDeep",
+          "declaration": {
+            "name": "containsDeep",
+            "module": "functions/containsDeep.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/containsDeep.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "containsDeep",
+          "parameters": [
+            {
+              "name": "container",
+              "description": "haystack"
+            },
+            {
+              "name": "node",
+              "description": "needle"
+            }
+          ],
+          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "containsDeep",
+          "declaration": {
+            "name": "containsDeep",
+            "module": "functions/containsDeep.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/containsDeep.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "containsDeep",
+          "return": {
+            "type": {
+              "text": "boolean"
+            }
+          },
+          "parameters": [
+            {
+              "name": "container",
+              "type": {
+                "text": "Element"
+              },
+              "description": "haystack"
+            },
+            {
+              "name": "node",
+              "type": {
+                "text": "Node"
+              },
+              "description": "needle"
+            }
+          ],
+          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "containsDeep",
+          "declaration": {
+            "name": "containsDeep",
+            "module": "functions/containsDeep.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/context.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "createContextWithRoot",
+          "return": {
+            "type": {
+              "text": "Context<unknown, T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "args",
+              "type": {
+                "text": "Parameters<typeof createContext>"
+              },
+              "description": "createContext args"
+            }
+          ],
+          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "createContextWithRoot",
+          "declaration": {
+            "name": "createContextWithRoot",
+            "module": "functions/context.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/context.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "createContextWithRoot",
+          "parameters": [
+            {
+              "name": "args",
+              "description": "createContext args"
+            }
+          ],
+          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "createContextWithRoot",
+          "declaration": {
+            "name": "createContextWithRoot",
+            "module": "functions/context.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/context.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "createContextWithRoot",
+          "return": {
+            "type": {
+              "text": "Context<unknown, T>"
+            }
+          },
+          "parameters": [
+            {
+              "name": "args",
+              "type": {
+                "text": "Parameters<typeof createContext>"
+              },
+              "description": "createContext args"
+            }
+          ],
+          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "createContextWithRoot",
+          "declaration": {
+            "name": "createContextWithRoot",
+            "module": "functions/context.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/debounce.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "debounce",
+          "return": {
+            "type": {
+              "text": "(this: unknown, ...args: any[]) => void"
+            }
+          },
+          "parameters": [
+            {
+              "name": "func",
+              "type": {
+                "text": "(...args: any[]) => unknown"
+              },
+              "description": "Function to be debounced"
+            },
+            {
+              "name": "delay",
+              "type": {
+                "text": "number"
+              },
+              "description": "How long until it will be run"
+            },
+            {
+              "name": "immediate",
+              "optional": true,
+              "type": {
+                "text": "boolean"
+              },
+              "description": "Whether it should be run at the start instead of the end of the debounce"
+            }
+          ],
+          "description": "Debounce helper function"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "debounce",
+          "declaration": {
+            "name": "debounce",
+            "module": "functions/debounce.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/debounce.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "debounce",
+          "parameters": [
+            {
+              "name": "func",
+              "description": "Function to be debounced"
+            },
+            {
+              "name": "delay",
+              "description": "How long until it will be run"
+            },
+            {
+              "name": "immediate",
+              "default": "false",
+              "description": "Whether it should be run at the start instead of the end of the debounce"
+            }
+          ],
+          "description": "Debounce helper function"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "debounce",
+          "declaration": {
+            "name": "debounce",
+            "module": "functions/debounce.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/debounce.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "debounce",
+          "parameters": [
+            {
+              "name": "func",
+              "type": {
+                "text": "(...args: any[]) => unknown"
+              },
+              "description": "Function to be debounced"
+            },
+            {
+              "name": "delay",
+              "type": {
+                "text": "number"
+              },
+              "description": "How long until it will be run"
+            },
+            {
+              "name": "immediate",
+              "default": "false",
+              "description": "Whether it should be run at the start instead of the end of the debounce"
+            }
+          ],
+          "description": "Debounce helper function"
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "debounce",
+          "declaration": {
+            "name": "debounce",
+            "module": "functions/debounce.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/isElementInView.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isElementInView",
+          "return": {
+            "type": {
+              "text": ""
+            }
+          },
+          "parameters": [
+            {
+              "name": "container",
+              "type": {
+                "text": "HTMLElement"
+              },
+              "description": "The container to check if the element is in view of."
+            },
+            {
+              "name": "element",
+              "type": {
+                "text": "HTMLElement"
+              },
+              "description": "The element to check if it is view"
+            },
+            {
+              "name": "partial",
+              "optional": true,
+              "type": {
+                "text": "boolean"
+              },
+              "description": "true if partial view is allowed"
+            },
+            {
+              "name": "strict",
+              "optional": true,
+              "type": {
+                "text": "boolean"
+              },
+              "description": "true if strict mode is set, never consider the container width and element width"
+            }
+          ],
+          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isElementInView",
+          "declaration": {
+            "name": "isElementInView",
+            "module": "functions/isElementInView.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/isElementInView.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isElementInView",
+          "parameters": [
+            {
+              "name": "container",
+              "description": "The container to check if the element is in view of."
+            },
+            {
+              "name": "element",
+              "description": "The element to check if it is view"
+            },
+            {
+              "name": "partial",
+              "default": "false",
+              "description": "true if partial view is allowed"
+            },
+            {
+              "name": "strict",
+              "default": "false",
+              "description": "true if strict mode is set, never consider the container width and element width"
+            }
+          ],
+          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view.",
+          "return": {
+            "type": {
+              "text": ""
+            }
+          }
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isElementInView",
+          "declaration": {
+            "name": "isElementInView",
+            "module": "functions/isElementInView.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/isElementInView.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "isElementInView",
+          "return": {
+            "type": {
+              "text": ""
+            }
+          },
+          "parameters": [
+            {
+              "name": "container",
+              "type": {
+                "text": "HTMLElement"
+              },
+              "description": "The container to check if the element is in view of."
+            },
+            {
+              "name": "element",
+              "type": {
+                "text": "HTMLElement"
+              },
+              "description": "The element to check if it is view"
+            },
+            {
+              "name": "partial",
+              "default": "false",
+              "description": "true if partial view is allowed"
+            },
+            {
+              "name": "strict",
+              "default": "false",
+              "description": "true if strict mode is set, never consider the container width and element width"
+            }
+          ],
+          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "isElementInView",
+          "declaration": {
+            "name": "isElementInView",
+            "module": "functions/isElementInView.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/random.d.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "getRandomId",
+          "return": {
+            "type": {
+              "text": "string"
+            }
+          },
+          "parameters": [
+            {
+              "name": "prefix",
+              "optional": true,
+              "type": {
+                "text": "string"
+              },
+              "description": "id-safe string prefix"
+            }
+          ],
+          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "getRandomId",
+          "declaration": {
+            "name": "getRandomId",
+            "module": "functions/random.d.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/random.js",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "getRandomId",
+          "parameters": [
+            {
+              "name": "prefix",
+              "default": "'pfe'",
+              "description": "id-safe string prefix"
+            }
+          ],
+          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "getRandomId",
+          "declaration": {
+            "name": "getRandomId",
+            "module": "functions/random.js"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "functions/random.ts",
+      "declarations": [
+        {
+          "kind": "function",
+          "name": "getRandomId",
+          "parameters": [
+            {
+              "name": "prefix",
+              "default": "'pfe'",
+              "description": "id-safe string prefix"
+            }
+          ],
+          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
+        }
+      ],
+      "exports": [
+        {
+          "kind": "js",
+          "name": "getRandomId",
+          "declaration": {
+            "name": "getRandomId",
+            "module": "functions/random.ts"
+          }
+        }
+      ]
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/decorators.spec.d.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/decorators.spec.js",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/decorators.spec.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/kitchen-sink.e2e.d.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/kitchen-sink.e2e.js",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "test/kitchen-sink.e2e.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/test/combobox-controller.spec.d.ts",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/test/combobox-controller.spec.js",
+      "declarations": [],
+      "exports": []
+    },
+    {
+      "kind": "javascript-module",
+      "path": "controllers/test/combobox-controller.spec.ts",
+      "declarations": [],
+      "exports": []
+    }
+  ]
+}
diff --git a/node_modules/@patternfly/pfe-core/package/decorators.d.ts b/node_modules/@patternfly/pfe-core/package/decorators.d.ts
new file mode 100644
index 0000000..17bdfe6
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators.d.ts
@@ -0,0 +1,9 @@
+export * from './decorators/bound.js';
+export * from './decorators/cascades.js';
+export * from './decorators/deprecation.js';
+export * from './decorators/initializer.js';
+export * from './decorators/listen.js';
+export * from './decorators/observed.js';
+export * from './decorators/observes.js';
+export * from './decorators/time.js';
+export * from './decorators/trace.js';
diff --git a/node_modules/@patternfly/pfe-core/package/decorators.js b/node_modules/@patternfly/pfe-core/package/decorators.js
new file mode 100644
index 0000000..32d457a
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators.js
@@ -0,0 +1,10 @@
+export * from './decorators/bound.js';
+export * from './decorators/cascades.js';
+export * from './decorators/deprecation.js';
+export * from './decorators/initializer.js';
+export * from './decorators/listen.js';
+export * from './decorators/observed.js';
+export * from './decorators/observes.js';
+export * from './decorators/time.js';
+export * from './decorators/trace.js';
+//# sourceMappingURL=decorators.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators.js.map b/node_modules/@patternfly/pfe-core/package/decorators.js.map
new file mode 100644
index 0000000..bc9797e
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"decorators.js","sourceRoot":"","sources":["decorators.ts"],"names":[],"mappings":"AAAA,cAAc,uBAAuB,CAAC;AACtC,cAAc,0BAA0B,CAAC;AACzC,cAAc,6BAA6B,CAAC;AAC5C,cAAc,6BAA6B,CAAC;AAC5C,cAAc,wBAAwB,CAAC;AACvC,cAAc,0BAA0B,CAAC;AACzC,cAAc,0BAA0B,CAAC;AACzC,cAAc,sBAAsB,CAAC;AACrC,cAAc,uBAAuB,CAAC","sourcesContent":["export * from './decorators/bound.js';\nexport * from './decorators/cascades.js';\nexport * from './decorators/deprecation.js';\nexport * from './decorators/initializer.js';\nexport * from './decorators/listen.js';\nexport * from './decorators/observed.js';\nexport * from './decorators/observes.js';\nexport * from './decorators/time.js';\nexport * from './decorators/trace.js';\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/bound.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/bound.d.ts
new file mode 100644
index 0000000..3cc6148
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/bound.d.ts
@@ -0,0 +1,15 @@
+/**
+ * Binds a class method to the instance
+ * @param _
+ * @param key
+ * @param descriptor
+ * @example Binding an event listener
+ *     ```ts
+ *     private mo = new MutationObserver(this.onMutation);
+ *
+ *     @bound onMutation(records: MutationRecord[]) {
+ *       this.count = this.children.length;
+ *     }
+ *     ```
+ */
+export declare function bound(_: unknown, key: string, descriptor: PropertyDescriptor): PropertyDescriptor;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/bound.js b/node_modules/@patternfly/pfe-core/package/decorators/bound.js
new file mode 100644
index 0000000..78f6e99
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/bound.js
@@ -0,0 +1,29 @@
+const configurable = true;
+/**
+ * Binds a class method to the instance
+ * @param _
+ * @param key
+ * @param descriptor
+ * @example Binding an event listener
+ *     ```ts
+ *     private mo = new MutationObserver(this.onMutation);
+ *
+ *     @bound onMutation(records: MutationRecord[]) {
+ *       this.count = this.children.length;
+ *     }
+ *     ```
+ */
+export function bound(_, key, descriptor) {
+    if (typeof descriptor?.value !== 'function') {
+        throw new TypeError(`Only methods can be decorated with @bound. <${key ?? _.name}> is not a method!`);
+    } /* c8 ignore next */
+    return {
+        configurable,
+        get() {
+            const value = descriptor.value.bind(this);
+            Object.defineProperty(this, key, { value, configurable, writable: true });
+            return value;
+        },
+    };
+}
+//# sourceMappingURL=bound.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/bound.js.map b/node_modules/@patternfly/pfe-core/package/decorators/bound.js.map
new file mode 100644
index 0000000..4404e66
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/bound.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bound.js","sourceRoot":"","sources":["bound.ts"],"names":[],"mappings":"AAAA,MAAM,YAAY,GAAG,IAAI,CAAC;AAE1B;;;;;;;;;;;;;GAaG;AACH,MAAM,UAAU,KAAK,CAAC,CAAU,EAAE,GAAW,EAAE,UAA8B;IAC3E,IAAI,OAAO,UAAU,EAAE,KAAK,KAAK,UAAU,EAAE,CAAC;QAC5C,MAAM,IAAI,SAAS,CAAC,+CAA+C,GAAG,IAAK,CAAgB,CAAC,IAAI,oBAAoB,CAAC,CAAC;IACxH,CAAC,CAAC,oBAAoB;IACtB,OAAO;QACL,YAAY;QACZ,GAAG;YACD,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1C,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;YAC1E,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["const configurable = true;\n\n/**\n * Binds a class method to the instance\n * @param _\n * @param key\n * @param descriptor\n * @example Binding an event listener\n *     ```ts\n *     private mo = new MutationObserver(this.onMutation);\n *\n *     @bound onMutation(records: MutationRecord[]) {\n *       this.count = this.children.length;\n *     }\n *     ```\n */\nexport function bound(_: unknown, key: string, descriptor: PropertyDescriptor): PropertyDescriptor {\n  if (typeof descriptor?.value !== 'function') {\n    throw new TypeError(`Only methods can be decorated with @bound. <${key ?? (_ as () => void).name}> is not a method!`);\n  } /* c8 ignore next */\n  return {\n    configurable,\n    get() {\n      const value = descriptor.value.bind(this);\n      Object.defineProperty(this, key, { value, configurable, writable: true });\n      return value;\n    },\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/cascades.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/cascades.d.ts
new file mode 100644
index 0000000..45b8552
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/cascades.d.ts
@@ -0,0 +1,7 @@
+import type { ReactiveElement } from 'lit';
+/**
+ * Cascades the decorated attribute to children
+ * @param items
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export declare function cascades<T extends ReactiveElement>(...items: string[]): PropertyDecorator;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/cascades.js b/node_modules/@patternfly/pfe-core/package/decorators/cascades.js
new file mode 100644
index 0000000..65c710d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/cascades.js
@@ -0,0 +1,20 @@
+import { CascadeController } from '../controllers/cascade-controller.js';
+/**
+ * Cascades the decorated attribute to children
+ * @param items
+ * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;
+ */
+export function cascades(...items) {
+    return function (proto, key) {
+        proto.constructor.addInitializer(x => {
+            const instance = x;
+            // You can have multiple `@cascades` decorators on an element
+            // and it will only get one CascadeController for all of them
+            if (!CascadeController.instances.has(instance)) {
+                CascadeController.instances.set(instance, new CascadeController(instance));
+            }
+            CascadeController.instances.get(instance)?.initProp(key, items);
+        });
+    };
+}
+//# sourceMappingURL=cascades.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/cascades.js.map b/node_modules/@patternfly/pfe-core/package/decorators/cascades.js.map
new file mode 100644
index 0000000..5c26131
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/cascades.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"cascades.js","sourceRoot":"","sources":["cascades.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sCAAsC,CAAC;AAEzE;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAA4B,GAAG,KAAe;IACpE,OAAO,UAAS,KAAQ,EAAE,GAAqB;QAC5C,KAAK,CAAC,WAAsC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YAC/D,MAAM,QAAQ,GAAG,CAAoB,CAAC;YACtC,6DAA6D;YAC7D,6DAA6D;YAC7D,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;gBAC/C,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7E,CAAC;YAED,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAsB,CAAC;AACzB,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\n\nimport { CascadeController } from '../controllers/cascade-controller.js';\n\n/**\n * Cascades the decorated attribute to children\n * @param items\n * @deprecated use context, especially via `@patternfly/pfe-core/functions/context.js`;\n */\nexport function cascades<T extends ReactiveElement>(...items: string[]): PropertyDecorator {\n  return function(proto: T, key: string & keyof T) {\n    (proto.constructor as typeof ReactiveElement).addInitializer(x => {\n      const instance = x as ReactiveElement;\n      // You can have multiple `@cascades` decorators on an element\n      // and it will only get one CascadeController for all of them\n      if (!CascadeController.instances.has(instance)) {\n        CascadeController.instances.set(instance, new CascadeController(instance));\n      }\n\n      CascadeController.instances.get(instance)?.initProp(key, items);\n    });\n  } as PropertyDecorator;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/deprecation.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.d.ts
new file mode 100644
index 0000000..433f57c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.d.ts
@@ -0,0 +1,17 @@
+import type { ReactiveElement, PropertyDeclaration } from 'lit';
+export type DeprecationDeclaration<K extends PropertyKey> = PropertyDeclaration & {
+    alias: string & K;
+    attribute: string;
+};
+/**
+ * Aliases the decorated field to an existing property, and logs a warning if it is used
+ * @param options alias is a drop in replacement
+ * @example deprecating an attribute
+ *          ```ts
+ *          @property({ reflect: true, attribute: 'color-palette'})
+ *          colorPalette: ColorPalette = 'base';
+ *
+ *          @deprecation('colorPalette') color?: ColorPalette;
+ *          ```
+ */
+export declare function deprecation<K extends PropertyKey>(options: DeprecationDeclaration<K>): <T extends ReactiveElement, L extends PropertyKey>(proto: Partial<Record<K | L, T>>, key: string & keyof T) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js
new file mode 100644
index 0000000..4d7b3d4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js
@@ -0,0 +1,45 @@
+import { Logger } from '../controllers/logger.js';
+/**
+ * Aliases the decorated field to an existing property, and logs a warning if it is used
+ * @param options alias is a drop in replacement
+ * @example deprecating an attribute
+ *          ```ts
+ *          @property({ reflect: true, attribute: 'color-palette'})
+ *          colorPalette: ColorPalette = 'base';
+ *
+ *          @deprecation('colorPalette') color?: ColorPalette;
+ *          ```
+ */
+export function deprecation(options) {
+    return function (proto, key) {
+        const { alias, ...deprecationOptions } = options;
+        const klass = proto.constructor;
+        const declaration = klass.getPropertyOptions(alias);
+        klass.createProperty(key, { ...declaration, ...deprecationOptions });
+        klass.addInitializer(instance => {
+            instance.addController(new Deprecation(instance, options, key));
+        });
+    };
+}
+class Deprecation {
+    constructor(host, options, deprecatedKey) {
+        this.host = host;
+        this.options = options;
+        this.deprecatedKey = deprecatedKey;
+        this.logged = false;
+        this.logger = new Logger(host);
+    }
+    hostUpdate() {
+        const { deprecatedKey, options: { alias } } = this;
+        if (this.host[deprecatedKey]) {
+            if (this.host[alias] !== this.host[deprecatedKey]) {
+                if (!this.logged) {
+                    this.logger.warn(`${deprecatedKey} is deprecated, use ${alias} instead`);
+                    this.logged = true;
+                }
+                this.host[alias] = this.host[deprecatedKey];
+            }
+        }
+    }
+}
+//# sourceMappingURL=deprecation.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js.map b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js.map
new file mode 100644
index 0000000..1c51a50
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/deprecation.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"deprecation.js","sourceRoot":"","sources":["deprecation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAOlD;;;;;;;;;;GAUG;AACH,MAAM,UAAU,WAAW,CACzB,OAAkC;IAElC,OAAO,UACL,KAAgC,EAChC,GAAqB;QAErB,MAAM,EAAE,KAAK,EAAE,GAAG,kBAAkB,EAAE,GAAG,OAAO,CAAC;QACjD,MAAM,KAAK,GAAI,KAAK,CAAC,WAAsC,CAAC;QAC5D,MAAM,WAAW,GAAG,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,GAAG,WAAW,EAAE,GAAG,kBAAkB,EAAE,CAAC,CAAC;QACrE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC9B,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAa,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,WAAW;IAKf,YACU,IAAO,EACP,OAAkC,EAClC,aAA+B;QAF/B,SAAI,GAAJ,IAAI,CAAG;QACP,YAAO,GAAP,OAAO,CAA2B;QAClC,kBAAa,GAAb,aAAa,CAAkB;QALjC,WAAM,GAAG,KAAK,CAAC;QAOrB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,UAAU;QACR,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,IAAI,CAAC;QACnD,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;YAC7B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAgB,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;gBAC7D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;oBACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa,uBAAuB,KAAK,UAAU,CAAC,CAAC;oBACzE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;gBACrB,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,KAAgB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACzD,CAAC;QACH,CAAC;IACH,CAAC;CACF","sourcesContent":["import type { ReactiveElement, PropertyDeclaration, ReactiveController } from 'lit';\n\nimport { Logger } from '../controllers/logger.js';\n\nexport type DeprecationDeclaration<K extends PropertyKey> = PropertyDeclaration & {\n  alias: string & K;\n  attribute: string;\n};\n\n/**\n * Aliases the decorated field to an existing property, and logs a warning if it is used\n * @param options alias is a drop in replacement\n * @example deprecating an attribute\n *          ```ts\n *          @property({ reflect: true, attribute: 'color-palette'})\n *          colorPalette: ColorPalette = 'base';\n *\n *          @deprecation('colorPalette') color?: ColorPalette;\n *          ```\n */\nexport function deprecation<K extends PropertyKey>(\n  options: DeprecationDeclaration<K>,\n) {\n  return function<T extends ReactiveElement, L extends PropertyKey>(\n    proto: Partial<Record<K | L, T>>,\n    key: string & keyof T\n  ): void {\n    const { alias, ...deprecationOptions } = options;\n    const klass = (proto.constructor as typeof ReactiveElement);\n    const declaration = klass.getPropertyOptions(alias);\n    klass.createProperty(key, { ...declaration, ...deprecationOptions });\n    klass.addInitializer(instance => {\n      instance.addController(new Deprecation(instance as T, options, key));\n    });\n  };\n}\n\nclass Deprecation<T extends ReactiveElement, K extends PropertyKey> implements ReactiveController {\n  private logger: Logger;\n\n  private logged = false;\n\n  constructor(\n    private host: T,\n    private options: DeprecationDeclaration<K>,\n    private deprecatedKey: string & keyof T\n  ) {\n    this.logger = new Logger(host);\n  }\n\n  hostUpdate() {\n    const { deprecatedKey, options: { alias } } = this;\n    if (this.host[deprecatedKey]) {\n      if (this.host[alias as keyof T] !== this.host[deprecatedKey]) {\n        if (!this.logged) {\n          this.logger.warn(`${deprecatedKey} is deprecated, use ${alias} instead`);\n          this.logged = true;\n        }\n        this.host[alias as keyof T] = this.host[deprecatedKey];\n      }\n    }\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/initializer.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/initializer.d.ts
new file mode 100644
index 0000000..f0c2efc
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/initializer.d.ts
@@ -0,0 +1,10 @@
+import type { ReactiveElement } from 'lit';
+import type { Options } from '../controllers/light-dom-controller.js';
+/**
+ * Runs the decorated method in `connectedCallback`,
+ * provided the element has light children, and sets
+ * up a mutation observer to re-run the callback,
+ * unless opted-out with `{ observe: false }`
+ * @param  options        Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options
+ */
+export declare function initializer<T extends ReactiveElement>(options?: Options): (proto: T, key: string) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/initializer.js b/node_modules/@patternfly/pfe-core/package/decorators/initializer.js
new file mode 100644
index 0000000..c6c99ff
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/initializer.js
@@ -0,0 +1,21 @@
+import { LightDOMController } from '../controllers/light-dom-controller.js';
+/**
+ * Runs the decorated method in `connectedCallback`,
+ * provided the element has light children, and sets
+ * up a mutation observer to re-run the callback,
+ * unless opted-out with `{ observe: false }`
+ * @param  options        Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options
+ */
+export function initializer(options) {
+    return function (proto, key) {
+        // @TODO: allow multiple initializers
+        proto.constructor.addInitializer(instance => {
+            const initializer = proto[key];
+            const controller = new LightDOMController(instance, initializer, options);
+            if (instance.isConnected) {
+                controller.hostConnected();
+            }
+        });
+    };
+}
+//# sourceMappingURL=initializer.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/initializer.js.map b/node_modules/@patternfly/pfe-core/package/decorators/initializer.js.map
new file mode 100644
index 0000000..ae6f426
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/initializer.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"initializer.js","sourceRoot":"","sources":["initializer.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,kBAAkB,EAAE,MAAM,wCAAwC,CAAC;AAE5E;;;;;;GAMG;AACH,MAAM,UAAU,WAAW,CAA4B,OAAiB;IACtE,OAAO,UAAS,KAAQ,EAAE,GAAW;QACnC,qCAAqC;QACpC,KAAK,CAAC,WAAsC,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YACtE,MAAM,WAAW,GAAG,KAAK,CAAC,GAAc,CAA0B,CAAC;YACnE,MAAM,UAAU,GAAG,IAAI,kBAAkB,CAAC,QAA2B,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;YAC7F,IAAI,QAAQ,CAAC,WAAW,EAAE,CAAC;gBACzB,UAAU,CAAC,aAAa,EAAE,CAAC;YAC7B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\nimport type { Options } from '../controllers/light-dom-controller.js';\n\nimport { LightDOMController } from '../controllers/light-dom-controller.js';\n\n/**\n * Runs the decorated method in `connectedCallback`,\n * provided the element has light children, and sets\n * up a mutation observer to re-run the callback,\n * unless opted-out with `{ observe: false }`\n * @param  options        Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options\n */\nexport function initializer<T extends ReactiveElement>(options?: Options) {\n  return function(proto: T, key: string): void {\n    // @TODO: allow multiple initializers\n    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {\n      const initializer = proto[key as keyof T] as unknown as () => void;\n      const controller = new LightDOMController(instance as ReactiveElement, initializer, options);\n      if (instance.isConnected) {\n        controller.hostConnected();\n      }\n    });\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/listen.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/listen.d.ts
new file mode 100644
index 0000000..76bab8f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/listen.d.ts
@@ -0,0 +1,8 @@
+import type { LitElement } from 'lit';
+/**
+ * Listens for a given event on the custom element.
+ * equivalent to calling `this.addEventListener` in the constructor
+ * @param type event type e.g. `click`
+ * @param options event listener options object e.g. `{ passive: true }`
+ */
+export declare function listen<P extends LitElement>(type: keyof HTMLElementEventMap, options?: AddEventListenerOptions): (proto: LitElement, methodName: string) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/listen.js b/node_modules/@patternfly/pfe-core/package/decorators/listen.js
new file mode 100644
index 0000000..b1e1283
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/listen.js
@@ -0,0 +1,22 @@
+/**
+ * Listens for a given event on the custom element.
+ * equivalent to calling `this.addEventListener` in the constructor
+ * @param type event type e.g. `click`
+ * @param options event listener options object e.g. `{ passive: true }`
+ */
+export function listen(type, options) {
+    return function (proto, methodName) {
+        const origConnected = proto.connectedCallback;
+        const origDisconnected = proto.disconnectedCallback;
+        const listener = proto[methodName];
+        proto.connectedCallback = function () {
+            origConnected?.call(this);
+            this.addEventListener(type, listener, options);
+        };
+        proto.disconnectedCallback = function () {
+            origDisconnected?.call(this);
+            this.removeEventListener(type, listener, options);
+        };
+    };
+}
+//# sourceMappingURL=listen.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/listen.js.map b/node_modules/@patternfly/pfe-core/package/decorators/listen.js.map
new file mode 100644
index 0000000..bb2f358
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/listen.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"listen.js","sourceRoot":"","sources":["listen.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,UAAU,MAAM,CACpB,IAA+B,EAC/B,OAAiC;IAEjC,OAAO,UACL,KAAiB,EACjB,UAAkB;QAElB,MAAM,aAAa,GAAG,KAAK,CAAC,iBAAiB,CAAC;QAC9C,MAAM,gBAAgB,GAAG,KAAK,CAAC,oBAAoB,CAAC;QACpD,MAAM,QAAQ,GAAI,KAAW,CAAC,UAAqB,CAAkB,CAAC;QACtE,KAAK,CAAC,iBAAiB,GAAG;YACxB,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC;QACF,KAAK,CAAC,oBAAoB,GAAG;YAC3B,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { LitElement } from 'lit';\n\n/**\n * Listens for a given event on the custom element.\n * equivalent to calling `this.addEventListener` in the constructor\n * @param type event type e.g. `click`\n * @param options event listener options object e.g. `{ passive: true }`\n */\nexport function listen<P extends LitElement>(\n  type: keyof HTMLElementEventMap,\n  options?: AddEventListenerOptions,\n) {\n  return function(\n    proto: LitElement,\n    methodName: string,\n  ): void {\n    const origConnected = proto.connectedCallback;\n    const origDisconnected = proto.disconnectedCallback;\n    const listener = (proto as P)[methodName as keyof P] as EventListener;\n    proto.connectedCallback = function() {\n      origConnected?.call(this);\n      this.addEventListener(type, listener, options);\n    };\n    proto.disconnectedCallback = function() {\n      origDisconnected?.call(this);\n      this.removeEventListener(type, listener, options);\n    };\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observed.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/observed.d.ts
new file mode 100644
index 0000000..ff9d0b3
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observed.d.ts
@@ -0,0 +1,29 @@
+import type { ReactiveElement } from 'lit';
+import type { ChangeCallback } from '../controllers/property-observer-controller.js';
+type TypedFieldDecorator<T> = (proto: T, key: string | keyof T) => void;
+/**
+ * Calls a _fooChanged method on the instance when the value changes.
+ * Works on any class field. When using on lit observed properties,
+ * Make sure `@observed` is to the left (i.e. called after) the `@property`
+ * or `@state` decorator.
+ * @example observing a lit property
+ *          ```ts
+ *          @observed @property() foo = 'bar';
+ *
+ *          protected _fooChanged(oldValue?: string, newValue?: string) {}
+ *          ```
+ * @example using a custom callback
+ *          ```ts
+ *          @observed('_myCallback') size = 'lg';
+ *
+ *          _myCallback(_, size) {...}
+ *          ```
+ * @example using an arrow function
+ *          ```ts
+ *          @observed((oldVal, newVal) => console.log(`Size changed from ${oldVal} to ${newVal}`))
+ *          ```
+ */
+export declare function observed<T extends ReactiveElement, V>(cb: ChangeCallback<T, V>): TypedFieldDecorator<T>;
+export declare function observed<T extends ReactiveElement>(methodName: string): TypedFieldDecorator<T>;
+export declare function observed<T extends ReactiveElement>(proto: T, key: string): void;
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observed.js b/node_modules/@patternfly/pfe-core/package/decorators/observed.js
new file mode 100644
index 0000000..68cf41c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observed.js
@@ -0,0 +1,47 @@
+import { PropertyObserverController } from '../controllers/property-observer-controller.js';
+// eslint-disable-next-line jsdoc/require-jsdoc
+export function observed(...as) {
+    if (as.length === 1) {
+        const [methodNameOrCb] = as;
+        return configuredDecorator(methodNameOrCb);
+    }
+    else {
+        return executeBareDecorator(...as);
+    }
+}
+/**
+ * @param proto element prototype
+ * @param propertyName propertyName
+ * @example ```typescript
+ *          @observed @property() foo?: string;
+ *          ```
+ */
+function executeBareDecorator(proto, propertyName) {
+    const klass = proto.constructor;
+    klass.addInitializer(x => initialize(x, propertyName, x[`_${propertyName}Changed`]));
+}
+/**
+ * @param methodNameOrCb string name of callback or function
+ * @example ```typescript
+ *          @observed('_myCallback') @property() foo?: string;
+ *          @observed((old) => console.log(old)) @property() bar?: string;
+ *          ```
+ */
+function configuredDecorator(methodNameOrCb) {
+    return function (proto, key) {
+        const propertyName = key;
+        const klass = proto.constructor;
+        if (typeof methodNameOrCb === 'function') {
+            const callback = methodNameOrCb;
+            klass.addInitializer(x => initialize(x, propertyName, callback));
+        }
+        else {
+            klass.addInitializer(x => initialize(x, propertyName, x[methodNameOrCb]));
+        }
+    };
+}
+function initialize(instance, propertyName, callback) {
+    const controller = new PropertyObserverController(instance, { propertyName, callback });
+    instance.addController(controller);
+}
+//# sourceMappingURL=observed.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observed.js.map b/node_modules/@patternfly/pfe-core/package/decorators/observed.js.map
new file mode 100644
index 0000000..6466495
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observed.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"observed.js","sourceRoot":"","sources":["observed.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,0BAA0B,EAAE,MAAM,gDAAgD,CAAC;AAgC5F,+CAA+C;AAC/C,MAAM,UAAU,QAAQ,CAA4B,GAAG,EAAS;IAC9D,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACpB,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;QAC5B,OAAO,mBAAmB,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;SAAM,CAAC;QACN,OAAO,oBAAoB,CAAC,GAAG,EAA2B,CAAC,CAAC;IAC9D,CAAC;AACH,CAAC;AAED;;;;;;GAMG;AACH,SAAS,oBAAoB,CAA4B,KAAQ,EAAE,YAA8B;IAC/F,MAAM,KAAK,GAAG,KAAK,CAAC,WAAqC,CAAC;IAC1D,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAClC,CAAM,EACN,YAAY,EACZ,CAAC,CAAC,IAAI,YAAY,SAA2B,CAAsB,CACpE,CAAC,CAAC;AACL,CAAC;AAED;;;;;;GAMG;AACH,SAAS,mBAAmB,CAC1B,cAA0C;IAE1C,OAAO,UAAS,KAAK,EAAE,GAAG;QACxB,MAAM,YAAY,GAAG,GAAuB,CAAC;QAC7C,MAAM,KAAK,GAAG,KAAK,CAAC,WAAqC,CAAC;QAC1D,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE,CAAC;YACzC,MAAM,QAAQ,GAAG,cAAc,CAAC;YAChC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,CAAM,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;QACxE,CAAC;aAAM,CAAC;YACN,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAClC,CAAM,EACN,YAAY,EACZ,CAAC,CAAC,cAAuC,CAAsB,CAChE,CAAC,CAAC;QACL,CAAC;IACH,CAAC,CAAC;AACJ,CAAC;AAED,SAAS,UAAU,CACjB,QAAW,EACX,YAA8B,EAC9B,QAA2B;IAE3B,MAAM,UAAU,GAAG,IAAI,0BAA0B,CAAI,QAAa,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;IAChG,QAAQ,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\nimport type { ChangeCallback } from '../controllers/property-observer-controller.js';\n\nimport { PropertyObserverController } from '../controllers/property-observer-controller.js';\n\ntype TypedFieldDecorator<T> = (proto: T, key: string | keyof T) => void ;\n\n// eslint-disable-next-line jsdoc/require-param\n/**\n * Calls a _fooChanged method on the instance when the value changes.\n * Works on any class field. When using on lit observed properties,\n * Make sure `@observed` is to the left (i.e. called after) the `@property`\n * or `@state` decorator.\n * @example observing a lit property\n *          ```ts\n *          @observed @property() foo = 'bar';\n *\n *          protected _fooChanged(oldValue?: string, newValue?: string) {}\n *          ```\n * @example using a custom callback\n *          ```ts\n *          @observed('_myCallback') size = 'lg';\n *\n *          _myCallback(_, size) {...}\n *          ```\n * @example using an arrow function\n *          ```ts\n *          @observed((oldVal, newVal) => console.log(`Size changed from ${oldVal} to ${newVal}`))\n *          ```\n */\nexport function observed<T extends ReactiveElement, V>(\n  cb: ChangeCallback<T, V>,\n): TypedFieldDecorator<T>;\nexport function observed<T extends ReactiveElement>(methodName: string): TypedFieldDecorator<T>;\nexport function observed<T extends ReactiveElement>(proto: T, key: string): void;\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function observed<T extends ReactiveElement>(...as: any[]): void | TypedFieldDecorator<T> {\n  if (as.length === 1) {\n    const [methodNameOrCb] = as;\n    return configuredDecorator(methodNameOrCb);\n  } else {\n    return executeBareDecorator(...as as [T, string & keyof T]);\n  }\n}\n\n/**\n * @param proto element prototype\n * @param propertyName propertyName\n * @example ```typescript\n *          @observed @property() foo?: string;\n *          ```\n */\nfunction executeBareDecorator<T extends ReactiveElement>(proto: T, propertyName: string & keyof T) {\n  const klass = proto.constructor as typeof ReactiveElement;\n  klass.addInitializer(x => initialize(\n    x as T,\n    propertyName,\n    x[`_${propertyName}Changed` as keyof typeof x] as ChangeCallback<T>,\n  ));\n}\n\n/**\n * @param methodNameOrCb string name of callback or function\n * @example ```typescript\n *          @observed('_myCallback') @property() foo?: string;\n *          @observed((old) => console.log(old)) @property() bar?: string;\n *          ```\n */\nfunction configuredDecorator<T extends ReactiveElement>(\n  methodNameOrCb: string | ChangeCallback<T>,\n): TypedFieldDecorator<T> {\n  return function(proto, key) {\n    const propertyName = key as string & keyof T;\n    const klass = proto.constructor as typeof ReactiveElement;\n    if (typeof methodNameOrCb === 'function') {\n      const callback = methodNameOrCb;\n      klass.addInitializer(x => initialize(x as T, propertyName, callback));\n    } else {\n      klass.addInitializer(x => initialize(\n        x as T,\n        propertyName,\n        x[methodNameOrCb as keyof ReactiveElement] as ChangeCallback<T>,\n      ));\n    }\n  };\n}\n\nfunction initialize<T extends ReactiveElement>(\n  instance: T,\n  propertyName: string & keyof T,\n  callback: ChangeCallback<T>,\n) {\n  const controller = new PropertyObserverController<T>(instance as T, { propertyName, callback });\n  instance.addController(controller);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observes.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/observes.d.ts
new file mode 100644
index 0000000..6389591
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observes.d.ts
@@ -0,0 +1,15 @@
+import type { ReactiveElement } from 'lit';
+import { type PropertyObserverOptions } from '@patternfly/pfe-core/controllers/property-observer-controller.js';
+/**
+ * Observes changes on the given property and calls the decorated method
+ * with the old and new values when it changes. In cases where the decorated method
+ * needs to access uninitialized class fields, You may need to wait for the element to connect
+ * before running your effects. In that case, you can optionally specify which
+ * lifecycle state to wait for. e.g.:
+ * - `waitFor: 'firstUpdate'` waits until the first update cycle has completed
+ * - `waitFor: 'updated'` waits until the next update cycle has completed
+ * - `waitFor: 'connected'` waits until the element connects
+ * @param propertyName property to react to
+ * @param [options] options including lifecycle to wait on.
+ */
+export declare function observes<T extends ReactiveElement>(propertyName: string & keyof T, options?: Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>): (proto: T, methodName: string) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observes.js b/node_modules/@patternfly/pfe-core/package/decorators/observes.js
new file mode 100644
index 0000000..d2a82be
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observes.js
@@ -0,0 +1,30 @@
+import { PropertyObserverController, } from '@patternfly/pfe-core/controllers/property-observer-controller.js';
+/**
+ * Observes changes on the given property and calls the decorated method
+ * with the old and new values when it changes. In cases where the decorated method
+ * needs to access uninitialized class fields, You may need to wait for the element to connect
+ * before running your effects. In that case, you can optionally specify which
+ * lifecycle state to wait for. e.g.:
+ * - `waitFor: 'firstUpdate'` waits until the first update cycle has completed
+ * - `waitFor: 'updated'` waits until the next update cycle has completed
+ * - `waitFor: 'connected'` waits until the element connects
+ * @param propertyName property to react to
+ * @param [options] options including lifecycle to wait on.
+ */
+export function observes(propertyName, options) {
+    return function (proto, methodName) {
+        const callback = proto[methodName];
+        if (typeof callback !== 'function') {
+            throw new Error('@observes must decorate a class method');
+        }
+        const klass = proto.constructor;
+        klass.addInitializer(instance => {
+            instance.addController(new PropertyObserverController(instance, {
+                ...options,
+                propertyName,
+                callback,
+            }));
+        });
+    };
+}
+//# sourceMappingURL=observes.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/observes.js.map b/node_modules/@patternfly/pfe-core/package/decorators/observes.js.map
new file mode 100644
index 0000000..caa27ef
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/observes.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"observes.js","sourceRoot":"","sources":["observes.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,0BAA0B,GAG3B,MAAM,kEAAkE,CAAC;AAE1E;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,QAAQ,CACtB,YAA8B,EAC9B,OAAmF;IAEnF,OAAO,UAAS,KAAQ,EAAE,UAAkB;QAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAqB,CAAsB,CAAC;QACnE,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,WAAqC,CAAC;QAC1D,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC9B,QAAQ,CAAC,aAAa,CAAC,IAAI,0BAA0B,CAAC,QAAa,EAAE;gBACnE,GAAG,OAAO;gBACV,YAAY;gBACZ,QAAQ;aACT,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\n\nimport {\n  PropertyObserverController,\n  type ChangeCallback,\n  type PropertyObserverOptions,\n} from '@patternfly/pfe-core/controllers/property-observer-controller.js';\n\n/**\n * Observes changes on the given property and calls the decorated method\n * with the old and new values when it changes. In cases where the decorated method\n * needs to access uninitialized class fields, You may need to wait for the element to connect\n * before running your effects. In that case, you can optionally specify which\n * lifecycle state to wait for. e.g.:\n * - `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n * - `waitFor: 'updated'` waits until the next update cycle has completed\n * - `waitFor: 'connected'` waits until the element connects\n * @param propertyName property to react to\n * @param [options] options including lifecycle to wait on.\n */\nexport function observes<T extends ReactiveElement>(\n  propertyName: string & keyof T,\n  options?: Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>,\n) {\n  return function(proto: T, methodName: string): void {\n    const callback = proto[methodName as keyof T] as ChangeCallback<T>;\n    if (typeof callback !== 'function') {\n      throw new Error('@observes must decorate a class method');\n    }\n    const klass = proto.constructor as typeof ReactiveElement;\n    klass.addInitializer(instance => {\n      instance.addController(new PropertyObserverController(instance as T, {\n        ...options,\n        propertyName,\n        callback,\n      }));\n    });\n  };\n}\n\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/time.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/time.d.ts
new file mode 100644
index 0000000..b3d0f4f
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/time.d.ts
@@ -0,0 +1,5 @@
+/**
+ * Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)
+ * @param tag - short string to identify the method name
+ */
+export declare function time(tag?: string): (_: unknown, key: string, descriptor: PropertyDescriptor) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/time.js b/node_modules/@patternfly/pfe-core/package/decorators/time.js
new file mode 100644
index 0000000..ffbb3af
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/time.js
@@ -0,0 +1,33 @@
+/**
+ * Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)
+ * @param tag - short string to identify the method name
+ */
+export function time(tag) {
+    return function (_, key, descriptor) {
+        const { value: f } = descriptor ?? {};
+        if (!(typeof f === 'function')) {
+            throw new Error('@time() may only decorate class methods');
+        }
+        descriptor.value = function (...args) {
+            const TAG = tag ?? `${this.constructor.name}-${key}`;
+            const START_TAG = `start-${TAG}`;
+            const END_TAG = `end-${TAG}`;
+            performance.mark(START_TAG);
+            const x = f.call(this, ...args);
+            const ret = () => {
+                performance.mark(END_TAG);
+                performance.measure(TAG, START_TAG, END_TAG);
+                // eslint-disable-next-line no-console
+                console.log(Array.from(performance.getEntriesByName(TAG)).pop());
+                return x;
+            };
+            if (x instanceof Promise) {
+                return x.then(ret);
+            }
+            else {
+                return ret();
+            }
+        };
+    };
+}
+//# sourceMappingURL=time.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/time.js.map b/node_modules/@patternfly/pfe-core/package/decorators/time.js.map
new file mode 100644
index 0000000..566e1cf
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/time.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"time.js","sourceRoot":"","sources":["time.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,UAAU,IAAI,CAAC,GAAY;IAC/B,OAAO,UACL,CAAU,EACV,GAAW,EACX,UAA8B;QAE9B,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,UAAU,IAAI,EAAE,CAAC;QAEtC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,UAAU,CAAC,EAAE,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;QAC7D,CAAC;QAED,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;YACxC,MAAM,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,IAAI,GAAG,EAAE,CAAC;YACrD,MAAM,SAAS,GAAG,SAAS,GAAG,EAAE,CAAC;YACjC,MAAM,OAAO,GAAG,OAAO,GAAG,EAAE,CAAC;YAE7B,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAE5B,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YAEhC,MAAM,GAAG,GAAG,GAAG,EAAE;gBACf,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC1B,WAAW,CAAC,OAAO,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC7C,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;gBACjE,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;YAEF,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC;gBACzB,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,EAAE,CAAC;YACf,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)\n * @param tag - short string to identify the method name\n */\nexport function time(tag?: string) {\n  return function(\n    _: unknown,\n    key: string,\n    descriptor: PropertyDescriptor,\n  ): void {\n    const { value: f } = descriptor ?? {};\n\n    if (!(typeof f === 'function')) {\n      throw new Error('@time() may only decorate class methods');\n    }\n\n    descriptor.value = function(...args: any[]) {\n      const TAG = tag ?? `${this.constructor.name}-${key}`;\n      const START_TAG = `start-${TAG}`;\n      const END_TAG = `end-${TAG}`;\n\n      performance.mark(START_TAG);\n\n      const x = f.call(this, ...args);\n\n      const ret = () => {\n        performance.mark(END_TAG);\n        performance.measure(TAG, START_TAG, END_TAG);\n        // eslint-disable-next-line no-console\n        console.log(Array.from(performance.getEntriesByName(TAG)).pop());\n        return x;\n      };\n\n      if (x instanceof Promise) {\n        return x.then(ret);\n      } else {\n        return ret();\n      }\n    };\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/trace.d.ts b/node_modules/@patternfly/pfe-core/package/decorators/trace.d.ts
new file mode 100644
index 0000000..cac93ec
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/trace.d.ts
@@ -0,0 +1,5 @@
+/**
+ * Logs the result of a class method
+ * @param tag log tag, prepended to outputs
+ */
+export declare function trace(tag?: string): (_: unknown, key: string, descriptor: PropertyDescriptor) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/trace.js b/node_modules/@patternfly/pfe-core/package/decorators/trace.js
new file mode 100644
index 0000000..115c3cb
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/trace.js
@@ -0,0 +1,24 @@
+/**
+ * Logs the result of a class method
+ * @param tag log tag, prepended to outputs
+ */
+export function trace(tag) {
+    return function (_, key, descriptor) {
+        const { value: f } = descriptor;
+        descriptor.value = function (...args) {
+            const x = f.call(this, ...args);
+            const ret = () => {
+                // eslint-disable-next-line no-console
+                console.log(tag ?? key, x);
+                return x;
+            };
+            if (x instanceof Promise) {
+                return x.then(ret);
+            }
+            else {
+                return ret();
+            }
+        };
+    };
+}
+//# sourceMappingURL=trace.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/decorators/trace.js.map b/node_modules/@patternfly/pfe-core/package/decorators/trace.js.map
new file mode 100644
index 0000000..3aafb6d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/decorators/trace.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"trace.js","sourceRoot":"","sources":["trace.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,GAAY;IAChC,OAAO,UACL,CAAU,EACV,GAAW,EACX,UAA8B;QAE9B,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,UAAU,CAAC;QAChC,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;YACxC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YAEhC,MAAM,GAAG,GAAG,GAAG,EAAE;gBACf,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3B,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;YAEF,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC;gBACzB,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,EAAE,CAAC;YACf,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Logs the result of a class method\n * @param tag log tag, prepended to outputs\n */\nexport function trace(tag?: string) {\n  return function(\n    _: unknown,\n    key: string,\n    descriptor: PropertyDescriptor,\n  ): void {\n    const { value: f } = descriptor;\n    descriptor.value = function(...args: any[]) {\n      const x = f.call(this, ...args);\n\n      const ret = () => {\n        // eslint-disable-next-line no-console\n        console.log(tag ?? key, x);\n        return x;\n      };\n\n      if (x instanceof Promise) {\n        return x.then(ret);\n      } else {\n        return ret();\n      }\n    };\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.d.ts b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.d.ts
new file mode 100644
index 0000000..0e31fc1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.d.ts
@@ -0,0 +1,9 @@
+/**
+ * Whether the two arrays are equivalent
+ * Arrays are equivalent when they are both empty, or when their lengths are equal and each of
+ * their members is equal (===) to the corresponding member in the other array.
+ * If either argument is not an array, the result will be strict equivalence (===)
+ * @param a first array
+ * @param b second array
+ */
+export declare function arraysAreEquivalent(a: unknown, b: unknown): boolean;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js
new file mode 100644
index 0000000..f603fd6
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js
@@ -0,0 +1,28 @@
+/**
+ * Whether the two arrays are equivalent
+ * Arrays are equivalent when they are both empty, or when their lengths are equal and each of
+ * their members is equal (===) to the corresponding member in the other array.
+ * If either argument is not an array, the result will be strict equivalence (===)
+ * @param a first array
+ * @param b second array
+ */
+export function arraysAreEquivalent(a, b) {
+    if (!Array.isArray(a) || !Array.isArray(b)) {
+        return a === b;
+    }
+    else if (a.length !== b.length) { // lengths are different
+        return false;
+    }
+    else if (!a.length && !b.length) { // both are empty
+        return true;
+    }
+    else { // multi and length of both is equal
+        for (const [i, element] of a.entries()) {
+            if (element !== b[i]) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
+//# sourceMappingURL=arraysAreEquivalent.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js.map b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js.map
new file mode 100644
index 0000000..b143380
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/arraysAreEquivalent.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"arraysAreEquivalent.js","sourceRoot":"","sources":["arraysAreEquivalent.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CAAC,CAAU,EAAE,CAAU;IACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;SAAM,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,wBAAwB;QAC1D,OAAO,KAAK,CAAC;IACf,CAAC;SAAM,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,iBAAiB;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC,CAAC,oCAAoC;QAC3C,KAAK,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC;YACvC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["/**\n * Whether the two arrays are equivalent\n * Arrays are equivalent when they are both empty, or when their lengths are equal and each of\n * their members is equal (===) to the corresponding member in the other array.\n * If either argument is not an array, the result will be strict equivalence (===)\n * @param a first array\n * @param b second array\n */\nexport function arraysAreEquivalent(a: unknown, b: unknown): boolean {\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    return a === b;\n  } else if (a.length !== b.length) { // lengths are different\n    return false;\n  } else if (!a.length && !b.length) { // both are empty\n    return true;\n  } else { // multi and length of both is equal\n    for (const [i, element] of a.entries()) {\n      if (element !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/containsDeep.d.ts b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.d.ts
new file mode 100644
index 0000000..beee0cc
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.d.ts
@@ -0,0 +1,8 @@
+/**
+ * Whether or not the container contains the node,
+ * and if not, whether the node is contained by any element
+ * slotted in to the container
+ * @param container haystack
+ * @param node needle
+ */
+export declare function containsDeep(container: Element, node: Node): boolean;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js
new file mode 100644
index 0000000..385da12
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js
@@ -0,0 +1,23 @@
+/**
+ * Whether or not the container contains the node,
+ * and if not, whether the node is contained by any element
+ * slotted in to the container
+ * @param container haystack
+ * @param node needle
+ */
+export function containsDeep(container, node) {
+    if (container.contains(node)) {
+        return true;
+    }
+    else {
+        for (const slot of container.querySelectorAll('slot') ?? []) {
+            for (const el of slot.assignedElements()) {
+                if (el.contains(node)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+}
+//# sourceMappingURL=containsDeep.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js.map b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js.map
new file mode 100644
index 0000000..1d9075d
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/containsDeep.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"containsDeep.js","sourceRoot":"","sources":["containsDeep.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,MAAM,UAAU,YAAY,CAC1B,SAAkB,EAClB,IAAU;IAEV,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;QAC7B,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC;QACN,KAAK,MAAM,IAAI,IAAI,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;YAC5D,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE,CAAC;gBACzC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;oBACtB,OAAO,IAAI,CAAC;gBACd,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC","sourcesContent":["/**\n * Whether or not the container contains the node,\n * and if not, whether the node is contained by any element\n * slotted in to the container\n * @param container haystack\n * @param node needle\n */\nexport function containsDeep(\n  container: Element,\n  node: Node,\n): boolean {\n  if (container.contains(node)) {\n    return true;\n  } else {\n    for (const slot of container.querySelectorAll('slot') ?? []) {\n      for (const el of slot.assignedElements()) {\n        if (el.contains(node)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/context.d.ts b/node_modules/@patternfly/pfe-core/package/functions/context.d.ts
new file mode 100644
index 0000000..79de826
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/context.d.ts
@@ -0,0 +1,8 @@
+import { createContext, type Context } from '@lit/context';
+/**
+ * In order to prevent late-upgrading-context-consumers from 'missing'
+ * their rightful context providers, we must set up a `ContextRoot` on the body.
+ * Always use this function when creating contexts that are shared with child elements.
+ * @param args createContext args
+ */
+export declare function createContextWithRoot<T>(...args: Parameters<typeof createContext>): Context<unknown, T>;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/context.js b/node_modules/@patternfly/pfe-core/package/functions/context.js
new file mode 100644
index 0000000..feff5a4
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/context.js
@@ -0,0 +1,26 @@
+import { ContextRoot, createContext } from '@lit/context';
+import { isServer } from 'lit';
+let root;
+function makeContextRoot() {
+    const root = new ContextRoot();
+    if (!isServer) {
+        root.attach(document.body);
+    }
+    else {
+        root.attach(
+        // @ts-expect-error: enable context root in ssr
+        globalThis.litServerRoot);
+    }
+    return root;
+}
+/**
+ * In order to prevent late-upgrading-context-consumers from 'missing'
+ * their rightful context providers, we must set up a `ContextRoot` on the body.
+ * Always use this function when creating contexts that are shared with child elements.
+ * @param args createContext args
+ */
+export function createContextWithRoot(...args) {
+    root ?? (root = makeContextRoot());
+    return createContext(...args);
+}
+//# sourceMappingURL=context.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/context.js.map b/node_modules/@patternfly/pfe-core/package/functions/context.js.map
new file mode 100644
index 0000000..11f9bc1
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/context.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAgB,MAAM,cAAc,CAAC;AACxE,OAAO,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AAE/B,IAAI,IAAiB,CAAC;AAEtB,SAAS,eAAe;IACtB,MAAM,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;IAC/B,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;SAAM,CAAC;QACN,IAAI,CAAC,MAAM;QACT,+CAA+C;QAC/C,UAAU,CAAC,aAAa,CACzB,CAAC;IACJ,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,qBAAqB,CACnC,GAAG,IAAsC;IAEzC,IAAI,KAAJ,IAAI,GAAK,eAAe,EAAE,EAAC;IAC3B,OAAO,aAAa,CAAI,GAAG,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { ContextRoot, createContext, type Context } from '@lit/context';\nimport { isServer } from 'lit';\n\nlet root: ContextRoot;\n\nfunction makeContextRoot() {\n  const root = new ContextRoot();\n  if (!isServer) {\n    root.attach(document.body);\n  } else {\n    root.attach(\n      // @ts-expect-error: enable context root in ssr\n      globalThis.litServerRoot,\n    );\n  }\n  return root;\n}\n\n/**\n * In order to prevent late-upgrading-context-consumers from 'missing'\n * their rightful context providers, we must set up a `ContextRoot` on the body.\n * Always use this function when creating contexts that are shared with child elements.\n * @param args createContext args\n */\nexport function createContextWithRoot<T>(\n  ...args: Parameters<typeof createContext>\n): Context<unknown, T> {\n  root ??= makeContextRoot();\n  return createContext<T>(...args);\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/debounce.d.ts b/node_modules/@patternfly/pfe-core/package/functions/debounce.d.ts
new file mode 100644
index 0000000..a246e22
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/debounce.d.ts
@@ -0,0 +1,9 @@
+/**
+ * Debounce helper function
+ * @see https://davidwalsh.name/javascript-debounce-function
+ *
+ * @param  func Function to be debounced
+ * @param  delay How long until it will be run
+ * @param  immediate Whether it should be run at the start instead of the end of the debounce
+ */
+export declare function debounce(func: (...args: any[]) => unknown, delay: number, immediate?: boolean): (this: unknown, ...args: any[]) => void;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/debounce.js b/node_modules/@patternfly/pfe-core/package/functions/debounce.js
new file mode 100644
index 0000000..905c696
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/debounce.js
@@ -0,0 +1,28 @@
+/**
+ * Debounce helper function
+ * @see https://davidwalsh.name/javascript-debounce-function
+ *
+ * @param  func Function to be debounced
+ * @param  delay How long until it will be run
+ * @param  immediate Whether it should be run at the start instead of the end of the debounce
+ */
+export function debounce(func, delay, immediate = false) {
+    let timeout;
+    return function (...args) {
+        // eslint-disable-next-line @typescript-eslint/no-this-alias
+        const context = this;
+        const later = function () {
+            timeout = null;
+            if (!immediate) {
+                func.apply(context, args);
+            }
+        };
+        const callNow = immediate && !timeout;
+        clearTimeout(timeout);
+        timeout = window.setTimeout(later, delay);
+        if (callNow) {
+            func.apply(context, args);
+        }
+    };
+}
+//# sourceMappingURL=debounce.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/debounce.js.map b/node_modules/@patternfly/pfe-core/package/functions/debounce.js.map
new file mode 100644
index 0000000..f772997
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/debounce.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"debounce.js","sourceRoot":"","sources":["debounce.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,MAAM,UAAU,QAAQ,CACtB,IAAiC,EACjC,KAAa,EACb,SAAS,GAAG,KAAK;IAEjB,IAAI,OAAsB,CAAC;IAC3B,OAAO,UAAwB,GAAG,IAAW;QAC3C,4DAA4D;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,KAAK,GAAG;YACZ,OAAO,GAAG,IAAI,CAAC;YACf,IAAI,CAAC,SAAS,EAAE,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC;QACF,MAAM,OAAO,GAAG,SAAS,IAAI,CAAC,OAAO,CAAC;QACtC,YAAY,CAAC,OAAiB,CAAC,CAAC;QAChC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC1C,IAAI,OAAO,EAAE,CAAC;YACZ,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Debounce helper function\n * @see https://davidwalsh.name/javascript-debounce-function\n *\n * @param  func Function to be debounced\n * @param  delay How long until it will be run\n * @param  immediate Whether it should be run at the start instead of the end of the debounce\n */\nexport function debounce(\n  func: (...args: any[]) => unknown,\n  delay: number,\n  immediate = false\n) {\n  let timeout: number | null;\n  return function(this: unknown, ...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    const later = function() {\n      timeout = null;\n      if (!immediate) {\n        func.apply(context, args);\n      }\n    };\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout as number);\n    timeout = window.setTimeout(later, delay);\n    if (callNow) {\n      func.apply(context, args);\n    }\n  };\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/isElementInView.d.ts b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.d.ts
new file mode 100644
index 0000000..9f8ee16
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.d.ts
@@ -0,0 +1,10 @@
+/**
+ * This function returns whether or not an element is within the viewable area of a container. If partial is true,
+ * then this function will return true even if only part of the element is in view.
+ * @param container  The container to check if the element is in view of.
+ * @param element    The element to check if it is view
+ * @param partial   true if partial view is allowed
+ * @param strict    true if strict mode is set, never consider the container width and element width
+ * @returns True if the component is in View.
+ */
+export declare function isElementInView(container: HTMLElement, element: HTMLElement, partial?: boolean, strict?: boolean): boolean;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js
new file mode 100644
index 0000000..3468ec5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js
@@ -0,0 +1,29 @@
+/**
+ * This function returns whether or not an element is within the viewable area of a container. If partial is true,
+ * then this function will return true even if only part of the element is in view.
+ * @param container  The container to check if the element is in view of.
+ * @param element    The element to check if it is view
+ * @param partial   true if partial view is allowed
+ * @param strict    true if strict mode is set, never consider the container width and element width
+ * @returns True if the component is in View.
+ */
+export function isElementInView(container, element, partial = false, strict = false) {
+    if (!container || !element) {
+        return false;
+    }
+    const containerBounds = container.getBoundingClientRect();
+    const elementBounds = element.getBoundingClientRect();
+    const containerBoundsLeft = Math.ceil(containerBounds.left);
+    const containerBoundsRight = Math.floor(containerBounds.right);
+    const elementBoundsLeft = Math.ceil(elementBounds.left);
+    const elementBoundsRight = Math.floor(elementBounds.right);
+    // Check if in view
+    const isTotallyInView = elementBoundsLeft >= containerBoundsLeft
+        && elementBoundsRight <= containerBoundsRight;
+    const isPartiallyInView = (partial || (!strict && containerBounds.width < elementBounds.width))
+        && ((elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft)
+            || (elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight));
+    // Return outcome
+    return isTotallyInView || isPartiallyInView;
+}
+//# sourceMappingURL=isElementInView.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js.map b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js.map
new file mode 100644
index 0000000..771a5cc
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/isElementInView.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"isElementInView.js","sourceRoot":"","sources":["isElementInView.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,MAAM,UAAU,eAAe,CAC7B,SAAsB,EACtB,OAAoB,EACpB,OAAO,GAAG,KAAK,EACf,MAAM,GAAG,KAAK;IAEd,IAAI,CAAC,SAAS,IAAI,CAAC,OAAO,EAAE,CAAC;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC;IACD,MAAM,eAAe,GAAG,SAAS,CAAC,qBAAqB,EAAE,CAAC;IAC1D,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,EAAE,CAAC;IACtD,MAAM,mBAAmB,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC5D,MAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAC/D,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAE3D,mBAAmB;IACnB,MAAM,eAAe,GACnB,iBAAiB,IAAI,mBAAmB;WACrC,kBAAkB,IAAI,oBAAoB,CAAC;IAChD,MAAM,iBAAiB,GACrB,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,IAAI,eAAe,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;WAClE,CAAC,CAAC,iBAAiB,GAAG,mBAAmB,IAAI,kBAAkB,GAAG,mBAAmB,CAAC;eACpF,CAAC,kBAAkB,GAAG,oBAAoB,IAAI,iBAAiB,GAAG,oBAAoB,CAAC,CAAC,CAAC;IAEhG,iBAAiB;IACjB,OAAO,eAAe,IAAI,iBAAiB,CAAC;AAC9C,CAAC","sourcesContent":["/**\n * This function returns whether or not an element is within the viewable area of a container. If partial is true,\n * then this function will return true even if only part of the element is in view.\n * @param container  The container to check if the element is in view of.\n * @param element    The element to check if it is view\n * @param partial   true if partial view is allowed\n * @param strict    true if strict mode is set, never consider the container width and element width\n * @returns True if the component is in View.\n */\nexport function isElementInView(\n  container: HTMLElement,\n  element: HTMLElement,\n  partial = false,\n  strict = false\n): boolean {\n  if (!container || !element) {\n    return false;\n  }\n  const containerBounds = container.getBoundingClientRect();\n  const elementBounds = element.getBoundingClientRect();\n  const containerBoundsLeft = Math.ceil(containerBounds.left);\n  const containerBoundsRight = Math.floor(containerBounds.right);\n  const elementBoundsLeft = Math.ceil(elementBounds.left);\n  const elementBoundsRight = Math.floor(elementBounds.right);\n\n  // Check if in view\n  const isTotallyInView =\n    elementBoundsLeft >= containerBoundsLeft\n    && elementBoundsRight <= containerBoundsRight;\n  const isPartiallyInView =\n    (partial || (!strict && containerBounds.width < elementBounds.width))\n    && ((elementBoundsLeft < containerBoundsLeft && elementBoundsRight > containerBoundsLeft)\n      || (elementBoundsRight > containerBoundsRight && elementBoundsLeft < containerBoundsRight));\n\n  // Return outcome\n  return isTotallyInView || isPartiallyInView;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/random.d.ts b/node_modules/@patternfly/pfe-core/package/functions/random.d.ts
new file mode 100644
index 0000000..d30a8c5
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/random.d.ts
@@ -0,0 +1,6 @@
+/**
+ * A quick way to fetch a random ID value.
+ * _Note:_ All values are prefixed automatically to ensure an ID-safe value is returned.
+ * @param  prefix id-safe string prefix
+ */
+export declare function getRandomId(prefix?: string): string;
diff --git a/node_modules/@patternfly/pfe-core/package/functions/random.js b/node_modules/@patternfly/pfe-core/package/functions/random.js
new file mode 100644
index 0000000..a652cae
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/random.js
@@ -0,0 +1,9 @@
+/**
+ * A quick way to fetch a random ID value.
+ * _Note:_ All values are prefixed automatically to ensure an ID-safe value is returned.
+ * @param  prefix id-safe string prefix
+ */
+export function getRandomId(prefix = 'pfe') {
+    return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;
+}
+//# sourceMappingURL=random.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/functions/random.js.map b/node_modules/@patternfly/pfe-core/package/functions/random.js.map
new file mode 100644
index 0000000..8117134
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/functions/random.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"random.js","sourceRoot":"","sources":["random.ts"],"names":[],"mappings":"AAAA;;;;GAIG;AACH,MAAM,UAAU,WAAW,CAAC,MAAM,GAAG,KAAK;IACxC,OAAO,GAAG,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;AAChE,CAAC","sourcesContent":["/**\n * A quick way to fetch a random ID value.\n * _Note:_ All values are prefixed automatically to ensure an ID-safe value is returned.\n * @param  prefix id-safe string prefix\n */\nexport function getRandomId(prefix = 'pfe') {\n  return `${prefix}-${Math.random().toString(36).substr(2, 9)}`;\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/package.json b/node_modules/@patternfly/pfe-core/package/package.json
new file mode 100644
index 0000000..6974a01
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/package.json
@@ -0,0 +1,98 @@
+{
+  "name": "@patternfly/pfe-core",
+  "version": "4.0.5",
+  "license": "MIT",
+  "description": "PatternFly Elements Core Library",
+  "customElements": "custom-elements.json",
+  "type": "module",
+  "main": "./core.js",
+  "module": "./core.js",
+  "types": "./core.d.ts",
+  "exports": {
+    ".": "./core.js",
+    "./*": "./*",
+    "./ssr-shims.js": {
+      "node": "./ssr-shims.js",
+      "import": "./core.js",
+      "default": "./core.js"
+    },
+    "./controllers/*": "./controllers/*",
+    "./decorators/*": "./decorators/*",
+    "./functions/*": "./functions/*",
+    "./core.js": "./core.js",
+    "./decorators.js": "./decorators.js",
+    "./controllers/activedescendant-controller.js": "./controllers/activedescendant-controller.js",
+    "./controllers/cascade-controller.js": "./controllers/cascade-controller.js",
+    "./controllers/css-variable-controller.js": "./controllers/css-variable-controller.js",
+    "./controllers/floating-dom-controller.js": "./controllers/floating-dom-controller.js",
+    "./controllers/internals-controller.js": "./controllers/internals-controller.js",
+    "./controllers/light-dom-controller.js": "./controllers/light-dom-controller.js",
+    "./controllers/logger.js": "./controllers/logger.js",
+    "./controllers/perf-controller.js": "./controllers/perf-controller.js",
+    "./controllers/property-observer-controller.js": "./controllers/property-observer-controller.js",
+    "./controllers/roving-tabindex-controller.js": "./controllers/roving-tabindex-controller.js",
+    "./controllers/scroll-spy-controller.js": "./controllers/scroll-spy-controller.js",
+    "./controllers/slot-controller.js": {
+      "node": "./controllers/slot-controller-server.js",
+      "import": "./controllers/slot-controller.js",
+      "default": "./controllers/slot-controller.js"
+    },
+    "./controllers/style-controller.js": "./controllers/style-controller.js",
+    "./controllers/timestamp-controller.js": "./controllers/timestamp-controller.js",
+    "./controllers/tabs-controller.js": "./controllers/tabs-controller.js",
+    "./decorators/bound.js": "./decorators/bound.js",
+    "./decorators/cascades.js": "./decorators/cascades.js",
+    "./decorators/deprecation.js": "./decorators/deprecation.js",
+    "./decorators/initializer.js": "./decorators/initializer.js",
+    "./decorators/observed.js": "./decorators/observed.js",
+    "./decorators/observes.js": "./decorators/observes.js",
+    "./decorators/time.js": "./decorators/time.js",
+    "./decorators/trace.js": "./decorators/trace.js",
+    "./functions/arraysAreEquivalent.js": "./functions/arraysAreEquivalent.js",
+    "./functions/context.js": "./functions/context.js",
+    "./functions/containsDeep.js": "./functions/containsDeep.js",
+    "./functions/debounce.js": "./functions/debounce.js",
+    "./functions/random.js": "./functions/random.js",
+    "./functions/isElementInView.js": "./functions/isElementInView.js"
+  },
+  "publishConfig": {
+    "access": "public",
+    "registry": "https://registry.npmjs.org/"
+  },
+  "scripts": {
+    "clean": "git clean -fX -e node_modules -e tsconfig.tsbuildinfo",
+    "analyze": "cem analyze",
+    "test": "wtr --files './test/*.spec.ts' --config ../../web-test-runner.config.js"
+  },
+  "dependencies": {
+    "@floating-ui/dom": "^1.6.10",
+    "@lit/context": "^1.1.3",
+    "lit": "^3.2.1"
+  },
+  "repository": {
+    "type": "git",
+    "url": "github:patternfly/patternfly-elements",
+    "directory": "core/pfe-core"
+  },
+  "bugs": {
+    "url": "https://github.com/patternfly/patternfly-elements/issues"
+  },
+  "files": [
+    "**/*.LEGAL.txt",
+    "**/*.css",
+    "!*.ts",
+    "**/*.d.ts",
+    "**/*.js",
+    "**/*.js.map",
+    "!custom-elements-manifest.config.js",
+    "custom-elements.json",
+    "!demo/*",
+    "!docs/*",
+    "!test/*"
+  ],
+  "keywords": [
+    "patternfly",
+    "custom elements",
+    "web components"
+  ]
+}
diff --git a/node_modules/@patternfly/pfe-core/package/ssr-shims.d.ts b/node_modules/@patternfly/pfe-core/package/ssr-shims.d.ts
new file mode 100644
index 0000000..cb0ff5c
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/ssr-shims.d.ts
@@ -0,0 +1 @@
+export {};
diff --git a/node_modules/@patternfly/pfe-core/package/ssr-shims.js b/node_modules/@patternfly/pfe-core/package/ssr-shims.js
new file mode 100644
index 0000000..1584acc
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/ssr-shims.js
@@ -0,0 +1,53 @@
+var _a;
+import { installWindowOnGlobal } from '@lit-labs/ssr/lib/dom-shim.js';
+class ObserverShim {
+    observe() {
+        void 0;
+    }
+    disconnect() {
+        void 0;
+    }
+}
+class MiniHTMLElement {
+    constructor(tagName) {
+        this.tagName = tagName;
+        this.innerHTML = '';
+    }
+}
+class MiniHTMLTemplateElement extends MiniHTMLElement {
+    constructor() {
+        super(...arguments);
+        this.content = { cloneNode: () => this.innerHTML };
+    }
+}
+function getComputedStyle() {
+    return {
+        getPropertyPriority() {
+            return '';
+        },
+        getPropertyValue() {
+            return '';
+        },
+    };
+}
+;
+// @ts-expect-error: opt in to event support in ssr
+globalThis.litSsrCallConnectedCallback = true;
+installWindowOnGlobal({
+    ErrorEvent: Event,
+    IntersectionObserver: ObserverShim,
+    MutationObserver: ObserverShim,
+    ResizeObserver: ObserverShim,
+    getComputedStyle,
+});
+// @ts-expect-error: this runs in node
+(_a = globalThis.navigator).userAgent ?? (_a.userAgent = '@lit-labs/ssr');
+globalThis.document.createElement = function createElement(tagName) {
+    switch (tagName) {
+        case 'template':
+            return new MiniHTMLTemplateElement(tagName);
+        default:
+            return new MiniHTMLElement(tagName);
+    }
+};
+//# sourceMappingURL=ssr-shims.js.map
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/package/ssr-shims.js.map b/node_modules/@patternfly/pfe-core/package/ssr-shims.js.map
new file mode 100644
index 0000000..5a05b91
--- /dev/null
+++ b/node_modules/@patternfly/pfe-core/package/ssr-shims.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ssr-shims.js","sourceRoot":"","sources":["ssr-shims.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;AAEtE,MAAM,YAAY;IAChB,OAAO;QACL,KAAK,CAAC,CAAC;IACT,CAAC;IAED,UAAU;QACR,KAAK,CAAC,CAAC;IACT,CAAC;CACF;AAED,MAAM,eAAe;IAEnB,YAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QADlC,cAAS,GAAG,EAAE,CAAC;IACuB,CAAC;CACxC;AAED,MAAM,uBAAwB,SAAQ,eAAe;IAArD;;QACE,YAAO,GAAG,EAAE,SAAS,EAAE,GAAW,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IACxD,CAAC;CAAA;AAED,SAAS,gBAAgB;IACvB,OAAO;QACL,mBAAmB;YACjB,OAAO,EAAE,CAAC;QACZ,CAAC;QACD,gBAAgB;YACd,OAAO,EAAE,CAAC;QACZ,CAAC;KACF,CAAC;AACJ,CAAC;AAAA,CAAC;AAEF,mDAAmD;AACnD,UAAU,CAAC,2BAA2B,GAAG,IAAI,CAAC;AAE9C,qBAAqB,CAAC;IACpB,UAAU,EAAE,KAAK;IACjB,oBAAoB,EAAE,YAAY;IAClC,gBAAgB,EAAE,YAAY;IAC9B,cAAc,EAAE,YAAY;IAC5B,gBAAgB;CACjB,CAAC,CAAC;AAEH,sCAAsC;AACtC,MAAA,UAAU,CAAC,SAAS,EAAC,SAAS,QAAT,SAAS,GAAK,eAAe,EAAC;AAEnD,UAAU,CAAC,QAAQ,CAAC,aAAa,GAAG,SAAS,aAAa,CAAC,OAAe;IACxE,QAAQ,OAAO,EAAE,CAAC;QAChB,KAAK,UAAU;YACb,OAAO,IAAI,uBAAuB,CAAC,OAAO,CAA2B,CAAC;QACxE;YACE,OAAO,IAAI,eAAe,CAAC,OAAO,CAAgB,CAAC;IACvD,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { installWindowOnGlobal } from '@lit-labs/ssr/lib/dom-shim.js';\n\nclass ObserverShim {\n  observe(): void {\n    void 0;\n  }\n\n  disconnect(): void {\n    void 0;\n  }\n}\n\nclass MiniHTMLElement {\n  innerHTML = '';\n  constructor(public tagName: string) { }\n}\n\nclass MiniHTMLTemplateElement extends MiniHTMLElement {\n  content = { cloneNode: (): string => this.innerHTML };\n}\n\nfunction getComputedStyle() {\n  return {\n    getPropertyPriority() {\n      return '';\n    },\n    getPropertyValue() {\n      return '';\n    },\n  };\n};\n\n// @ts-expect-error: opt in to event support in ssr\nglobalThis.litSsrCallConnectedCallback = true;\n\ninstallWindowOnGlobal({\n  ErrorEvent: Event,\n  IntersectionObserver: ObserverShim,\n  MutationObserver: ObserverShim,\n  ResizeObserver: ObserverShim,\n  getComputedStyle,\n});\n\n// @ts-expect-error: this runs in node\nglobalThis.navigator.userAgent ??= '@lit-labs/ssr';\n\nglobalThis.document.createElement = function createElement(tagName: string): HTMLElement {\n  switch (tagName) {\n    case 'template':\n      return new MiniHTMLTemplateElement(tagName) as unknown as HTMLElement;\n    default:\n      return new MiniHTMLElement(tagName) as HTMLElement;\n  }\n};\n"]}
\ No newline at end of file
