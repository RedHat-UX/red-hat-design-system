diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
index 1e8466d..8be17d4 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js
@@ -1,6 +1,9 @@
-var _ScrollSpyController_instances, _a, _ScrollSpyController_instances_1, _ScrollSpyController_tagNames, _ScrollSpyController_activeAttribute, _ScrollSpyController_io, _ScrollSpyController_passedLinks, _ScrollSpyController_force, _ScrollSpyController_intersected, _ScrollSpyController_root, _ScrollSpyController_rootMargin, _ScrollSpyController_threshold, _ScrollSpyController_intersectingTargets, _ScrollSpyController_linkTargetMap, _ScrollSpyController_getRootNode, _ScrollSpyController_getHash, _ScrollSpyController_onIntersection, _ScrollSpyController_linkChildren_get, _ScrollSpyController_initializing, _ScrollSpyController_initIo, _ScrollSpyController_markPassed, _ScrollSpyController_setActive, _ScrollSpyController_activateHash, _ScrollSpyController_nextIntersection, _ScrollSpyController_onIo;
+var _ScrollSpyController_instances, _a, _ScrollSpyController_instances_1, _ScrollSpyController_tagNames, _ScrollSpyController_activeAttribute, _ScrollSpyController_io, _ScrollSpyController_intersected, _ScrollSpyController_root, _ScrollSpyController_rootMargin, _ScrollSpyController_threshold, _ScrollSpyController_intersectionEntries, _ScrollSpyController_linkTargetMap, _ScrollSpyController_targetLinkMap, _ScrollSpyController_getRootNode, _ScrollSpyController_getHash, _ScrollSpyController_onIntersection, _ScrollSpyController_linkChildren_get, _ScrollSpyController_initializing, _ScrollSpyController_reconcile, _ScrollSpyController_initIo, _ScrollSpyController_setActive, _ScrollSpyController_activateHash, _ScrollSpyController_nextIntersection, _ScrollSpyController_onIo;
 import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
 import { isServer } from 'lit';
+function byBoundingClientY(a, b) {
+    return a.boundingClientRect.y - b.boundingClientRect.y;
+}
 export class ScrollSpyController {
     get root() {
         return __classPrivateFieldGet(this, _ScrollSpyController_root, "f");
@@ -32,17 +35,14 @@ export class ScrollSpyController {
         _ScrollSpyController_tagNames.set(this, void 0);
         _ScrollSpyController_activeAttribute.set(this, void 0);
         _ScrollSpyController_io.set(this, void 0);
-        /** Which link's targets have already scrolled past? */
-        _ScrollSpyController_passedLinks.set(this, new Set());
-        /** Ignore intersections? */
-        _ScrollSpyController_force.set(this, false);
         /** Has the intersection observer found an element? */
         _ScrollSpyController_intersected.set(this, false);
         _ScrollSpyController_root.set(this, void 0);
         _ScrollSpyController_rootMargin.set(this, void 0);
         _ScrollSpyController_threshold.set(this, void 0);
-        _ScrollSpyController_intersectingTargets.set(this, new Set());
+        _ScrollSpyController_intersectionEntries.set(this, new Set());
         _ScrollSpyController_linkTargetMap.set(this, new Map());
+        _ScrollSpyController_targetLinkMap.set(this, new Map());
         _ScrollSpyController_getRootNode.set(this, void 0);
         _ScrollSpyController_getHash.set(this, void 0);
         _ScrollSpyController_onIntersection.set(this, void 0);
@@ -70,20 +70,11 @@ export class ScrollSpyController {
      * @param link usually an `<a>`
      */
     async setActive(link) {
-        __classPrivateFieldSet(this, _ScrollSpyController_force, true, "f");
         __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
-        let sawActive = false;
-        for (const child of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
-            __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_markPassed).call(this, child, !sawActive);
-            if (child === link) {
-                sawActive = true;
-            }
-        }
         await __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_nextIntersection).call(this);
-        __classPrivateFieldSet(this, _ScrollSpyController_force, false, "f");
     }
 }
-_a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttribute = new WeakMap(), _ScrollSpyController_io = new WeakMap(), _ScrollSpyController_passedLinks = new WeakMap(), _ScrollSpyController_force = new WeakMap(), _ScrollSpyController_intersected = new WeakMap(), _ScrollSpyController_root = new WeakMap(), _ScrollSpyController_rootMargin = new WeakMap(), _ScrollSpyController_threshold = new WeakMap(), _ScrollSpyController_intersectingTargets = new WeakMap(), _ScrollSpyController_linkTargetMap = new WeakMap(), _ScrollSpyController_getRootNode = new WeakMap(), _ScrollSpyController_getHash = new WeakMap(), _ScrollSpyController_onIntersection = new WeakMap(), _ScrollSpyController_initializing = new WeakMap(), _ScrollSpyController_instances = new WeakSet(), _ScrollSpyController_linkChildren_get = function _ScrollSpyController_linkChildren_get() {
+_a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _ScrollSpyController_activeAttribute = new WeakMap(), _ScrollSpyController_io = new WeakMap(), _ScrollSpyController_intersected = new WeakMap(), _ScrollSpyController_root = new WeakMap(), _ScrollSpyController_rootMargin = new WeakMap(), _ScrollSpyController_threshold = new WeakMap(), _ScrollSpyController_intersectionEntries = new WeakMap(), _ScrollSpyController_linkTargetMap = new WeakMap(), _ScrollSpyController_targetLinkMap = new WeakMap(), _ScrollSpyController_getRootNode = new WeakMap(), _ScrollSpyController_getHash = new WeakMap(), _ScrollSpyController_onIntersection = new WeakMap(), _ScrollSpyController_initializing = new WeakMap(), _ScrollSpyController_instances = new WeakSet(), _ScrollSpyController_linkChildren_get = function _ScrollSpyController_linkChildren_get() {
     if (isServer) {
         return [];
     }
@@ -91,6 +82,25 @@ _a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _Scroll
         return Array.from(this.host.querySelectorAll(__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')))
             .filter(__classPrivateFieldGet(this, _ScrollSpyController_getHash, "f"));
     }
+}, _ScrollSpyController_reconcile = function _ScrollSpyController_reconcile() {
+    const { scrollY, innerHeight } = window;
+    let link = null;
+    // scrolled to top
+    if (scrollY === 0) {
+        link = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(0);
+        // scrolled to bottom
+    }
+    else if (Math.round(innerHeight + scrollY) >= document.body.scrollHeight) {
+        link = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(-1);
+        // scrolling somewhere in the middle
+    }
+    else {
+        const [entry] = [...__classPrivateFieldGet(this, _ScrollSpyController_intersectionEntries, "f")].sort(byBoundingClientY);
+        link = __classPrivateFieldGet(this, _ScrollSpyController_targetLinkMap, "f").get(entry?.target);
+    }
+    if (link) {
+        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
+    }
 }, _ScrollSpyController_initIo = async function _ScrollSpyController_initIo() {
     const rootNode = __classPrivateFieldGet(this, _ScrollSpyController_getRootNode, "f").call(this);
     if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {
@@ -103,17 +113,11 @@ _a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _Scroll
                 if (target) {
                     __classPrivateFieldGet(this, _ScrollSpyController_io, "f")?.observe(target);
                     __classPrivateFieldGet(this, _ScrollSpyController_linkTargetMap, "f").set(link, target);
+                    __classPrivateFieldGet(this, _ScrollSpyController_targetLinkMap, "f").set(target, link);
                 }
             }
         }
     }
-}, _ScrollSpyController_markPassed = function _ScrollSpyController_markPassed(link, force) {
-    if (force) {
-        __classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f").add(link);
-    }
-    else {
-        __classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f").delete(link);
-    }
 }, _ScrollSpyController_setActive = function _ScrollSpyController_setActive(link) {
     for (const child of __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get)) {
         child.toggleAttribute(__classPrivateFieldGet(this, _ScrollSpyController_activeAttribute, "f"), child === link);
@@ -136,50 +140,31 @@ _a = ScrollSpyController, _ScrollSpyController_tagNames = new WeakMap(), _Scroll
         await new Promise(requestAnimationFrame);
     }
 }, _ScrollSpyController_onIo = async function _ScrollSpyController_onIo(entries) {
-    if (!__classPrivateFieldGet(this, _ScrollSpyController_force, "f")) {
-        for (const { target, boundingClientRect, intersectionRect } of entries) {
-            const selector = `:is(${__classPrivateFieldGet(this, _ScrollSpyController_tagNames, "f").join(',')})[href="#${target.id}"]`;
-            const link = this.host.querySelector(selector);
-            if (link) {
-                __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_markPassed).call(this, link, boundingClientRect.top < intersectionRect.top);
-            }
-        }
-        const link = [...__classPrivateFieldGet(this, _ScrollSpyController_passedLinks, "f")];
-        const last = link.at(-1);
-        __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, last ?? __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(0));
-    }
     __classPrivateFieldSet(this, _ScrollSpyController_intersected, true, "f");
-    __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").clear();
+    __classPrivateFieldGet(this, _ScrollSpyController_intersectionEntries, "f").clear();
     for (const entry of entries) {
         if (entry.isIntersecting) {
-            __classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").add(entry.target);
+            __classPrivateFieldGet(this, _ScrollSpyController_intersectionEntries, "f").add(entry);
         }
     }
     if (__classPrivateFieldGet(this, _ScrollSpyController_initializing, "f")) {
-        const ints = entries?.filter(x => x.isIntersecting) ?? [];
-        if (__classPrivateFieldGet(this, _ScrollSpyController_intersectingTargets, "f").size > 0) {
-            const [{ target = null } = {}] = ints;
-            const { id } = target ?? {};
-            if (id) {
-                const link = __classPrivateFieldGet(this, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).find(link => __classPrivateFieldGet(this, _ScrollSpyController_getHash, "f").call(this, link) === `#${id}`);
-                if (link) {
-                    __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(this, link);
-                }
-            }
-        }
         __classPrivateFieldSet(this, _ScrollSpyController_initializing, false, "f");
     }
     __classPrivateFieldGet(this, _ScrollSpyController_onIntersection, "f")?.call(this);
+    __classPrivateFieldGet(this, _ScrollSpyController_instances, "m", _ScrollSpyController_reconcile).call(this);
 };
 _ScrollSpyController_instances_1 = { value: new Set };
 (() => {
     if (!isServer) {
         addEventListener('scroll', () => {
-            if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {
-                __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
-                    __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_setActive).call(ssc, __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "a", _ScrollSpyController_linkChildren_get).at(-1));
-                });
-            }
+            __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+                __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_reconcile).call(ssc);
+            });
+        }, { passive: true });
+        addEventListener('scrollend', () => {
+            __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
+                __classPrivateFieldGet(ssc, _ScrollSpyController_instances, "m", _ScrollSpyController_reconcile).call(ssc);
+            });
         }, { passive: true });
         addEventListener('hashchange', () => {
             __classPrivateFieldGet(_a, _a, "f", _ScrollSpyController_instances_1).forEach(ssc => {
diff --git a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
index f350c7e..c095faf 100644
--- a/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
+++ b/node_modules/@patternfly/pfe-core/controllers/scroll-spy-controller.js.map
@@ -1 +1 @@
-{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n\n  /**\n   * Optional callback for when an intersection occurs\n   */\n  onIntersection?(): void;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  static #instances = new Set<ScrollSpyController>;\n\n  static {\n    if (!isServer) {\n      addEventListener('scroll', () => {\n        if (Math.round(window.innerHeight + window.scrollY) >= document.body.scrollHeight) {\n          this.#instances.forEach(ssc => {\n            ssc.#setActive(ssc.#linkChildren.at(-1));\n          });\n        }\n      }, { passive: true });\n      addEventListener('hashchange', () => {\n        this.#instances.forEach(ssc => {\n          ssc.#activateHash();\n        });\n      });\n    }\n  }\n\n  #tagNames: string[];\n\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Which link's targets have already scrolled past? */\n  #passedLinks = new Set<Element>();\n\n  /** Ignore intersections? */\n  #force = false;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n\n  #rootMargin?: string;\n\n  #threshold: number | number[];\n\n  #intersectingTargets = new Set<Element>();\n\n  #linkTargetMap = new Map<Element, Element | null>();\n\n  #getRootNode: () => Node | null;\n\n  #getHash: (el: Element) => string | null;\n\n  #onIntersection?: () => void;\n\n  get #linkChildren(): Element[] {\n    if (isServer) {\n      return [];\n    } else {\n      return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n          .filter(this.#getHash);\n    }\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode?.() ?? null;\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n    this.#onIntersection = options?.onIntersection;\n  }\n\n  hostConnected(): void {\n    ScrollSpyController.#instances.add(this);\n    this.#initIo();\n  }\n\n  hostDisconnected(): void {\n    ScrollSpyController.#instances.delete(this);\n    this.#io?.disconnect();\n  }\n\n  #initializing = true;\n\n  async #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      for (const link of this.#linkChildren) {\n        const id = this.#getHash(link)?.replace('#', '');\n        if (id) {\n          const target = document.getElementById(id);\n          if (target) {\n            this.#io?.observe(target);\n            this.#linkTargetMap.set(link, target);\n          }\n        }\n      }\n    }\n  }\n\n  #markPassed(link: Element, force: boolean) {\n    if (force) {\n      this.#passedLinks.add(link);\n    } else {\n      this.#passedLinks.delete(link);\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #activateHash() {\n    const links = this.#linkChildren;\n    const { hash } = location;\n    if (!hash) {\n      this.setActive(links.at(0) ?? null);\n    } else {\n      await this.#nextIntersection();\n      this.setActive(links.find(x => this.#getHash(x) === hash) ?? null);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    if (!this.#force) {\n      for (const { target, boundingClientRect, intersectionRect } of entries) {\n        const selector = `:is(${this.#tagNames.join(',')})[href=\"#${target.id}\"]`;\n        const link = this.host.querySelector(selector);\n        if (link) {\n          this.#markPassed(link, boundingClientRect.top < intersectionRect.top);\n        }\n      }\n      const link = [...this.#passedLinks];\n      const last = link.at(-1);\n      this.#setActive(last ?? this.#linkChildren.at(0));\n    }\n    this.#intersected = true;\n    this.#intersectingTargets.clear();\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        this.#intersectingTargets.add(entry.target);\n      }\n    }\n    if (this.#initializing) {\n      const ints = entries?.filter(x => x.isIntersecting) ?? [];\n      if (this.#intersectingTargets.size > 0) {\n        const [{ target = null } = {}] = ints;\n        const { id } = target ?? {};\n        if (id) {\n          const link = this.#linkChildren.find(link => this.#getHash(link) === `#${id}`);\n          if (link) {\n            this.#setActive(link);\n          }\n        }\n      }\n      this.#initializing = false;\n    }\n    this.#onIntersection?.();\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#force = true;\n    this.#setActive(link);\n    let sawActive = false;\n    for (const child of this.#linkChildren) {\n      this.#markPassed(child, !sawActive);\n      if (child === link) {\n        sawActive = true;\n      }\n    }\n    await this.#nextIntersection();\n    this.#force = false;\n  }\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"scroll-spy-controller.js","sourceRoot":"","sources":["scroll-spy-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nexport interface ScrollSpyControllerOptions extends IntersectionObserverInit {\n  /**\n   * Tag names of legal link children.\n   * Legal children must have an `href` property/attribute pair, like `<a>`.\n   */\n  tagNames: string[];\n\n  /**\n   * Attribute to set on the active link element.\n   * @default 'active'\n   */\n  activeAttribute?: string;\n\n  /**\n   * The root node to query content for\n   * @default the host's root node\n   */\n  rootNode?: Node;\n\n  /**\n   * function to call on link children to get their URL hash (i.e. id to scroll to)\n   * @default el => el.getAttribute('href');\n   */\n  getHash?: (el: Element) => string | null;\n\n  /**\n   * Optional callback for when an intersection occurs\n   */\n  onIntersection?(): void;\n}\n\nfunction byBoundingClientY(a: IntersectionObserverEntry, b: IntersectionObserverEntry) {\n  return a.boundingClientRect.y - b.boundingClientRect.y;\n}\n\nexport class ScrollSpyController implements ReactiveController {\n  static #instances = new Set<ScrollSpyController>;\n\n  static {\n    if (!isServer) {\n      addEventListener('scroll', () => {\n        this.#instances.forEach(ssc => {\n          ssc.#reconcile();\n        });\n      }, { passive: true });\n      addEventListener('scrollend', () => {\n        this.#instances.forEach(ssc => {\n          ssc.#reconcile();\n        });\n      }, { passive: true });\n      addEventListener('hashchange', () => {\n        this.#instances.forEach(ssc => {\n          ssc.#activateHash();\n        });\n      });\n    }\n  }\n\n  #tagNames: string[];\n\n  #activeAttribute: string;\n\n  #io?: IntersectionObserver;\n\n  /** Has the intersection observer found an element? */\n  #intersected = false;\n\n  #root: ScrollSpyControllerOptions['root'];\n\n  #rootMargin?: string;\n\n  #threshold: number | number[];\n\n  #intersectionEntries = new Set<IntersectionObserverEntry>();\n\n  #linkTargetMap = new Map<Element, Element | null>();\n  #targetLinkMap = new Map<Element, Element | null>();\n\n  #getRootNode: () => Node | null;\n\n  #getHash: (el: Element) => string | null;\n\n  #onIntersection?: () => void;\n\n  get #linkChildren(): Element[] {\n    if (isServer) {\n      return [];\n    } else {\n      return Array.from(this.host.querySelectorAll(this.#tagNames.join(',')))\n          .filter(this.#getHash);\n    }\n  }\n\n  get root(): Element | Document | null | undefined {\n    return this.#root;\n  }\n\n  set root(v) {\n    this.#root = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get rootMargin(): string | undefined {\n    return this.#rootMargin;\n  }\n\n  set rootMargin(v) {\n    this.#rootMargin = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  get threshold(): number | number[] {\n    return this.#threshold;\n  }\n\n  set threshold(v) {\n    this.#threshold = v;\n    this.#io?.disconnect();\n    this.#initIo();\n  }\n\n  constructor(\n    private host: ReactiveControllerHost & HTMLElement,\n    options: ScrollSpyControllerOptions,\n  ) {\n    host.addController(this);\n    this.#tagNames = options.tagNames;\n    this.#root = options.root;\n    this.#rootMargin = options.rootMargin;\n    this.#activeAttribute = options.activeAttribute ?? 'active';\n    this.#threshold = options.threshold ?? 0.85;\n    this.#getRootNode = () => options.rootNode ?? host.getRootNode?.() ?? null;\n    this.#getHash = options?.getHash ?? ((el: Element) => el.getAttribute('href'));\n    this.#onIntersection = options?.onIntersection;\n  }\n\n  hostConnected(): void {\n    ScrollSpyController.#instances.add(this);\n    this.#initIo();\n  }\n\n  hostDisconnected(): void {\n    ScrollSpyController.#instances.delete(this);\n    this.#io?.disconnect();\n  }\n\n  #initializing = true;\n\n  #reconcile() {\n    const { scrollY, innerHeight } = window;\n    let link: Element | null | undefined = null;\n    // scrolled to top\n    if (scrollY === 0) {\n      link = this.#linkChildren.at(0);\n    // scrolled to bottom\n    } else if (Math.round(innerHeight + scrollY) >= document.body.scrollHeight) {\n      link = this.#linkChildren.at(-1);\n    // scrolling somewhere in the middle\n    } else {\n      const [entry] = [...this.#intersectionEntries].sort(byBoundingClientY);\n      link = this.#targetLinkMap.get(entry?.target);\n    }\n    if (link) {\n      this.#setActive(link);\n    }\n  }\n\n  async #initIo() {\n    const rootNode = this.#getRootNode();\n    if (rootNode instanceof Document || rootNode instanceof ShadowRoot) {\n      const { rootMargin, threshold, root } = this;\n      this.#io = new IntersectionObserver(r => this.#onIo(r), { root, rootMargin, threshold });\n      for (const link of this.#linkChildren) {\n        const id = this.#getHash(link)?.replace('#', '');\n        if (id) {\n          const target = document.getElementById(id);\n          if (target) {\n            this.#io?.observe(target);\n            this.#linkTargetMap.set(link, target);\n            this.#targetLinkMap.set(target, link);\n          }\n        }\n      }\n    }\n  }\n\n  #setActive(link?: EventTarget | null) {\n    for (const child of this.#linkChildren) {\n      child.toggleAttribute(this.#activeAttribute, child === link);\n    }\n  }\n\n  async #activateHash() {\n    const links = this.#linkChildren;\n    const { hash } = location;\n    if (!hash) {\n      this.setActive(links.at(0) ?? null);\n    } else {\n      await this.#nextIntersection();\n      this.setActive(links.find(x => this.#getHash(x) === hash) ?? null);\n    }\n  }\n\n  async #nextIntersection() {\n    this.#intersected = false;\n    // safeguard the loop\n    setTimeout(() => this.#intersected = false, 3000);\n    while (!this.#intersected) {\n      await new Promise(requestAnimationFrame);\n    }\n  }\n\n  async #onIo(entries: IntersectionObserverEntry[]) {\n    this.#intersected = true;\n    this.#intersectionEntries.clear();\n    for (const entry of entries) {\n      if (entry.isIntersecting) {\n        this.#intersectionEntries.add(entry);\n      }\n    }\n    if (this.#initializing) {\n      this.#initializing = false;\n    }\n    this.#onIntersection?.();\n    this.#reconcile();\n  }\n\n  /**\n   * Explicitly set the active item\n   * @param link usually an `<a>`\n   */\n  public async setActive(link: EventTarget | null): Promise<void> {\n    this.#setActive(link);\n    await this.#nextIntersection();\n  }\n}\n"]}
\ No newline at end of file
diff --git a/node_modules/@patternfly/pfe-core/custom-elements.json b/node_modules/@patternfly/pfe-core/custom-elements.json
index 20da7f5..d03e282 100644
--- a/node_modules/@patternfly/pfe-core/custom-elements.json
+++ b/node_modules/@patternfly/pfe-core/custom-elements.json
@@ -650,7 +650,6 @@
       "declarations": [
         {
           "name": "InternalsController",
-          "description": "reactively forward the internals object's aria mixin prototype",
           "members": [
             {
               "name": "instances",
@@ -1477,7 +1476,7 @@
         },
         {
           "name": "ListboxController",
-          "description": "Options for listbox controller",
+          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
           "members": [
             {
               "name": "instances",
@@ -2879,7 +2878,6 @@
         },
         {
           "name": "Deprecation",
-          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used",
           "members": [
             {
               "name": "logger",
