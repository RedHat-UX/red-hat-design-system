diff --git a/node_modules/@patternfly/pfe-tools/typescript/transformers/css-imports.cjs b/node_modules/@patternfly/pfe-tools/typescript/transformers/css-imports.cjs
index 3291c90..c86cf7e 100644
--- a/node_modules/@patternfly/pfe-tools/typescript/transformers/css-imports.cjs
+++ b/node_modules/@patternfly/pfe-tools/typescript/transformers/css-imports.cjs
@@ -3,22 +3,29 @@ const ts = require('typescript');
 const fs = require('node:fs');
 const { pathToFileURL } = require('node:url');
 
+const SEEN_SOURCES = new WeakSet();
+
 /**
  * @param {import('typescript').CoreTransformationContext} ctx
  * @param {import('typescript').SourceFile} sourceFile
  */
 function createLitCssImportStatement(ctx, sourceFile) {
+  if (SEEN_SOURCES.has(sourceFile)) {
+    return;
+  }
   for (const statement of sourceFile.statements) {
     if (
       ts.isImportDeclaration(statement) &&
       statement.moduleSpecifier.getText() === 'lit') {
       for (const binding of statement.importClause?.namedBindings?.getChildren() ?? []) {
         if (binding.getText() === 'css') {
+          SEEN_SOURCES.add(sourceFile);
           return;
         }
       }
     }
   }
+  SEEN_SOURCES.add(sourceFile);
   return ctx.factory.createImportDeclaration(
     undefined,
     ctx.factory.createImportClause(
@@ -38,10 +45,10 @@ function createLitCssImportStatement(ctx, sourceFile) {
 
 /**
  * @param {import('typescript').CoreTransformationContext} ctx
- * @param {string} content
+ * @param {string} stylesheet
  * @param {string} [name]
  */
-function createLitCssTaggedTemplateLiteral(ctx, content, name) {
+function createLitCssTaggedTemplateLiteral(ctx, stylesheet, name) {
   return ctx.factory.createVariableStatement(
     undefined,
     ctx.factory.createVariableDeclarationList([
@@ -52,19 +59,36 @@ function createLitCssTaggedTemplateLiteral(ctx, content, name) {
         ctx.factory.createTaggedTemplateExpression(
           ctx.factory.createIdentifier('css'),
           undefined,
-          ctx.factory.createNoSubstitutionTemplateLiteral(content),
+          ctx.factory.createNoSubstitutionTemplateLiteral(stylesheet),
         )
       )
     ], ts.NodeFlags.Const)
   );
 }
 
+/**
+ * @param {string} stylesheet
+ * @param {string} filePath
+ */
+function minifyCss(stylesheet, filePath) {
+  const CleanCSS = require('clean-css');
+  try {
+    const clean = new CleanCSS({ returnPromise: false });
+    const { styles } = clean.minify(stylesheet);
+    return styles;
+  } catch (e) {
+    console.log('Could not minify ', filePath);
+    console.error(e);
+    return stylesheet;
+  }
+}
+
 /**
  * Replace .css import specifiers with .css.js import specifiers
  * @param {import('typescript').Program} _program
  * @return {import('typescript').TransformerFactory<import('typescript').Node>}
  */
-module.exports = function(_program, { inline = false } = {}) {
+module.exports = function(_program, { inline = false, minify = false } = {}) {
   return ctx => {
     /**
      * @param {import('typescript').Node} node
@@ -78,9 +102,10 @@ module.exports = function(_program, { inline = false } = {}) {
             const dir = pathToFileURL(fileName);
             const url = new URL(specifier, dir);
             const content = fs.readFileSync(url, 'utf-8');
+            const stylesheet = minify ? minifyCss(content, url.pathname) : content;
             return [
               createLitCssImportStatement(ctx, node.getSourceFile()),
-              createLitCssTaggedTemplateLiteral(ctx, content, node.importClause?.name?.getText()),
+              createLitCssTaggedTemplateLiteral(ctx, stylesheet, node.importClause?.name?.getText()),
             ];
           } else {
             return ctx.factory.createImportDeclaration(
@@ -120,3 +145,5 @@ module.exports = function(_program, { inline = false } = {}) {
     };
   };
 };
+
+
