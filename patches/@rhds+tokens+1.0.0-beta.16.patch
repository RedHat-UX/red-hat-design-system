diff --git a/node_modules/@rhds/tokens/json/rhds.tokens.json b/node_modules/@rhds/tokens/json/rhds.tokens.json
index 15fb1c4..e2e0123 100644
--- a/node_modules/@rhds/tokens/json/rhds.tokens.json
+++ b/node_modules/@rhds/tokens/json/rhds.tokens.json
@@ -9107,7 +9107,7 @@
         "com.redhat.ux": {
           "heading": "Text color",
           "collapse": true,
-          "description": "Each theme features two shades of gray for text, Primary and Secondary.\n#### Accessibility\nContrast is important when choosing colors for UI elements for visitors. Awareness of standards and best practices is the key to an accessible color palette. We are committed to complying with the [Web Content Accessibility Guidelines AA][wcag] standard contrast ratios. We choose colors that support usability by ensuring sufficient color contrast between elements so that visitors with low vision can browse our web properties.\n##### Text on backgrounds\nBlack text should be used on light backgrounds and vice versa. If a page features both light and dark themes, UI elements and text should be placed on contrasting background colors. Layouts with colored backgrounds or a photo changes the rules regarding the placement of text, so use white or black text for body copy applications.\n[wcag]: https://www.w3.org/WAI/WCAG2AA-Conformance.html"
+          "description": "Each theme features two shades of gray for text, Primary and Secondary.\n#### Accessibility\nContrast is important when choosing colors for UI elements for visitors. Awareness of standards and best practices is the key to an accessible color palette. We are committed to complying with the [Web Content Accessibility Guidelines AA][wcag] standard contrast ratios. We choose colors that support usability by ensuring sufficient color contrast between elements so that visitors with low vision can browse our web properties.\n##### Text on backgrounds\nBlack text should be used on light backgrounds and vice versa. If a page features both light and dark themes, UI elements and text should be placed on contrasting background colors. Layouts with colored backgrounds or a photo changes the rules regarding the placement of text, so use white or black text for body copy applications.\n\n[wcag]: https://www.w3.org/WAI/WCAG2AA-Conformance.html"
         }
       },
       "primary": {
diff --git a/node_modules/@rhds/tokens/package.json b/node_modules/@rhds/tokens/package.json
index ac5c378..5b1b2ac 100644
--- a/node_modules/@rhds/tokens/package.json
+++ b/node_modules/@rhds/tokens/package.json
@@ -28,7 +28,8 @@
       "require": "./json/*"
     },
     "./plugins/11ty.cjs": "./plugins/11ty.cjs",
-    "./plugins/stylelint.cjs": "./plugins/stylelint.cjs"
+    "./plugins/stylelint.cjs": "./plugins/stylelint.cjs",
+    "./css/*": "./css/*"
   },
   "files": [
     "css",
diff --git a/node_modules/@rhds/tokens/plugins/11ty.cjs b/node_modules/@rhds/tokens/plugins/11ty.cjs
index ece88c8..16a980d 100644
--- a/node_modules/@rhds/tokens/plugins/11ty.cjs
+++ b/node_modules/@rhds/tokens/plugins/11ty.cjs
@@ -56,7 +56,7 @@ function getDescription(collection) {
   }
 }
 
-function table({ tokens, name = '', docs } = {}) {
+function table({ tokens, name = '', docs, attrs = {} } = {}) {
   if (!tokens.length || name.startsWith('$')) {
     return '';
   }
@@ -107,18 +107,18 @@ function table({ tokens, name = '', docs } = {}) {
           </td>
           <td class="token-name">
             <div>
-              <button class="copy-button name">
+              <button class="copy-button name" ${attrs({ type: 'name', token })}>
                 <code>--${token.name}</code>
               </button>${!isCrayon ? '' : `
               <br>
-              <button class="copy-button name">
+              <button class="copy-button name" ${attrs({ type: 'name', token })}>
                 <code>--${token.name}-rgb</code>
               </button>
               <br>
-              <button class="copy-button name">
+              <button class="copy-button name" ${attrs({ type: 'name', token })}>
                 <code>--${token.name}-hsl</code>
               </button>`}${!isRef(token) ? '' : `
-              <button class="copy-button name">
+              <button class="copy-button name" ${attrs({ type: 'name', token })}>
                 <code>--${deref(token)}</code>
               </button>`}
             </div>
@@ -181,6 +181,16 @@ module.exports = function RHDSPlugin(eleventyConfig, pluginOptions = {}) {
 
   const slugify = eleventyConfig.getFilter('slugify');
 
+  const assetsPath = pluginOptions.assetsPath ?? '/assets/';
+  eleventyConfig.addPassthroughCopy({ [join(__dirname, '11ty', '*')]: assetsPath });
+
+  eleventyConfig.addFilter('getTokenDocs', function(path) {
+    const tokens = require('../json/rhds.tokens.json');
+    const { parent, key } = getParentCollection({ path }, tokens);
+    const collection = parent[key];
+    return getDocs(collection);
+  });
+
   eleventyConfig.addShortcode('category',
     async function category(options = {}) {
       const tokens = require('../json/rhds.tokens.json');
@@ -189,6 +199,7 @@ module.exports = function RHDSPlugin(eleventyConfig, pluginOptions = {}) {
       const parentName = options.parentName ?? '';
 
       const path = options.path ?? '.';
+      const attrs = pluginOptions.attrs ?? (() => '');
       const level = options.level ?? 2;
       const exclude = options.exclude ?? [];
       const include = Array.isArray(options.include) ? options.include : [options.include].filter(Boolean);
@@ -227,9 +238,9 @@ module.exports = function RHDSPlugin(eleventyConfig, pluginOptions = {}) {
         <section id="${name}" class="token-category level-${level - 1}">
           <h${level} id="${slug}">${heading}<a href="#${slug}">#</a></h${level}>
           <div class="description">${md.render(dedent(await getDescription(collection)))}</div>
-          ${table({ tokens: Object.values(collection).filter(x => x.$value), name, docs })}
-          ${(await Promise.all(children.map(category))).join('\n')}
-          ${(await Promise.all(include.map((path, i, a) => category({ path, level: level + 1, isLast: !a[i + 1] })))).join('\n')}${isLast ? '' : `
+          ${table({ attrs, tokens: Object.values(collection).filter(x => x.$value), name, docs })}
+          ${(await Promise.all(children.map(x => category({ ...x, attrs })))).join('\n')}
+          ${(await Promise.all(include.map((path, i, a) => category({ attrs, path, level: level + 1, isLast: !a[i + 1] })))).join('\n')}${isLast ? '' : `
           <a class="btt" href="#">Top</a>`}
         </section>`);
     });
diff --git a/node_modules/@rhds/tokens/plugins/11ty/tokens.css b/node_modules/@rhds/tokens/plugins/11ty/tokens.css
new file mode 100644
index 0000000..08d3e3b
--- /dev/null
+++ b/node_modules/@rhds/tokens/plugins/11ty/tokens.css
@@ -0,0 +1,361 @@
+:root {
+  --swatch-size: 350px;
+  font-family: var(--rh-font-family-body-text);
+  font-size: var(--rh-font-size-body-text-lg);
+  line-height: 1.6;
+}
+
+html,
+body {
+  margin: 0;
+  padding: 0;
+}
+
+:is(h1,h2,h3,h4,h5,h6) {
+  font-family: var(--rh-font-family-heading);
+}
+
+#main-header {
+  background: var(--rh-color-black-900);
+  color: var(--rh-color-text-primary-on-dark);
+  padding: var(--rh-space-xs) var(--rh-space-2xl);
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+  height: 72px;
+}
+
+header svg {
+  height: 36px;
+  color: white;
+}
+
+main {
+  padding-inline: var(--rh-length-2xl);
+}
+
+main > aside {
+  float: right;
+  padding-inline: 2em;
+}
+
+main > aside :is(ol, ul) {
+  list-style-type: none;
+  padding-inline-start: 0;
+}
+
+h1 {
+  display: contents;
+}
+
+:is(h1,h2,h3,h4,h5,h6) a {
+  padding-inline-start: 0.5em;
+  opacity: 0;
+  color: var(--rh-color-border-strong-on-light);
+}
+
+:is(h1,h2,h3,h4,h5,h6):is(:hover, :focus-within) a {
+  opacity: 1;
+}
+
+rh-tooltip:not(:defined) {
+  display: none;
+}
+
+table {
+  border-collapse: collapse;
+  table-layout: auto;
+  width: 100%;
+  text-align: start;
+}
+
+#media table :is(td,th):first-child {
+  display: none;
+}
+
+th {
+  text-align: start;
+}
+
+tr {
+  border-bottom: 1px solid var(--rh-color-border-subtle-on-light);
+}
+
+tr.on-dark {
+  background-color: var(--rh-color-surface-darkest, #151515);
+  color: var(--rh-color-text-primary-on-dark, #ffffff);
+}
+
+th, td {
+  padding-block: var(--rh-space-sm);
+  padding-inline: var(--rh-space-md);
+}
+
+td:first-child {
+  padding-inline-start: var(--rh-space-lg, 16px);
+}
+
+td.token > div {
+  display: flex;
+  flex-flow: row wrap;
+  max-width: 350px;
+  gap: var(--rh-space-xs);
+}
+
+.hex {
+  text-transform: uppercase;
+}
+
+.copy-cell {
+  text-align: end;
+  vertical-align: middle;
+}
+
+section {
+  /* display: grid; */
+  gap: var(--rh-space-md);
+  grid-template-columns: repeat(auto-fill, var(--swatch-size));
+  padding: var(--rh-space-sm);
+  align-items: start;
+}
+
+section section {
+  padding: 0;
+}
+
+article {
+  display: grid;
+  position: relative;
+}
+
+section :is(h2, h3, h4, h5, h6) {
+  grid-column: -1/1;
+  /* text-transform: capitalize; */
+}
+
+code {
+  font-size: var(--rh-font-size-body-text-sm);
+  font-weight: var(--rh-font-weight-body-text);
+}
+
+.comment:empty {
+  display: none;
+}
+
+.copy-button {
+  display: inline-flex;
+  align-items: center;
+  color: inherit;
+  border-radius: var(--rh-border-radius-default);
+  border-width: 0;
+  padding: var(--rh-space-xs);
+  background: none;
+  cursor: pointer;
+  opacity: 0.2;
+}
+
+.copy-button:is(.value, .name) {
+  opacity: 1;
+  background-color: var(--rh-color-surface-lighter);
+  overflow-x: hidden;
+  max-width: 350px;
+  white-space: pre;
+  text-overflow: ellipsis;
+}
+
+.copy-button.value.color {
+  border-radius: var(--rh-border-radius-pill);
+  padding-block: 0;
+}
+
+.copy-button.value.color::after {
+  content: '';
+  display: inline-block;
+  border-radius: 100%;
+  background-color: var(--color);
+  height: .5rem;
+  aspect-ratio: 1;
+  margin-inline-start: .5rem;
+}
+
+.copy-button:is(:focus, :active, :hover) {
+  background: var(--rh-color-interactive-blue-lightest);
+  opacity: 1;
+}
+
+.on-dark .copy-button:is(.value, .name) {
+  background-color: var(--rh-color-surface-darker);
+}
+
+.on-dark .copy-button:is(:focus, :active, :hover) {
+  background: var(--rh-color-interactive-blue-darker);
+}
+
+.copy-button svg {
+  width: 24px;
+}
+
+tr:is(:hover, :focus-within) .copy-button {
+  opacity: 1;
+}
+
+.font samp {
+  font-size: var(--font-size, var(--rh-font-size-heading-md));
+  font-family: var(--font-family, var(--rh-font-family-body-text));
+  font-weight: var(--font-weight, var(--rh-font-weight-body-text-regular));
+}
+
+.font.family {
+  align-content: center;
+}
+
+.font :is(samp, .common) {
+  text-transform: capitalize;
+}
+
+.color samp {
+  color: var(--color);
+}
+
+.color:not(.border, .text) samp {
+  aspect-ratio: 1;
+  height: var(--rh-length-xl);
+  display: block;
+  border-radius: 100%;
+  border: 1px solid transparent;
+  background: var(--color);
+}
+
+.color:not(.border, .text).light samp {
+  border-color: var(--rh-color-black-900);
+}
+
+.line-height samp {
+  line-height: var(--line-height);
+}
+
+.box-shadow samp {
+  height: var(--rh-length-2xl);
+  aspect-ratio: 1;
+  border-radius: var(--rh-border-radius-default);
+  box-shadow: var(--box-shadow);
+  display: block;
+}
+
+.border samp {
+  width: var(--rh-length-2xl);
+  aspect-ratio: 2;
+  display: block;
+  border-style: solid;
+  border-width: var(--width, var(--rh-border-width-md));
+  border-color: var(--color, var(--rh-color-border-strong-on-light));
+  border-radius: var(--radius, var(--rh-border-radius-default));
+}
+
+.opacity samp {
+  opacity: var(--opacity);
+  background-color: black;
+  display: block;
+  width: var(--rh-length-xl);
+  aspect-ratio: 1;
+}
+
+.space samp {
+  width: var(--space);
+  background-color: black;
+  opacity: var(--rh-opacity-60);
+  display: block;
+  aspect-ratio: 1;
+}
+
+.length samp {
+  width: var(--length);
+  background-color: black;
+  opacity: var(--rh-opacity-60);
+  display: block;
+  border-bottom: 2px solid var(--rh-color-border-strong-on-light);
+  position: relative;
+}
+
+.length samp::before,
+.length samp::after {
+  content: '';
+  position: absolute;
+  display: block;
+  height: 4px;
+  width: 0;
+  inset-block: -4px;
+  border-style: solid;
+  border-inline-width: 2px 0;
+  border-color: var(--rh-color-border-interactive-on-light);
+}
+
+.length samp::before {
+  inset-inline: -2px 100%;
+}
+
+.length samp::after {
+  inset-inline: 100% 2px;
+}
+
+.icon:not(.color) samp {
+  aspect-ratio: 1;
+  display: block;
+  width: var(--icon-size);
+  border: var(--rh-border-width-md) dotted var(--rh-color-border-strong-on-light);
+}
+
+#typography {
+  --swatch-size: 100%;
+}
+
+:is(#typography, .box-shadow) .comment {
+  display: none;
+}
+
+.btt {
+  text-align: right;
+  display: block;
+}
+
+.language-html .hljs-tag { color: var(--rh-color-blue-500, #004080); }
+.language-html .hljs-name { color: var(--rh-color-brand-red-dark, #be0000); }
+.language-html .hljs-attr { color: var(--rh-color-orange-300, #ec7a08); }
+.language-html .hljs-string { color: var(--rh-color-green-500, #3e8635); }
+
+code[class^="language-"] {
+  max-width: 100%;
+  display: block;
+  overflow-x: scroll;
+}
+
+.breakpoint img {
+  max-height: var(--rh-length-3xl);
+}
+
+dl.grid {
+  display: grid;
+  grid-template-columns: max-content 1fr;
+  gap: 6px 8px;
+  align-items: center;
+}
+
+dl.grid dt {
+  font-style: italic;
+}
+
+dl.grid dt:after {
+  content: ': ';
+}
+
+dl.grid dt,
+dl.grid dd {
+  margin: 0;
+  padding: 0;
+}
+
+dl.grid dd {
+  display: flex;
+  align-items: center;
+}
+
diff --git a/node_modules/@rhds/tokens/plugins/11ty/tokens.js b/node_modules/@rhds/tokens/plugins/11ty/tokens.js
new file mode 100644
index 0000000..1baf19a
--- /dev/null
+++ b/node_modules/@rhds/tokens/plugins/11ty/tokens.js
@@ -0,0 +1,9 @@
+import '@rhds/elements/rh-tooltip/rh-tooltip.js';
+import '@rhds/elements/rh-footer/rh-global-footer.js';
+
+for (const button of document.querySelectorAll('.copy-button')) {
+  button.addEventListener('click', async function(event) {
+    const text = event.target.closest('[data-copy]')?.dataset?.copy ?? button.textContent;
+    await navigator.clipboard.writeText(text.trim());
+  });
+}
