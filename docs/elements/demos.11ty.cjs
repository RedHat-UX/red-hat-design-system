/**
 * this file generates the demos subnav tab,
 * e.g. ux.redhat.com/elements/tile/demos/
 */

const html = String.raw; // for editor highlighting

/** @param {string} slug */
function deslugify(slug) {
  return require('capitalize')(slug.replace(/-/g, ' '));
}

/**
 * Demo data, which are computed by the custom elements manifest generator
 * and by /scripts/playgrounds.ts
 */
module.exports = class DemosPage {
  data() {
    return {
      layout: 'layouts/pages/has-toc.njk',
      permalink: ({ element }) => `/elements/${element.slug}/demos/`,
      eleventyComputed: {
        title: ({ element }) => `Demos | ${deslugify(element.slug)}`,
      },
      pagination: {
        data: 'elements',
        alias: 'element',
        size: 1,
      },
    };
  }

  render(ctx) {
    const entries = Object.entries(ctx.playgrounds[ctx.element.tagName]?.files ?? {});

    return [
      this.#renderHead(),
      ...this.#renderPlaygrounds(ctx, entries),
    ].join('');
  }

  #renderHead() {
    return html`
      <style data-helmet>
        playground-project {
          height: 825px;
          &:fullscreen {
            height: 100vh;
            & rh-card {
              height: 100%;
              &::part(body) {
                flex: auto;
              }
            }
            & playground-file-editor,
            & playground-preview {
              height: 100%;
            }
          }
          &:not(:defined) { opacity: 0; }
          display: flex;
          flex-flow: column;
          gap: var(--rh-space-sm);
          --playground-code-background: var(--rh-color-surface-lighter);
          & playground-preview {
            border: var(--rh-border-width-sm) solid var(--rh-color-border-subtle-on-light);
            &::part(preview-toolbar) {
              display: none;
            }
          }
          & rh-card {
            &::part(header),
            &::part(body) { margin: 0; }
            &::part(footer) {
              margin-block: var(--rh-space-lg);
              justify-content: end;
            }
            &::part(body) {
              border-block-end: var(--rh-border-width-sm) solid var(--rh-color-border-subtle-on-light);
            }
            & rh-button[slot="footer"] {
              display: inline-block;
              margin-inline-end: auto;
            }
          }
          & rh-tab-panel {
            display: none !important;
          }
        }
      </style>

      <script type="module" data-helmet>
        import '/assets/javascript/elements/uxdot-copy-button.js';
        import '/assets/javascript/elements/uxdot-header.js';
        import 'playground-elements';
        import '@rhds/elements/rh-button/rh-button.js';
        import '@rhds/elements/rh-card/rh-card.js';
        import '@rhds/elements/rh-code-block/rh-code-block.js';
        import '@rhds/elements/rh-cta/rh-cta.js';
        import '@rhds/elements/rh-footer/rh-footer.js';
        import '@rhds/elements/rh-subnav/rh-subnav.js';
        import '@rhds/elements/rh-surface/rh-surface.js';
        import '@rhds/elements/rh-tabs/rh-tabs.js';
        import {TabExpandEvent} from '@rhds/elements/rh-tabs/rh-tab.js';
        for (const tabs of document.querySelectorAll('.demo-fileswitcher')) {
          tabs.addEventListener('expand', function(event) {
            if (event instanceof TabExpandEvent && event.active) {
              const { filename } = event.tab.dataset;
              if (filename) {
                const project = tabs.closest('playground-project');
                const fileEditor = project.querySelector('playground-file-editor');
                if (fileEditor) {
                  fileEditor.filename = filename;
                }
              }
            }
          })
        }
        for (const playground of document.querySelectorAll('playground-project')) {
          playground.addEventListener('click', function(event) {
            if (event.target.dataset?.action === 'fullscreen') {
              playground.requestFullscreen();
            }
          })
        }
      </script>
    `;
  }

  /**
   * Files to include with every demo playground e.g. import map, shared styles, etc.
   * Some of these are generated by /scripts/playgrounds.ts
   * @param {object} ctx
   * @param {[string, object][]} entries
   */
  #renderCommon(ctx, entries) {
    const { isLocal, importMap: { imports } } = ctx;
    const baseUrl = process.env.DEPLOY_PRIME_URL || 'http://localhost:8080';
    return html`${isLocal ? html`
      <script type="sample/importmap">${JSON.stringify({ imports }, null, 2).replaceAll('"/assets', `"${baseUrl}/assets`)}</script>` : html`
      <script type="sample/importmap">
        {
          "imports": {
            "@patternfly/icons/": "https://ux.redhat.com/assets/packages/@patternfly/icons/"
          }
        }
      </script>`}${entries.map(([filename, config]) => config.label ? '' : html`
      <script type="sample/${filename.split('.').pop()}" filename="${filename}" ${!config.hidden ? '' : 'hidden'}>${
      config.content.replace('</' + 'script>', '&lt;/script>')
    }</script>`).join('')}
    `;
  }

  #renderPlaygrounds(ctx, entries) {
    const { element, isLocal } = ctx;
    const { slug } = element;
    return entries.map(([filename, config]) => {
      if (!config.label) {
        return '';
      } else {
        const labelSlug = this.slugify(config.label);
        const extension = filename.split('.').pop();
        const demoSlug = filename.split('.').shift().replace('demo/', '').replaceAll('/', '-');
        const projectId = `playground-${element.tagName}-${demoSlug}`;
        const demoPageUrl = `/elements/${slug}/demo/${demoSlug === 'index' ? '' : `${labelSlug}/`}`;
        const githubSourcePrefix = `https://github.com/RedHat-UX/red-hat-design-system/tree/main/elements`;
        const githubSourceUrl = `${githubSourcePrefix}/${element.tagName}/demo/${filename
            .replace('demo/', '')
            .replace('/index.html', '')
            .replace('.html', '')
            .replace('index', element.tagName)}.html`;

        const inlineResources = entries
            .filter(([, config]) => config.inline === filename)
            .map(([s]) => s);

        const content = config.content.replace('</' + 'script>', '&lt;/script>');
        return html`
          <h2 id="demo-${labelSlug}">${config.label}</h2>
          <playground-project id="${projectId}" ${!isLocal ? '' : 'sandbox-base-url="http://localhost:8080"'}>
            ${this.#renderCommon(ctx, entries)}
            <script type="sample/${extension}" filename="${filename}">${content}</script>
            <playground-preview project="${projectId}" html-file="${filename}"></playground-preview>
            <rh-card>
              <rh-tabs slot="header" class="demo-fileswitcher">
                <rh-tab slot="tab" data-filename="${filename}">HTML</rh-tab>
                <rh-tab-panel hidden></rh-tab-panel>
                ${inlineResources.map(subresourcename => html`
                <rh-tab slot="tab" data-filename="${subresourcename}">${subresourcename.split('.').pop().toUpperCase()}</rh-tab>
                <rh-tab-panel hidden></rh-tab-panel>`).join('')}
              </rh-tabs>
              <playground-file-editor project="${projectId}"
                                      filename="${filename}"
                                      line-numbers></playground-file-editor>
              <rh-button slot="footer"
                         variant="tertiary"
                         data-action="fullscreen"
                         icon="expand">FullScreen</rh-button>
              <rh-cta slot="footer" href="${githubSourceUrl}">View source on GitHub</rh-cta>
              <rh-cta slot="footer" href="${demoPageUrl}">View In Own Tab</rh-cta>
            </rh-card>
          </playground-project>
        `;
      }
    });
  };
};
