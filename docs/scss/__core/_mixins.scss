@use "sass:map";
@use "variables" as *;

/// Breakpoint helper
/// @todo Do we need an IE11 hack? I think we should have fallback styles for non-grid
///
/// @param {string} $breakpoint This can be a breakpoint from the $breakpoints map, or a value in pixels.
/// @param {string} $min-max Can be either 'min-width' or 'max-width'. Defaults to 'min-width'.
@mixin breakpoint($breakpoint, $min-max: "min-width") {
  $output: false;

  @if type-of($breakpoint) == number {
    $output: $breakpoint;
  } @else {
    $output: #{map.get($breakpoints, $breakpoint)};
  }

  @media ($min-max: #{$output}) {
    @content;
  }
}

/// Element invisibile (for accessibility)
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  clip-path: inset(50%);
  border: 0;
}

/// Element visible (for accessibility)
@mixin un-visually-hide {
  position: static;
  width: auto;
  height: auto;
  overflow: visible;
  clip: auto;
  white-space: nowrap;
  clip-path: none;
  border: 0;
}

/// Helper that makes an element a content-container that constrains max-width
@mixin content-container() {
  width: 100%;
  max-width: $grid-max-width;
  margin-left: auto;
  margin-right: auto;
}

/// Helper that makes an element a grid container
@mixin grid-container() {
  grid-column: 1 / -1; // If nested in a grid, always span the full width of that parent grid.
  display: grid;
  grid-template-columns: repeat(6, minmax(0, 1fr));
  column-gap: 18px;
  justify-self: stretch;

  @include breakpoint(lima) {
    grid-template-columns: repeat(12, minmax(0, 1fr));
    max-width: $grid-max-width;
    margin-left: auto;
    margin-right: auto;
  }

  @include breakpoint(papa) {
    grid-template-columns: repeat(14, minmax(0, 1fr));
  }
}

/// Helper mixin that can go on text containers that should be as wide as text is allowed to go
/// E.g. this would be used on the text in an article, case study, bot _not_ on text in a sidebar.
@mixin full-width-text {
  grid-column: 1 / -1;
  justify-self: stretch;
  margin-left: 0;
  margin-right: 0;
  max-width: 100%; // Necessary to prevent FF from overflowing text.

  @include breakpoint(lima) {
    grid-column: 2 / -2;
  }

  @include breakpoint(romeo) {
    grid-column: 3 / -3;
  }

  @include no-grid {
    margin-left: 200px;
    margin-right: 200px;
  }
}

/// Aspect ratio helper
/// Creates a before element that will maintain aspect ratio of element
@mixin aspect-ratio($width, $height) {
  &:before {
    content: "";
    display: block;
    box-sizing: content-box;
    width: 100%;
    height: 0;
    padding-bottom: $height / $width * 100%;
  }
}
