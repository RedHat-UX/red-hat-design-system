{"version":3,"file":"rh-code-block.js","sourceRoot":"","sources":["rh-code-block.ts"],"names":[],"mappings":";AAAA,OAAO,EAAmB,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;;;AAItD;;;;;;GAMG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,UAAU;IAApC;;QAGL,6DAA6D;QACjB,YAAO,GAAG,KAAK,CAAC;QAE5D,4CAA4C;QACA,cAAS,GAAG,KAAK,CAAC;QAE9D,4EAA4E;QACN,eAAU,GAAG,KAAK,CAAC;IAU3F,CAAC;IANC,MAAM;QACJ,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QACzB,OAAO,IAAI,CAAA;kCACmB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;KACrD,CAAC;IACJ,CAAC;;AAlBM,kBAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AAGoB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;4CAAiB;AAGhB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;8CAAmB;AAGQ;IAArE,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;+CAAoB;AAEjE;IAAvB,oBAAoB,EAAE;uCAAyB;AAZrC,WAAW;IADvB,aAAa,CAAC,eAAe,CAAC;GAClB,WAAW,CAoBvB;SApBY,WAAW","sourcesContent":["import { type ColorTheme, colorContextConsumer } from '../../lib/context/color/consumer.js';\nimport { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport style from './rh-code-block.css';\n\n/**\n * A code block is formatted text within a container.\n * @summary Formatted code strings in a container.\n * @slot - A non-executable script tag containing the sample content. JavaScript\n *         samples should use the type `text/sample-javascript`. HTML samples\n *         containing script tags must escape the closing `</script>` tag.\n */\n@customElement('rh-code-block')\nexport class RhCodeBlock extends LitElement {\n  static styles = [style];\n\n  /** When set, the code block displays with compact spacing */\n  @property({ type: Boolean, reflect: true }) compact = false;\n\n  /** When set, the code block is resizable */\n  @property({ type: Boolean, reflect: true }) resizable = false;\n\n  /** When set, the code block occupies it's full height, without scrolling */\n  @property({ type: Boolean, reflect: true, attribute: 'full-height' }) fullHeight = false;\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  render() {\n    const { on = '' } = this;\n    return html`\n      <slot id=\"content\" class=\"${classMap({ [on]: !!on })}\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-code-block': RhCodeBlock;\n  }\n}\n"]}