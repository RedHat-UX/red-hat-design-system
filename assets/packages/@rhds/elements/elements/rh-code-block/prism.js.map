{"version":3,"file":"prism.js","sourceRoot":"","sources":["prism.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,WAAW,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAC3D,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAE3B,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;AAE1C;;;GAGG;AACH,KAAK,UAAU,UAAU,CAAC,QAAiC;IACzD,QAAQ,QAAQ,EAAE,CAAC;QACjB,KAAK,MAAM,CAAC,CAAC,OAAO,MAAM,CAAC,sCAAsC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9F,KAAK,KAAK,CAAC,CAAC,OAAO,MAAM,CAAC,mCAAmC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1F,qDAAqD;QACrD,KAAK,IAAI,CAAC;QACV,KAAK,YAAY,CAAC,CAAC,OAAO,MAAM,CAAC,0CAA0C,CAAC;aACvE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,qDAAqD;QACrD,KAAK,IAAI,CAAC;QACV,KAAK,YAAY,CAAC,CAAC,OAAO,MAAM,CAAC,0CAA0C,CAAC;aACvE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAChC,KAAK,MAAM,CAAC,CAAC,OAAO,MAAM,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5F,KAAK,MAAM,CAAC,CAAC,OAAO,MAAM,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5F,KAAK,MAAM,CAAC,CAAC,OAAO,MAAM,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5F,KAAK,MAAM,CAAC,CAAC,OAAO,MAAM,CAAC,oCAAoC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAC9F,CAAC;AACH,CAAC;AAED;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,WAAmB,EAAE,QAAiC;IACpF,MAAM,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC3B,MAAM,WAAW,GAAG,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,SAAS,CAAC,QAAS,CAAC,EAAE,QAAS,CAAC,CAAC;IACxF,OAAO,IAAI,CAAA,yBAAyB,QAAQ,KAAK,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC;AACpF,CAAC;AAED,OAAO,EAAE,WAAW,EAAE,yBAAyB,EAAE,MAAM,gBAAgB,CAAC","sourcesContent":["import type { RhCodeBlock } from './rh-code-block.js';\nimport { Prism } from 'prism-esm';\nimport { unsafeHTML } from 'lit/directives/unsafe-html.js';\nimport { html } from 'lit';\n\nconst prism = new Prism({ manual: true });\n\n/**\n * Autoload a supported language\n * @param language a supported language\n */\nasync function autoloader(language: RhCodeBlock['language']) {\n  switch (language) {\n    case 'html': return import('prism-esm/components/prism-markup.js').then(m => m.loader(prism));\n    case 'css': return import('prism-esm/components/prism-css.js').then(m => m.loader(prism));\n    // @ts-expect-error: be liberal about what you accept\n    case 'js':\n    case 'javascript': return import('prism-esm/components/prism-javascript.js')\n        .then(m => m.loader(prism));\n    // @ts-expect-error: be liberal about what you accept\n    case 'ts':\n    case 'typescript': return import('prism-esm/components/prism-typescript.js')\n        .then(m => m.loader(prism));\n    case 'bash': return import('prism-esm/components/prism-bash.js').then(m => m.loader(prism));\n    case 'ruby': return import('prism-esm/components/prism-ruby.js').then(m => m.loader(prism));\n    case 'yaml': return import('prism-esm/components/prism-yaml.js').then(m => m.loader(prism));\n    case 'json': return import('prism-esm/components/prism-json.js').then(m => m.loader(prism));\n  }\n}\n\n/**\n * Highlight a string using prism.js\n * @param textContent source code\n * @param language a supported language\n */\nexport async function highlight(textContent: string, language: RhCodeBlock['language']) {\n  await autoloader(language);\n  const highlighted = prism.highlight(textContent, prism.languages[language!], language!);\n  return html`<code class=\"language-${language}\">${unsafeHTML(highlighted)}</code>`;\n}\n\nexport { prismStyles, preRenderedLightDomStyles } from './prism.css.js';\n\n"]}