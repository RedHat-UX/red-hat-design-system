{"version":3,"file":"rh-menu.js","sourceRoot":"","sources":["rh-menu.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAElF,OAAO,EAAE,WAAW,EAAE,MAAM,0CAA0C,CAAC;AACvE,OAAO,EAAE,wBAAwB,EAAE,MAAM,gEAAgE,CAAC;AAE1G,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;;;AAI5F,MAAM,OAAO,eAAgB,SAAQ,KAAK;IACxC,YACS,IAAa,EACb,IAAiB;QAExB,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAH5B,SAAI,GAAJ,IAAI,CAAS;QACb,SAAI,GAAJ,IAAI,CAAa;IAG1B,CAAC;CACF;AAED;;;GAGG;AAEI,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,UAAU;IAA/B;;;QASL,2BAAY,wBAAwB,CAAC,EAAE,CAAc,IAAI,EAAE;YACzD,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;SAC/C,CAAC,EAAC;IA2CL,CAAC;IAzCC;;;OAGG;IACH,QAAQ,CAAC,KAAoB;QAC3B,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,UAAU;QACZ,OAAO,uBAAA,IAAI,wBAAU,CAAC,KAAK,CAAC,EAAE,CAAC,uBAAA,IAAI,wBAAU,CAAC,kBAAkB,CAAC,CAAC;IACpE,CAAC;IAED,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,EAAE,KAAP,IAAI,CAAC,EAAE,GAAK,WAAW,CAAC,MAAM,CAAC,EAAC;QAChC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,qEAAqE;QACxG,uBAAA,IAAI,+CAAc,MAAlB,IAAI,CAAgB,CAAC;IACvB,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9B,OAAO,IAAI,CAAA;;qBAEM,QAAQ,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC;2BAC5B,uBAAA,IAAI,+CAAc;KACxC,CAAC;IACJ,CAAC;IAQD,YAAY,CAAC,IAAiB;QAC5B,uBAAA,IAAI,wBAAU,CAAC,kBAAkB,GAAG,uBAAA,IAAI,wBAAU,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC;IAED,KAAK;QACH,uBAAA,IAAI,wBAAU,CAAC,KAAK,CAAC,uBAAA,IAAI,wBAAU,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,CAAC;IACnE,CAAC;;;;;IAXC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,IAAI,EAAE,EAAE,CAAC;QACzC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IACxC,CAAC;AACH,CAAC;AA5Ce,aAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAE3B,wBAAiB,GAAG,EAAE,GAAG,UAAU,CAAC,iBAAiB,EAAE,cAAc,EAAE,IAAI,EAAE,AAA5D,CAA6D;AAEpD;IAAhC,qBAAqB,EAAE;0CAAoC;AAE5B;IAA/B,oBAAoB,EAAE;kCAAyB;AAPrC,MAAM;IADlB,aAAa,CAAC,SAAS,CAAC;GACZ,MAAM,CAsDlB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { queryAssignedElements } from 'lit/decorators/query-assigned-elements.js';\n\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\nimport { RovingTabindexController } from '@patternfly/pfe-core/controllers/roving-tabindex-controller.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport styles from './rh-menu.css';\n\nexport class MenuToggleEvent extends Event {\n  constructor(\n    public open: boolean,\n    public menu: HTMLElement\n  ) {\n    super('toggle', { bubbles: true });\n  }\n}\n\n/**\n * Menu\n * @slot - menu items\n */\n@customElement('rh-menu')\nexport class RhMenu extends LitElement {\n  static readonly styles = [styles];\n\n  static shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };\n\n  @queryAssignedElements() private _menuItems!: HTMLElement[];\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  #tabindex = RovingTabindexController.of<HTMLElement>(this, {\n    getItems: () => this.getItems(this._menuItems),\n  });\n\n  /**\n   * override or set to add items to the roving tab index controller\n   * @param items original list of items\n   */\n  getItems(items: HTMLElement[]): HTMLElement[] {\n    return items;\n  }\n\n  get activeItem() {\n    return this.#tabindex.items.at(this.#tabindex.atFocusedItemIndex);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.id ||= getRandomId('menu');\n    this.setAttribute('role', 'menu'); // TODO: use InternalsController.role when support/polyfill is better\n    this.#onSlotchange();\n  }\n\n  render() {\n    const { on = 'light' } = this;\n    return html`\n      <slot part=\"menu\"\n            class=\"${classMap({ on: true, [on]: true })}\"\n            @slotchange=\"${this.#onSlotchange}\"></slot>\n    `;\n  }\n\n  #onSlotchange() {\n    for (const item of this._menuItems ?? []) {\n      item.setAttribute('role', 'menuitem');\n    }\n  }\n\n  activateItem(item: HTMLElement) {\n    this.#tabindex.atFocusedItemIndex = this.#tabindex.items.indexOf(item);\n  }\n\n  focus() {\n    this.#tabindex.items[this.#tabindex.atFocusedItemIndex]?.focus();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-menu': RhMenu;\n  }\n}\n"]}