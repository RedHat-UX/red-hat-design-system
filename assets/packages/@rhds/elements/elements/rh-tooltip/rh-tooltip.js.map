{"version":3,"file":"rh-tooltip.js","sourceRoot":"","sources":["rh-tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, isServer } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\n\nimport {\n  FloatingDOMController,\n  type Placement,\n} from '@patternfly/pfe-core/controllers/floating-dom-controller.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport styles from './rh-tooltip.css';\n\nconst ENTER_EVENTS = ['focusin', 'tap', 'click', 'mouseenter'];\nconst EXIT_EVENTS = ['focusout', 'blur', 'mouseleave'];\n\nfunction flattenSlottedNodes(x: Node): Node[] {\n  if (x.nodeType === Node.COMMENT_NODE) {\n    return [];\n  } else if (x instanceof HTMLSlotElement) {\n    let assignedNodes = x.assignedNodes();\n    if (!assignedNodes.length) {\n      assignedNodes = Array.from(x.childNodes);\n    }\n    return assignedNodes.flatMap(flattenSlottedNodes);\n  } else {\n    return [x];\n  }\n}\n\nfunction getBestGuessAccessibleContent(node: Node): string {\n  if (node instanceof HTMLElement) {\n    if (node.hasAttribute('aria-label')) {\n      return node.getAttribute('aria-label') ?? '';\n    } else if (node.hidden || node.hasAttribute('inert')) {\n      return '';\n    }\n  }\n  return node.textContent ?? '';\n}\n\n/**\n * A tooltip is a floating text area that provides helpful\n * or contextual information on hover, focus, or tap.\n *\n * @summary Reveals a small area of information on hover\n *\n * @alias tooltip\n *\n */\n@customElement('rh-tooltip')\n@themable\nexport class RhTooltip extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  private static instances = new Set<RhTooltip>();\n\n  static {\n    if (!isServer) {\n      globalThis.addEventListener('keydown', (event: KeyboardEvent) => {\n        const { instances } = RhTooltip;\n        for (const instance of instances) {\n          instance.#onKeydown(event);\n        }\n      });\n      RhTooltip.initAnnouncer();\n    }\n  }\n\n  private static announcer: HTMLElement;\n\n  private static announce(message: string) {\n    this.announcer.innerText = message;\n  }\n\n  private static initAnnouncer() {\n    document.body.append((this.announcer = Object.assign(document.createElement('div'), {\n      role: 'status',\n      // apply `.visually-hidden` styles\n      style: /* css */`\n        position: fixed;\n        inset-block-start: 0;\n        inset-inline-start: 0;\n        overflow: hidden;\n        clip: rect(0,0,0,0);\n        white-space: nowrap;\n        border: 0;`,\n    })));\n  }\n\n  /** The position of the tooltip, relative to the invoking content */\n  @property() position: Placement = 'top';\n\n  /** Tooltip content. Overridden by the content slot */\n  @property() content?: string;\n\n  #float = new FloatingDOMController(this, {\n    content: (): HTMLElement | undefined | null => this.shadowRoot?.querySelector('#tooltip'),\n  });\n\n  #initialized = false;\n  #style?: CSSStyleDeclaration;\n\n  get #content() {\n    if (!this.#float.open || isServer) {\n      return '';\n    } else if (this.content) {\n      return this.content;\n    } else {\n      const contentSlot =\n        (this.shadowRoot?.getElementById('content') as HTMLSlotElement | null) ?? null;\n      const nodes = contentSlot\n          ?.assignedNodes()\n          ?.flatMap(flattenSlottedNodes) ?? [];\n      return nodes\n          .map(getBestGuessAccessibleContent)\n          .join(' ')\n          .trim();\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    ENTER_EVENTS.forEach(evt => this.addEventListener(evt, this.show));\n    EXIT_EVENTS.forEach(evt => this.addEventListener(evt, this.hide));\n    RhTooltip.instances.add(this);\n  }\n\n  override render() {\n    const { alignment, anchor, open, styles } = this.#float;\n\n    const scheme = this.#style?.colorScheme ?? 'light';\n    const dark = !!scheme.match(/^light( (dark|only))?/);\n    const light = !!scheme.match(/^dark( only)?/);\n\n    return html`\n      <div id=\"container\"\n           style=\"${styleMap(styles)}\"\n           class=\"${classMap({ open,\n                               initialized: !!this.#initialized,\n                               [anchor]: !!anchor,\n                               [alignment]: !!alignment })}\">\n        <div id=\"invoker\">\n          <!--\n            Place invoking element here,\n            i.e. the element which when hovered the tooltip will display.\n            Must be inline content.\n          -->\n          <slot id=\"invoker-slot\"></slot>\n        </div>\n        <div id=\"tooltip\" role=\"status\" class=\"${classMap({ dark, light })}\">\n          <!-- Place tooltip content here. Overrides the \\`content\\` attribute. -->\n          <slot id=\"content\" name=\"content\">${this.content}</slot>\n        </div>\n      </div>\n    `;\n  }\n\n  /** Show the tooltip */\n  async show() {\n    this.#style ??= getComputedStyle(this);\n    await this.updateComplete;\n    const placement = this.position;\n    const offset =\n        !placement?.match(/top|bottom/) ? 15\n      : { mainAxis: 15, alignmentAxis: -4 };\n    await this.#float.show({ offset, placement });\n    this.#initialized ||= true;\n    RhTooltip.announce(this.#content);\n  }\n\n  /** Hide the tooltip */\n  async hide() {\n    await this.#float.hide();\n    RhTooltip.announcer.innerText = '';\n  }\n\n  #onKeydown = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      this.hide();\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tooltip': RhTooltip;\n  }\n}\n"]}