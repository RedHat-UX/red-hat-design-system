{"version":3,"file":"rh-tooltip.js","sourceRoot":"","sources":["rh-tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, LitElement, isServer } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { styleMap } from 'lit/directives/style-map.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport {\n  FloatingDOMController,\n  type Placement,\n} from '@patternfly/pfe-core/controllers/floating-dom-controller.js';\n\nimport styles from './rh-tooltip.css';\n\nconst ENTER_EVENTS = ['focusin', 'tap', 'click', 'mouseenter'];\nconst EXIT_EVENTS = ['focusout', 'blur', 'mouseleave'];\n\n/**\n * A tooltip is a floating text area that provides helpful\n * or contextual information on hover, focus, or tap.\n *\n * @summary Reveals a small area of information on hover\n *\n * @slot - Place invoking element here,\n *         i.e. the element which when hovered the tooltip will display.\n *         Must be inline content.\n * @slot content - Place tooltip content here. Overrides the `content` attribute.\n *\n * @cssprop {<length>} [--rh-tooltip-arrow-size=11px]\n * @cssprop {<color>} [--rh-tooltip-content-background-color=#ffffff]\n * @cssprop {<color>} [--rh-tooltip-content-color=#151515]\n * @cssprop {<length>} [--rh-tooltip-max-width=18.75rem]\n * @cssprop {<length>} [--rh-tooltip-content-padding-block-start=16px]\n * @cssprop {<length>} [--rh-tooltip-content-padding-inline-end=16px]\n * @cssprop {<length>} [--rh-tooltip-content-padding-block-end=16px]\n * @cssprop {<length>} [--rh-tooltip-content-padding-inline-start=16px]\n * @cssprop {<absolute-size> | <relative-size> | <length> | <percentage>} [--rh-tooltip-content-font-size=0.875rem]\n */\n@customElement('rh-tooltip')\nexport class RhTooltip extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  private static instances = new Set<RhTooltip>();\n\n  static {\n    if (!isServer) {\n      globalThis.addEventListener('keydown', (event: KeyboardEvent) => {\n        const { instances } = RhTooltip;\n        for (const instance of instances) {\n          instance.#onKeydown(event);\n        }\n      });\n      RhTooltip.initAnnouncer();\n    }\n  }\n\n  private static announcer: HTMLElement;\n\n  private static announce(message: string) {\n    this.announcer.innerText = message;\n  }\n\n  private static initAnnouncer() {\n    document.body.append((this.announcer = Object.assign(document.createElement('div'), {\n      role: 'status',\n      // apply `.visually-hidden` styles\n      style: /* css */`\n        position: fixed;\n        inset-block-start: 0;\n        inset-inline-start: 0;\n        overflow: hidden;\n        clip: rect(0,0,0,0);\n        white-space: nowrap;\n        border: 0;`,\n    })));\n  }\n\n  /** The position of the tooltip, relative to the invoking content */\n  @property() position: Placement = 'top';\n\n  /** Tooltip content. Overridden by the content slot */\n  @property() content?: string;\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  #float = new FloatingDOMController(this, {\n    content: (): HTMLElement | undefined | null => this.shadowRoot?.querySelector('#tooltip'),\n  });\n\n  #initialized = false;\n\n  get #content() {\n    if (!this.#float.open || isServer) {\n      return '';\n    } else {\n      return this.content || (this.shadowRoot\n          ?.getElementById('content') as HTMLSlotElement)\n          ?.assignedNodes().map(x => x.textContent ?? '')\n          ?.join(' ');\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    ENTER_EVENTS.forEach(evt => this.addEventListener(evt, this.show));\n    EXIT_EVENTS.forEach(evt => this.addEventListener(evt, this.hide));\n    RhTooltip.instances.add(this);\n  }\n\n  override render() {\n    const { on = '' } = this;\n    const { alignment, anchor, open, styles } = this.#float;\n\n    return html`\n      <div id=\"container\"\n           style=\"${styleMap(styles)}\"\n           class=\"${classMap({ open,\n                               initialized: !!this.#initialized,\n                               [on]: !!on,\n                               [anchor]: !!anchor,\n                               [alignment]: !!alignment })}\">\n        <div id=\"invoker\">\n          <slot id=\"invoker-slot\"></slot>\n        </div>\n        <div id=\"tooltip\" role=\"status\">\n          <slot id=\"content\" name=\"content\">${this.content}</slot>\n        </div>\n      </div>\n    `;\n  }\n\n  /** Show the tooltip */\n  async show() {\n    await this.updateComplete;\n    const placement = this.position;\n    const offset =\n        !placement?.match(/top|bottom/) ? 15\n      : { mainAxis: 15, alignmentAxis: -4 };\n    await this.#float.show({ offset, placement });\n    this.#initialized ||= true;\n    RhTooltip.announce(this.#content);\n  }\n\n  /** Hide the tooltip */\n  async hide() {\n    await this.#float.hide();\n    RhTooltip.announcer.innerText = '';\n  }\n\n  #onKeydown = (event: KeyboardEvent): void => {\n    if (event.key === 'Escape') {\n      this.hide();\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tooltip': RhTooltip;\n  }\n}\n"]}