{"version":3,"file":"rh-accordion-panel.js","sourceRoot":"","sources":["rh-accordion-panel.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,kBAAkB,EAAE,MAAM,yDAAyD,CAAC;AAE7F,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAqB,MAAM,qCAAqC,CAAC;;;AAI9F;;;;;GAKG;AAEI,IAAM,gBAAgB,GAAtB,MAAM,gBAAiB,SAAQ,kBAAkB;IAU7C,MAAM;QACb,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QACzB,OAAO,IAAI,CAAA;wCACyB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,MAAM,EAAE;KAC9E,CAAC;IACJ,CAAC;;AAde,wBAAO,GAAG,aAAa,CAAC;AAExB,uBAAM,GAAG,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAExC;IAAvB,oBAAoB,EAAE;4CAAyB;AAGS;IADxD,oBAAoB,EAAE;IACtB,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;sDAA6B;AAR1E,gBAAgB;IAD5B,aAAa,CAAC,oBAAoB,CAAC;GACvB,gBAAgB,CAgB5B;SAhBY,gBAAgB","sourcesContent":["import { html } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { BaseAccordionPanel } from '@patternfly/elements/pf-accordion/BaseAccordionPanel.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport styles from './rh-accordion-panel.css';\n\n/**\n * Accordion Panel\n *\n * @slot\n *       The content of the accordion panel can be any basic markup including but not limited to div, paragraph, or nested accordion panels.\n */\n@customElement('rh-accordion-panel')\nexport class RhAccordionPanel extends BaseAccordionPanel {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [...BaseAccordionPanel.styles, styles];\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  override render() {\n    const { on = '' } = this;\n    return html`\n      <div id=\"rhds-container\" class=\"${classMap({ [on]: !!on })}\">${super.render()}</div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-accordion-panel': RhAccordionPanel;\n  }\n}\n"]}