{"version":3,"file":"rh-accordion.js","sourceRoot":"","sources":["rh-accordion.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAuB,MAAM,KAAK,CAAC;AAChD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6CAA6C,CAAC;AAEvE,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAqB,MAAM,qCAAqC,CAAC;AAE9F,OAAO,EAAE,aAAa,EAAE,MAAM,oDAAoD,CAAC;;;AAInF,OAAO,0BAA0B,CAAC;AAClC,OAAO,yBAAyB,CAAC;AAEjC;;;;;;;;;;;;;GAaG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,aAAa;IAAvC;;QAauC,UAAK,GAAG,KAAK,CAAC;QAEd,aAAQ,GAAG,IAAI,CAAC;IAQ9D,CAAC;IANU,MAAM;QACb,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QACzB,OAAO,IAAI,CAAA;mCACoB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,MAAM,EAAE;KACzE,CAAC;IACJ,CAAC;;AArBe,mBAAO,GAAG,aAAa,CAAC;AAExB,kBAAM,GAAG,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAEnC;IAAvB,oBAAoB,EAAE;uCAAyB;AAGS;IADxD,oBAAoB,EAAE;IACtB,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;iDAA6B;AAKzC;IAH3C,QAAQ,CAAC,SAAS,YAAY;QAC7B,CAAC,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC3F,CAAC,CAAC;IACD,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0CAAe;AAEd;IAA3C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;6CAAiB;AAfjD,WAAW;IADvB,aAAa,CAAC,cAAc,CAAC;GACjB,WAAW,CAuBvB;SAvBY,WAAW","sourcesContent":["import { html, type TemplateResult } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { observed } from '@patternfly/pfe-core/decorators/observed.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport { BaseAccordion } from '@patternfly/elements/pf-accordion/BaseAccordion.js';\n\nimport styles from './rh-accordion.css';\n\nimport './rh-accordion-header.js';\nimport './rh-accordion-panel.js';\n\n/**\n * Accordions toggle the visibility of sections of content.\n * They feature panels that consist of a section text label and a caret icon that collapses or expands to reveal more information.\n *\n * @summary Toggle the visibility of sections of content\n *\n * @fires {AccordionExpandEvent} expand - when a panel expands\n * @fires {AccordionCollapseEvent} collapse - when a panel collapses\n *\n *\n * @slot\n *       Place the `rh-accordion-header` and `rh-accordion-panel` elements here.\n *\n */\n@customElement('rh-accordion')\nexport class RhAccordion extends BaseAccordion {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [...BaseAccordion.styles, styles];\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  @observed(function largeChanged(this: RhAccordion) {\n    [...this.headers, ...this.panels].forEach(el => el.toggleAttribute('large', this.large));\n  })\n  @property({ reflect: true, type: Boolean }) large = false;\n\n  @property({ reflect: true, type: Boolean }) bordered = true;\n\n  override render(): TemplateResult {\n    const { on = '' } = this;\n    return html`\n      <div id=\"container\" class=\"${classMap({ [on]: !!on })}\">${super.render()}</div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-accordion': RhAccordion;\n  }\n}\n\n"]}