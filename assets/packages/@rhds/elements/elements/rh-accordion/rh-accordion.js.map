{"version":3,"file":"rh-accordion.js","sourceRoot":"","sources":["rh-accordion.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, type TemplateResult } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { observes } from '@patternfly/pfe-core/decorators/observes.js';\nimport { provide } from '@lit/context';\n\nimport { colorPalettes, type ColorPalette } from '@rhds/elements/lib/color-palettes.js';\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport { NumberListConverter, ComposedEvent } from '@patternfly/pfe-core';\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nimport { RhAccordionHeader, AccordionHeaderChangeEvent } from './rh-accordion-header.js';\nimport { RhAccordionPanel } from './rh-accordion-panel.js';\n\nimport { context, type RhAccordionContext } from './context.js';\n\nexport * from './rh-accordion-header.js';\nexport * from './rh-accordion-panel.js';\n\nimport styles from './rh-accordion.css';\n\nexport class AccordionExpandEvent extends ComposedEvent {\n  constructor(\n    public toggle: RhAccordionHeader,\n    public panel: RhAccordionPanel,\n  ) {\n    super('expand');\n  }\n}\n\nexport class AccordionCollapseEvent extends ComposedEvent {\n  constructor(\n    public toggle: RhAccordionHeader,\n    public panel: RhAccordionPanel,\n  ) {\n    super('collapse');\n  }\n}\n\n/**\n * An accordion is a stacked list of panels which allows users to expand or collapse information\n * when selected. They feature panels that consist of a section text label and a caret icon that\n * collapses or expands to reveal more information.\n *\n * @summary Expands or collapses a stacked list of panels\n *\n * @alias accordion\n *\n * @fires {AccordionExpandEvent} expand - when a panel expands\n * @fires {AccordionCollapseEvent} collapse - when a panel collapses\n * @attr  [accents=inline] Position accents in the header either inline or bottom\n */\n@customElement('rh-accordion')\n@colorPalettes\n@themable\nexport class RhAccordion extends LitElement {\n  static readonly styles = [styles];\n\n  static isAccordion(target: EventTarget | null): target is RhAccordion {\n    return target instanceof RhAccordion;\n  }\n\n  static isHeader(target: EventTarget | null): target is RhAccordionHeader {\n    return target instanceof RhAccordionHeader;\n  }\n\n  static isPanel(target: EventTarget | null): target is RhAccordionPanel {\n    return target instanceof RhAccordionPanel;\n  }\n\n  static isAccordionChangeEvent(event: Event): event is AccordionHeaderChangeEvent {\n    return event instanceof AccordionHeaderChangeEvent;\n  }\n\n  /**\n   * Sets accordion header's accents position to inline or bottom\n   */\n  @property({ attribute: true, reflect: true }) accents?: 'inline' | 'bottom';\n\n  /**\n   * If this accordion uses large styles\n   */\n  @property({ reflect: true, type: Boolean }) large = false;\n\n  /**\n   * Color Palette for this accordion.\n   * @see https://ux.redhat.com/theming/color-palettes/\n   */\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  /**\n   * Sets and reflects the currently expanded accordion 0-based indexes.\n   * Use commas to separate multiple indexes.\n   * ```html\n   * <rh-accordion expanded-index=\"1,2\">\n   *   ...\n   * </rh-accordion>\n   * ```\n   */\n  @property({\n    attribute: 'expanded-index',\n    converter: NumberListConverter,\n    hasChanged(value, old) {\n      return JSON.stringify(old) !== JSON.stringify(value);\n    },\n  })\n  get expandedIndex() {\n    return this.#expandedIndex;\n  }\n\n  set expandedIndex(value) {\n    this.#expandedIndex = value;\n  }\n\n  /** All headers for this accordion */\n  get headers() {\n    return this.#allHeaders();\n  }\n\n  /** All panels for this accordion */\n  get panels() {\n    return this.#allPanels();\n  }\n\n  #expandedIndexSet = new Set<number>();\n\n  #expanded = false;\n\n  #expandedIndex: number[] = [];\n\n  #logger = new Logger(this);\n\n  #mo = new MutationObserver(() => this.updateAccessibility());\n\n  @provide({ context }) private ctx = this.#makeContext();\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener('change', this.#onChange as EventListener);\n    this.#mo.observe(this, { childList: true });\n    this.updateAccessibility();\n  }\n\n  override render(): TemplateResult {\n    const { large } = this;\n    const expanded = this.#expanded;\n    return html`\n      <div id=\"container\"\n           class=\"${classMap({ large, expanded })}\"><!--\n        Place the \\`rh-accordion-header\\` and \\`rh-accordion-panel\\` elements here.\n        --><slot></slot></div>\n    `;\n  }\n\n  protected override async getUpdateComplete(): Promise<boolean> {\n    const c = await super.getUpdateComplete();\n    const results = await Promise.all([\n      ...this.headers.map(x => x.updateComplete),\n      ...this.panels.map(x => x.updateComplete),\n    ]);\n    return c && results.every(Boolean);\n  }\n\n  @observes('expandedIndex')\n  private updateExpanded() {\n    if (this.#expandedIndex.length === 0) {\n      return;\n    }\n    // close all first\n    this.collapseAll();\n    this.#expandedIndex.forEach(headerIndex => {\n      if (!this.headers[headerIndex]) {\n        return;\n      }\n      this.#expand(headerIndex);\n    });\n  }\n\n  @observes('accents')\n  @observes('large')\n  @observes('expandedIndex')\n  private contextChanged() {\n    this.ctx = this.#makeContext();\n  }\n\n  #makeContext(): RhAccordionContext {\n    const { accents = 'inline', large } = this;\n    return { accents, large };\n  }\n\n  #panelForHeader(header: RhAccordionHeader) {\n    const next = header.nextElementSibling;\n    if (!RhAccordion.isPanel(next)) {\n      return next?.querySelector('rh-accordion-panel');\n    } else {\n      return next;\n    }\n  }\n\n  #expand(index: number) {\n    // If this index is not already listed in the expandedSets array, add it\n    if (this.#expandedIndexSet.has(index)) {\n      return;\n    }\n\n    this.#expandedIndexSet.add(index);\n\n    const header = this.headers[index];\n    const panel = this.panels[index];\n\n    if (header && panel) {\n      header.expanded = true;\n      panel.expanded = true;\n    }\n  }\n\n  #collapse(index: number) {\n    if (!this.#expandedIndexSet.has(index)) {\n      return;\n    }\n\n    const header = this.headers[index];\n    const panel = this.panels[index];\n    if (header && panel) {\n      header.expanded = false;\n      panel.expanded = false;\n    }\n    this.#expandedIndexSet.delete(index);\n  }\n\n  #onChange(event: AccordionHeaderChangeEvent) {\n    if (this.contains(event.target)) {\n      event.stopPropagation();\n    }\n    const index = this.#getIndex(event.target);\n    if (event.expanded) {\n      this.#expand(index);\n    } else {\n      this.#collapse(index);\n    }\n  }\n\n  #allHeaders(accordion: RhAccordion = this): RhAccordionHeader[] {\n    return Array.from(accordion.children ?? []).filter((x): x is RhAccordionHeader =>\n      x instanceof RhAccordionHeader\n    );\n  }\n\n  #allPanels(accordion: RhAccordion = this): RhAccordionPanel[] {\n    return Array.from(accordion.children).filter((x =>\n      RhAccordion.isPanel(x)) as typeof RhAccordion.isPanel\n    );\n  }\n\n  #getIndex(el: Element | null) {\n    if (RhAccordion.isHeader(el)) {\n      return this.headers.findIndex(header => header.id === el.id);\n    }\n\n    if (RhAccordion.isPanel(el)) {\n      return this.panels.findIndex(panel => panel.id === el.id);\n    }\n\n    this.#logger.warn('The #getIndex method expects to receive a header or panel element.');\n    return -1;\n  }\n\n  /**\n   * Initialize the accordion by connecting headers and panels\n   * with aria controls and labels; set up the default disclosure\n   * state if not set by the author; and check the URL for default\n   * open\n   */\n  public updateAccessibility() {\n    const { headers } = this;\n\n    // For each header in the accordion, attach the aria connections\n    for (const header of headers) {\n      const panel = this.#panelForHeader(header);\n      if (panel) {\n        header.setAttribute('aria-controls', panel.id);\n        panel.setAttribute('aria-labelledby', header.id);\n      }\n    }\n  }\n\n  /**\n   * Accepts a 0-based index value (integer) for the set of accordion items to expand or collapse.\n   * @param index header index to toggle\n   */\n  public async toggle(index: number) {\n    const { headers } = this;\n    const header = headers[index];\n\n    if (!header.expanded) {\n      await this.#expand(index);\n    } else {\n      await this.#collapse(index);\n    }\n  }\n\n  /**\n   * Accepts a 0-based index value (integer) for the set of accordion items to expand.\n   * Accepts an optional parent accordion to search for headers and panels.\n   * @param index header index to toggle\n   * @param parentAccordion target accordion to expand in\n   */\n  public async expand(index: number, parentAccordion?: RhAccordion) {\n    const allHeaders: RhAccordionHeader[] = this.#allHeaders(parentAccordion);\n\n    const header = allHeaders[index];\n    if (!header) {\n      return;\n    }\n\n    const panel = this.#panelForHeader(header);\n    if (!panel) {\n      return;\n    }\n\n    // If the header and panel exist, open both\n    this.#expand(index);\n\n    header.focus();\n\n    this.dispatchEvent(new AccordionExpandEvent(header, panel));\n\n    await this.updateComplete;\n  }\n\n  /**\n   * Expands all accordion items.\n   */\n  public async expandAll() {\n    this.headers.forEach((_, i) => this.#expand(i));\n    await this.updateComplete;\n  }\n\n  /**\n   * Accepts a 0-based index value (integer) for the set of accordion items to collapse.\n   * @param index header index to collapse\n   */\n  public async collapse(index: number) {\n    const header = this.headers.at(index);\n    const panel = this.panels.at(index);\n\n    if (!header || !panel) {\n      return;\n    }\n\n    this.#collapse(index);\n\n    this.dispatchEvent(new AccordionCollapseEvent(header, panel));\n    await this.updateComplete;\n  }\n\n  /**\n   * Collapses all accordion items.\n   */\n  public async collapseAll() {\n    this.headers.forEach((_, i) => this.#collapse(i));\n    await this.updateComplete;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-accordion': RhAccordion;\n  }\n\n  interface HTMLElementEventMap {\n    'expand': AccordionExpandEvent;\n    'collapse': AccordionCollapseEvent;\n  }\n}\n"]}