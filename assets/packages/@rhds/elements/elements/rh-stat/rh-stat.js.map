{"version":3,"file":"rh-stat.js","sourceRoot":"","sources":["rh-stat.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\nimport { ScreenSizeController } from '../../lib/ScreenSizeController.js';\n\nimport styles from './rh-stat.css';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\n/**\n * A statistic showcases a data point or quick fact in a way that visually stands out.\n * It consists of a number/percentage and body text in its simplest form.\n * It can also include an icon, title, and a call to action.\n *\n * @slot icon - Optional icon\n * @slot title - Statistic title\n * @slot statistic - Statistic data\n * @slot cta - Call to action\n * @slot - Description of the stat\n *\n */\n@customElement('rh-stat')\nexport class RhStat extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  @property({ reflect: true, type: String }) icon?: string;\n\n  @property({ reflect: true, type: String }) top: 'default'|'statistic' = 'default';\n\n  @property({ reflect: true, type: String }) size: 'default'|'large' = 'default';\n\n  @property({ type: Boolean, reflect: true, attribute: 'is-mobile' }) isMobile = false;\n\n  #screenSize = new ScreenSizeController(this);\n\n  #slots = new SlotController(this, null, 'icon', 'title', 'statistic', 'cta');\n\n  #mo = new MutationObserver(() => this.#onMutation());\n\n  #logger = new Logger(this);\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.#updateIcons();\n    this.#mo.observe(this, { childList: true });\n    this.#onMutation();\n  }\n\n  render() {\n    const hasIcon = this.#slots.hasSlotted('icon') || !!this.icon;\n    const hasTitle = this.#slots.hasSlotted('title');\n    const hasStatistic = this.#slots.hasSlotted('statistic');\n    const hasCta = this.#slots.hasSlotted('cta');\n    const isMobile = !this.#screenSize.matches.has('tabletPortrait');\n    const { on = '' } = this;\n    return html`\n      <div class=\"${classMap({ isMobile, hasIcon, hasTitle, hasStatistic, hasCta, [on]: !!on })}\">\n        <span id=\"icon\">\n          <slot name=\"icon\" @slotchange=\"${this.#updateIcons}\">${!this.icon ? '' : /* TODO: replace with rh-icon */html`\n            <pf-icon size=${this.size === 'default' ? 'md' : 'lg'}\n                     icon=${this.icon}\n                     set=\"${ifDefined(this.getAttribute('icon-set') ?? undefined)}\"></pf-icon>`}\n          </slot>\n        </span>\n        <span id=\"title\"><slot name=\"title\"></slot></span>\n        <span id=\"statistic\"><slot name=\"statistic\"></slot></span>\n        <span id=\"content\"><slot></slot></span>\n        <span id=\"cta\"><slot name=\"cta\"></slot></span>\n      </div>\n    `;\n  }\n\n  #updateIcons(): void {\n    this.querySelector('pf-icon[slot=\"icon\"]')\n      ?.setAttribute?.('size', this.size === 'default' ? 'md' : 'lg');\n  }\n\n  #onMutation() {\n    if (!this.#slots.hasSlotted('stat')) {\n      this.#logger.warn('Must contain stat content');\n    }\n    if (!this.querySelectorAll(':not([slot])').length) {\n      this.#logger.warn('Must contain description content');\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-stat': RhStat;\n  }\n}\n"]}