{"version":3,"file":"rh-disclosure.js","sourceRoot":"","sources":["rh-disclosure.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, isServer } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { state } from 'lit/decorators/state.js';\nimport { query } from 'lit/decorators/query.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\n\nimport { observes } from '@patternfly/pfe-core/decorators.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\nimport { colorPalettes, type ColorPalette } from '@rhds/elements/lib/color-palettes.js';\n\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-disclosure.css';\n\nexport class DisclosureToggleEvent extends Event {\n  constructor() {\n    super('toggle', { bubbles: true, cancelable: true });\n  }\n}\n\n/**\n * A disclosure toggles the visibility of content when triggered.\n *\n * @summary A disclosure toggles the visibility of content when triggered\n *\n * @alias disclosure\n *\n * @slot - Place the content you want to disclose in the default slot. This content is hidden by default.\n * @slot summary - The title of the disclosure\n * @fires {DisclosureToggleEvent} toggle - Fires when a user opens or closes a disclosure.\n * @csspart caret - The caret icon in the shadow DOM\n */\n@customElement('rh-disclosure')\n@colorPalettes\n@themable\nexport class RhDisclosure extends LitElement {\n  static readonly styles = [styles];\n\n  private static readonly preventEscElements = [\n    'input:not([type=\"hidden\"]):not([type=\"radio\"])',\n\n    // Elements that need the :disabled selector:\n    ...[\n      'input[type=\"radio\"]',\n      'select',\n      'textarea',\n      'rh-audio-player',\n      'rh-dialog',\n    ].map(selector => `${selector}:not([inert]):not([inert] *):not([tabindex^='-']):not(:disabled)`),\n\n    // Elements that don't need the :disabled selector:\n    ...[\n      'iframe',\n      'audio[controls]',\n      'video[controls]',\n      '[contenteditable]',\n    ].map(selector => `${selector}:not([inert]):not([inert] *):not([tabindex^='-'])`),\n  ].join(',');\n\n  /**\n   * Set the colorPalette of the disclosure. Overrides parent context. Possible values are:\n   * - `lightest` (default)\n   * - `lighter`\n   * - `light`\n   * - `dark`\n   * - `darker`\n   * - `darkest`\n   */\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  /**\n   * Sets the disclosure to be in its open state\n   */\n  @property({ type: Boolean, reflect: true }) open = false;\n\n  /**\n   * Sets the disclosure title via an attribute\n   */\n  @property({ reflect: true }) summary?: string;\n\n  @state() private hasJumpLinks = false;\n\n  @query('details') private detailsEl!: HTMLDetailsElement;\n  @query('summary') private summaryEl!: HTMLElement;\n\n  render() {\n    return html`\n      <details\n          ?open=\"${this.open}\"\n          class=${classMap({ 'has-jump-links': this.hasJumpLinks })}\n          @keydown=\"${this.#onKeydown}\"\n          @toggle=\"${this.#onToggle}\">\n        <summary>\n          <rh-icon id=\"caret\" set=\"ui\" icon=\"caret-down\"></rh-icon>\n          <slot name=\"summary\">${this.summary}</slot>\n        </summary>\n        <div id=\"details-content\">\n          <slot></slot>\n        </div>\n      </details>\n    `;\n  }\n\n  #onToggle(): void {\n    this.open = this.detailsEl.open;\n    const event = new DisclosureToggleEvent();\n    this.dispatchEvent(event);\n  }\n\n  #onKeydown(event: KeyboardEvent): void {\n    if (event.code === 'Escape') {\n      event.stopPropagation();\n\n      const escapeGuardElement =\n        event.composedPath().reverse().find((element: EventTarget | null) => {\n          return (element instanceof Element && element.matches(RhDisclosure.preventEscElements));\n        });\n\n      if (!escapeGuardElement) {\n        this.#closeDisclosure();\n      }\n    }\n  }\n\n  #closeDisclosure(): void {\n    if (!this.open) {\n      return;\n    }\n    this.open = false;\n    this.summaryEl.focus();\n  }\n\n  @observes('open')\n  protected _openChanged() {\n    if (!isServer) {\n      this.hasJumpLinks = !!this.querySelector('rh-jump-links');\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-disclosure': RhDisclosure;\n  }\n}\n"]}