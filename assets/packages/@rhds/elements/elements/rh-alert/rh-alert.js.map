{"version":3,"file":"rh-alert.js","sourceRoot":"","sources":["rh-alert.ts"],"names":[],"mappings":"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","sourcesContent":["import { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport { type CSSResult, LitElement, html, isServer, render } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\n\nimport '@rhds/elements/rh-surface/rh-surface.js';\nimport '@rhds/elements/rh-button/rh-button.js';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-alert.css';\nimport toastStyles from './rh-alert-toast-styles.css';\nimport consumerStyles from '@rhds/tokens/css/color-context-consumer.css.js';\n\ninterface ToastOptions {\n  id?: string;\n  message: string;\n  heading?: string;\n  state?: RhAlert['state'];\n}\n\nconst ICONS = new Map(Object.entries({\n  neutral: 'minus-circle-fill',\n  info: 'information-fill',\n  success: 'check-circle-fill',\n  caution: 'error-fill',\n  warning: 'warning-fill',\n  danger: 'ban-fill',\n}));\n\nexport class AlertCloseEvent extends Event {\n  constructor() {\n    super('close', { bubbles: true, cancelable: true });\n  }\n}\n\n/**\n * An alert is a banner used to notify a user about a change in status\n * or communicate other information. It can be generated with or without\n * a user triggering an action first.\n *\n * @summary Notifies a user without blocking their workflow\n *\n * @fires {AlertCloseEvent} close - when the dismissable alert closes\n *\n * @slot         - Provide a description for the alert message\n * @slot header  - Provide a header for the alert message.\n * @slot actions - Provide actions that the user can take for the alert\n *\n */\n@customElement('rh-alert')\nexport class RhAlert extends LitElement {\n  static readonly styles = [styles, consumerStyles];\n\n  private static toaster: HTMLElement;\n\n  private static toasts = new Set<ToastOptions>();\n\n  /**\n   * @see https://aerotwist.com/blog/flip-your-animations/\n   * @param toast\n   */\n  private static flip() {\n    const first = this.toaster.offsetHeight;\n    const last = this.toaster.offsetHeight;\n    const invert = last - first;\n    const animation = this.toaster.animate([\n      { transform: `translateY(${invert}px)` },\n      { transform: 'translateY(0)' },\n    ], {\n      duration: 150,\n      easing: 'ease-out',\n    });\n    animation.startTime = document.timeline.currentTime;\n  };\n\n  private static renderToasts() {\n    render(repeat(this.toasts, x => x.id, toast => html`\n      <rh-alert id=\"${toast.id}\"\n                state=\"${toast.state}\"\n                variant=\"toast\"\n                role=\"status\"\n                aria-live=\"polite\">\n        <h3 slot=\"header\">${toast.heading}</h3>\n        <p class=\"text\" ?hidden=\"${!toast.message}\">${toast.message}</p>\n      </rh-alert>\n    `), this.toaster);\n  }\n\n  /**\n   * Toast a message with an rh-alert\n   * @param options\n   * @param options.message alert text\n   * @param [options.heading] alert heading\n   * @param [options.state] `<rh-alert state=\"...\">`\n   */\n  public static async toast({ message, heading = 'Success', state = 'info' }: ToastOptions) {\n    this.toaster ??= this.init();\n    const id = getRandomId();\n    const toast = { heading, message, state, id };\n    this.toasts.add(toast);\n    const { matches: motionOK } = window.matchMedia('(prefers-reduced-motion: no-preference)');\n    this.renderToasts();\n    const alert = this.toaster.querySelector(`#${id}`);\n    if (this.toaster.children.length && motionOK) {\n      this.flip();\n    }\n    await Promise.all([\n      ...this.toaster.getAnimations().map(x => x.finished),\n      ...(alert?.getAnimations().map(x=>x.finished) ?? []),\n    ]);\n    this.toasts.delete(toast);\n    this.renderToasts();\n  };\n\n  static init() {\n    const node = document.createElement('section');\n    node.classList.add('rh-alert-toast-group');\n    // TODO: possibly allow other roots\n    document.adoptedStyleSheets = [\n      ...document.adoptedStyleSheets ?? [],\n      (toastStyles as unknown as CSSResult).styleSheet!,\n    ];\n    document.body.append(node);\n    return node;\n  }\n\n  private get icon() {\n    const state = this.state.toLowerCase() as this['state'];\n    switch (state) {\n      case 'note': return ICONS.get('info');\n      case 'default': return ICONS.get('neutral');\n      case 'error': return ICONS.get('danger');\n      default: return ICONS.get(state);\n    }\n  }\n\n  /**\n   * Communicates the urgency of a message and is denoted by various styling configurations.\n   *\n   *  - `neutral` - Indicates generic information or a message with no severity.\n   *  - `danger` - Indicates a danger state, like an error that is blocking a user from completing a task.\n   *  - `warning` - Indicates a warning state, like a non-blocking error that might need to be fixed.\n   *  - `caution` - Indicates an action or notice which should immediately draw the attention\n   *  - `info` - Indicates helpful information or a message with very little to no severity.\n   *  - `success` - Indicates a success state, like if a process was completed without errors.\n   */\n  @property({ reflect: true })\n  state:\n    | 'danger'\n    | 'warning'\n    | 'caution'\n    | 'neutral'\n    | 'info'\n    | 'success'\n    | 'note' // deprecated\n    | 'default' // deprecated\n    | 'error' = // deprecated\n      'neutral';\n\n  /**\n   * The alternate Inline alert style includes a border instead of a line which\n   * can be used to express more urgency or better grab the attention of a user.\n   *\n   * A Toast alert is used to present a global message about an event,\n   * update, or confirmation, like the result of a user action that cannot\n   * be presented within a specific layout or component.\n   */\n  @property({ reflect: true }) variant?: 'alternate' | 'toast' | 'inline';\n\n  /**\n   * Alert variants have different rules regarding their ability to be dismissed by a user.\n   * Default, Info, and Success Inline alerts can be dismissed by a user selecting the close button.\n   * Warning and Danger Inline alerts can be dismissed by a user resolving the issues caused by the alert.\n   * All Toast alerts can be dismissed by a user selecting the close button or waiting for them to time out.\n   */\n  @property({ reflect: true, type: Boolean }) dismissable = false;\n\n  #slots = new SlotController(this, 'header', null, 'actions');\n\n  #onClose() {\n    const event = new AlertCloseEvent();\n    if (this.dispatchEvent(event)) {\n      this.remove();\n    }\n  }\n\n  #aliasState(state: string) {\n    switch (state.toLowerCase()) {\n      // the first three are deprecated pre-DPO status names\n      case 'note': return 'info';\n      case 'default': return 'neutral';\n      case 'error': return 'danger';\n      // the following are DPO-approved status names\n      case 'danger':\n      case 'warning':\n      case 'caution':\n      case 'neutral':\n      case 'info':\n      case 'success':\n        return state as this['state'];\n      default:\n        return 'neutral';\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    if (!isServer) {\n      this.requestUpdate();\n    }\n  }\n\n  render() {\n    const _isServer = isServer && !this.hasUpdated;\n    const hasActions = _isServer || this.#slots.hasSlotted('actions');\n    const hasBody =\n      _isServer || this.#slots.hasSlotted(SlotController.default as unknown as string);\n    const { variant = 'inline' } = this;\n    const state = this.#aliasState(this.state);\n    return html`\n      <rh-surface id=\"container\"\n                  class=\"${classMap({\n                    hasBody,\n                    on: true,\n                    light: true,\n                    [state]: true,\n                    [variant]: !!variant,\n                  })}\"\n                  role=\"alert\"\n                  aria-hidden=\"false\"\n                  color-palette=\"lightest\">\n        <div id=\"left-column\">\n          <rh-icon id=\"icon\" set=\"ui\" icon=\"${this.icon}\"></rh-icon>\n        </div>\n        <div id=\"middle-column\">\n          <header ?hidden=\"${!_isServer && this.#slots.isEmpty('header')}\">\n            <div id=\"header\">\n              <slot name=\"header\"></slot>\n            </div>${!this.dismissable && this.variant !== 'toast' ? '' : html`\n            <div id=\"header-actions\">\n              <rh-button id=\"close-button\"\n                         variant=\"close\"\n                         accessible-label=\"Close\"\n                         confirm\n                         @click=${this.#onClose}></rh-button>\n            </div>`}\n          </header>\n          <div id=\"description\">\n            <slot></slot>\n          </div>\n          <footer class=\"${classMap({ hasActions })}\">\n            <slot name=\"actions\"></slot>\n          </footer>\n        </div>\n      </rh-surface>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-alert': RhAlert;\n  }\n}\n"]}