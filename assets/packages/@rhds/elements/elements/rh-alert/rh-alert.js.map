{"version":3,"file":"rh-alert.js","sourceRoot":"","sources":["rh-alert.ts"],"names":[],"mappings":"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","sourcesContent":["import { type CSSResult, LitElement, type TemplateResult, html, isServer, render } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport '@rhds/elements/rh-surface/rh-surface.js';\nimport '@rhds/elements/rh-button/rh-button.js';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-alert.css';\nimport toastStyles from './rh-alert-toast-styles.css';\n\ninterface AlertAction {\n  action: 'dismiss' | 'confirm' | string;\n  text: string;\n}\n\ninterface ToastOptions {\n  id?: string;\n  /** Alert body content. Can be any value which lit-html can render. Simple strings are preferable */\n  message: string | Node | TemplateResult | (string | Node | TemplateResult)[];\n  /** Alert heading content. Must be a simple string. */\n  heading?: string;\n  /** Alert `state` attribute */\n  state?: RhAlert['state'];\n  /** Whether the alert should remain on screen until the user explicitly dismisses it */\n  persistent?: boolean;\n  /** One or more optional body actions */\n  actions?: [] | [AlertAction] | [AlertAction, AlertAction];\n}\n\nconst ICONS = new Map(Object.entries({\n  neutral: 'minus-circle-fill',\n  info: 'information-fill',\n  success: 'check-circle-fill',\n  caution: 'error-fill',\n  warning: 'warning-fill',\n  danger: 'ban-fill',\n}));\n\nexport class AlertCloseEvent extends Event {\n  constructor(public action: 'close' | 'confirm' | 'dismiss' | string) {\n    super('close', { bubbles: true, cancelable: true });\n  }\n}\n\nlet toaster: HTMLElement;\n\nconst toasts = new Set<Required<ToastOptions>>();\n\n/**\n * An alert is a banner used to notify a user about a change in status\n * or communicate other information. It can be generated with or without\n * a user triggering an action first.\n *\n * @summary Notifies a user without blocking their workflow\n *\n * @fires {AlertCloseEvent} close - when the dismissable alert closes\n *\n * @slot         - Provide a description for the alert message\n * @slot header  - Provide a header for the alert message.\n * @slot actions - Provide actions that the user can take for the alert\n *\n */\n@customElement('rh-alert')\n@themable\nexport class RhAlert extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Toast a message with an rh-alert\n   * @param options\n   * @param options.message alert text\n   * @param [options.actions] optional array of actions\n   * @param [options.heading=\"Success\"] alert heading\n   * @param [options.state=\"info\"] `<rh-alert state=\"...\">`\n   * @param [options.persistent=false] when true, toast remains on screen until dismissed\n   */\n  public static async toast({\n    message,\n    persistent = false,\n    heading = 'Success',\n    state = 'info',\n    actions: _actions,\n  }: Omit<ToastOptions, 'id'>) {\n    const actions = _actions ?? [];\n    toaster ??= initToaster();\n    const id = getRandomId();\n    const toast = { actions, heading, message, state, id, persistent };\n    toasts.add(toast);\n    const { matches: motionOK } = window.matchMedia('(prefers-reduced-motion: no-preference)');\n    renderToasts();\n    const alert = toaster.querySelector(`#${id}`);\n    if (toaster.children.length && motionOK) {\n      flip(toaster);\n    }\n    await Promise.all(toaster.getAnimations().map(x => x.finished));\n    if (!persistent) {\n      await Promise.all(alert?.getAnimations().map(x => x.finished) ?? []);\n      toasts.delete(toast);\n    }\n    renderToasts();\n  };\n\n  get #icon() {\n    const state = this.state.toLowerCase() as this['state'];\n    switch (state) {\n      case 'note': return ICONS.get('info');\n      case 'default': return ICONS.get('neutral');\n      case 'error': return ICONS.get('danger');\n      default: return ICONS.get(state);\n    }\n  }\n\n  /**\n   * Communicates the urgency of a message and is denoted by various styling configurations.\n   *\n   *  - `neutral` - Indicates generic information or a message with no severity.\n   *  - `danger` - Indicates a danger state, like an error that is blocking a user from completing a task.\n   *  - `warning` - Indicates a warning state, like a non-blocking error that might need to be fixed.\n   *  - `caution` - Indicates an action or notice which should immediately draw the attention\n   *  - `info` - Indicates helpful information or a message with very little to no severity.\n   *  - `success` - Indicates a success state, like if a process was completed without errors.\n   */\n  @property({ reflect: true })\n  state:\n    | 'danger'\n    | 'warning'\n    | 'caution'\n    | 'neutral'\n    | 'info'\n    | 'success'\n    | 'note' // deprecated\n    | 'default' // deprecated\n    | 'error' = // deprecated\n      'neutral';\n\n  /**\n   * The alternate Inline alert style includes a border instead of a line which\n   * can be used to express more urgency or better grab the attention of a user.\n   *\n   * A Toast alert is used to present a global message about an event,\n   * update, or confirmation, like the result of a user action that cannot\n   * be presented within a specific layout or component.\n   */\n  @property({ reflect: true }) variant?: 'alternate' | 'toast' | 'inline';\n\n  /**\n   * Alert variants have different rules regarding their ability to be dismissed by a user.\n   * Default, Info, and Success Inline alerts can be dismissed by a user selecting the close button.\n   * Warning and Danger Inline alerts can be dismissed by a user resolving the issues caused by the alert.\n   * All Toast alerts can be dismissed by a user selecting the close button or waiting for them to time out.\n   */\n  @property({ reflect: true, type: Boolean }) dismissable = false;\n\n  #slots = new SlotController(this, 'header', null, 'actions');\n\n  #onClose() {\n    if (this.dispatchEvent(new AlertCloseEvent('close'))) {\n      this.#close();\n    }\n  }\n\n  #aliasState(state: string) {\n    switch (state.toLowerCase()) {\n      // the first three are deprecated pre-DPO status names\n      case 'note': return 'info';\n      case 'default': return 'neutral';\n      case 'error': return 'danger';\n      // the following are DPO-approved status names\n      case 'danger':\n      case 'warning':\n      case 'caution':\n      case 'neutral':\n      case 'info':\n      case 'success':\n        return state as this['state'];\n      default:\n        return 'neutral';\n    }\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    if (!isServer) {\n      this.requestUpdate();\n    }\n  }\n\n  render() {\n    const _isServer = isServer && !this.hasUpdated;\n    const hasActions = _isServer || this.#slots.hasSlotted('actions');\n    const hasBody =\n      _isServer || this.#slots.hasSlotted(SlotController.default as unknown as string);\n    const { variant = 'inline' } = this;\n    const state = this.#aliasState(this.state);\n    // this click listener delegates events from the footer slot\n    // as such it doest not require a key listener.\n    // eslint-disable-next-line lit-a11y/click-events-have-key-events\n    const footer = html`<footer class=\"${classMap({ hasActions })}\"\n                  @click=\"${this.#onActionsClick}\">\n            <slot name=\"actions\"></slot>\n          </footer>`;\n    return html`\n      <rh-surface id=\"container\"\n                  class=\"${classMap({\n                    hasBody,\n                    light: true,\n                    [state]: true,\n                    [variant]: !!variant,\n                  })}\"\n                  role=\"alert\"\n                  aria-hidden=\"false\"\n                  color-palette=\"lightest\">\n        <div id=\"left-column\">\n          <rh-icon id=\"icon\" set=\"ui\" icon=\"${this.#icon}\"></rh-icon>\n        </div>\n        <div id=\"middle-column\">\n          <header ?hidden=\"${!_isServer && this.#slots.isEmpty('header')}\">\n            <div id=\"header\">\n              <slot name=\"header\"></slot>\n            </div>${!this.dismissable && this.variant !== 'toast' ? '' : html`\n            <div id=\"header-actions\">\n              <rh-button id=\"close-button\"\n                         variant=\"close\"\n                         accessible-label=\"Close\"\n                         confirm\n                         @click=\"${this.#onClose}\"></rh-button>\n            </div>`}\n          </header>\n          <div id=\"description\">\n            <slot></slot>\n          </div>\n          ${footer}\n        </div>\n      </rh-surface>\n    `;\n  }\n\n  async #close() {\n    await this.updateComplete;\n    await Promise.all(this.getAnimations().map(x => {\n      x.finish();\n      return x.finished;\n    }));\n    this.remove();\n  }\n\n  async #onActionsClick(event: MouseEvent) {\n    if (event.target instanceof HTMLElement\n      && event.target?.slot === 'actions'\n      && typeof event.target.dataset.action === 'string'\n      && this.dispatchEvent(\n        new AlertCloseEvent(event.target?.dataset.action.toLowerCase()),\n      )) {\n      this.#close();\n    }\n  }\n}\n\nfunction initToaster() {\n  const node = document.createElement('section');\n  node.classList.add('rh-alert-toast-group');\n  // TODO: possibly allow other roots\n  document.adoptedStyleSheets = [\n    ...document.adoptedStyleSheets ?? [],\n    (toastStyles as unknown as CSSResult).styleSheet!,\n  ];\n  document.body.append(node);\n  return node;\n}\n\nfunction renderToasts() {\n  render(repeat(toasts, x => x.id, ({\n    actions,\n    id,\n    state,\n    heading,\n    message,\n    persistent,\n  }) => {\n    const [firstAction, secondAction] = actions ?? [];\n    return html`\n    <rh-alert id=\"${id}\"\n              state=\"${state}\"\n              class=\"${classMap({ persistent })}\"\n              variant=\"toast\"\n              role=\"status\"\n              aria-live=\"polite\"\n              @focusin=\"${manageAlertAnimation}\"\n              @focusout=\"${manageAlertAnimation}\"\n              @mouseenter=\"${manageAlertAnimation}\"\n              @mouseleave=\"${manageAlertAnimation}\">\n      <h3 slot=\"header\">${heading}</h3>\n      ${!message ? '' : typeof message !== 'string' ? message : html`\n      <p class=\"text\" ?hidden=\"${!message}\">${message}</p>`}\n      ${[firstAction, secondAction].filter(x => !!x).map(action => html`\n      <rh-button slot=\"actions\"\n                 variant=\"${action === firstAction ? 'secondary' : 'link'}\"\n                 data-action=\"${action.action}\">${action.text}</rh-button>\n      `) ?? []}\n    </rh-alert>\n  `;\n  }), toaster);\n}\n\nasync function manageAlertAnimation(event: Event) {\n  const alert =\n      event.target instanceof RhAlert ? event.target\n    : event.target instanceof Element ? event.target.closest('rh-alert')\n    : null;\n  if (!alert) {\n    return;\n  }\n  for (const animation of alert.getAnimations() ?? []) {\n    switch (event.type) {\n      case 'focusin':\n      case 'mouseenter':\n        return animation.pause();\n      case 'focusout':\n      case 'mouseleave':\n        if (!alert.matches(':focus-within')) {\n          return animation.play();\n        }\n    }\n  }\n}\n\n/**\n * @see https://aerotwist.com/blog/flip-your-animations/\n * @param toaster container for toasted alerts\n */\nfunction flip(toaster: HTMLElement) {\n  const first = toaster.offsetHeight;\n  const last = toaster.offsetHeight;\n  const invert = last - first;\n  const animation = toaster.animate([\n    { transform: `translateY(${invert}px)` },\n    { transform: 'translateY(0)' },\n  ], {\n    duration: 150,\n    easing: 'ease-out',\n  });\n  animation.startTime = document.timeline.currentTime;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-alert': RhAlert;\n  }\n}\n"]}