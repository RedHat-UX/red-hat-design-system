{"version":3,"file":"rh-button.js","sourceRoot":"","sources":["rh-button.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, type TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { query } from 'lit/decorators/query.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport { InternalsController } from '@patternfly/pfe-core/controllers/internals-controller.js';\n\nimport styles from './rh-button.css';\n\n/**\n * A button is clickable text or an icon that triggers an action on the page or in the background.\n * Depending on the action, content, and hierarchy, a button can be used on its own or grouped with\n * other buttons.\n * @summary Triggers actions on the page or in the background\n * @csspart button - Internal button element\n * @csspart icon - Container for the icon slot\n * @slot icon - Contains the button's icon or state indicator, e.g. a spinner.\n * @slot - Contains button text\n */\n@customElement('rh-button')\nexport class RhButton extends LitElement {\n  static readonly styles = [styles];\n\n  static readonly formAssociated = true;\n\n  static override readonly shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /** Disables the button */\n  @property({ reflect: true, type: Boolean }) disabled = false;\n\n  @property({ reflect: true }) type?: 'button' | 'submit' | 'reset';\n\n  /** Accessible name for the button, use when the button does not have slotted text */\n  @property() label?: string;\n\n  /** Form value for the button */\n  @property() value?: string;\n\n  /** Form name for the button */\n  @property() name?: string;\n\n  /** Shorthand for the `icon` slot, the value is icon name */\n  @property() icon?: string;\n\n  @query('button') private _button!: HTMLButtonElement;\n\n  /**\n   * Changes the style of the button.\n   * - Primary: Used for the most important call to action on a page. Try to\n   *   limit primary buttons to one per page.\n   * - Secondary: Use secondary buttons for general actions on a page, that\n   *   donâ€™t require as much emphasis as primary button actions. For example,\n   *   you can use secondary buttons where there are multiple actions, like in\n   *   toolbars or data lists.\n   * - Tertiary: Tertiary buttons are flexible and can be used as needed.\n   */\n  @property({ reflect: true }) variant:\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'close'\n    | 'play' = 'primary';\n\n  /**\n   * Use danger buttons for actions a user can take that are potentially\n   * destructive or difficult/impossible to undo, like deleting or removing\n   * user data.\n   */\n  @property({ type: Boolean, reflect: true }) danger = false;\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  get #hasIcon() {\n    return !!this.icon;\n  }\n\n  #internals = InternalsController.of(this);\n\n  override willUpdate() {\n    const variant = this.variant.toLowerCase();\n    switch (variant) {\n      case 'close':\n      case 'play':\n        this.icon = variant;\n        break;\n    }\n  }\n\n  override render() {\n    const { on = 'light' } = this;\n    const hasIcon = this.#hasIcon;\n    return html`\n      <button aria-label=\"${ifDefined(this.label)}\"\n              class=\"${classMap({ hasIcon, [on]: !!on })}\"\n              part=\"button\"\n              type=\"${ifDefined(this.type)}\"\n              value=\"${ifDefined(this.value)}\"\n              @click=\"${this.#onClick}\"\n              ?disabled=\"${this.disabled || this.#internals.formDisabled}\">\n        <span aria-hidden=\"true\">\n          <slot id=\"icon\" part=\"icon\" name=\"icon\">${this.#renderDefaultIcon()}</slot>\n        </span>\n        <span aria-hidden=${String(!!this.label) as 'true' | 'false'}><slot id=\"text\" ></slot></span>\n      </button>\n    `;\n  }\n\n  protected async formDisabledCallback() {\n    await this.updateComplete;\n    this.requestUpdate();\n  }\n\n  #onClick() {\n    switch (this.type) {\n      case 'reset':\n        return this.#internals.reset();\n      default:\n        return this.#internals.submit();\n    }\n  }\n\n  /**\n   * Fallback content for the icon slot. When the `icon` attribute is set, it\n   * should render an icon corresponding to the value.\n   * @example ```html\n   *          <base-icon icon=${this.icon}></base-icon>\n   *          ```\n   */\n  #renderDefaultIcon(): TemplateResult | string {\n    switch (this.variant.toLowerCase()) {\n      // TODO: revisit when rh-icon is ready\n      // return html`<rh-icon icon=${this.variant}></rh-icon>`;\n      case 'close':\n        return html`\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n            <path d=\"M12.54 11.46 8.92 7.83l3.45-3.46a.63.63 0 0 0 0-.88.61.61 0 0 0-.88 0L8 6.94 4.54 3.46a.61.61 0 0 0-.88 0 .63.63 0 0 0 0 .88l3.49 3.49-3.66 3.66a.61.61 0 0 0 0 .88.63.63 0 0 0 .88 0L8 8.71l3.63 3.63a.63.63 0 0 0 .88 0 .61.61 0 0 0 .03-.88Z\"/>\n          </svg>\n        `;\n      case 'play':\n        return html`\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\">\n            <path d=\"m12.3 7.5-9-5c-.2-.1-.4-.1-.6 0-.2.1-.3.3-.3.5v10c0 .2.1.4.3.5.1.1.2.1.3.1.1 0 .2 0 .3-.1l9-5c.2-.1.3-.3.3-.5s-.1-.4-.3-.5z\"/>\n          </svg>\n        `;\n      default:\n        return '';\n    }\n  }\n\n  focus() {\n    this._button?.focus();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-button': RhButton;\n  }\n}\n"]}