{"version":3,"file":"rh-spinner.js","sourceRoot":"","sources":["rh-spinner.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAGvC,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;;;AAM5F;;;;;;GAMG;AAEH,MAAM,OAAO,SAAU,SAAQ,UAAU;;;QAGvC;;WAEG;QACH,YAAwD,IAAI,CAAC;;IAO7D,MAAM;QACJ,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QACzB,OAAO,IAAI,CAAA;;+BAEgB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;8BACzB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;;;KAGjD,CAAC;IACJ,CAAC;;;UAhBS,EAAE,OAAO,EAAE,IAAI,EAAE;;AALX,gBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAUF;IAA/B,oBAAoB,EAAE;qCAAyB","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport styles from './rh-spinner.css';\n\nexport type SpinnerSize = RhSpinner['size'];\n\n/**\n * A spinner indicates that an action is in progress.\n * It appears as an animated circle over the section that is loading,\n * and it may include a text label\n * @summary Notifies users their action is being processed or loaded\n * @slot - Optional text label below the animated circle.\n */\n@customElement('rh-spinner')\nexport class RhSpinner extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Preset sizes for the spinner\n   */\n  @property({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'lg';\n\n  /**\n   * Sets color theme based on parent context\n   */\n  @colorContextConsumer() private on?: ColorTheme;\n\n  render() {\n    const { on = '' } = this;\n    return html`\n      <svg role=\"status\" viewBox=\"0 0 100 100\" aria-live=\"polite\">\n        <circle class=\"track ${classMap({ [on]: !!on })}\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"none\" vector-effect=\"non-scaling-stroke\" />\n        <circle class=\"dash ${classMap({ [on]: !!on })}\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"none\" vector-effect=\"non-scaling-stroke\" />\n      </svg>\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-spinner': RhSpinner;\n  }\n}\n"]}