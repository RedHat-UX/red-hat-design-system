{"version":3,"file":"rh-spinner.js","sourceRoot":"","sources":["rh-spinner.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;;;AAM5F;;;;;;;;;GASG;AAEI,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;QAGL;;WAEG;QAC0B,SAAI,GAAuB,IAAI,CAAC;QAgC7D,WAAW;IACb,CAAC;IA1BC,MAAM;QACJ,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QACzB,OAAO,IAAI,CAAA;;+BAEgB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;8BACzB,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;;;KAGjD,CAAC;IACJ,CAAC;IAQD,UAAU;QACR,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC7E,IAAI,EAAE,EAAE,CAAC;YACP,IAAI,CAAC,EAAE,GAAG,EAAsB,CAAC;YACjC,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;;AApCe,gBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAKL;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uCAAiC;AAK7B;IAA/B,oBAAoB,EAAE;qCAAyB;AAiBN;IAAzC,QAAQ,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;+CAAuB;AA5BrD,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CAuCrB","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport styles from './rh-spinner.css';\n\nexport type SpinnerSize = RhSpinner['size'];\n\n/**\n * A spinner indicates that an action is in progress.\n * It appears as an animated circle over the section that is loading,\n * and it may include a text label\n *\n * @summary Notifies users their action is being processed or loaded\n *\n * @slot - Optional text label below the animated circle.\n *\n */\n@customElement('rh-spinner')\nexport class RhSpinner extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Preset sizes for the spinner\n   */\n  @property({ reflect: true }) size: 'sm' | 'md' | 'lg' = 'lg';\n\n  /**\n   * Sets color theme based on parent context\n   */\n  @colorContextConsumer() private on?: ColorTheme;\n\n  render() {\n    const { on = '' } = this;\n    return html`\n      <svg role=\"status\" viewBox=\"0 0 100 100\" aria-live=\"polite\">\n        <circle class=\"track ${classMap({ [on]: !!on })}\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"none\" vector-effect=\"non-scaling-stroke\" />\n        <circle class=\"dash ${classMap({ [on]: !!on })}\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"none\" vector-effect=\"non-scaling-stroke\" />\n      </svg>\n      <slot></slot>\n    `;\n  }\n\n  // START hack for removal of contextProvider. delete for version 2.0\n  /**\n   * @deprecated Use Color context instead. See https://ux.redhat.com/foundations/color/context/\n   */\n  @property({ attribute: 'color-palette' }) colorPalette?: string;\n\n  willUpdate() {\n    const [cp] = this.getAttribute('color-palette')?.match(/^dark|^light/) ?? [];\n    if (cp) {\n      this.on = cp as 'dark' | 'light';\n      // eslint-disable-next-line no-console\n      console.warn(`[rh-spinner]: do not use color-palette, it is deprecated`);\n    }\n  }\n  // END hack\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-spinner': RhSpinner;\n  }\n}\n"]}