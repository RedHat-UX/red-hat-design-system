{"version":3,"file":"rh-back-to-top.js","sourceRoot":"","sources":["rh-back-to-top.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAuB,MAAM,KAAK,CAAC;AACtE,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD,OAAO,mCAAmC,CAAC;;;AAK3C;;;;;;;GAOG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,UAAU;IAApC;;;QASL,0GAA0G;QAChD,mBAAc,GAAG,GAAG,CAAC;QAK/E,iCAAa,KAAK,EAAC;QAEnB,+BAAW,KAAK,EAAC;QAEjB,6CAAkC;QAwElC,wCAAoB,GAAG,EAAE;YACvB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAC9C,uBAAA,IAAI,wBAAY,IAAI,MAAA,CAAC;gBACrB,IAAI,CAAC,aAAa,EAAE,CAAC;gBACrB,OAAO;YACT,CAAC;YACD,MAAM,kBAAkB,GAAG,uBAAA,IAAI,4BAAS,CAAC;YACzC,IAAI,uBAAA,IAAI,kCAAe,EAAE,CAAC;gBACxB,MAAM,QAAQ,GACV,CAAC,uBAAA,IAAI,kCAAe,YAAY,MAAM,CAAC,CAAC,CAAC;oBACzC,uBAAA,IAAI,kCAAe,CAAC,OAAO;oBAC7B,CAAC,CAAC,uBAAA,IAAI,kCAAe,CAAC,SAAS,CAAC;gBAClC,uBAAA,IAAI,wBAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,MAAA,CAAC;gBACjD,IAAI,kBAAkB,KAAK,uBAAA,IAAI,4BAAS,EAAE,CAAC;oBACzC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACvB,CAAC;YACH,CAAC;QACH,CAAC,EAAC;IACJ,CAAC;IA/EU,iBAAiB;QACxB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,uBAAA,IAAI,8DAAmB,MAAvB,IAAI,CAAqB,CAAC;QAC5B,CAAC;QAED,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;YAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;QAC9B,CAAC;IACH,CAAC;IAEQ,oBAAoB;QAC3B,KAAK,CAAC,oBAAoB,EAAE,CAAC;QAC7B,uBAAA,IAAI,iEAAsB,MAA1B,IAAI,CAAwB,CAAC;IAC/B,CAAC;IAEQ,UAAU,CAAC,OAA6B;QAC/C,IAAI,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC;YACtC,uBAAA,IAAI,8DAAmB,MAAvB,IAAI,CAAqB,CAAC;QAC5B,CAAC;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YAC3B,uBAAA,IAAI,qCAAkB,MAAtB,IAAI,CAAoB,CAAC;QAC3B,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA;iBACE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,uBAAA,IAAI,4BAAS;;;;KAI5D,CAAC;IACJ,CAAC;;;;;;;;IAxCC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAChC,IAAI,IAAI,YAAY,QAAQ,IAAI,IAAI,YAAY,UAAU,EAAE,CAAC;QAC3D,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC;QACN,OAAO,QAAQ,CAAC;IAClB,CAAC;AACH,CAAC;;IAqCC,uBAAA,IAAI,kCAAe,EAAE,mBAAmB,CAAC,QAAQ,EAAE,uBAAA,IAAI,qCAAkB,CAAC,CAAC;AAC7E,CAAC;;IAGC,uBAAA,IAAI,iEAAsB,MAA1B,IAAI,CAAwB,CAAC;IAE7B,iDAAiD;IACjD,IAAI,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC;QAC3C,OAAO;IACT,CAAC;IAED,uBAAA,IAAI,0BAAc,CAAC,CAAC,IAAI,CAAC,kBAAkB,MAAA,CAAC;IAC5C,IAAI,uBAAA,IAAI,8BAAW,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC/C,MAAM,iBAAiB,GAAG,uBAAA,IAAI,yDAAU,CAAC,aAAa,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAChF,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,OAAO;QACT,CAAC;QACD,uBAAA,IAAI,8BAAkB,iBAAiB,MAAA,CAAC;IAC1C,CAAC;SAAM,CAAC;QACN,uBAAA,IAAI,8BAAkB,MAAM,MAAA,CAAC;IAC/B,CAAC;IAED,uBAAA,IAAI,kCAAe,CAAC,gBAAgB,CAAC,QAAQ,EAAE,uBAAA,IAAI,qCAAkB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1F,uBAAA,IAAI,qCAAkB,MAAtB,IAAI,CAAoB,CAAC;AAC3B,CAAC;AAxFe,kBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAGiB;IAAlD,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;4CAAgC;AAGnB;IAA9D,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;uDAA6B;AAGjC;IAAzD,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,iBAAiB,EAAE,CAAC;mDAAsB;AAGlD;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;yCAAe;AAbhC,WAAW;IADvB,aAAa,CAAC,gBAAgB,CAAC;GACnB,WAAW,CA6GvB","sourcesContent":["import { LitElement, html, isServer, type PropertyValues } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-back-to-top.css';\n\n\n/**\n * Back to top component is a fragment link that allows users to quickly navigate\n * to the top of a lengthy content page.\n *\n * @summary A shortcut to the top of the page content\n * @csspart trigger - back to top link anchor element\n * @slot - Text for the back to top link\n */\n@customElement('rh-back-to-top')\nexport class RhBackToTop extends LitElement {\n  static readonly styles = [styles];\n\n  /** Flag to always show back to top button, defaults to false. */\n  @property({ reflect: true, attribute: 'visible' }) visible?: 'always' | undefined;\n\n  /** Element selector to spy on for scrolling. Not passing a selector defaults to spying on window scroll events */\n  @property({ reflect: true, attribute: 'scrollable-selector' }) scrollableSelector?: string;\n\n  /** Distance from the top of the scrollable element to trigger the visibility of the back to top button */\n  @property({ type: Number, attribute: 'scroll-distance' }) scrollDistance = 400;\n\n  /** Page fragment link to target element, must include hash ex: #top */\n  @property({ reflect: true }) href?: string;\n\n  #scrollSpy = false;\n\n  #visible = false;\n\n  #scrollElement?: Element | Window;\n\n  get #rootNode(): Document | ShadowRoot {\n    const root = this.getRootNode();\n    if (root instanceof Document || root instanceof ShadowRoot) {\n      return root;\n    } else {\n      return document;\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    if (!isServer) {\n      this.#addScrollListener();\n    }\n\n    if (this.href && this.href.charAt(0) !== '#') {\n      this.href = `#${this.href}`;\n    }\n  }\n\n  override disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.#removeScrollListener();\n  }\n\n  override willUpdate(changed: PropertyValues<this>): void {\n    if (changed.has('scrollableSelector')) {\n      this.#addScrollListener();\n    }\n    if (changed.has('visible')) {\n      this.#toggleVisibility();\n    }\n  }\n\n  render() {\n    return html`\n      <a href=\"${ifDefined(this.href)}\" ?hidden=\"${!this.#visible}\" part=\"trigger\">\n        <slot>Back to top</slot>\n        <rh-icon set=\"ui\" icon=\"caret-up\"></rh-icon>\n      </a>\n    `;\n  }\n\n  #removeScrollListener() {\n    this.#scrollElement?.removeEventListener('scroll', this.#toggleVisibility);\n  }\n\n  #addScrollListener() {\n    this.#removeScrollListener();\n\n    // scrollable-selector attribute cannot be empty:\n    if (this.scrollableSelector?.trim() === '') {\n      return;\n    }\n\n    this.#scrollSpy = !!this.scrollableSelector;\n    if (this.#scrollSpy && this.scrollableSelector) {\n      const scrollableElement = this.#rootNode.querySelector(this.scrollableSelector);\n      if (!scrollableElement) {\n        return;\n      }\n      this.#scrollElement = scrollableElement;\n    } else {\n      this.#scrollElement = window;\n    }\n\n    this.#scrollElement.addEventListener('scroll', this.#toggleVisibility, { passive: true });\n    this.#toggleVisibility();\n  }\n\n  #toggleVisibility = () => {\n    if (this.visible && this.visible === 'always') {\n      this.#visible = true;\n      this.requestUpdate();\n      return;\n    }\n    const previousVisibility = this.#visible;\n    if (this.#scrollElement) {\n      const scrolled =\n          (this.#scrollElement instanceof Window) ?\n          this.#scrollElement.scrollY\n        : this.#scrollElement.scrollTop;\n      this.#visible = (scrolled > this.scrollDistance);\n      if (previousVisibility !== this.#visible) {\n        this.requestUpdate();\n      }\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-back-to-top': RhBackToTop;\n  }\n}\n"]}