{"version":3,"file":"rh-progress-step.js","sourceRoot":"","sources":["rh-progress-step.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IconNameFor, IconSetName } from '@rhds/icons';\n\nimport { html, LitElement } from 'lit';\n\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { consume } from '@lit/context';\n\nimport { compactContext, currentStepContext } from './context.js';\n\nimport { observes } from '@patternfly/pfe-core/decorators.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport styles from './rh-progress-step.css';\n\n/**\n * Available states for a progress step:\n * - `inactive` - The step is not active\n * - `active` - The step is currently active\n * - `complete` - The step has been completed\n * - `warn` - The step is in a warning state\n * - `fail` - The step has failed\n * - `custom` - The step uses a custom icon\n */\nexport type ProgressStepState = 'inactive' | 'active' | 'complete' | 'warn' | 'fail' | 'custom';\n\n/**\n * Map of state names to their corresponding icon names\n */\nconst ICONS = new Map(Object.entries({\n  active: 'resources-full',\n  complete: 'check-circle-fill',\n  warn: 'error-fill',\n  fail: 'ban-fill',\n} as const));\n\n/**\n * Fired when a step becomes active\n */\nexport class RhProgressStepChangeEvent extends Event {\n  constructor() {\n    super('change', { bubbles: true });\n  }\n}\n\n/**\n * A progress step represents a single step in a progress stepper.\n * Each step can have different states and may include an icon, label,\n * and description. Steps can also be linked to URLs.\n *\n * @summary Single step in a progress stepper\n *\n * @fires { RhProgressStepChangeEvent } fired when this step becomes active\n */\n@customElement('rh-progress-step')\n@themable\nexport class RhProgressStep extends LitElement {\n  static styles = [styles];\n\n  /**\n   * Sets the state of the progress step\n   * - `inactive` - The step is not active\n   * - `active` - The step is currently active\n   * - `complete` - The step has been completed\n   * - `warn` - The step is in a warning state\n   * - `fail` - The step has failed\n   * - `custom` - The step uses a custom icon\n   */\n  @property({ reflect: true }) state?: ProgressStepState;\n\n  /**\n   * Sets the description text for the progress step\n   * Overridden by the `description` slot.\n   */\n  @property({ reflect: true }) description?: string;\n\n  /**\n   * Custom icon for the step. Overridden by the `icon` slot.\n   * When the step is in the `warn` or `fail` state, it should not have a custom\n   * icon.\n   */\n  @property() icon?: IconNameFor<IconSetName>;\n\n  /** Icon set for the `icon` property - 'ui' by default */\n  @property({ attribute: 'icon-set' }) iconSet: IconSetName = 'ui';\n\n  /**\n   * Sets a URL to make the step clickable\n   */\n  @property({ reflect: true }) href?: string;\n\n  @consume({ context: compactContext, subscribe: true })\n  private compact?: boolean;\n\n  @consume({ context: currentStepContext, subscribe: true })\n  private currentStep: RhProgressStep | null = null;\n\n  #icon: IconNameFor<IconSetName> | undefined = this.icon;\n  #iconSet: IconSetName = this.iconSet;\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    this.role = 'listitem';\n  }\n\n  render() {\n    const compact = this.compact ?? false;\n    const ariaCurrent = this.currentStep === this ? 'step' : undefined;\n    const labelSlot = html`\n      <!-- A short title for the step, which also serves as the step's accessible name -->\n      <slot></slot>\n    `;\n    return html`\n      <div id=\"container\" class=\"${classMap({ compact })}\">\n        <!-- summary: custom icon for the step\n             description: |\n               Overrides the \\`icon\\` and \\`icon-set\\` attributes.\n               Prefer using the \\`icon\\` attribute and the (default) UI Icon set.\n               Avoid slotting content here if the step is in the \\`warn\\` or \\`fail\\` state,\n               Since those states should always show their prescribed icons. -->\n        <slot name=\"icon\">\n          <rh-icon icon=\"${ifDefined(this.#icon)}\" set=\"${ifDefined(this.#iconSet)}\"></rh-icon>\n        </slot>${this.href ? html`\n          <a id=\"label\"\n             href=\"${this.href}\"\n             aria-current=\"${ifDefined(ariaCurrent)}\">${labelSlot}</a>` : html`\n          <strong id=\"label\"\n                  aria-current=\"${ifDefined(ariaCurrent)}\">${labelSlot}</strong>`}\n        <!-- summary: Elaborative description for the step\n             description: |\n               Rich HTML content can be slotted here , to override the (plain text) \\`description\\` attribute.\n               Avoid slotting links, images, block-level content, etc.: descriptions should be prose only. -->\n        <slot name=\"description\" id=\"description\">${this.description}</slot>\n      </div>\n    `;\n  }\n\n  /**\n   * Computes the icon for the step:\n   * always use the prescribed warn or fail icons\n   * otherwise, use the custom user icon,\n   * or fall back to the default active/inactive icon\n   */\n  @observes('icon')\n  @observes('iconSet')\n  @observes('state')\n  protected computeIcon() {\n    const state = this.state?.toLowerCase() as ProgressStepState;\n    if (state === 'warn') {\n      this.#icon = 'error-fill';\n    } else if (state === 'fail') {\n      this.#icon = 'ban-fill';\n    } else if (this.icon) {\n      this.#icon = this.icon;\n      if (this.iconSet) {\n        this.#iconSet = this.iconSet;\n      } else {\n        this.#iconSet = 'ui';\n      }\n    } else if (ICONS.has(state)) {\n      this.#icon = ICONS.get(state);\n    } else {\n      this.#icon = undefined;\n    }\n  }\n\n  @observes('state')\n  protected stateChanged() {\n    this.dispatchEvent(new RhProgressStepChangeEvent());\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-progress-step': RhProgressStep;\n  }\n}\n"]}