{"version":3,"file":"rh-progress-stepper.js","sourceRoot":"","sources":["rh-progress-stepper.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, isServer, type TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { state } from 'lit/decorators/state.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { provide } from '@lit/context';\nimport { observes } from '@patternfly/pfe-core/decorators/observes.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport {\n  Breakpoint2xl,\n  BreakpointLg,\n  BreakpointMd,\n  BreakpointSm,\n  BreakpointXl,\n  BreakpointXs,\n} from '@rhds/tokens/media.js';\n\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport { compactContext, currentStepContext } from './context.js';\nimport { RhProgressStep, RhProgressStepChangeEvent } from './rh-progress-step.js';\n\nexport * from './rh-progress-step.js';\n\nimport styles from './rh-progress-stepper.css';\n\ntype ProgressStepsOrientation = 'horizontal' | 'vertical';\n\n/**\n * Breakpoint mappings for responsive behavior.\n * Used to determine when to switch to vertical orientation\n * based on container width rather than viewport width.\n */\nconst BREAKPOINTS = new Map(Object.entries({\n  '2xs': '320px',\n  'xs': BreakpointXs,\n  'sm': BreakpointSm,\n  'md': BreakpointMd,\n  'lg': BreakpointLg,\n  'xl': BreakpointXl,\n  '2xl': Breakpoint2xl,\n}));\n\n/**\n * A progress stepper conveys the steps necessary to complete a process or task, and the status of\n * each step. Steps have titles and descriptions; and each step can be in one of a number of possible states:\n * - inactive (yet to be performed)\n * - active (currently being performed)\n * - warn (succeeded, but with warnings)\n * - fail (failed to occur)\n * Or a custom state, set using the `icon` attribute.\n *\n * ## Usage guidelines\n * - Use 3-5 steps maximum to reduce cognitive load\n * - Designed to complement standard previous/next navigation. Avoid using as the only navigation.\n * - When process is completed, users cannot go back and must start over\n *\n * ## Accessibility\n * - Communicates list structure and step states to screen readers\n * - Supports keyboard navigation for linked step titles\n * - Maintains logical focus order (left to right, top to bottom)\n * - Provides aria-current for the active step\n *\n * @summary Communicate how many steps are required to complete a process\n *\n * @alias Progress stepper\n */\n@customElement('rh-progress-stepper')\n@themable\nexport class RhProgressStepper extends LitElement {\n  static readonly styles: CSSStyleSheet[] = [styles];\n\n  /**\n   * Makes the element `vertical` at various container query based breakpoints.\n   * Breakpoints available 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'\n   *\n   * Use when horizontal space becomes limited. The element automatically\n   * changes to vertical orientation at screen sizes of <768px.\n   */\n  @property({ reflect: true, attribute: 'vertical-at' })\n  verticalAt?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' = undefined;\n\n  /**\n   * Sets the orientation of the progress stepper.\n   * - `horizontal` - Steps are displayed in a horizontal row (default)\n   * - `vertical` - Steps are displayed in a vertical column\n   *\n   * ## Responsive behavior\n   * - >992px: Padding between steps is set to --rh-space-5xl\n   * - â‰¤992px: Padding reduces to --rh-space-2xl\n   * - <768px: Orientation automatically changes to vertical\n   *\n   * Use vertical orientation when horizontal space is limited or when\n   * you need to display more detailed step information.\n   */\n  @property({ reflect: true }) orientation: ProgressStepsOrientation = 'horizontal';\n\n  /**\n   * Makes element display as `compact`.\n   *\n   * ## Usage guidelines\n   * - Use when there is limited space and less visual prominence is needed\n   * - Maintain the compact size as designed - do not stretch spacing between steps\n   * - Switch to default size or different orientation instead of stretching compact\n   * - Always include step titles even in compact mode for accessibility\n   */\n  @provide({ context: compactContext })\n  @property({ reflect: true, type: Boolean }) compact = false;\n\n  /**\n   * Defines the current step, so it can be marked as such with ARIA,\n   * and so its label can be displayed in compact layouts.\n   *\n   * ## Accessibility\n   * This property ensures only one step is marked with aria-current=\"step\"\n   * as required by ARIA specification. Screen readers announce this step\n   * as the current location in the process.\n   */\n  @provide({ context: currentStepContext })\n  @state() private currentStep: RhProgressStep | null = null;\n\n  /**\n   * Set when ResizeObserver detects width is less than the breakpoint (default: `--rh-breakpoint-sm`)\n   * When true, the stepper switches to vertical orientation automatically.\n   */\n  @state() private mobile = true;\n\n  /**\n   * Set to match current step's `state`\n   */\n  @state() private currentState = '';\n\n  #maxWidth = 768;\n\n  /**\n   * Normalized string content of the current step\n   * Extracts text content from the current step's title and description\n   * for screen reader accessibility and visual display.\n   */\n  #contentString = '';\n\n  #resizeTimeoutId?: number;\n\n  /**\n   * ResizeObserver for responsive behavior.\n   * This callback is debounced with a simple timeout to prevent excessive updates.\n   *\n   * In the future, we should consider StyleObserver:\n   * @see https://www.bram.us/2025/02/24/solved-by-styleobserver-element-matchcontainer/\n   * @see https://github.com/LeaVerou/style-observer/\n   */\n  #ro = new ResizeObserver(entries => {\n    if (this.compact || this.orientation === 'vertical') {\n      return;\n    }\n    if (this.#resizeTimeoutId) {\n      clearTimeout(this.#resizeTimeoutId);\n    }\n    this.#resizeTimeoutId = window.setTimeout(() => {\n      const [{ contentBoxSize: [{ inlineSize } = {}] = [] } = {}] = entries;\n      if (inlineSize != null) {\n        this.mobile = inlineSize < this.#maxWidth;\n      }\n    }, 100);\n  });\n\n  /**\n   * Initializes responsive behavior on first update.\n   * Sets mobile state based on element width,\n   * ensuring the stepper displays correctly on initial load.\n   */\n  protected override firstUpdated(): void {\n    // ensure we update initially on client hydration\n    const isHydrated = isServer && !this.hasUpdated;\n    if (!isHydrated) {\n      this.mobile = this.offsetWidth < this.#maxWidth;\n    }\n  }\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n    // Set ARIA role=\"list\" to communicate list structure to screen reader\n    this.role = 'list';\n    if (!isServer) {\n      this.#ro?.observe(this);\n      this.#updateState();\n    }\n    this.addEventListener('change', this.#updateState);\n  }\n\n  render(): TemplateResult<1> {\n    const compact = this.compact ?? false;\n    const vertical = this.orientation === 'vertical' || this.mobile;\n    const currentState = this.currentState || '';\n\n    return html`\n      <div id=\"container\" class=\"${classMap({ compact, vertical, [currentState]: true })}\">\n        <!-- \"Current step\" label for screen readers and compact display -->\n        <!-- Visually hidden except in compact mode -->\n        <strong id=\"current-step\"\n                class=\"visually-hidden\"\n                ?hidden=\"${!compact}\">${this.#contentString}</strong>\n        <!-- Use this slot for \\`<rh-progress-step>\\` items\n             Each step should include title and optional description -->\n        <slot id=\"step-list\" @change=\"${this.#onChange}\"></slot>\n      </div>\n    `;\n  }\n\n  /**\n   * Handles change events from progress steps.\n   * Updates the current step state for accessibility and visual feedback.\n   *\n   * @param event - The change event from a progress step\n   */\n  #onChange(event: Event) {\n    if (event instanceof RhProgressStepChangeEvent) {\n      this.#updateState();\n    }\n  }\n\n  /**\n   * Updates the current step state and content\n   */\n  #updateState() {\n    // Identifies all steps with `[state=active]`, `fail` or `warn`\n    // `[state=complete]` is not a stateful step, since `complete` is always a past step\n    const statefulSteps =\n      this.querySelectorAll(/* css */`\n        rh-progress-step:is([state=\"active\"], [state=\"fail\"], [state=\"warn\"], [icon]),\n        rh-progress-step:has(> [slot=icon])\n      `);\n    // always, only take the last item in the list, in order to prevent having more\n    // than one aria-current step, which is not approved of in the aria spec\n    // see https://w3c.github.io/aria/#aria-current\n    const activeStep = Array.from(statefulSteps).at(-1);\n    this.currentStep = activeStep instanceof RhProgressStep ? activeStep : null;\n    if (this.currentStep) {\n      this.currentState = this.currentStep.state || '';\n      this.#contentString = '';\n      // Use childNodes instead of children to access both Element and Text nodes\n      // This ensures we capture all text content for accessibility\n      for (const node of this.currentStep.childNodes) {\n        if (node instanceof Element && !node.hasAttribute('slot')) {\n          this.#contentString += node.textContent?.trim();\n        } else if (node instanceof Text) {\n          this.#contentString += node.data.trim();\n        }\n      };\n    }\n  }\n\n  /**\n   * Handles changes to the verticalAt property.\n   * Updates the breakpoint threshold for responsive vertical orientation switching.\n   */\n  @observes('verticalAt')\n  protected verticalAtChanged() {\n    const breakpoint = BREAKPOINTS.get(this.verticalAt!);\n    if (breakpoint) {\n      const int = parseInt(breakpoint.replace('px', ''));\n      if (!Number.isNaN(breakpoint)) {\n        this.#maxWidth = int;\n      }\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-progress-stepper': RhProgressStepper;\n  }\n}\n"]}