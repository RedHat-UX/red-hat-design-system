{"version":3,"file":"rh-badge.js","sourceRoot":"","sources":["rh-badge.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,6CAA6C,CAAC;AAEvE,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAC;;;AAI1D;;;;;;;;;;;;;;GAcG;AAGI,IAAM,OAAO,GAAb,MAAM,OAAQ,SAAQ,UAAU;IAAhC;;QAGL;;;WAGG;QAC0B,UAAK,GAO9B,SAAS,CAAC;IAgDhB,CAAC;IAhCC,4DAA4D;IAEpD,YAAY;QAClB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;QACvC,QAAQ,KAAK,EAAE,CAAC;YACd,qDAAqD;YACrD,KAAK,UAAU;gBAAE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBAAC,MAAM;YAC/C,KAAK,WAAW;gBAAE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBAAC,MAAM;YAChD,KAAK,UAAU;gBAAE,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;gBAAC,MAAM;YAC9C,KAAK,MAAM;gBAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;gBAAC,MAAM;YACxC,8CAA8C;YAC9C,KAAK,QAAQ,CAAC;YACd,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,SAAS,CAAC;YACf,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS;gBACZ,OAAO;YACT;gBACE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QAC3B,CAAC;IACH,CAAC;IAEQ,MAAM;QACb,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;QAC1C,MAAM,OAAO,GAAG,CAAC,CAAC,SAAS,IAAI,MAAM,IAAI,IAAI,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC;QACtE,MAAM,eAAe,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,IAAI,IAAI,CAAC;QAC/E,OAAO,IAAI,CAAA;qBACM,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,eAAe;qBAC/C,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC;KAC3C,CAAC;IACJ,CAAC;;AA5De,cAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAML;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;sCAOd;AAQ6B;IAA1C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;uCAAiB;AAMhB;IAA1C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CAAoB;AAItD;IADP,QAAQ,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;2CAoBzC;AAnDU,OAAO;IAFnB,aAAa,CAAC,UAAU,CAAC;IACzB,QAAQ;GACI,OAAO,CA8DnB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { observes } from '@patternfly/pfe-core/decorators/observes.js';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport styles from './rh-badge.css';\n\n/**\n * A badge is used to annotate other information like a label or an object name.\n *\n *  - `neutral` - Indicates generic information or a message with no severity.\n *  - `danger` - Indicates a danger state, like an error that is blocking a user from completing a task.\n *  - `warning` - Indicates a warning state, like a non-blocking error that might need to be fixed.\n *  - `caution` - Indicates an action or notice which should immediately draw the attention\n *  - `info` - Indicates helpful information or a message with very little to no severity.\n *  - `success` - Indicates a success state, like if a process was completed without errors.\n *\n * @summary Annotates information like a label or object\n *\n * @alias badge\n *\n */\n@customElement('rh-badge')\n@themable\nexport class RhBadge extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Denotes the state-of-affairs this badge represents\n   * Note: 'moderate','important', and 'critical' will also work, but are deprecated\n   */\n  @property({ reflect: true }) state:\n    | 'danger'\n    | 'warning'\n    | 'caution'\n    | 'neutral'\n    | 'success'\n    | 'info' =\n      'neutral';\n\n  /**\n   * Sets a numeric value for a badge.\n   *\n   * You can pair it with `threshold` attribute to add a `+` sign\n   * if the number exceeds the threshold value.\n   */\n  @property({ reflect: true, type: Number }) number?: number;\n\n  /**\n   * Sets a threshold for the numeric value and adds `+` sign if\n   * the numeric value exceeds the threshold value.\n   */\n  @property({ reflect: true, type: Number }) threshold?: number;\n\n  /** Ensures that state is consistent, regardless of input */\n  @observes('state', { waitFor: 'updated' })\n  private stateChanged() {\n    const state = this.state.toLowerCase();\n    switch (state) {\n      // the first four are deprecated pre-DPO status names\n      case 'moderate': this.state = 'warning'; break;\n      case 'important': this.state = 'caution'; break;\n      case 'critical': this.state = 'danger'; break;\n      case 'note': this.state = 'info'; break;\n      // the following are DPO-approved status names\n      case 'danger':\n      case 'warning':\n      case 'caution':\n      case 'neutral':\n      case 'info':\n      case 'success':\n        return;\n      default:\n        this.state = 'neutral';\n    }\n  }\n\n  override render() {\n    const { state, threshold, number } = this;\n    const isLarge = !!threshold && number != null && (threshold < number);\n    const computedContent = isLarge ? `${threshold}+` : number?.toString() ?? null;\n    return html`\n      <span class=\"${classMap({ [state]: true })}\">${computedContent}</span>\n      <slot class=\"${classMap({ [state]: true })}\"></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-badge': RhBadge;\n  }\n}\n"]}