{"version":3,"file":"rh-badge.js","sourceRoot":"","sources":["rh-badge.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;;;AAItD;;;;;;;;;;;GAWG;AAEI,IAAM,OAAO,GAAb,MAAM,OAAQ,SAAQ,UAAU;IAwB5B,MAAM;QACb,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC;QAChD,MAAM,WAAW,GACb,CAAC,SAAS,IAAI,MAAM,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,QAAQ,EAAE,GAAG;YAC5E,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACtC,CAAC,CAAC,WAAW,IAAI,EAAE,CAAC;QACtB,OAAO,IAAI,CAAA;cACD,WAAW;KACpB,CAAC;IACJ,CAAC;;AAhCe,eAAO,GAAG,aAAa,CAAC;AAExB,cAAM,GAAG,CAAC,MAAM,CAAC,CAAC;AAKL;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;sCAAoE;AAQrD;IAA1C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;uCAAiB;AAMhB;IAA1C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;0CAAoB;AAtBnD,OAAO;IADnB,aAAa,CAAC,UAAU,CAAC;GACb,OAAO,CAkCnB;SAlCY,OAAO","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport styles from './rh-badge.css';\n\n/**\n * A badge is used to annotate other information like a label or an object name.\n *\n * - **info**: Indicates informative or low impact\n * - **success**: Indicates stability or completion\n * - **moderate**: Indicates caution\n * - **important**: Indicates an error\n * - **critical**: Indicates danger or something critical\n *\n * @summary Annotates information like a label or object\n *\n */\n@customElement('rh-badge')\nexport class RhBadge extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  /**\n   * Denotes the state-of-affairs this badge represents\n   */\n  @property({ reflect: true }) state?: 'info' | 'success' | 'moderate' | 'important' | 'critical';\n\n  /**\n   * Sets a numeric value for a badge.\n   *\n   * You can pair it with `threshold` attribute to add a `+` sign\n   * if the number exceeds the threshold value.\n   */\n  @property({ reflect: true, type: Number }) number?: number;\n\n  /**\n   * Sets a threshold for the numeric value and adds `+` sign if\n   * the numeric value exceeds the threshold value.\n   */\n  @property({ reflect: true, type: Number }) threshold?: number;\n\n  override render() {\n    const { threshold, number, textContent } = this;\n    const displayText =\n        (threshold && number && (threshold < number)) ? `${threshold.toString()}+`\n      : (number != null) ? number.toString()\n      : textContent ?? '';\n    return html`\n      <span>${displayText}</span>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-badge': RhBadge;\n  }\n}\n"]}