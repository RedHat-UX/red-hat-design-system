{"version":3,"file":"elements.js","sourceRoot":"","sources":["elements.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,aAAa,EAAqB,MAAM,sCAAsC,CAAC;AACxF,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAC;AAE1D,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;AAC3D,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;AAE7D,MAAM,WAAY,SAAQ,UAAU;IAApC;;QAcE,6BAAS,gBAAgB,CAAC,IAAI,CAAC,EAAC;IAKlC,CAAC;IAZC,IAAI,EAAE;QACJ,MAAM,KAAK,GAAG,uBAAA,IAAI,0BAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACpD,OAAO,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;YACxC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO;gBAC1C,CAAC,CAAC,SAAS,CAAC;IACnB,CAAC;IAID,MAAM;QACJ,OAAO,IAAI,CAAA,oBAAoB,CAAC;IAClC,CAAC;;;AAjBM,kBAAM,GAAG,CAAC,GAAG,CAAA;;;;IAIlB,CAAC,AAJU,CAIT;AAkBC,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,WAAW;CAAI,CAAA;AAAvC,eAAe;IAF3B,aAAa,CAAC,uBAAuB,CAAC;IACtC,QAAQ;GACI,eAAe,CAAwB;;AAK7C,IAAM,uBAAuB,GAA7B,MAAM,uBAAwB,SAAQ,WAAW;CAEvD,CAAA;AAD0D;IAAxD,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;6DAA6B;AAD1E,uBAAuB;IAHnC,aAAa,CAAC,gCAAgC,CAAC;IAC/C,QAAQ;IACR,aAAa;GACD,uBAAuB,CAEnC;;AAKM,IAAM,uBAAuB,GAA7B,MAAM,uBAAwB,SAAQ,WAAW;CAEvD,CAAA;AAD0D;IAAxD,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;6DAA6B;AAD1E,uBAAuB;IAHnC,aAAa,CAAC,gCAAgC,CAAC;IAC/C,aAAa;IACb,QAAQ;GACI,uBAAuB,CAEnC","sourcesContent":["import { css, html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport TinyColor from 'tinycolor2';\n\nimport { tokens } from '@rhds/tokens';\n\nimport { colorPalettes, type ColorPalette } from '@rhds/elements/lib/color-palettes.js';\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nconst dark = tokens.get('--rh-color-text-primary-on-dark');\nconst light = tokens.get('--rh-color-text-primary-on-light');\n\nclass RendersText extends LitElement {\n  static styles = [css`:host {\n    display: block;\n    padding: 24px;\n    color: var(--rh-color-text-primary);\n  }`];\n\n  get on() {\n    const color = this.#style.getPropertyValue('color');\n    return TinyColor.equals(color, dark) ? 'dark'\n         : TinyColor.equals(color, light) ? 'light'\n         : 'nothing';\n  }\n\n  #style = getComputedStyle(this);\n\n  render() {\n    return html`<span>Hello</span>`;\n  }\n}\n\n@customElement('test-context-consumer')\n@themable\nexport class ContextConsumer extends RendersText { }\n\n@customElement('test-context-consumer-provider')\n@themable\n@colorPalettes\nexport class ContextConsumerProvider extends RendersText {\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n}\n\n@customElement('test-context-provider-consumer')\n@colorPalettes\n@themable\nexport class ContextProviderConsumer extends RendersText {\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n}\n"]}