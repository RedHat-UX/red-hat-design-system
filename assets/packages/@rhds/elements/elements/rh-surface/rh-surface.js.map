{"version":3,"file":"rh-surface.js","sourceRoot":"","sources":["rh-surface.ts"],"names":[],"mappings":";;AAEA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,8CAA8C,CAAC;AACpF,OAAO,cAAc,MAAM,gDAAgD,CAAC;;;AAG5E,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD;;;;;;;;;;;;;;;;GAgBG;AAEI,IAAM,SAAS,GAAf,MAAM,SAAU,SAAQ,UAAU;IAAlC;;;IA4BP,CAAC;IAfC,MAAM;QACJ,MAAM,EAAE,YAAY,GAAG,UAAU,EAAE,GAAG,IAAI,CAAC;QAC3C,MAAM,EAAE,GAAG,YAAY,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,OAAO,CAAC;QAC3D,OAAO,IAAI,CAAA;+BACgB,QAAQ,CAAC;YAChB,EAAE,EAAE,IAAI;YACR,CAAC,EAAE,CAAC,EAAE,IAAI;YACV,CAAC,WAAW,YAAY,EAAE,CAAC,EAAE,IAAI;SAClC,CAAC;oCACY,uBAAA,IAAI,qDAAc,UAAU,CAAC;IAC/D,CAAC;;;;IAGC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;AACrC,CAAC;AA1Be,gBAAM,GAAG,CAAC,MAAM,EAAE,cAAc,CAAC,AAA3B,CAA4B;AAUO;IADxD,oBAAoB,EAAE;IACtB,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;+CAA6B;AAX1E,SAAS;IADrB,aAAa,CAAC,YAAY,CAAC;GACf,SAAS,CA4BrB","sourcesContent":["import type { ColorPalette } from '@rhds/elements/lib/context/color/provider.js';\n\nimport { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { colorContextProvider } from '@rhds/elements/lib/context/color/provider.js';\nimport consumerStyles from '@rhds/tokens/css/color-context-consumer.css.js';\n\nimport styles from './rh-surface.css';\nimport { classMap } from 'lit/directives/class-map.js';\n\n/**\n * Surfaces are content containers with a color palette which provide a theme\n * (i.e. a background color as well as accessible font colors) to their child\n * elements. Use surface only when other containers like card or accordion\n * are inappropriate.\n *\n * @summary Provides background color context for elements placed on top\n *\n * @slot - The `<rh-surface>` element has a single anonymous slot which accepts any content and does not provide additional layout styling\n *\n * @example A surface providing a theme to a spinner\n *          ```html\n *          <rh-surface color-palette=\"light\">\n *            <rh-spinner>Loading...</rh-spinner>\n *          </rh-surface>\n *          ```\n */\n@customElement('rh-surface')\nexport class RhSurface extends LitElement {\n  static readonly styles = [styles, consumerStyles];\n\n  /**\n   * Sets color palette, which affects the element's styles as well as\n   * descendants' color theme. The default surface color palette is 'lightest',\n   * Surface always overrides the parent's color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  render() {\n    const { colorPalette = 'lightest' } = this;\n    const on = colorPalette?.replace(/e(st|r)/, '') ?? 'light';\n    return html`<slot id=\"slot\"\n                      class=\"${classMap({\n                        on: true,\n                        [on]: true,\n                        [`palette-${colorPalette}`]: true,\n                      })}\"\n                      @slotchange=${this.#onSlotchange}></slot>`;\n  }\n\n  #onSlotchange() {\n    this.requestUpdate('colorPalette');\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-surface': RhSurface;\n  }\n}\n"]}