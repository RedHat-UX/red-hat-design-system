{"version":3,"file":"rh-tag.js","sourceRoot":"","sources":["rh-tag.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAIvD,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;AAE5F,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AAGrF,OAAO,mCAAmC,CAAC;;;AAG3C,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD;;;;;;;;;;;;;;;;;;GAkBG;AAEH,MAAM,OAAO,KAAM,SAAQ,UAAU;;;QAqCnC,2DAA2D;QAC3D,uBAAS,IAAI,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,EAAC;QA9BhD;;WAEG;QACH,eAA4D,IAAI,CAAC;QAEjE,gCAAgC;QAChC,eAA6D,QAAQ,CAAC;;IA0B7D,MAAM;QACb,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,GAAG,QAAQ,EAAE,KAAK,GAAG,MAAM,EAAE,EAAE,GAAG,OAAO,EAAE,GAAG,IAAI,CAAC;QAC9E,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,uBAAA,IAAI,oBAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzD,OAAO,IAAI,CAAA;;qBAEM,QAAQ,CAAC;YAChB,OAAO;YACP,OAAO,EAAE,IAAI,KAAK,SAAS;YAC3B,IAAI,EAAE,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM;YAC1C,EAAE,EAAE,IAAI;YACR,CAAC,EAAE,CAAC,EAAE,IAAI;YACV,CAAC,OAAO,CAAC,EAAE,IAAI;YACf,CAAC,KAAK,CAAC,EAAE,IAAI;SAAE,CAAC;;8BAEA,CAAC,IAAI,WAAW,SAAS,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO;iBAClE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;gCACF,CAAC,CAAC,CAAC,IAAI,CAAA;mBACpB,IAAI,CAAC,IAAI;;aAEf;;KAER,CAAC;IACJ,CAAC;;;;UAxDS,EAAE,OAAO,EAAE,IAAI,EAAE;aAKjB,EAAE,SAAS,EAAE,UAAU,EAAE;;;;;;AAVnB,YAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAkCF;IAA/B,oBAAoB,EAAE;iCAAyB","sourcesContent":["import { html, LitElement } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport type { IconNameFor, IconSetName } from '@rhds/icons';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-tag.css';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\n/**\n * A tag is a caption added to an element for better clarity and user convenience.\n * @summary  Highlights an element to add clarity or draw attention\n * @fires close - when a removable label's close button is clicked\n * @slot icon -  Contains the labels's icon, e.g. web-icon-alert-success.\n * @slot      -  Must contain the text for the label.\n * @csspart icon - container for the label icon\n * @cssprop  {<length>} [--rh-tag-margin-inline-end=4px]\n *           The margin at the end of the direction parallel to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-block-start=4px]\n *           The padding at the start of the direction perpendicular to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-block-end=4px]\n *           The padding at the end of the direction perpendicular to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-inline-start=8px]\n *           The padding at the start of the direction parallel to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-inline-end=8px]\n *           The padding at the end of the direction parallel to the flow of the text.\n *\n */\n@customElement('rh-tag')\nexport class RhTag extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * The icon to display in the label.\n   */\n  @property({ reflect: true }) icon?: IconNameFor<IconSetName>;\n\n  /**\n   * Icon set to display in the label\n   */\n  @property({ attribute: 'icon-set' }) iconSet: IconSetName = 'ui';\n\n  /** The variant of the label. */\n  @property() variant?: 'filled' | 'outline' | 'desaturated' = 'filled';\n\n  /** The variant of the label. */\n  @property() size?: 'compact';\n\n  /** optional href for linked tag. */\n  @property() href?: string;\n\n  /** The color of the label. */\n  @property() color?:\n    | 'red'\n    | 'red-orange'\n    | 'orange'\n    | 'yellow'\n    | 'green'\n    | 'cyan' // deprecated\n    | 'teal'\n    | 'blue'\n    | 'purple'\n    | 'gray';\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  /** Represents the state of the anonymous and icon slots */\n  #slots = new SlotController(this, 'icon', null);\n\n  override render() {\n    const { icon, size, variant = 'filled', color = 'gray', on = 'light' } = this;\n    const hasIcon = !!icon || this.#slots.hasSlotted('icon');\n    return html`\n      <span id=\"container\"\n            class=\"${classMap({\n              hasIcon,\n              compact: size === 'compact',\n              teal: color === 'cyan' || color === 'teal',\n              on: true,\n              [on]: true,\n              [variant]: true,\n              [color]: true })}\">\n        <slot name=\"icon\" part=\"icon\">\n          <rh-icon ?hidden=\"${!icon}\" icon=\"${ifDefined(icon)}\" set=\"${this.iconSet}\"></rh-icon>\n        </slot>${!this.href ? html`\n        <slot id=\"text\"></slot>` : html`\n        <a href=\"${this.href}\">\n          <slot id=\"text\"></slot>\n        </a>`}\n      </span>\n    `;\n  }\n}\n\nexport type TagColor = RhTag['color'];\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tag': RhTag;\n  }\n}\n"]}