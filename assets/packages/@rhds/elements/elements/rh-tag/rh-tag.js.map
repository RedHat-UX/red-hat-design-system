{"version":3,"file":"rh-tag.js","sourceRoot":"","sources":["rh-tag.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;AAE5F,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AAGrF,OAAO,mCAAmC,CAAC;;;AAG3C,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD;;;;;;;;;;;;;;;;;;;;GAoBG;AAEI,IAAM,KAAK,GAAX,MAAM,KAAM,SAAQ,UAAU;IAA9B;;QAQL;;WAEG;QACkC,YAAO,GAAgB,IAAI,CAAC;QAEjE,gCAAgC;QACpB,YAAO,GAA0B,QAAQ,CAAC;QAOtD,2DAA2D;QAC3D,uBAAS,IAAI,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,EAAC;IAmBlD,CAAC;IAjBU,MAAM;QACb,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QAC/C,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,uBAAA,IAAI,oBAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzD,OAAO,IAAI,CAAA;;qBAEM,QAAQ,CAAC;YAChB,OAAO;YACP,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;YACV,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO;YAC1B,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK;SAAE,CAAC;;8BAET,CAAC,IAAI,WAAW,SAAS,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO;;;;KAI9E,CAAC;IACJ,CAAC;;;AAvCe,YAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAKL;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mCAAiC;AAKxB;IAApC,QAAQ,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;sCAA6B;AAGrD;IAAX,QAAQ,EAAE;sCAA2C;AAG1C;IAAX,QAAQ,EAAE;oCAA0E;AAErD;IAA/B,oBAAoB,EAAE;iCAAyB;AAnBrC,KAAK;IADjB,aAAa,CAAC,QAAQ,CAAC;GACX,KAAK,CAyCjB","sourcesContent":["import { html, LitElement } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport type { IconNameFor, IconSetName } from '@rhds/icons';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-tag.css';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\n/**\n * A tag is a caption added to an element for better clarity and user convenience.\n * @summary  Highlights an element to add clarity or draw attention\n * @fires close - when a removable label's close button is clicked\n * @slot icon\n *       Contains the labels's icon, e.g. web-icon-alert-success.\n * @slot\n *       Must contain the text for the label.\n * @csspart icon - container for the label icon\n * @cssprop  {<length>} [--rh-tag-margin-inline-end=4px]\n *           The margin at the end of the direction parallel to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-block-start=4px]\n *           The padding at the start of the direction perpendicular to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-block-end=4px]\n *           The padding at the end of the direction perpendicular to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-inline-start=8px]\n *           The padding at the start of the direction parallel to the flow of the text.\n * @cssprop  {<length>} [--rh-tag-padding-inline-end=8px]\n *           The padding at the end of the direction parallel to the flow of the text.\n *\n */\n@customElement('rh-tag')\nexport class RhTag extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * The icon to display in the label.\n   */\n  @property({ reflect: true }) icon?: IconNameFor<IconSetName>;\n\n  /**\n   * Icon set to display in the label\n   */\n  @property({ attribute: 'icon-set' }) iconSet: IconSetName = 'ui';\n\n  /** The variant of the label. */\n  @property() variant?: 'filled' | 'outline' = 'filled';\n\n  /** The color of the label. */\n  @property() color?: 'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey';\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  /** Represents the state of the anonymous and icon slots */\n  #slots = new SlotController(this, 'icon', null);\n\n  override render() {\n    const { variant, color, icon, on = '' } = this;\n    const hasIcon = !!icon || this.#slots.hasSlotted('icon');\n    return html`\n      <span id=\"container\"\n            class=\"${classMap({\n              hasIcon,\n              [on]: !!on,\n              [variant ?? '']: !!variant,\n              [color ?? '']: !!color })}\">\n        <slot name=\"icon\" part=\"icon\">\n          <rh-icon ?hidden=\"${!icon}\" icon=\"${ifDefined(icon)}\" set=\"${this.iconSet}\"></rh-icon>\n        </slot>\n        <slot id=\"text\"></slot>\n      </span>\n    `;\n  }\n}\n\nexport type TagColor = RhTag['color'];\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tag': RhTag;\n  }\n}\n"]}