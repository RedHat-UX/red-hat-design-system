{"version":3,"file":"rh-tag.js","sourceRoot":"","sources":["rh-tag.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AAIrF,OAAO,EAAE,QAAQ,EAAE,MAAM,gCAAgC,CAAC;AAE1D,OAAO,mCAAmC,CAAC;;;AAI3C;;;;;;;;;GASG;AAGI,IAAM,KAAK,GAAX,MAAM,KAAM,SAAQ,UAAU;IAA9B;;QAQL;;WAEG;QACkC,YAAO,GAAgB,IAAI,CAAC;QAEjE,gCAAgC;QACpB,YAAO,GAA0C,QAAQ,CAAC;QAuBtE,2DAA2D;QAC3D,uBAAS,IAAI,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,EAAC;IA+BlD,CAAC;IA7BU,MAAM;QACb,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,GAAG,QAAQ,EAAE,KAAK,GAAG,MAAM,EAAE,GAAG,IAAI,CAAC;QAChE,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,uBAAA,IAAI,oBAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzD,OAAO,IAAI,CAAA;;qBAEM,QAAQ,CAAC;YAChB,OAAO;YACP,OAAO,EAAE,IAAI,KAAK,SAAS;YAC3B,IAAI,EAAE,KAAK,KAAM,MAAgB,CAAC,qBAAsB,IAAI,KAAK,KAAK,MAAM;YAC5E,CAAC,OAAO,CAAC,EAAE,IAAI;YACf,CAAC,KAAK,CAAC,EAAE,IAAI;SAAE,CAAC;;;;;;;;8BAQA,CAAC,IAAI,WAAW,SAAS,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,OAAO;iBAClE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAA;;gCAEF,CAAC,CAAC,CAAC,IAAI,CAAA;mBACpB,IAAI,CAAC,IAAI;;;aAGf;;KAER,CAAC;IACJ,CAAC;;;AAnEe,YAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAKL;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mCAAiC;AAKxB;IAApC,QAAQ,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;sCAA6B;AAGrD;IAAX,QAAQ,EAAE;sCAA2D;AAG1D;IAAX,QAAQ,EAAE;mCAAkB;AAGjB;IAAX,QAAQ,EAAE;mCAAe;AAMd;IAAX,QAAQ,EAAE;oCASA;AAnCA,KAAK;IAFjB,aAAa,CAAC,QAAQ,CAAC;IACvB,QAAQ;GACI,KAAK,CAqEjB","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport type { IconNameFor, IconSetName } from '@rhds/icons';\n\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './rh-tag.css';\n\n/**\n * A tag is a caption added to an element for better clarity and user convenience.\n *\n * @summary  Highlights an element to add clarity or draw attention\n *\n * @alias tag\n *\n * @fires close - when a removable label's close button is clicked\n *\n */\n@customElement('rh-tag')\n@themable\nexport class RhTag extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * The icon to display in the label.\n   */\n  @property({ reflect: true }) icon?: IconNameFor<IconSetName>;\n\n  /**\n   * Icon set to display in the label\n   */\n  @property({ attribute: 'icon-set' }) iconSet: IconSetName = 'ui';\n\n  /** The variant of the label. */\n  @property() variant?: 'filled' | 'outline' | 'desaturated' = 'filled';\n\n  /** The variant of the label. */\n  @property() size?: 'compact';\n\n  /** optional href for linked tag. */\n  @property() href?: string;\n\n  /**\n   * The color of the label.\n   * Note: 'cyan' will also work, but is deprecated\n   */\n  @property() color?:\n    | 'red'\n    | 'red-orange'\n    | 'orange'\n    | 'yellow'\n    | 'green'\n    | 'teal'\n    | 'blue'\n    | 'purple'\n    | 'gray';\n\n  /** Represents the state of the anonymous and icon slots */\n  #slots = new SlotController(this, 'icon', null);\n\n  override render() {\n    const { icon, size, variant = 'filled', color = 'gray' } = this;\n    const hasIcon = !!icon || this.#slots.hasSlotted('icon');\n    return html`\n      <span id=\"container\"\n            class=\"${classMap({\n              hasIcon,\n              compact: size === 'compact',\n              teal: color === ('cyan' as 'blue' /* cyan deprecated */) || color === 'teal',\n              [variant]: true,\n              [color]: true })}\">\n        <!--\n          slot:\n            summary: Contains the labels's icon, e.g. web-icon-alert-success.\n          part:\n            summary: container for the label icon\n        -->\n        <slot name=\"icon\" part=\"icon\">\n          <rh-icon ?hidden=\"${!icon}\" icon=\"${ifDefined(icon)}\" set=\"${this.iconSet}\"></rh-icon>\n        </slot>${!this.href ? html`\n        <!-- Must contain the text for the label. -->\n        <slot id=\"text\"></slot>` : html`\n        <a href=\"${this.href}\">\n          <!-- Must contain the text for the label. -->\n          <slot id=\"text\"></slot>\n        </a>`}\n      </span>\n    `;\n  }\n}\n\nexport type TagColor = RhTag['color'];\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tag': RhTag;\n  }\n}\n"]}