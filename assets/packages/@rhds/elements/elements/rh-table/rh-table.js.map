{"version":3,"file":"rh-table.js","sourceRoot":"","sources":["rh-table.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nimport { RequestSortEvent, RhSortButton } from './rh-sort-button.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\n\nimport styles from './rh-table.css';\n\n/**\n * A table is a container for displaying information. It allows a user to scan, examine, and compare large amounts of data.\n * @summary Organizes and displays information from a data set\n * @slot               - an HTML table\n * @slot    summary    - a brief description of the data\n * @cssprop {<color>} [--rh-table-row-background-hover-color=224 224 224 / 40%] - row hover background color\n * @cssprop {<color>} [--rh-table-column-background-hover-color=0 102 204 / 10%] - column hover background color\n * @cssprop [--rh-table-row-border=1px solid #c7c7c7] - row border\n */\n@customElement('rh-table')\nexport class RhTable extends LitElement {\n  static readonly styles = [styles];\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  private static getNodeContentForSort(\n    columnIndexToSort: number,\n    node: Element,\n  ) {\n    const content = node.querySelector(`\n      :is(th, td):nth-child(${columnIndexToSort + 1}),\n      tr > :is(th, td):nth-child(${columnIndexToSort + 1})\n    `.trim())?.textContent?.trim()?.toLowerCase() ?? '';\n    return { node, content };\n  }\n\n  private static sortByContent(\n    direction: 'asc' | 'desc',\n    a: { content: string },\n    b: { content: string },\n  ) {\n    if (direction === 'asc') {\n      return (a.content < b.content ? -1 : a.content > b.content ? 1 : 0);\n    } else {\n      return (b.content < a.content ? -1 : b.content > a.content ? 1 : 0);\n    }\n  }\n\n  get #table(): HTMLTableElement | undefined {\n    return this.querySelector('table') as HTMLTableElement | undefined;\n  }\n\n  get #cols(): NodeListOf<HTMLTableColElement> | undefined {\n    return this.querySelectorAll('col') as NodeListOf<HTMLTableColElement> | undefined;\n  }\n\n  get #rows(): NodeListOf<HTMLTableRowElement> | undefined {\n    return this.querySelectorAll('tbody > tr') as NodeListOf<HTMLTableRowElement> | undefined;\n  }\n\n  get #summary(): HTMLElement | undefined {\n    return this.querySelector('[slot=\"summary\"]') as HTMLElement | undefined;\n  }\n\n  #internalColorPalette?: string | null;\n\n  #logger = new Logger(this);\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.#init();\n  }\n\n  protected willUpdate(): void {\n    /**\n     * TEMPORARY: this fixes the need to access the parents color-palette in order to get the `lightest`\n     * value.  This fix will only update the component when switching between light and dark themes as\n     * thats when the consumer requests an update.  Switching between lighter -> light for example will\n     * not trigger the component to update at this time.\n     */\n    this.#internalColorPalette = this.closest('[color-palette]')?.getAttribute('color-palette');\n  }\n\n  render() {\n    const { on = '' } = this;\n    return html`\n      <div id=\"container\" \n        class=\"${classMap({ [on]: !!on, [`color-palette-${this.#internalColorPalette}`]: !!this.#internalColorPalette })}\" \n        part=\"container\">\n        <slot @pointerleave=\"${this.#onPointerleave}\"\n              @pointerover=\"${this.#onPointerover}\"\n              @request-sort=\"${this.#onRequestSort}\" \n              @slotchange=\"${this.#onSlotChange}\"></slot>\n        <slot id=\"summary\" name=\"summary\"></slot>\n      </div>\n    `;\n  }\n\n  #onPointerleave() {\n    if (!this.#cols) {\n      return;\n    }\n\n    this.#cols.forEach(col => col.classList.remove('active'));\n  }\n\n  #onPointerover(event: PointerEvent) {\n    if (!this.#cols) {\n      return;\n    }\n\n    let { target } = event;\n\n    if (!(target instanceof Element)) {\n      return;\n    }\n\n    if (!['td', 'th'].includes(target.tagName)) {\n      const ancestorCell = target.closest('td, th');\n      if (ancestorCell) {\n        target = ancestorCell;\n      } else {\n        return;\n      }\n    }\n\n    event.preventDefault();\n\n    this.#cols.forEach((col, index) => {\n      const { cellIndex } = target as HTMLTableCellElement;\n      col.classList.toggle('active', index === cellIndex);\n    });\n  }\n\n  #init() {\n    if (this.#table && this.#summary) {\n      this.#table.setAttribute('aria-describedby', 'summary');\n    }\n  }\n\n  #onSlotChange() {\n    this.#init();\n  }\n\n  #onRequestSort(event: Event) {\n    if (event instanceof RequestSortEvent) {\n      for (const button of this.querySelectorAll('rh-sort-button')) {\n        const header = button.closest('th');\n        if (button === event.target) {\n          header?.setAttribute('aria-sort', `${event.direction}ending`);\n        } else {\n          button.removeAttribute('sort-direction');\n          header?.removeAttribute('aria-sort');\n        }\n      }\n      if (!event.defaultPrevented && event.target instanceof RhSortButton) {\n        event.target.sortDirection = event.direction;\n        this.#performSort(event.target, event.direction);\n      }\n    }\n  }\n\n  // @todo: should we move the remaining methods into a controller to share with pf-table?\n  #performSort(button: RhSortButton, direction: 'asc' | 'desc') {\n    const header = button.closest('th');\n    const children = header?.parentElement?.children;\n    if (children) {\n      const columnIndexToSort = [...children].indexOf(header);\n\n      if (!this.#rows) {\n        this.#logger.warn('Could not perform sort: no rows found');\n        return;\n      }\n\n      Array\n          .from(this.#rows, node => RhTable.getNodeContentForSort(columnIndexToSort, node))\n          .sort((a, b) => RhTable.sortByContent(direction, a, b))\n          .forEach(({ node }, index) => {\n            if (!this.#rows) {\n              return;\n            }\n            const target = this.#rows[index];\n            if (this.#rows[index] !== node) {\n              const position: InsertPosition =\n                direction === 'desc' ? 'afterend' : 'beforebegin';\n              target.insertAdjacentElement(position, node);\n            }\n          });\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-table': RhTable;\n  }\n}\n"]}