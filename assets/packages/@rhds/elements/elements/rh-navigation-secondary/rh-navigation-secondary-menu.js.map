{"version":3,"file":"rh-navigation-secondary-menu.js","sourceRoot":"","sources":["rh-navigation-secondary-menu.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,WAAW,EAAE,MAAM,0CAA0C,CAAC;AAEvE,OAAO,EAAE,oBAAoB,EAAE,MAAM,mCAAmC,CAAC;AAEzE,OAAO,EAAE,oBAAoB,EAAqB,MAAM,qCAAqC,CAAC;;;AAK9F;;;;;;;;;;;;;;GAcG;AAEI,IAAM,yBAAyB,GAA/B,MAAM,yBAA0B,SAAQ,UAAU;IAAlD;;QAGL;;;WAGG;QAEsD,iBAAY,GAAiB,UAAU,CAAC;QAEjG;;;WAGG;QAC0B,WAAM,GAAiC,YAAY,CAAC;QAEjF,gDAAc,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAC;QAE7C;;WAEG;QAC0B,YAAO,GAAG,KAAK,CAAC;IA0B/C,CAAC;IAxBC,iBAAiB;QACf,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,IAAI,CAAC,EAAE,KAAP,IAAI,CAAC,EAAE,GAAK,WAAW,CAAC,8BAA8B,CAAC,EAAC;IAC1D,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QACzB,MAAM,OAAO,GAAG,uBAAA,IAAI,6CAAY,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAEnD,OAAO,IAAI,CAAA;mCACoB,QAAQ,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,KAAK,YAAY,CAAC,CAAC,CAAC,IAAI,CAAA;;;;;eAK1F,CAAC,CAAC,CAAC,IAAI,CAAA;;;;;eAKP;;KAEV,CAAC;IACJ,CAAC;;;AA7Ce,gCAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAOuB;IADxD,oBAAoB,EAAE;IACtB,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;+DAAyC;AAMpE;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;yDAAqD;AAOpD;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;0DAAiB;AArBlC,yBAAyB;IADrC,aAAa,CAAC,8BAA8B,CAAC;GACjC,yBAAyB,CA+CrC","sourcesContent":["import { html, LitElement } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\n\nimport { ScreenSizeController } from '../../lib/ScreenSizeController.js';\n\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport styles from './rh-navigation-secondary-menu.css';\n\n\n/**\n * Dropdown menu for secondary nav, available in full-width and fixed-with sizes\n * @summary 'Dropdown menu for secondary nav, available in full-width and fixed-with sizes'\n * @slot                  - Optional `<rh-navigation-secondary-menu-section>` elements or content following [design guidelines](../guidelines/#expandable-tray)\n * @csspart container     - container - `<div>` element, wrapper for menus\n * @csspart full-width    - container - `<div>` element, wrapper for full-width menus\n * @csspart fixed-width   - container - `<div>` element, wrapper for fixed-width menus\n * @csspart sections      - container - `<div>` element, wrapper for menu sections\n * @cssprop  [--rh-navigation-secondary-menu-section-grid=repeat(auto-fit, minmax(15.5rem, 1fr))]\n *          grid-template-columns for menu sections\n * @cssprop  {<length>} [--rh-navigation-secondary-menu-section-grid-gap=32px]\n *           grid-gap for menu sections\n * @cssprop  {<length>} [--rh-navigation-secondary-menu-content-max-width=1136px]\n *           max-width for menu content\n */\n@customElement('rh-navigation-secondary-menu')\nexport class RhNavigationSecondaryMenu extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Color palette (default: lightest)\n   * Secondary nav menus are always represented on the lightest color palette.\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette: ColorPalette = 'lightest';\n\n  /**\n   * Layout (default: full-width)\n   * Secondary nav menus by default are always full-width, but can be set to fixed-width for special cases.\n   */\n  @property({ reflect: true }) layout: 'fixed-width' | 'full-width' = 'full-width';\n\n  #screenSize = new ScreenSizeController(this);\n\n  /**\n   * `visible` toggles on click (default: false)\n   */\n  @property({ type: Boolean }) visible = false;\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.id ||= getRandomId('rh-navigation-secondary-menu');\n  }\n\n  render() {\n    const { visible } = this;\n    const compact = this.#screenSize.matches.has('md');\n\n    return html`\n      <div id=\"container\" class=\"${classMap({ compact, visible })}\">${this.layout === 'full-width' ? html`\n        <div id=\"full-width\" part=\"full-width\">\n          <div id=\"sections\" part=\"sections\">\n            <slot></slot>\n          </div>\n        </div>` : html`\n        <div id=\"fixed-width\" part=\"fixed-width\">\n          <div id=\"sections\" part=\"sections\">\n            <slot></slot>\n          </div>\n        </div>`}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-navigation-secondary-menu': RhNavigationSecondaryMenu;\n  }\n}\n"]}