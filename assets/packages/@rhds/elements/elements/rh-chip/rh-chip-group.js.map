{"version":3,"file":"rh-chip-group.js","sourceRoot":"","sources":["rh-chip-group.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AACvC,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAEhD,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;;;AAIvD;;;;;;;;;GASG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,UAAU;IAApC;;;IA+DP,CAAC;IA9CC,YAAY;QACV,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC3C,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;YACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACnB,CAAC;IACH,CAAC;IAED,MAAM;QACJ,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,YAAY,CAAC;QACzE,OAAO,IAAI,CAAA;;;0CAG2B,KAAK;;;yDAGU,uBAAA,IAAI,4DAAiB;;;;KAIzE,CAAC;IACJ,CAAC;;;;IAGC,MAAM,KAAK,GAAG,uBAAA,IAAI,4DAAiB,MAArB,IAAI,CAAmB,CAAC;IACtC,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAE1E,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IACjD,CAAC,CAAC,CAAC;AACL,CAAC;;IAOC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACtB,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAC7D,OAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAqB,EAAE,CAC5D,OAAO,YAAY,MAAM,CAC1B,CAAC;AACJ,CAAC;AA7De,kBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAOlC;IAFC,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,OAAO,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC;yCAC7B;AAKiC;IAA5C,QAAQ,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC;oDAA0B;AAEnC;IAAlC,KAAK,CAAC,kBAAkB,CAAC;gDAAuC;AAftD,WAAW;IADvB,aAAa,CAAC,eAAe,CAAC;GAClB,WAAW,CA+DvB","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { provide } from '@lit/context';\nimport { rhChipGroupSizeCtx } from './context.js';\nimport { query } from 'lit/decorators/query.js';\n\nimport { RhChip, ChipChangeEvent } from './rh-chip.js';\n\nimport styles from './rh-chip-group.css';\n\n/**\n * Chip Group\n * @slot - Place individual `rh-chips` inside `rh-chip-group`\n * @slot accessible-label\n *       An accessible label for the chip group.\n *       Content for this slot is put into the `<legend>` element.\n *       Also available as an attribute.\n * @slot clear-all\n *       Customized text for the \"Clear all\" button\n */\n@customElement('rh-chip-group')\nexport class RhChipGroup extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Decreases the font-size of the chip's label\n   */\n  @property({ reflect: true })\n  @provide({ context: rhChipGroupSizeCtx })\n  size?: 'sm';\n\n  /**\n   * The accessible label for the form control / `rh-chip-group`\n   */\n  @property({ attribute: 'accessible-label' }) accessibleLabel?: string;\n\n  @query('slot:not([name])') private defaultSlot!: HTMLSlotElement;\n\n  firstUpdated(): void {\n    if (this.size === 'sm' && !this.hasUpdated) {\n      this.size = undefined;\n      this.size = 'sm';\n    }\n  }\n\n  render() {\n    const label = this.accessibleLabel ? this.accessibleLabel : 'Filter by:';\n    return html`\n      <fieldset>\n        <legend part=\"legend\">\n          <slot name=\"accessible-label\">${label}</slot>\n        </legend>\n        <slot></slot>\n        <button class=\"btn-link\" type=\"button\" @click=\"${this.#uncheckAllChips}\">\n          <slot name=\"clear-all\">Clear all</slot>\n        </button>\n      </fieldset>\n    `;\n  }\n\n  #uncheckAllChips() {\n    const chips = this.#getChipElements();\n    const checkedChips = chips.filter(chip => chip.checked && !chip.disabled);\n\n    checkedChips.forEach(chip => {\n      chip.checked = false;\n      chip.dispatchEvent(new ChipChangeEvent(false));\n    });\n  }\n\n  /**\n   * Get rh-chip elements that are direct children of this rh-chip-group\n   * @returns {RhChip[]} Array of chip elements\n   */\n  #getChipElements(): RhChip[] {\n    if (!this.defaultSlot) {\n      return [];\n    }\n\n    const assignedElements = this.defaultSlot.assignedElements();\n    return assignedElements.filter((element): element is RhChip =>\n      element instanceof RhChip\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-chip-group': RhChipGroup;\n  }\n}\n"]}