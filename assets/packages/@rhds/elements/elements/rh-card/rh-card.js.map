{"version":3,"file":"rh-card.js","sourceRoot":"","sources":["rh-card.ts"],"names":[],"mappings":"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","sourcesContent":["import { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { html, LitElement } from 'lit';\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport styles from './rh-card.css';\n\n/**\n * Cards are flexible surfaces used to group information in a small layout. They give small previews of information or provide secondary content in relation to the content it's near. Several cards can be used together to group related information.\n * @summary     Arranges content and interactive elements in a layout\n * @slot        header -\n *              If this slot is used, we expect a heading level tag (h1, h2, h3, h4, h5, h6).\n *              An icon, svg, or use of the icon component are also valid in this region.\n * @slot        image -\n *              Use this slot for the promo variant of the card. Images & CTA's are most often slotted here.\n * @slot        - Any content that is not designated for the header or footer slot, will go to this slot.\n * @slot        footer -\n *              Use this slot for anything that you want to be stuck to the base of the card.\n * @csspart     container\n *              The container for the card. Contains the image, header, body, and footer.\n * @csspart     header\n *              The header for the card. Contains the header slot.\n * @csspart     image\n *              The image for the promo variant for the card. Contains the image slot.\n * @csspart     body\n *              The body for the card. Contains the default slot.\n * @csspart     footer\n *              The footer for the card. Contains the footer slot.\n * @cssprop     [--rh-card-border-color=var(--rh-border-color-subtle-on-light)]\n *              Computed from the colour context. Intended to be read for\n *              theming purposes, rather than set in page css.\n * @cssprop     [--rh-card-heading-font-family=var(--rh-font-family-heading)]\n *              The font family for headings in the header and body\n * @cssprop     [--rh-card-heading-font-size=var(--rh-font-size-heading-sm)]\n *              The font size for headings in the header and body\n * @cssprop     [--rh-card-heading-font-weight=var(--rh-font-weight-body-text-medium)]\n *              The font weight for headings in the header and body\n */\n@customElement('rh-card')\nexport class RhCard extends LitElement {\n  static styles = [styles];\n\n  /**\n   * Sets color palette, which affects the element's styles as well as descendants' color theme.\n   * Overrides parent color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   *\n   * Card always resets its context to `base`, unless explicitly provided with a `color-palette`.\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  /**\n   * Change the style of the card to be a \"Promo\"\n   */\n  @property({ reflect: true }) variant?: 'promo';\n\n  /**\n   * Change a promo with an image + body + footer to use the `full-width` style\n   */\n  @property({ reflect: true, attribute: 'full-width', type: Boolean }) fullWidth? = false;\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  #slots = new SlotController(this, 'header', 'image', null, 'footer');\n\n  #isPromo = this.variant === 'promo';\n  #isStandardPromo = false;\n\n  willUpdate() {\n    this.#isPromo = this.variant === 'promo';\n    this.#isStandardPromo =\n         this.#isPromo\n      && this.#slots.hasSlotted(null)\n      && this.#slots.isEmpty('image')\n      && this.#slots.isEmpty('header');\n  }\n\n  get #computedPalette() {\n    if (this.#isStandardPromo) {\n      return `${this.colorPalette}er`.replace(/(er|est){1,2}/, 'er') as 'lighter' | 'darker';\n    } else if (this.#isPromo) {\n      return `${this.colorPalette}est`.replace(/(er|est){1,2}/, 'est') as 'lightest' | 'darkest';\n    } else {\n      switch (this.colorPalette) {\n        case 'lightest':\n        case 'lighter':\n        case 'darkest':\n          return this.colorPalette;\n        case 'light':\n          return 'lighter';\n        case 'darker':\n        case 'dark':\n          return 'darkest';\n      }\n    }\n  }\n\n  get #computedContext() {\n    return this.colorPalette ?\n      this.colorPalette?.includes('light') ? 'light' : 'dark'\n      : undefined;\n  }\n\n  override render() {\n    const promo = this.variant === 'promo';\n    const standard = this.#isStandardPromo;\n    const computedPalette = this.#computedPalette;\n    const computedContext = this.#computedContext;\n    const on = computedContext ?? this.on ?? 'light';\n    const { variant = '' } = this;\n    const hasHeader = this.#slots.hasSlotted('header');\n    const hasFooter = this.#slots.hasSlotted('footer');\n    const hasImage = this.#slots.hasSlotted('image');\n    const hasBody = this.#slots.hasSlotted(null);\n    const header = html`\n      <div id=\"header\"\n           part=\"header\"\n           class=\"${classMap({ empty: !hasHeader })}\">\n        <slot name=\"header\"></slot>\n      </div>`;\n    const footer = html`\n      <div id=\"footer\"\n           part=\"footer\"\n           class=\"${classMap({ empty: !hasFooter })}\">\n        <slot name=\"footer\"></slot>\n      </div>`;\n    return html`\n     <div id=\"container\"\n          part=\"container\"\n          class=\"${classMap({\n            standard,\n            'on': true,\n            [on]: true,\n            [variant]: !!variant,\n            [`palette-${computedPalette}`]: !!computedPalette,\n            'palette': !!this.colorPalette,\n            'has-body': hasBody,\n            'has-header': hasHeader,\n            'has-footer': hasFooter,\n            'has-image': hasImage,\n          })}\">${promo ? '' : header}\n        <div id=\"image\"\n             part=\"image\"\n             class=\"${classMap({ empty: !hasImage })}\">\n          <slot name=\"image\"></slot>\n        </div>\n        <div id=\"body\"\n             part=\"body\"\n             class=\"${classMap({ empty: !hasBody })}\">\n          ${!promo ? '' : header}\n          <slot></slot>\n          ${!promo ? '' : footer}\n        </div>\n        ${promo ? '' : footer}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-card': RhCard;\n  }\n}\n"]}