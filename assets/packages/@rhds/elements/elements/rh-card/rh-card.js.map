{"version":3,"file":"rh-card.js","sourceRoot":"","sources":["rh-card.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AACrF,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,oBAAoB,EAAmB,MAAM,qCAAqC,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;;;AAG3E;;;;;;;;;;;;;;;;;;;;GAoBG;AAEI,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,UAAU;IAA/B;;QAsBL,wBAAS,IAAI,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAC;IA0B9D,CAAC;IAxBU,MAAM;QACb,MAAM,EAAE,EAAE,GAAG,EAAE,EAAE,YAAY,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;QAC5C,OAAO,IAAI,CAAA;;;mBAGI,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC;;;sBAGrD,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,uBAAA,IAAI,qBAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;;;;;sBAKtD,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,CAAC;;;;;sBAKxD,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,uBAAA,IAAI,qBAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;;;;KAIvE,CAAC;IACJ,CAAC;;;AA9Ce,cAAO,GAAG,aAAa,AAAhB,CAAiB;AAEjC,aAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAKO;IAA/B,oBAAoB,EAAE;kCAAyB;AAY9C;IAFD,oBAAoB,EAAE;IACtB,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC;4CACJ;AApBzC,MAAM;IADlB,aAAa,CAAC,SAAS,CAAC;GACZ,MAAM,CAgDlB","sourcesContent":["import { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { html, LitElement } from 'lit';\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider } from '../../lib/context/color/provider.js';\n\nimport styles from './rh-card.css';\n/**\n * Cards are flexible surfaces used to group information in a small layout. They give small previews of information or provide secondary content in relation to the content it's near. Several cards can be used together to group related information.\n * @summary     Arranges content and interactive elements in a layout\n * @slot        header\n *              If this slot is used, we expect a heading level tag (h1, h2, h3, h4, h5, h6).\n *              An icon, svg, or use of the icon component are also valid in this region.\n * @slot        Any content that is not designated for the header or footer slot, will go to this slot.\n * @slot        footer\n *              Use this slot for anything that you want to be stuck to the base of the card.\n * @csspart     container\n *              The container for the card. Contains the header, body, and footer.\n * @csspart     header\n *              The header for the card. Contains the header slot.\n * @csspart     body\n *              The body for the card. Contains the default slot.\n * @csspart     footer\n *              The footer for the card. Contains the footer slot.\n * @cssprop     {<length>} --rh-card-header-font-size\n *              Font size for header on card\n *              {@default `1.5rem`}\n */\n@customElement('rh-card')\nexport class RhCard extends LitElement {\n  static readonly version = '{{version}}';\n\n  static styles = [styles];\n\n  /**\n   * Sets color theme based on parent context\n   */\n  @colorContextConsumer() private on?: ColorTheme;\n\n  /**\n   * Sets color palette, which affects the element's styles as well as descendants' color theme.\n   * Overrides parent color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   *\n   * Card always resets its context to `base`, unless explicitly provided with a `color-palette`.\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' })\n    colorPalette?: 'darkest' | 'lightest' | 'lighter';\n\n  #slots = new SlotController(this, 'header', null, 'footer');\n\n  override render() {\n    const { on = '', colorPalette = '' } = this;\n    return html`\n     <div id=\"container\"\n          part=\"container\"\n          class=\"${classMap({ [on]: !!on, [colorPalette]: !!colorPalette })}\">\n        <div id=\"header\"\n             part=\"header\"\n             class=\"${classMap({ empty: !this.#slots.hasSlotted('header') })}\">\n          <slot name=\"header\"></slot>\n        </div>\n        <div id=\"body\"\n             part=\"body\"\n             class=\"${classMap({ empty: !this.querySelector(':not([slot])') })}\">\n          <slot></slot>\n        </div>\n        <div id=\"footer\"\n             part=\"footer\"\n             class=\"${classMap({ empty: !this.#slots.hasSlotted('footer') })}\">\n          <slot name=\"footer\"></slot>\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-card': RhCard;\n  }\n}\n"]}