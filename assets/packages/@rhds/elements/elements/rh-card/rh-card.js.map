{"version":3,"file":"rh-card.js","sourceRoot":"","sources":["rh-card.ts"],"names":[],"mappings":"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","sourcesContent":["import { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { html, LitElement } from 'lit';\n\nimport { colorPalettes, type ColorPalette } from '@rhds/elements/lib/color-palettes.js';\nimport { themable } from '@rhds/elements/lib/themable.js';\n\nimport styles from './rh-card.css';\n\nconst PALETTE_RE = /(er|est)+/g;\n\n/**\n * Cards are flexible surfaces used to group information in a small layout. They give small previews of information or provide secondary content in relation to the content it's near. Several cards can be used together to group related information.\n *\n * @summary     Arranges content and interactive elements in a layout\n *\n * @alias card\n *\n */\n@customElement('rh-card')\n@colorPalettes('lightest', 'lighter', 'darker', 'darkest')\n@themable\nexport class RhCard extends LitElement {\n  static styles = [styles];\n\n  /**\n   * Sets color palette, which affects the element's styles as well as descendants' color theme.\n   * Overrides parent color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   */\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  /**\n   * Change the style of the card to be a \"Promo\"\n   */\n  @property({ reflect: true }) variant?: 'promo';\n\n  /**\n   * Change a promo with an image + body + footer to use the `full-width` style\n   */\n  @property({ reflect: true, attribute: 'full-width', type: Boolean }) fullWidth? = false;\n\n  #slots = new SlotController(this, 'header', 'image', null, 'footer');\n\n  #isPromo = this.variant === 'promo';\n  #isStandardPromo = false;\n\n  willUpdate() {\n    this.#isPromo = this.variant === 'promo';\n    this.#isStandardPromo =\n         this.#isPromo\n      && this.#slots.hasSlotted(null)\n      && this.#slots.isEmpty('image')\n      && this.#slots.isEmpty('header');\n  }\n\n  get #computedPalette() {\n    if (this.#isStandardPromo) {\n      return `${`${this.colorPalette ?? 'lightest'}`.replace(PALETTE_RE, '')}er` as 'lighter' | 'darker';\n    } else if (this.#isPromo) {\n      return `${`${this.colorPalette ?? 'lightest'}`.replace(PALETTE_RE, '')}est` as 'lightest' | 'darkest';\n    } else {\n      switch (this.colorPalette) {\n        case 'lightest':\n        case 'lighter':\n        case 'darkest':\n          return this.colorPalette;\n        case 'light':\n          return 'lighter';\n        case 'darker':\n        case 'dark':\n          return 'darkest';\n      }\n    }\n  }\n\n\n  override render() {\n    const promo = this.variant === 'promo';\n    const standard = this.#isStandardPromo;\n    const computedPalette = this.#computedPalette;\n    const { variant = '' } = this;\n    const hasHeader = this.#slots.hasSlotted('header');\n    const hasFooter = this.#slots.hasSlotted('footer');\n    const hasImage = this.#slots.hasSlotted('image');\n    const hasBody = this.#slots.hasSlotted(null);\n    const header = html`\n      <!-- The header for the card. Contains the header slot. -->\n      <div id=\"header\"\n           part=\"header\"\n           class=\"${classMap({ empty: !hasHeader })}\">\n        <!--\n          If this slot is used, we expect a heading level tag (h1, h2, h3, h4, h5, h6).\n          An icon, svg, or use of the icon component are also valid in this region.\n        -->\n        <slot name=\"header\"></slot>\n      </div>`;\n    const footer = html`\n      <!-- The footer for the card. Contains the footer slot. -->\n      <div id=\"footer\"\n           part=\"footer\"\n           class=\"${classMap({ empty: !hasFooter })}\">\n        <!-- Use this slot for anything that you want to be stuck to the base of the card. -->\n        <slot name=\"footer\"></slot>\n      </div>`;\n    return html`\n     <!-- The container for the card. Contains the image, header, body, and footer. -->\n     <div id=\"container\"\n          part=\"container\"\n          class=\"${classMap({\n            standard,\n            body: hasBody,\n            header: hasHeader,\n            footer: hasFooter,\n            image: hasImage,\n            [variant]: !!variant,\n            [computedPalette ?? '']: !!computedPalette,\n          })}\">${promo ? '' : header}\n        <!-- The image for the promo variant for the card. Contains the image slot. -->\n        <div id=\"image\"\n             part=\"image\"\n             class=\"${classMap({ empty: !hasImage })}\">\n          <!-- Use this slot for the promo variant of the card. Images & CTA's are most often slotted here. -->\n          <slot name=\"image\"></slot>\n        </div>\n        <!-- The body for the card. Contains the default slot. -->\n        <div id=\"body\"\n             part=\"body\"\n             class=\"${classMap({ empty: !hasBody })}\">\n          ${!promo ? '' : header}\n          <!-- Any content that is not designated for the header or footer slot, will go to this slot. -->\n          <slot></slot>\n          ${!promo ? '' : footer}\n        </div>\n        ${promo ? '' : footer}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-card': RhCard;\n  }\n}\n"]}