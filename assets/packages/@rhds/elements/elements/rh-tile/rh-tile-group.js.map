{"version":3,"file":"rh-tile-group.js","sourceRoot":"","sources":["rh-tile-group.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, type PropertyValues } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\nimport { InternalsController } from '@patternfly/pfe-core/controllers/internals-controller.js';\nimport { RovingTabindexController } from '@patternfly/pfe-core/controllers/roving-tabindex-controller.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport { RhTile, TileSelectEvent } from './rh-tile.js';\n\nimport styles from './rh-tile-group.css';\n\n/**\n * A group of `<rh-tile>` elements which handles radio selection.\n * @slot - Put one or more `rh-tile` elements in this slot\n */\n@customElement('rh-tile-group')\nexport class RhTileGroup extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * Whether tile group interaction is disabled\n   */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /**\n   * If tile is checkable, whether only one tile can be checked\n   */\n  @property({ type: Boolean, reflect: true }) radio = false;\n\n  /**\n   * Sets color palette, which affects the element's styles as well as descendants' color theme.\n   * Overrides parent color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   *\n   * Tile group always resets its context to `base`, unless explicitly provided with a `color-palette`.\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  /**\n   * Sets color theme based on parent context\n   */\n  @colorContextConsumer() private on?: ColorTheme;\n\n  #tiles: RhTile[] = [];\n\n  #tabindex = RovingTabindexController.of(this, {\n    getItems: () => this.#tiles,\n  });\n\n  #internals = InternalsController.of(this);\n\n  /**\n   * All slotted tiles\n   */\n  get tiles() {\n    return this.#tiles;\n  }\n\n  /**\n   * All selected tiles\n   */\n  get selected() {\n    const selected = this.#tiles?.filter(tile=> tile.checked);\n    const [first] = selected;\n    return this.radio ? first : selected;\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('slotchange', this.#onSlotchange);\n    this.addEventListener('select', this.#onSelect);\n  }\n\n  override firstUpdated(): void {\n    this.updateItems();\n  }\n\n  override willUpdate(changed: PropertyValues<this>) {\n    this.#internals.ariaDisabled = String(!!this.disabled);\n    this.#internals.role = this.radio ? 'radiogroup' : null;\n    let selected: RhTile | undefined;\n    for (const tile of this.#tiles) {\n      if (changed.has('radio')) {\n        // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n        tile.radioGroup = this.radio;\n        if (this.radio && !selected && tile.checked) {\n          selected = tile;\n        }\n      }\n      if (changed.has('disabled')) {\n        // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n        tile.disabledGroup = this.disabled;\n      }\n    }\n    if (changed.has('radio')) {\n      this.selectItem(selected);\n    }\n  }\n\n  render() {\n    const { on = '', radio } = this;\n    return html`\n      <slot class=\"${classMap({ [on]: !!on, radio })}\"></slot>\n    `;\n  }\n\n  #selectTile(tileToSelect: RhTile, force?: boolean) {\n    if (this.radio) {\n      for (const tile of this.#tiles) {\n        tile.checked = tile === tileToSelect;\n      }\n    } else {\n      tileToSelect.checked = force ?? !tileToSelect.checked;\n    }\n  }\n\n  #onSelect(event: Event) {\n    if (event instanceof TileSelectEvent) {\n      if (this.disabled) {\n        event.preventDefault();\n        return false;\n      } else {\n        this.#selectTile(event.target, event.force);\n      }\n    }\n  }\n\n  /**\n   * handles slot change by updating slotted tiles\n   */\n  #onSlotchange() {\n    this.updateItems();\n  }\n\n  /** Sets focus on active tile */\n  focus() {\n    this.#tabindex.items[this.#tabindex.atFocusedItemIndex]?.focus();\n  }\n\n  /**\n   * Programatically select a tile\n   * @param tile tile to select\n   */\n  selectItem(tile?: RhTile) {\n    if (tile) {\n      this.#selectTile(tile);\n    }\n  }\n\n  /**\n   * Programatically toggle a tile\n   * @param tile tile to toggle\n   */\n  toggleItem(tile?: RhTile) {\n    if (tile?.checked) {\n      tile.checked = false;\n    } else {\n      this.selectItem(tile);\n    }\n  }\n\n  /**\n   * Updates slotted tiles to set properties and keyboard navigation\n   */\n  updateItems() {\n    this.#tiles = [...this.querySelectorAll('rh-tile')];\n    this.#tiles.forEach(tile => {\n      tile.checkable = true;\n      // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n      tile.radioGroup = this.radio;\n      // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n      tile.disabledGroup = this.disabled;\n      tile.id ||= getRandomId('rh-tile');\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tile-group': RhTileGroup;\n  }\n}\n"]}