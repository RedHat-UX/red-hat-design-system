{"version":3,"file":"rh-tile-group.js","sourceRoot":"","sources":["rh-tile-group.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, type PropertyValues } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { getRandomId } from '@patternfly/pfe-core/functions/random.js';\nimport { InternalsController } from '@patternfly/pfe-core/controllers/internals-controller.js';\nimport { RovingTabindexController } from '@patternfly/pfe-core/controllers/roving-tabindex-controller.js';\n\nimport { colorContextConsumer, type ColorTheme } from '../../lib/context/color/consumer.js';\nimport { colorContextProvider, type ColorPalette } from '../../lib/context/color/provider.js';\n\nimport { RhTile, TileSelectEvent } from './rh-tile.js';\n\nimport styles from './rh-tile-group.css';\n\n/**\n * A group of `<rh-tile>` elements which handles radio selection.\n * @slot - tiles\n */\n@customElement('rh-tile-group')\nexport class RhTileGroup extends LitElement {\n  static readonly styles = [styles];\n\n  /**\n   * whether tile group interaction is disabled\n   */\n  @property({ reflect: true, attribute: 'disabled', type: Boolean }) disabled = false;\n\n  /**\n   * if tile is checkable, whether only one tile can be checked\n   */\n  @property({ attribute: 'radio', type: Boolean }) radio = false;\n\n  /**\n   * Sets color theme based on parent context\n   */\n  @colorContextConsumer() private on?: ColorTheme;\n\n  /**\n   * Sets color palette, which affects the element's styles as well as descendants' color theme.\n   * Overrides parent color context.\n   * Your theme will influence these colors so check there first if you are seeing inconsistencies.\n   * See [CSS Custom Properties](#css-custom-properties) for default values\n   *\n   * Tile group always resets its context to `base`, unless explicitly provided with a `color-palette`.\n   */\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette?: ColorPalette;\n\n  #tiles: RhTile[] = [];\n  #initTiles = false;\n\n  #tabindex = new RovingTabindexController<HTMLElement>(this);\n  #internals = new InternalsController(this, { });\n\n  /**\n   * all slotted tiles\n   */\n  get tiles() {\n    return this.#tiles;\n  }\n\n  /**\n   * all selected tiles\n   */\n  get selected() {\n    const selected = this.#tiles?.filter(tile=> tile.checked);\n    const [first] = selected;\n    return this.radio ? first : selected;\n  }\n\n  protected firstUpdated(): void {\n    this.#internals.role = this.radio ? 'radiogroup' : null;\n    this.updateItems();\n  }\n\n  protected updated(changed: PropertyValues<this>): void {\n    if (changed.has('radio')) {\n      this.#internals.role = this.radio ? 'radiogroup' : null;\n      let selected: RhTile | null | undefined;\n      this.#tiles.forEach(tile => {\n        tile.radioGroup = this.radio;\n        if (this.radio && !selected && tile.checked) {\n          selected = tile;\n        }\n      });\n      this.selectItem(selected);\n    }\n\n    if (changed.has('disabled')) {\n      this.#internals.ariaDisabled = this.disabled ? 'true' : 'false';\n      this.#tiles.forEach(tile => {\n        // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n        tile.disabledGroup = this.disabled;\n      });\n    }\n  }\n\n  render() {\n    const { on = '', radio } = this;\n    return html`\n      <slot class=\"${classMap({ [on]: !!on, radio })}\" @slotchange=${this.#onSlotchange} @select=${this.#onSelect}></slot>\n    `;\n  }\n\n  /** sets focus on active tile */\n  focus() {\n    (this.#tabindex?.activeItem || this.#tabindex.firstItem)?.focus();\n  }\n\n  /**\n   * programatically select a tile\n   * @param tile {RhTile | null | undefined} tile to select\n   */\n  selectItem(tile: RhTile | null | undefined) {\n    if (tile) {\n      tile.checked = true;\n      this.#setTiles(tile);\n    }\n  }\n\n  /**\n   * programatically toggle a tile\n   * @param tile {RhTile | null | undefined} tile to toggle\n   */\n  toggleItem(tile: RhTile | null | undefined) {\n    if (tile?.checked) {\n      tile.checked = false;\n    } else {\n      this.selectItem(tile);\n    }\n  }\n\n  /**\n   * updates slotted tiles to set properties and keyboard navigation\n   */\n  updateItems() {\n    this.#tiles = [...this.querySelectorAll('rh-tile')];\n    this.#tiles.forEach(tile => {\n      tile.checkable = true;\n      tile.radioGroup = this.radio;\n      // @ts-expect-error: internal use of private prop. replace with context. see rh-tile.ts\n      tile.disabledGroup !== this.disabled;\n      tile.id = tile.id || getRandomId('rh-tile');\n    });\n    if (this.#initTiles) {\n      this.#tabindex.updateItems(this.#tiles);\n    } else {\n      this.#initTiles = true;\n      this.#tabindex.initItems(this.#tiles);\n    }\n  }\n\n  #setTiles(tile: RhTile | null | undefined) {\n    if (!this.disabled && (tile && tile.radioGroup || this.radio) && tile?.checked) {\n      this.#tiles?.forEach(item => {\n        if (tile !== item && item.checked) {\n          item.checked = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * handles TileSelectEvent\n   * @param event {TileSelectEvent} tile click event\n   */\n  #onSelect(event: TileSelectEvent) {\n    const tile = event.target as RhTile;\n    this.#setTiles(tile);\n  }\n\n  /**\n   * handles slot change by updating slotted tiles\n   */\n  #onSlotchange() {\n    this.updateItems();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-tile-group': RhTileGroup;\n  }\n}\n"]}