{"version":3,"file":"rh-audio-player-subscribe.js","sourceRoot":"","sources":["rh-audio-player-subscribe.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,2BAA2B,EAAE,MAAM,wCAAwC,CAAC;AACrF,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AAErF,OAAO,8CAA8C,CAAC;;;;AAMtD;;GAEG;AAEI,IAAM,sBAAsB,GAA5B,MAAM,sBAAuB,SAAQ,UAAU;IAA/C;;QAOL,2CAAY,IAAI,2BAA2B,CAAC,IAAI,CAAC,EAAC;QAElD,wCAAS,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,CAAC,EAAC;QAE3D,gDAAgB;IA8BlB,CAAC;IA5BU,MAAM;QACb,OAAO,IAAI,CAAA;;;;+BAIgB,uBAAA,IAAI,wCAAU,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;;;mCAG/B,uBAAA,IAAI,qCAAO,CAAC,OAAO,CAAC,IAAI,CAAC;;;;;6CAKf,CAAC;IAC5C,CAAC;IAED,IAAI,SAAS,CAAC,KAAa;QACzB,uBAAA,IAAI,iCAAU,KAAK,MAAA,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,IAAI,uBAAA,IAAI,qCAAO,IAAI,WAAW,CAAC;IAClD,CAAC;IAED,UAAU;QACR,IAAI,CAAC,UAAU,EAAE,aAAa,CAAC,yCAAyC,CAAC,EAAE,cAAc,EAAE,CAAC;IAC9F,CAAC;;;;;AAvCe,6BAAM,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,AAAxB,CAAyB;AAEnC;IAAX,QAAQ,EAAE;uDAAkB;AAEjB;IAAX,QAAQ,EAAE;qDAAgB;AALhB,sBAAsB;IADlC,aAAa,CAAC,2BAA2B,CAAC;GAC9B,sBAAsB,CAyClC","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { HeadingLevelContextConsumer } from '../../lib/context/headings/consumer.js';\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport './rh-audio-player-scrolling-text-overflow.js';\n\nimport panelStyles from './rh-audio-player-panel.css';\nimport styles from './rh-audio-player-subscribe.css';\n\n\n/**\n * Audio Player Subscribe Panel\n */\n@customElement('rh-audio-player-subscribe')\nexport class RhAudioPlayerSubscribe extends LitElement {\n  static readonly styles = [panelStyles, styles];\n\n  @property() heading?: string;\n\n  @property() label?: string;\n\n  #headings = new HeadingLevelContextConsumer(this);\n\n  #slots = new SlotController(this, 'heading', null, 'link');\n\n  #label?: string;\n\n  override render() {\n    return html`\n      <!-- scrolling text overflow -->\n      <rh-audio-player-scrolling-text-overflow part=\"heading\">\n        <!-- custom heading for panel -->\n        <slot name=\"heading\">${this.#headings.wrap(this.menuLabel)}</slot>\n      </rh-audio-player-scrolling-text-overflow>\n      <!-- panel content -->\n      <slot part=\"body\" ?hidden=\"${this.#slots.isEmpty(null)}\"></slot>\n      <!-- slot:\n             summary: link to subscribe to podcast\n           part:\n             summary: subscribe links -->\n      <slot name=\"link\" part=\"links\"></slot>`;\n  }\n\n  set menuLabel(label: string) {\n    this.#label = label;\n    this.requestUpdate();\n  }\n\n  get menuLabel(): string {\n    return this.label || this.#label || 'Subscribe';\n  }\n\n  scrollText() {\n    this.shadowRoot?.querySelector('rh-audio-player-scrolling-text-overflow')?.startScrolling();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-audio-player-subscribe': RhAudioPlayerSubscribe;\n  }\n}\n"]}