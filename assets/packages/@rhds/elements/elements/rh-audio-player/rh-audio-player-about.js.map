{"version":3,"file":"rh-audio-player-about.js","sourceRoot":"","sources":["rh-audio-player-about.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,KAAK,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAElF,OAAO,8CAA8C,CAAC;AACtD,OAAO,uCAAuC,CAAC;;;;AAK/C,OAAO,EAAE,2BAA2B,EAAE,MAAM,wCAAwC,CAAC;AAErF;;;;;;;;GAQG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,UAAU;IAA3C;;QAcL,uCAAY,IAAI,2BAA2B,CAAC,IAAI,CAAC,EAAC;QAElD,4CAAgB;IAsClB,CAAC;IApCU,MAAM;QACb,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAChD,MAAM,UAAU,GAAG,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAClE,MAAM,OAAO,GAAG,uBAAA,IAAI,oCAAU,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;QAEtD,OAAO,IAAI,CAAA;;+BAEgB,KAAK;kDACc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAA;kDAChD,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;;YAE9D,WAAW;mDAC4B;;YAEvC,OAAO;;gBAEH;kCACkB,CAAC,UAAU;kDACK,CAAC;IACjD,CAAC;IAED,IAAI,SAAS,CAAC,KAAa;QACzB,uBAAA,IAAI,6BAAU,KAAK,MAAA,CAAC;QACpB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,IAAI,uBAAA,IAAI,iCAAO,IAAI,mBAAmB,CAAC;IAC1D,CAAC;IAED,UAAU;QACR,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,gBAAgB,CAAC,yCAAyC,CAAC,CAAC;QAC/F,KAAK,MAAM,QAAQ,IAAI,SAAS,IAAI,EAAE,EAAE,CAAC;YACvC,QAAQ,EAAE,cAAc,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC;;;;AApDe,yBAAM,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,AAAxB,CAAyB;AAGnC;IAAX,QAAQ,EAAE;iDAAgB;AAGQ;IAAlC,QAAQ,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;uDAAsB;AAGjB;IAAtC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC;sDAAqB;AAE1B;IAAhC,qBAAqB,EAAE;mDAAiC;AAZ9C,kBAAkB;IAD9B,aAAa,CAAC,uBAAuB,CAAC;GAC1B,kBAAkB,CAsD9B","sourcesContent":["import { LitElement, html, isServer } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { queryAssignedElements } from 'lit/decorators/query-assigned-elements.js';\n\nimport './rh-audio-player-scrolling-text-overflow.js';\nimport '@rhds/elements/rh-avatar/rh-avatar.js';\n\nimport panelStyles from './rh-audio-player-panel.css';\nimport styles from './rh-audio-player-about.css';\n\nimport { HeadingLevelContextConsumer } from '../../lib/context/headings/consumer.js';\n\n/**\n * Audio Player About Panel\n * @slot heading - custom heading for panel\n * @slot - panel content\n * @slot profile - `<rh-avatar>` for attribution\n * @csspart heading - panel heading\n * @csspart body - panel body\n * @csspart profile - panel profile / avatar\n */\n@customElement('rh-audio-player-about')\nexport class RhAudioPlayerAbout extends LitElement {\n  static readonly styles = [panelStyles, styles];\n\n  /** Default label content */\n  @property() label?: string;\n\n  /** Series this track belongs to, if applicable */\n  @property({ attribute: 'series' }) mediaseries?: string;\n\n  /** Title of audio track */\n  @property({ attribute: 'mediatitle' }) mediatitle?: string;\n\n  @queryAssignedElements() private content?: HTMLElement[];\n\n  #headings = new HeadingLevelContextConsumer(this);\n\n  #label?: string;\n\n  override render() {\n    const { label, mediaseries, mediatitle } = this;\n    const hasContent = isServer || ((this.content?.length ?? 0) >= 1);\n    const heading = this.#headings.wrap(mediatitle ?? '');\n\n    return html`\n      <rh-audio-player-scrolling-text-overflow id=\"title\" part=\"heading\">\n        <slot name=\"heading\">${label}</slot>\n      </rh-audio-player-scrolling-text-overflow>${!mediatitle ? `` : !mediaseries ? heading : html`\n      <hgroup class=\"media-info\" part=\"heading\">${!mediaseries ? '' : html`\n        <rh-audio-player-scrolling-text-overflow id=\"mediaseries\">\n          ${mediaseries}\n        </rh-audio-player-scrolling-text-overflow>`}\n        <rh-audio-player-scrolling-text-overflow id=\"mediatitle\">\n          ${heading}\n        </rh-audio-player-scrolling-text-overflow>\n      </hgroup>`}\n      <div part=\"body\" ?hidden=\"${!hasContent}\" tabindex=0><slot></slot></div>\n      <slot part=\"profile\" name=\"profile\"></slot>`;\n  }\n\n  set menuLabel(label: string) {\n    this.#label = label;\n    this.requestUpdate();\n  }\n\n  get menuLabel(): string {\n    return this.label || this.#label || 'About the episode';\n  }\n\n  scrollText() {\n    const scrollers = this.shadowRoot?.querySelectorAll('rh-audio-player-scrolling-text-overflow');\n    for (const scroller of scrollers ?? []) {\n      scroller?.startScrolling();\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-audio-player-about': RhAudioPlayerAbout;\n  }\n}\n"]}