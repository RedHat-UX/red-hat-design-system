{"version":3,"file":"rh-context-picker.js","sourceRoot":"","sources":["rh-context-picker.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ColorPalette } from '@rhds/elements/lib/context/color/provider.js';\nimport type { Color } from '@rhds/tokens';\nimport type { ColorTheme } from '@rhds/elements/lib/context/color/consumer.js';\n\nimport { html, LitElement, type ComplexAttributeConverter } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { colorContextConsumer } from '@rhds/elements/lib/context/color/consumer.js';\nimport { InternalsController } from '@patternfly/pfe-core/controllers/internals-controller.js';\n\nimport {\n  ColorSurfaceDarkest as darkest,\n  ColorSurfaceDarker as darker,\n  ColorSurfaceDark as dark,\n  ColorSurfaceLight as light,\n  ColorSurfaceLighter as lighter,\n  ColorSurfaceLightest as lightest,\n} from '@rhds/tokens/color.js';\n\nimport '@rhds/elements/rh-tooltip/rh-tooltip.js';\n\nimport style from './rh-context-picker.css';\n\nexport class ContextChangeEvent extends Event {\n  constructor(\n    public colorPalette: ColorPalette,\n    /** the context provider targeted by this element */\n    public provider: HTMLElement | null,\n  ) {\n    super('change', { bubbles: true, cancelable: true });\n  }\n}\n\nexport const ColorPaletteListConverter: ComplexAttributeConverter = {\n  fromAttribute(list: string) {\n    return list?.split(',')\n        ?.map(x => x.trim())\n        ?.filter(x => paletteNames.includes(x as ColorPalette)) ?? [];\n  },\n  toAttribute(list: ColorPalette[]) {\n    return list.join(',');\n  },\n};\n\nexport const paletteMap = new Map<ColorPalette, Color>(Object.entries({\n  lightest,\n  lighter,\n  light,\n  dark,\n  darker,\n  darkest,\n}) as [ColorPalette, Color][]);\n\nexport const paletteNames = Array.from(paletteMap, ([name]) => name);\n\n@customElement('rh-context-picker')\nexport class RhContextPicker extends LitElement {\n  static formAssociated = true;\n\n  static readonly styles = [style];\n\n  declare shadowRoot: ShadowRoot;\n\n  /** ID of context element to toggle (same root) */\n  @property() target?: string | HTMLElement;\n\n  @property() value: ColorPalette = 'darkest';\n\n  @colorContextConsumer() private on?: ColorTheme;\n\n  @property({ converter: ColorPaletteListConverter })\n  allow = paletteNames;\n\n  #internals = InternalsController.of(this);\n\n  #target: HTMLElement | null = null;\n\n  render() {\n    const { allow, on = 'dark', value } = this;\n    return html`\n      <div id=\"host-label\"\n           class=\"visually-hidden\">${this.#internals.computedLabelText}</div>\n      <div id=\"container\"\n           @input=\"${this.#onInput}\"\n           class=\"${classMap({ on: true, [on]: true })}\">\n        ${allow.map(palette => html`\n        <label for=\"radio-${palette}\" class=\"visually-hidden\">${palette}</label>\n        <rh-tooltip>\n          <span slot=\"content\">${palette}</span>\n          <input id=\"radio-${palette}\"\n                 class=\"${classMap({ [palette]: true })}\"\n                 name=\"palette\"\n                 type=\"radio\"\n                 value=\"${palette}\"\n                 aria-describedby=\"host-label\"\n                 ?checked=\"${value === palette}\">\n        </rh-tooltip>`)}\n      </div>\n    `;\n  }\n\n  formStateRestoreCallback(state: string) {\n    if (state) {\n      this.#setValue(state as this['value']);\n    }\n  }\n\n  firstUpdated() {\n    for (const label of this.#internals.labels) {\n      label.addEventListener('click', () => this.focus());\n    }\n    if (this.target instanceof HTMLElement) {\n      this.#target = this.target;\n      this.sync();\n    } else if (this.target) {\n      const root = this.getRootNode() as Document | ShadowRoot;\n      if (root instanceof Document || root instanceof ShadowRoot) {\n        this.#target = root.getElementById(this.target);\n        this.sync();\n      }\n    } else {\n      this.#target = this.closest('rh-surface');\n    }\n  }\n\n  #onInput(event: Event) {\n    if (event.target instanceof HTMLInputElement && event.target.checked) {\n      event.stopPropagation();\n      const { value } = event.target;\n      if (value) {\n        this.#setValue(value as this['value']);\n      }\n    }\n  }\n\n  #setValue(value: this['value']) {\n    this.#internals.setFormValue(value);\n    if (value !== this.value && this.dispatchEvent(new ContextChangeEvent(value, this.#target))) {\n      this.value = value;\n      this.sync();\n    }\n  }\n\n  override focus() {\n    const input: HTMLInputElement | null =\n         this.shadowRoot.querySelector('input[checked]')\n      ?? this.shadowRoot.querySelector('input');\n    input?.focus();\n  }\n\n  sync() {\n    if (this.value) {\n      this.#target?.setAttribute('color-palette', this.value);\n    }\n  }\n}\n"]}