{"version":3,"file":"rh-context-picker.js","sourceRoot":"","sources":["rh-context-picker.ts"],"names":[],"mappings":";;;AACA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAuB,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;;;AAIzC,IAAM,eAAe,uBAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;;QAgBL,qCAAa,IAAI,CAAC,eAAe,EAAE,EAAC;QAEpC,kCAA8B,IAAI,EAAC;IAgErC,CAAC;IAvDC,MAAM;QACJ,OAAO,IAAI,CAAA;;;;;;;uBAOQ,uBAAA,IAAI,4DAAS;;;;;;;;;KAS/B,CAAC;IACJ,CAAC;IAED,wBAAwB,CAAC,KAAa;QACpC,uBAAA,IAAI,6DAAU,MAAd,IAAI,EAAW,KAAK,CAAC,CAAC;IACxB,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAA2B,CAAC;YACzD,uBAAA,IAAI,2BAAW,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAA,CAAC;YAChD,IAAI,CAAC,IAAI,EAAE,CAAC;SACb;aAAM;YACL,uBAAA,IAAI,2BAAW,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAA,CAAC;SACpD;IACH,CAAC;IAED,OAAO,CAAC,iBAAuC;QAC7C,IAAI,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;YAC9D,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,iBAAe,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;SAC5E;IACH,CAAC;IAYD,IAAI;QACF,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,uBAAA,IAAI,+BAAQ,EAAE,YAAY,CAAC,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SACzD;IACH,CAAC;;8LAdQ,CAAuC;IAC9C,uBAAA,IAAI,kCAAW,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC7C,uBAAA,IAAI,6DAAU,MAAd,IAAI,EAAW,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC,iEAES,KAAa;IACrB,IAAI,CAAC,KAAK,GAAG,iBAAe,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC;IAC9C,IAAI,CAAC,IAAI,EAAE,CAAC;AACd,CAAC;AA1EM,8BAAc,GAAG,IAAI,CAAC;AAEb,sBAAM,GAAG,CAAC,KAAK,CAAC,CAAC;AAEjB,wBAAQ,GAAmB;IACzC,SAAS;IACT,QAAQ;IACR,MAAM;IACN,OAAO;IACP,SAAS;IACT,UAAU;CACX,CAAC;AASU;IAAX,QAAQ,EAAE;+CAAiB;AAEhB;IAAX,QAAQ,EAAE;8CAAsB;AAER;IAAxB,KAAK,CAAC,gBAAgB,CAAC;8CAA0B;AAzBvC,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CAkF3B;SAlFY,eAAe","sourcesContent":["import { type ColorPalette } from '../../context/color/provider.js';\nimport { html, LitElement, type PropertyValues } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { query } from 'lit/decorators/query.js';\n\nimport style from './rh-context-picker.css';\n@customElement('rh-context-picker')\nexport class RhContextPicker extends LitElement {\n  static formAssociated = true;\n\n  static readonly styles = [style];\n\n  static readonly palettes: ColorPalette[] = [\n    'darkest',\n    'darker',\n    'dark',\n    'light',\n    'lighter',\n    'lightest',\n  ];\n\n  declare shadowRoot: ShadowRoot;\n\n  #internals = this.attachInternals();\n\n  #target: HTMLElement | null = null;\n\n  /** ID of context element to toggle (same root) */\n  @property() target?: string;\n\n  @property() value?: ColorPalette;\n\n  @query('#context-range') range?: HTMLInputElement;\n\n  render() {\n    return html`\n      <label for=\"context-range\">Color Palette</label>\n      <input id=\"context-range\"\n             name=\"range\"\n             type=\"range\"\n             list=\"palettes\"\n             max=\"5\"\n             @input=\"${this.#onInput}\">\n      <datalist id=\"palettes\">\n        <option value=\"0\" label=\"darkest\"></option>\n        <option value=\"1\" label=\"darker\"></option>\n        <option value=\"2\" label=\"dark\"></option>\n        <option value=\"3\" label=\"light\"></option>\n        <option value=\"4\" label=\"lighter\"></option>\n        <option value=\"5\" label=\"lightest\"></option>\n      </datalist>\n    `;\n  }\n\n  formStateRestoreCallback(state: string) {\n    this.#setValue(state);\n  }\n\n  firstUpdated() {\n    if (this.target) {\n      const root = this.getRootNode() as Document | ShadowRoot;\n      this.#target = root.getElementById(this.target);\n      this.sync();\n    } else {\n      this.#target = this.closest('rh-context-provider');\n    }\n  }\n\n  updated(changedProperties: PropertyValues<this>) {\n    if (changedProperties.has('value') && this.value && this.range) {\n      this.range.value = RhContextPicker.palettes.indexOf(this.value).toString();\n    }\n  }\n\n  #onInput(e: Event & { target: HTMLInputElement }) {\n    this.#internals.setFormValue(e.target.value);\n    this.#setValue(e.target.value);\n  }\n\n  #setValue(value: string) {\n    this.value = RhContextPicker.palettes[+value];\n    this.sync();\n  }\n\n  sync() {\n    if (this.value) {\n      this.#target?.setAttribute('color-palette', this.value);\n    }\n  }\n}\n"]}