{"version":3,"file":"I18nController.js","sourceRoot":"","sources":["I18nController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nexport type LanguageCode = string;\n\nexport type Microcopy = Record<LanguageCode, Record<string, string>>;\n\nexport class I18nController implements ReactiveController {\n  #defaultLanguage = 'en-US';\n\n  language = this.#defaultLanguage;\n\n  #logger: Logger;\n\n  #mo = new MutationObserver(() => this.update());\n\n  #microcopy = new Map<string, Map<string, string>>();\n\n  constructor(private host: ReactiveElement, defaults: Microcopy) {\n    this.#logger = new Logger(host);\n    for (const [language, copy] of Object.entries(defaults)) {\n      this.#microcopy.set(language, new Map(Object.entries(copy)));\n    }\n    this.update();\n  }\n\n  hostConnected(): void {\n    this.#mo.observe(this.host, { childList: true, attributes: true, attributeFilter: ['lang'] });\n    this.update();\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  #getLanguage() {\n    let lang = this.host.getAttribute('lang') || this.host.closest('[lang]')?.getAttribute('lang');\n    let root = this.host.getRootNode();\n    while (!lang && root instanceof ShadowRoot) {\n      lang = root.host.closest('[lang]')?.getAttribute('lang') as string;\n      root = root.host.getRootNode();\n    }\n    return lang ?? this.language;\n  }\n\n  #updateLanguage() {\n    this.language = this.#getLanguage();\n  }\n\n  #useDefaultLanguage() {\n    this.#logger.log(`Using ${this.#defaultLanguage} instead.`);\n    if (this.language !== this.#defaultLanguage) {\n      this.language = this.#defaultLanguage;\n      this.#updateMicrocopy();\n      this.host.requestUpdate();\n    }\n  }\n\n  #updateMicrocopy() {\n    this.#updateLanguage();\n    const lightLangs = this.host.querySelectorAll<HTMLScriptElement>('script[type=\"application/json\"][data-language]');\n    for (const script of lightLangs) {\n      const { language } = script.dataset;\n      if (language) {\n        let content = {};\n        try {\n          content = JSON.parse(script.textContent ?? '{}');\n        } catch {\n          this.#logger.error('Could not parse microcopy...', language);\n          this.#useDefaultLanguage();\n        }\n        this.#microcopy.set(language, new Map(Object.entries(content)));\n      }\n    }\n  }\n\n  #ensure(lang: LanguageCode) {\n    if (!this.#microcopy.has(lang)) {\n      this.#microcopy.set(lang, new Map());\n    }\n  }\n\n  update() {\n    this.#updateLanguage();\n    this.#updateMicrocopy();\n    this.host.requestUpdate();\n  }\n\n  async loadTranslation(url: URL, lang: LanguageCode = this.language, force = false) {\n    if (!!url && (!!force || !this.#microcopy.has(lang))) {\n      try {\n        const file = await fetch(url).then(result => result.json());\n        return this.join(file, lang);\n      } catch (e) {\n        this.#logger.error(`Could not load microcopy for ${lang} from ${url}.`);\n        this.#useDefaultLanguage();\n      }\n    }\n    this.update();\n  }\n\n  get(key: string, lang: LanguageCode = this.language) {\n    return this.#microcopy.get(lang)?.get(key) ?? key;\n  }\n\n  set(key: string, value: string, lang: LanguageCode = this.language) {\n    this.#ensure(lang);\n    this.#microcopy.get(lang)?.set(key, value);\n    this.host.requestUpdate();\n    return this;\n  }\n\n  clear(lang: LanguageCode = this.language) {\n    this.#microcopy.get(lang)?.clear();\n    this.host.requestUpdate();\n  }\n\n  clearAll() {\n    this.#microcopy.clear();\n    this.host.requestUpdate();\n  }\n\n  delete(key: string, lang: LanguageCode = this.language) {\n    const r = this.#microcopy.get(lang)?.delete(key) ?? false;\n    this.host.requestUpdate();\n    return r;\n  }\n\n  join(obj: Microcopy[LanguageCode], lang: LanguageCode = this.language) {\n    this.#ensure(lang);\n    const map = this.#microcopy.get(lang) as Map<string, string>;\n    for (const [key, value] of Object.entries(obj)) {\n      map.set(key, value);\n    }\n    this.host.requestUpdate();\n    return this;\n  }\n\n  toJSON() {\n    return Object.fromEntries([...this.#microcopy.entries()].map(([k, v]) => [k, Object.fromEntries(v)]));\n  }\n}\n"]}