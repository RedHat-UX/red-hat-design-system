{"version":3,"file":"controller.js","sourceRoot":"","sources":["controller.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,eAAe,EAAE,MAAM,sDAAsD,CAAC;AAEvF,OAAO,EACL,aAAa,EACb,YAAY,GAGb,MAAM,aAAa,CAAC;;;AASrB;;;;;;;;;;;;;;;EAeE;AACF,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,GAAG,EAAiD,CAAC;AAEtF;;;;;;;;GAQG;AACH,MAAM,OAAgB,sBAAsB;IAmBxC,YAAsB,IAAO,EAAE,OAAgC;QAAzC,SAAI,GAAJ,IAAI,CAAG;QAR7B,kFAAkF;QACxE,WAAM,GAAG,KAAK,CAAC;QAEzB,+CAA+C;QACrC,SAAI,GAAoB,IAAI,CAAC;QAKrC,IAAI,CAAC,MAAM,GAAG,OAAO,EAAE,MAAM,IAAI,KAAK,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,GAAG,IAAI,CAAC,MAAM,gBAAgB,CAAC,CAAC;QAC7D,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;QACtE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;CACJ","sourcesContent":["import type { ColorTheme } from './consumer.js';\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { StyleController } from '@patternfly/pfe-core/controllers/style-controller.js';\n\nimport {\n  createContext,\n  ContextEvent,\n  type Context,\n  type UnknownContext,\n} from '../event.js';\n\nimport CONTEXT_BASE_STYLES from './context-color.css';\n\nexport interface ColorContextOptions<T extends ReactiveElement> {\n  prefix?: string;\n  propertyName?: keyof T;\n}\n\n/**\n* Maps from consumer host elements to already-fired request events\n* We hold these in memory in order to re-fire the events every time a new provider connects.\n* This is a hedge against cases where an early-upgrading provider claims an early-upgrading\n* consumer before a late-upgrading provider has a chance to register as the rightful provider\n* @example Monkey-in-the-middle error\n*          In this example, we must re-fire the event from eager-consumer when late-provider\n*          upgrades, so as to ensure that late-provider claims it for itself\n*          ```html\n*          <early-provider>\n*            <late-provider>\n*              <eager-consumer>\n*            </late-provider>\n*          </early-provider>\n*          ```\n*/\nexport const contextEvents = new Map<ReactiveElement, ContextEvent<UnknownContext>>();\n\n/**\n * Color context is derived from the `--context` css custom property,\n * which *must* be set by the `color-palette` attribute\n * This property is set (in most cases) in `color-context.scss`,\n * which is added to components via `StyleController`.\n *\n * In this way, we avoid the need to execute javascript in order to convert from a given\n * `ColorPalette` to a given `ColorTheme`, since those relationships are specified in CSS.\n */\nexport abstract class ColorContextController<\n  T extends ReactiveElement\n> implements ReactiveController {\n    abstract update(next?: ColorTheme | null): void;\n\n    /** The context object which describes the host's colour context */\n    protected context: Context<ColorTheme|null>;\n\n    /** The style controller which provides the necessary CSS. */\n    protected styleController: StyleController;\n\n    /** Prefix for colour context. Set this in Options to create a separate context */\n    protected prefix = 'rh-';\n\n    /** The last-known color context on the host */\n    protected last: ColorTheme|null = null;\n\n    hostUpdate?(): void\n\n    constructor(protected host: T, options?: ColorContextOptions<T>) {\n      this.prefix = options?.prefix ?? 'rh-';\n      this.context = createContext(`${this.prefix}-color-context`);\n      this.styleController = new StyleController(host, CONTEXT_BASE_STYLES);\n      host.addController(this);\n    }\n}\n"]}