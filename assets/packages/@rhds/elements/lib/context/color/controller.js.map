{"version":3,"file":"controller.js","sourceRoot":"","sources":["controller.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,eAAe,EAAE,MAAM,sDAAsD,CAAC;AAEvF,OAAO,EAAE,aAAa,EAA4B,MAAM,aAAa,CAAC;OAE/D,yBAAyB;AAOhC;;;;;;;;;;;;;;;EAeE;AACF,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,GAAG,EAGjC,CAAC;AAEJ;;;;;;;;GAQG;AACH,MAAM,OAAgB,sBAAsB;IAiB1C,YAAsB,IAAO;QAAP,SAAI,GAAJ,IAAI,CAAG;QAR7B,+CAA+C;QACrC,SAAI,GAAsB,IAAI,CAAC;QAQvC,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,EAAE,yBAAyB,CAAC,CAAC;QAC5E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;;AAjBD,2EAA2E;AACpD,8BAAO,GAAG,aAAa,CAAoB,MAAM,CAAC,kBAAkB,CAAC,CAAC,AAA/D,CAAgE","sourcesContent":["import type { ColorTheme } from './consumer.js';\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { StyleController } from '@patternfly/pfe-core/controllers/style-controller.js';\n\nimport { createContext, type ContextRequestEvent } from '../event.js';\n\nimport COLOR_CONTEXT_BASE_STYLES from './context-color.css';\n\nexport interface ColorContextOptions<T extends ReactiveElement> {\n  prefix?: string;\n  propertyName?: keyof T;\n}\n\n/**\n* Maps from consumer host elements to already-fired request events\n* We hold these in memory in order to re-fire the events every time a new provider connects.\n* This is a hedge against cases where an early-upgrading provider claims an early-upgrading\n* consumer before a late-upgrading provider has a chance to register as the rightful provider\n* @example Monkey-in-the-middle error\n*          In this example, we must re-fire the event from eager-consumer when late-provider\n*          upgrades, so as to ensure that late-provider claims it for itself\n*          ```html\n*          <early-provider>\n*            <late-provider>\n*              <eager-consumer></eager-consumer>\n*            </late-provider>\n*          </early-provider>\n*          ```\n*/\nexport const contextEvents = new Map<\n  ReactiveElement,\n  ContextRequestEvent<typeof ColorContextController.context>\n>();\n\n/**\n * Color context is derived from the `--context` css custom property,\n * which *must* be set by the `color-palette` attribute\n * This property is set (in most cases) in `color-context.scss`,\n * which is added to components via `StyleController`.\n *\n * In this way, we avoid the need to execute javascript in order to convert from a given\n * `ColorPalette` to a given `ColorTheme`, since those relationships are specified in CSS.\n */\nexport abstract class ColorContextController<\n  T extends ReactiveElement\n> implements ReactiveController {\n  /** The context object which acts as the key for providers and consumers */\n  public static readonly context = createContext<ColorTheme | null>(Symbol('rh-color-context'));\n\n  /** The style controller which provides the necessary CSS. */\n  protected styleController: StyleController;\n\n  /** The last-known color context on the host */\n  protected last: ColorTheme | null = null;\n\n  hostUpdate?(): void;\n\n  /** callback which updates the context value on consumers */\n  abstract update(next?: ColorTheme | null): void;\n\n  constructor(protected host: T) {\n    this.styleController = new StyleController(host, COLOR_CONTEXT_BASE_STYLES);\n    host.addController(this);\n  }\n}\n"]}