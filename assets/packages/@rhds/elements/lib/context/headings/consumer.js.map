{"version":3,"file":"consumer.js","sourceRoot":"","sources":["consumer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,OAAO,EAAE,IAAI,EAAwC,MAAM,KAAK,CAAC;AAEjE,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAa9D;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,eAA2C;IAG1F,YAAY,IAAgB;QAC1B,KAAK,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;QAH3B,WAAM,GAAG,CAAC,CAAC;IAIX,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACH,IAAI,CAAC,OAAgB,EAAE,OAAqC;QAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,KAAK,IAAI,CAAC,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,MAAM,IAAI,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,CAAC;QAChD,MAAM,EAAE,GAAG,OAAO,EAAE,EAAE,CAAC;QACvB,MAAM,MAAM,GAAG,OAAO,EAAE,MAAM,IAAI,KAAK,CAAC;QACxC,QAAQ,WAAW,EAAE,CAAC;YACpB,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;YACjF,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;YACjF,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;YACjF,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;YACjF,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;YACjF,OAAO,CAAC,CAAC,OAAO,IAAI,CAAA,eAAe,MAAM,QAAQ,SAAS,CAAC,EAAE,CAAC,KAAK,OAAO,OAAO,CAAC;QACpF,CAAC;IACH,CAAC;CACF","sourcesContent":["import { context } from './provider.js';\n\nimport { html, type LitElement, type TemplateResult } from 'lit';\n\nimport { ContextConsumer } from '@lit/context';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n\nexport interface HeadingTemplateOptions {\n  id?: string;\n  hidden?: boolean;\n  level?: number;\n}\n\nexport interface HeadingLevelTemplateOptions {\n  id?: string;\n  hidden?: boolean;\n}\n\n/**\n * Determines which heading level immediately precedes the host element,\n * and provides templates for shadow headings.\n */\nexport class HeadingLevelContextConsumer extends ContextConsumer<typeof context, LitElement> {\n  offset = 0;\n\n  constructor(host: LitElement) {\n    super(host, { context });\n  }\n\n  get level() {\n    return this.value?.level ?? 2;\n  }\n\n  /**\n   * Wraps any renderable content in a heading, based on heading level\n   * @param content DOM content to wrap in a header\n   * @param options id, hidden\n   */\n  wrap(content: unknown, options?: HeadingLevelTemplateOptions): TemplateResult {\n    const level = this.value?.level ?? 0;\n    const offset = this.value?.offset ?? 0;\n    const offsetLevel = Math.max(1, level + offset);\n    const id = options?.id;\n    const hidden = options?.hidden ?? false;\n    switch (offsetLevel) {\n      case 1: return html`<h1 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h1>`;\n      case 2: return html`<h2 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h2>`;\n      case 3: return html`<h3 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h3>`;\n      case 4: return html`<h4 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h4>`;\n      case 5: return html`<h5 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h5>`;\n      default: return html`<h6 ?hidden=${hidden} id=\"${ifDefined(id)}\">${content}</h6>`;\n    }\n  }\n}\n"]}