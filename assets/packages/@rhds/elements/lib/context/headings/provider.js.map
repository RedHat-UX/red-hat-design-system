{"version":3,"file":"provider.js","sourceRoot":"","sources":["provider.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,aAAa,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAExE,OAAO,EACL,YAAY,GAIb,MAAM,aAAa,CAAC;AAErB,MAAM,SAAS,GAAG,mBAAmB,CAAC;AAEtC;;;;;;GAMG;AACH,MAAM,OAAO,GAAG,eAAe,CAAC;AAEhC,SAAS,QAAQ,CAAC,OAAwB;IACxC,MAAM,EAAE,GAAG,EAAE,GAAG,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,MAAM,IAAI,EAAE,CAAC;IAC9D,OAAO,QAAQ,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;AAC7B,CAAC;AAED,SAAS,QAAQ,CAAC,IAAU;IAC1B,OAAO,OAAQ,IAAgB,CAAC,gBAAgB,KAAK,UAAU,CAAC;AAClE,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,2BAA4B,SAAQ,sBAAsB;IAAvE;;;QACE,gEAAgE;QAChE,iDAAa,IAAI,GAAG,EAA2B,EAAC;IAsDlD,CAAC;IApDC,aAAa;QACX,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAChD,uBAAA,IAAI,gGAAqB,MAAzB,IAAI,EAAsB,CAAiC,CAAC,CAAC,CAAC;QAChE,KAAK,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,aAAa,EAAE;YACzC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;SAC3B;QACD,IAAI,CAAC,KAAK;YACR,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,IAAI,EAAE,CAAC;gBACrD,uBAAA,IAAI,qGAA0B,MAA9B,IAAI,CAA4B,CAAC;IACrC,CAAC;CA2CF;;IAxCG,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;IACtB,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAC9C,IAAI,OAAO,IAAI,IAAI,CAAC,UAAU,EAAE;QAC9B,OAAO,QAAQ,CAAC,OAAO,CAAC,CAAC;KAC1B;SAAM;QACL,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;YAClB,MAAM,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;YAC3B,MAAM,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,GAAG,SAAS,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC;YACpE,MAAM,qBAAqB,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACpE,OAAO,QAAQ,CAAC,qBAAqB,CAAC,CAAC;SACxC;KACF;AACH,CAAC,mHAIC,KAAmC;IAEnC,OAAO,CACL,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI;QACxB,KAAK,CAAC,OAAO,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAC3C,CAAC;AACJ,CAAC,qDAED,KAAK,2DAAsB,KAAmC;IAC5D,uDAAuD;IACvD,IAAI,uBAAA,IAAI,kGAAuB,MAA3B,IAAI,EAAwB,KAAK,CAAC,EAAE;QACtC,+EAA+E;QAC/E,KAAK,CAAC,eAAe,EAAE,CAAC;QAExB,mDAAmD;QACnD,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE3B,sDAAsD;QACtD,IAAI,KAAK,CAAC,QAAQ,EAAE;YAClB,uBAAA,IAAI,8CAAW,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;SACrC;KACF;AACH,CAAC","sourcesContent":["import { contextEvents, HeadingLevelController } from './controller.js';\n\nimport {\n  ContextEvent,\n  type Context,\n  type UnknownContext,\n  type ContextCallback,\n} from '../event.js';\n\nconst SELECTORS = `H1,H2,H3,H4,H5,H6`;\n\n/**\n * **START**\n * `H`\n * named capture group 1 `lvl`:\n * > **0-9**\n * **END**\n */\nconst HLVL_RE = /^H(?<lvl>\\d)$/;\n\nfunction getLevel(heading?: Element | null): number {\n  const { lvl } = heading?.tagName.match(HLVL_RE)?.groups ?? {};\n  return parseInt(lvl ?? '');\n}\n\nfunction canQuery(node: Node): node is Document | ShadowRoot {\n  return typeof (node as Element).querySelectorAll === 'function';\n}\n\n/**\n * Determines which heading level immediately precedes the host element,\n * and provides templates for shadow headings.\n */\nexport class HeadingLevelContextProvider extends HeadingLevelController {\n  /** Cache of context callbacks. Call each to update consumers */\n  #callbacks = new Set<ContextCallback<number>>();\n\n  hostConnected() {\n    this.host.addEventListener('context-request', e =>\n      this.#onChildContextEvent(e as ContextEvent<UnknownContext>));\n    for (const [host, fired] of contextEvents) {\n      host.dispatchEvent(fired);\n    }\n    this.level =\n      this.host.getAttribute(this.options?.attribute ?? '') ??\n      this.#computeLevelFromChildren();\n  }\n\n  #computeLevelFromChildren() {\n    const { host } = this;\n    const slotted = host.querySelector(SELECTORS);\n    if (slotted && host.shadowRoot) {\n      return getLevel(slotted);\n    } else {\n      const root = host.getRootNode();\n      if (canQuery(root)) {\n        const { localName } = host;\n        const els = [...root.querySelectorAll(`${SELECTORS},${localName}`)];\n        const lastHeadingBeforeHost = els.slice(0, els.indexOf(host)).pop();\n        return getLevel(lastHeadingBeforeHost);\n      }\n    }\n  }\n\n  /** Was the context event fired requesting our colour-context context? */\n  #isHeadingContextEvent(\n    event: ContextEvent<UnknownContext>\n  ): event is ContextEvent<Context<number>> {\n    return (\n      event.target !== this.host &&\n        event.context.name === this.context.name\n    );\n  }\n\n  async #onChildContextEvent(event: ContextEvent<UnknownContext>) {\n    // only handle ContextEvents relevant to colour context\n    if (this.#isHeadingContextEvent(event)) {\n      // claim the context-request event for ourselves (required by context protocol)\n      event.stopPropagation();\n\n      // Run the callback to initialize the child's value\n      event.callback(this.level);\n\n      // Cache the callback for future updates, if requested\n      if (event.multiple) {\n        this.#callbacks.add(event.callback);\n      }\n    }\n  }\n}\n"]}