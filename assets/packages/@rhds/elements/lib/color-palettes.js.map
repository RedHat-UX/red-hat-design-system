{"version":3,"file":"color-palettes.js","sourceRoot":"","sources":["color-palettes.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAiD,MAAM,KAAK,CAAC;AAEpE,OAAO,EAAE,MAAM,EAAE,MAAM,4CAA4C,CAAC;AAEpE,OAAO,MAAM,MAAM,uCAAuC,CAAC;AAsB3D,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC;IAC7B,OAAO;IACP,SAAS;IACT,UAAU;IACV,MAAM;IACN,QAAQ;IACR,SAAS;CACD,CAAC,CAAC;AAEZ,MAAM,iBAAiB;IAKrB,YAAY,IAAyB,EAAE,QAAwB;QAJ/D,0CAA2B;QAC3B,8CAA6B;QAC7B,0CAAqB;QACrB,4CAAgB;QAEd,uBAAA,IAAI,2BAAS,IAAI,MAAA,CAAC;QAClB,uBAAA,IAAI,+BAAa,IAAI,GAAG,CAAC,QAAQ,CAAC,MAAA,CAAC;QACnC,uBAAA,IAAI,2BAAS,uBAAA,IAAI,+BAAM,CAAC,YAAY,MAAA,CAAC;QACrC,uBAAA,IAAI,+BAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC/B,uBAAA,IAAI,6BAAW,IAAI,MAAM,CAAC,IAAI,CAAC,MAAA,CAAC;IAClC,CAAC;IAED,UAAU;QACR,MAAM,EAAE,YAAY,EAAE,GAAG,uBAAA,IAAI,+BAAM,CAAC;QACpC,IAAI,YAAY,IAAI,CAAC,uBAAA,IAAI,mCAAU,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE,CAAC;YACtD,uBAAA,IAAI,iCAAQ,CAAC,IAAI,CAAC,kBAAkB,YAAY,kBAAkB,CAAC,CAAC;YACpE,uBAAA,IAAI,+BAAM,CAAC,YAAY,GAAG,uBAAA,IAAI,+BAAM,CAAC;QACvC,CAAC;aAAM,CAAC;YACN,uBAAA,IAAI,2BAAS,YAAY,MAAA,CAAC;QAC5B,CAAC;IACH,CAAC;CACF;;AAGD,SAAS,IAAI,CACX,KAAgE,EAChE,iBAAiB,GAAG,QAAQ;IAE5B,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC,UAAU,EAAE,YAAY;WACtD,KAAK,CAAC,kBAAkB,CAAC,cAAc,CAAC;WACxC,EAAE,CAAC;IACV,IAAI,SAAS,KAAK,eAAe,IAAI,CAAC,OAAO,EAAE,CAAC;QAC9C,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;IAC5E,CAAC;IACD,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,iBAAiB,CAAC,QAAQ,EAAE,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;IAC1F,MAAM,aAAa,GACf,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM;QAC5C,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC;YAC/B,CAAC,CAAC,EAAE,CAAC;IACP,KAAK,CAAC,MAAM,GAAG;QACb,MAAM;QACN,GAAG,aAAa;KACjB,CAAC;AACJ,CAAC;AAWD,MAAM,UAAU,aAAa,CAC3B,GAAG,IAAuD;IAE1D,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,EAAE,CAAC;QAC3C,OAAO,UAAS,KAAgE;YAC9E,OAAO,IAAI,CAAC,KAAK,EAAE,IAAkC,CAAC,CAAC;QACzD,CAAC,CAAC;IACJ,CAAC;SAAM,CAAC;QACN,OAAO,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IACvB,CAAC;AACH,CAAC","sourcesContent":["import { type ReactiveController, type ReactiveElement } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nimport styles from '@rhds/tokens/css/color-palette.css.js';\nimport type { Constructor } from '@lit/reactive-element/decorators/base.js';\n\ntype ColorPaletteConstructor = Constructor<ColorPaletteElement> & typeof ReactiveElement;\n\ntype ColorPaletteDecorator =\n  (target: ColorPaletteConstructor) => void;\n\ninterface ColorPaletteElement extends ReactiveElement {\n  colorPalette?: ColorPalette | undefined;\n}\n\n/**\n * A `ColorPalette` is a collection of specific color values\n * Choosing a palette sets both color properties and, if the component is a\n * color palette provider, implies a background type ('dark' or 'light') for\n * descendents.\n *\n * `ColorPalette` must be associated with the `color-palette` attribute\n */\nexport type ColorPalette = typeof Palettes[number];\n\nconst Palettes = Object.freeze([\n  'light',\n  'lighter',\n  'lightest',\n  'dark',\n  'darker',\n  'darkest',\n] as const);\n\nclass PaletteController implements ReactiveController {\n  #host: ColorPaletteElement;\n  #palettes: Set<ColorPalette>;\n  #last?: ColorPalette;\n  #logger: Logger;\n  constructor(host: ColorPaletteElement, palettes: ColorPalette[]) {\n    this.#host = host;\n    this.#palettes = new Set(palettes);\n    this.#last = this.#host.colorPalette;\n    this.#host.addController(this);\n    this.#logger = new Logger(host);\n  }\n\n  hostUpdate(): void {\n    const { colorPalette } = this.#host;\n    if (colorPalette && !this.#palettes.has(colorPalette)) {\n      this.#logger.warn(`color-palette=\"${colorPalette}\" is not allowed`);\n      this.#host.colorPalette = this.#last;\n    } else {\n      this.#last = colorPalette;\n    }\n  }\n}\n\n\nfunction impl(\n  klass: Constructor<ColorPaletteElement> & typeof ReactiveElement,\n  supportedPalettes = Palettes,\n) {\n  const { attribute, reflect } = klass.properties?.colorPalette\n      ?? klass.getPropertyOptions('colorPalette')\n      ?? {};\n  if (attribute !== 'color-palette' || !reflect) {\n    throw new Error('@colorPalettes requires the `color-palette` attribute.');\n  }\n  klass.addInitializer(instance => new PaletteController(instance, [...supportedPalettes]));\n  const elementStyles =\n      Array.isArray(klass.styles) ? klass.styles\n    : klass.styles ? [klass.styles]\n    : [];\n  klass.styles = [\n    styles,\n    ...elementStyles,\n  ];\n}\n\n/**\n * Makes this element a [color scheme provider](https://ux.redhat.com/themeing/color-palettes)\n * Limits the element to the specified color palettes, if provided.\n *\n * @param supportedPalettes list of supported color palettes\n * @see https://ux.redhat.com/themeing/color-palettes\n */\nexport function colorPalettes(...supportedPalettes: ColorPalette[]): ClassDecorator;\nexport function colorPalettes(klass: ColorPaletteConstructor): void;\nexport function colorPalettes(\n  ...args: ColorPalette[] | [klass: ColorPaletteConstructor]\n): ColorPaletteDecorator | void {\n  if (args.every(x => typeof x === 'string')) {\n    return function(klass: Constructor<ColorPaletteElement> & typeof ReactiveElement) {\n      return impl(klass, args as unknown as typeof Palettes);\n    };\n  } else {\n    return impl(...args);\n  }\n}\n"]}