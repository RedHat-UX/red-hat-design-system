{"version":3,"file":"uxdot-spacer-tokens-table.js","sourceRoot":"","sources":["uxdot-spacer-tokens-table.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAC5D,OAAO,EAAE,MAAM,IAAI,SAAS,EAAE,MAAM,cAAc,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAGvC,OAAO,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AAC5D,OAAO,EAAE,QAAQ,EAAE,MAAM,kCAAkC,CAAC;AAE5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAE3D,OAAO,qCAAqC,CAAC;AAE7C,OAAO,wBAAwB,CAAC;;;AAIhC,MAAM,cAAc,GAAG,CAAC,KAAkB,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACpE,GAAG,KAAK;IACR,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,EAAE,CAAC;CACpD,CAAC,CAAC;AAEH,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAE,EAAE;IAChC,MAAM,SAAS,GAAG,cAAc,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,EAAW,CAAC;IAClF,OAAO,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF;;GAEG;AAEH,MAAM,OAAO,sBAAuB,SAAQ,UAAU;;;QAEpD,eAAsB,EAAE,CAAC;QAEzB,oBAAyD,OAAO,CAAC;QAEjE,cACE,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;aACvB,MAAM,CAAC,CAAC,CAAC,EAA+B,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;QAE9E,gBAAmC,EAAE,CAAC;;IAEtC,MAAM;QACJ,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM;aACvB,GAAG,CAAC,QAAQ,CAAC;aACb,MAAM,CAAC,OAAO,CAAC,CAAC;QAErB,OAAO,IAAI,CAAA;;;iCAGkB,IAAI,CAAC,YAAY;;qBAE7B,IAAI,CAAC,OAAO;;;;;;;;;mBASd,QAAQ;aACZ,GAAG,CAAC,cAAc,CAAC;aACnB,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAA;;;+BAGD,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC;2BACrD,QAAQ,CAAC;YAChB,mBAAmB,EAAE,KAAK,CAAC,MAAM;YACjC,oBAAoB,EAAE,KAAK,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC,KAAK;SAC/D,CAAC;iCACa,QAAQ,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;sBAC5D,KAAK,CAAC,QAAQ;;;;;uCAKG,KAAK,CAAC,IAAI;;6CAEJ,KAAK,CAAC,YAAY;;;mDAGZ,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,MAAM;4CAClC,KAAK,CAAC,IAAI;;;;;kBAKpC,CAAC;;;;;KAKd,CAAC;IACJ,CAAC;;;;kBA5DS,EAAE,SAAS,EAAE,eAAe,EAAE;YAE9B,EAAE,SAAS,EAAE,mBAAmB,EAAE;;;AALrC,6BAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY","sourcesContent":["import type { DesignToken } from '@rhds/tokens';\n\nimport { tokens as metaTokens } from '@rhds/tokens/meta.js';\nimport { tokens as allTokens } from '@rhds/tokens';\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators/property.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { classMap } from 'lit-html/directives/class-map.js';\nimport { styleMap } from 'lit-html/directives/style-map.js';\nimport { state } from 'lit/decorators/state.js';\nimport { StringListConverter } from '@patternfly/pfe-core';\n\nimport '@rhds/elements/rh-table/rh-table.js';\n\nimport './uxdot-copy-button.js';\n\nimport styles from './uxdot-spacer-tokens-table.css';\n\nconst assignBasename = (token: DesignToken) => !token.name ? token : ({\n  ...token,\n  baseName: token.name.replace(/^(--)?rh-space-/, ''),\n});\n\nconst getToken = (name: string) => {\n  const tokenName = `--rh-space-${name.trim().replace('--rh-space-', '')}` as const;\n  return metaTokens.get(tokenName);\n};\n\n/**\n * Reads token data from @rhds/tokens and outputs a table for specified tokens\n */\n@customElement('uxdot-spacer-tokens-table')\nexport class UxdotSpacerTokensTable extends LitElement {\n  static styles = [styles];\n  @property() caption = '';\n\n  @property({ attribute: 'color-palette' }) colorPalette = 'light';\n\n  @property({ converter: StringListConverter }) tokens: string[] =\n    Array.from(allTokens.keys())\n        .filter((x): x is `--rh-space-${string}` => x.startsWith('--rh-space'));\n\n  @state() metaData: DesignToken[] = [];\n\n  render() {\n    const metaData = this.tokens\n        .map(getToken)\n        .filter(Boolean);\n\n    return html`\n      <!-- TODO: remove lightdom after implementing auto-load-->\n      <link rel=\"stylesheet\" href=\"/assets/packages/@rhds/elements/elements/rh-table/rh-table-lightdom.css\">\n      <rh-table color-palette=\"${this.colorPalette}\">\n        <table>\n          <caption>${this.caption}</caption>\n          <thead>\n            <tr>\n              <th scope=\"col\" data-label=\"Example\">Example</th>\n              <th scope=\"col\" data-label=\"Token\">Token</th>\n              <th scope=\"col\" data-label=\"Description\">Description</th>\n              <th scope=\"col\"></th>\n            </tr>\n          </thead>\n          <tbody>${metaData\n              .map(assignBasename)\n              .map(token => html`\n            <tr>\n              <td data-label=\"Example\">\n                <samp class=\"${classMap({ space: true, [token.baseName]: true })}\"\n                  style=\"${styleMap({\n                    '--samp-space-size': token.$value,\n                    '--samp-space-color': token.$extensions['com.redhat.ux'].color,\n                  })}\">\n                  <span class=\"${classMap({ offset: parseInt(token.$value) < 16 })}\">\n                    ${token.baseName}\n                  </span>\n                </samp>\n              </td>\n              <td data-label=\"Token\">\n                <uxdot-copy-button>--${token.name}</uxdot-copy-button>\n              </td>\n              <td data-label=\"Description\">${token.$description}</td>\n              <td data-label=\"Copy\">\n                <div>\n                  <uxdot-copy-button copy=\"var(--${token.name}, ${token.$value})\"></uxdot-copy-button>\n                  <a href=\"/tokens/space/#${token.name}\">\n                    <rh-icon icon=\"link\" set=\"ui\" aria-label=\"link\"></rh-icon>\n                  </a>\n                </div>\n              </td>\n            </tr>`)}\n          </tbody>\n        </table>\n      </rh-table>\n      <slot></slot>\n    `;\n  }\n}\n"]}