{"version":3,"file":"uxdot-knob-attribute.js","sourceRoot":"","sources":["uxdot-knob-attribute.ts"],"names":[],"mappings":"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","sourcesContent":["import type { IconSetName } from '@rhds/icons';\nimport { LitElement, html, isServer, type PropertyValues } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\n\nimport { icons } from '@rhds/icons/metadata.js';\n\nimport type * as Tools from '@parse5/tools';\nimport styles from './uxdot-knob-attribute.css';\n\nimport '@rhds/elements/rh-switch/rh-switch.js';\nimport '@rhds/elements/rh-tabs/rh-tabs.js';\nimport '@rhds/elements/lib/elements/rh-context-picker/rh-context-picker.js';\nimport { observes } from '@patternfly/pfe-core/decorators.js';\n\nconst dequote = (x: string) =>\n  x.replace(/^\\s*['\"]([^'\"]+)['\"].*$/m, '$1');\n\nconst ARRAY_OF_PAREN_TYPE_RE = /^\\((.*)\\)\\[\\]$/;\n\n@customElement('uxdot-knob-attribute')\nexport class UxdotKnobAttribute extends LitElement {\n  static styles = [styles];\n\n  @property() tag!: string;\n\n  @property() demo!: string;\n\n  @property() name!: string;\n\n  @property() type?: string;\n\n  @property() default?: string;\n\n  #values = new Map<string, string | boolean | null>;\n\n  #iconSet: IconSetName | null = null;\n\n  #icons: string[] = [];\n\n  #typeMembers: string[] = [];\n\n  get value() {\n    const el = this.shadowRoot?.getElementById('knob') as HTMLInputElement;\n    return el?.value;\n  }\n\n  set value(v) {\n    const el = this.shadowRoot?.getElementById('knob') as HTMLInputElement;\n    el.value = v;\n  }\n\n  async update(ch: PropertyValues<this>) {\n    await this.#computeValues();\n    await this.#computeIcons();\n    super.update(ch);\n  }\n\n  @observes('type')\n  protected typeChanged() {\n    this.#typeMembers = (this.type ?? '')\n        .split('|')\n        .filter(member => !!member && member !== 'undefined');\n  }\n\n  render() {\n    const options = this.#typeMembers;\n    const isIconSet = this.name === 'icon-set' || (this.tag === 'rh-icon' && this.name === 'set');\n    const isUnionType =\n         options.length > 1\n         // case: `variant?: 'subtle'`\n      || (options.length === 1 && !!options.at(0)?.match(/^'.*'$/));\n    // case: rh-code-block action field: `actions?: ('code'|'wrap')[]`\n    const [, listAttrEnum] =\n      this.type?.match(ARRAY_OF_PAREN_TYPE_RE) ?? [];\n    const listAttrEnumMembers = listAttrEnum?.split('|') ?? [];\n\n    // TODO: replace tooltip with popover for toggletips\n    return html`\n      <li data-name=\"${this.name}\" @change=\"${this.#onChange}\">\n        <label for=\"knob\">\n          <code id=\"knob-title\">${this.name}</code>\n          <rh-tooltip>\n            <button class=\"toggletip\" aria-labelledby=\"knob-title\"><rh-icon icon=\"information\" set=\"ui\"></rh-icon></button>\n            <div slot=\"content\"><slot name=\"description\"></slot></div>\n          </rh-tooltip>\n        </label>${this.type === 'boolean' ? html`\n        <rh-switch id=\"knob\"\n                   ?checked=\"${this.#values.get(this.name)}\"\n                   message-on=\"Attribute is present\"\n                   message-off=\"Attribute is absent\"></rh-switch>` : listAttrEnumMembers.length ? listAttrEnumMembers.map(member => html`\n        <div class=\"checkbox-group\">\n          <input id=\"${this.name}-${dequote(member)}\"\n                 type=\"checkbox\"\n                 name=\"${this.name}\"\n                 value=\"${dequote(member)}\">\n          <label for=\"${this.name}-${dequote(member)}\">${dequote(member)}</label>\n        </div>`) : isIconSet ? html`\n        <pf-select id=\"knob\"\n                   data-kind=\"iconSet\"\n                   value=\"${ifDefined(this.#values.get(this.name)) ?? this.default}\">\n          <pf-option value=\"\">Choose an Icon Set</pf-option>\n          <pf-option>ui</pf-option>\n          <pf-option>standard</pf-option>\n          <pf-option>microns</pf-option>\n          <pf-option>social</pf-option>\n        </pf-select>` : this.name === 'icon' ? html`\n        <pf-select id=\"knob\"\n                   data-kind=\"icon\"\n                   variant=\"typeahead\"\n                   value=\"${ifDefined(this.#values.get(this.name))}\">\n          <pf-option value=\"\">Choose an Icon</pf-option>${this.#icons.map(option => html`\n          <pf-option>\n            ${option}\n            <rh-icon slot=\"icon\"\n                     icon=\"${option}\"\n                     set=\"${this.#iconSet}\"></rh-icon>\n          </pf-option>`)}\n        </pf-select>` : isUnionType ? html`\n        <pf-select id=\"knob\"\n                   data-kind=\"enum\"\n                   value=\"${ifDefined(this.#values.get(this.name))}\">\n          <pf-option value=\"\">Choose a Value</pf-option>${options.map(option => html`\n          <pf-option>${dequote(option)}</pf-option>`)}\n        </pf-select>` : this.name === 'color-palette' ? html`\n        <rh-context-picker id=\"knob\"\n                           allowed=\"${ifDefined(options.at(0) === 'ColorPalette' ? undefined : options.map(dequote).join(','))}\"\n                           value=\"${this.#values.get(this.name) ?? 'lightest'}\"></rh-context-picker>` : html`\n        <input type=\"text\"\n               id=\"knob\"\n               inputmode=\"${ifDefined(this.type === 'number' ? 'numeric' : undefined)}\"\n               value=\"${ifDefined(this.#values.get(this.name))}\">`}\n      </li>\n    `;\n  }\n\n  async #computeValues() {\n    if (isServer) {\n      /* eslint-disable @stylistic/max-len */\n      const { readFile } = await import('node:fs/promises');\n      const { parseFragment } = await import('parse5');\n      const Tools = await import('@parse5/tools');\n      const { getPfeConfig } = await import('@patternfly/pfe-tools/config.js');\n      const { getAllManifests } = await import('@patternfly/pfe-tools/custom-elements-manifest/custom-elements-manifest.js');\n      /* eslint-enable @stylistic/max-len */\n      const manifests = getAllManifests();\n      const [manifest] = manifests;\n      const [demo] = Object.groupBy(manifests\n          .flatMap(manifest => manifest.getTagNames()\n              .flatMap(tagName => manifest.getDemoMetadata(tagName, getPfeConfig()))),\n                                    x => x.primaryElementName)[this.tag] ?? [];\n      if (!demo?.filePath) {\n        return new Map;\n      };\n      const attributes = manifest.getAttributes(this.tag) ?? [];\n      const content = await readFile(demo.filePath, 'utf-8');\n      const fragment = parseFragment(content);\n      const elementNode: Tools.Element | null =\n        Tools.query(fragment, node => Tools.isElementNode(node) && node.tagName === this.tag);\n      if (!elementNode) {\n        throw new Error('demo does not contain element');\n      }\n      for (const attr of attributes) {\n        this.#values.set(\n          attr.name,\n          (attr.type?.text === 'boolean' ?\n              Tools.hasAttribute(elementNode, attr.name)\n            : Tools.getAttribute(elementNode, attr.name)),\n        );\n      }\n    } else {\n      const demo = this.closest('uxdot-demo');\n      if (demo) {\n        for (const attr of demo.dataset.attributes?.split(',') ?? []) {\n          const value = await demo.getDemoElementAttribute(attr);\n          this.#values.set(attr, value ?? '');\n          if (attr === this.name) {\n            this.value = value ?? '';\n          }\n        }\n      }\n    }\n  }\n\n  async #computeIcons() {\n    if (!isServer\n      && this.hasUpdated\n      && this.name === 'icon') {\n      const demo = this.closest('uxdot-demo');\n      if (demo) {\n        await demo.updateComplete;\n        let iconSet: string | IconSetName | null = null;\n        if (this.tag === 'rh-icon') {\n          iconSet = await demo.getDemoElementAttribute('set') ?? 'standard';\n        } else {\n          const liveValue = await demo.getDemoElementAttribute('icon-set');\n          if (liveValue) {\n            iconSet = liveValue;\n          } else {\n            const setKnob =\n              demo.querySelector<UxdotKnobAttribute>('uxdot-knob-attribute[name=\"icon-set\"]');\n            await setKnob?.updateComplete;\n            iconSet = setKnob?.value || this.tagName === 'rh-icon' ? 'standard' : 'ui';\n          }\n        }\n        switch (iconSet) {\n          case 'microns':\n          case 'ui':\n          case 'social':\n          case 'standard': {\n            this.#iconSet = iconSet;\n            this.#icons = [...icons.get(iconSet) ?? []];\n            break;\n          }\n          default:\n            this.#iconSet = null;\n        }\n      }\n    }\n  }\n\n  #getValueForCheckboxes() {\n    const checkboxes = this.shadowRoot?.querySelectorAll<HTMLInputElement>(`[type=\"checkbox\"][name=\"${this.name}\"]`);\n    return Array.from(checkboxes ?? [])\n        .filter(x => x.checked)\n        .map(x => x.value)\n        .join(' ');\n  }\n\n  // guards against the initial pf-select change event\n  #firstChange = false;\n\n  async #onChange(event: Event) {\n    if (this.#firstChange || (event.target as HTMLElement)?.localName !== 'pf-select') {\n      const target = event.target as LitElement & HTMLInputElement;\n      const demo = this.closest('uxdot-demo');\n      await target.updateComplete;\n      const value: string | boolean | null =\n          target.type === 'checkbox' ? this.#getValueForCheckboxes()\n        : this.type === 'boolean' ? target.checked\n        : target.value;\n      if (demo && this.name) {\n        demo.setDemoElementAttribute(this.name, value);\n      }\n    } else {\n      this.#firstChange = true;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'uxdot-knob-attribute': UxdotKnobAttribute;\n  }\n}\n"]}