{"version":3,"file":"uxdot-copy-permalink.js","sourceRoot":"","sources":["uxdot-copy-permalink.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAKvC,OAAO,EAAE,OAAO,EAAE,MAAM,qCAAqC,CAAC;AAC9D,OAAO,mCAAmC,CAAC;;;AAK3C,MAAM,OAAO,kBAAmB,SAAQ,UAAU;;;;QAOhD,wCAAa,IAAI,CAAC,eAAe,EAAE,EAAC;QAJpC,uBAAgE,wBAAwB,CAAC;QAEzF,kBAAqD,aAAa,CAAC;;IAInE,MAAM;QACJ,OAAO,IAAI,CAAA;;;wBAGS,uBAAA,IAAI,mEAAU;;4BAEV,IAAI,CAAC,eAAe;;;KAG3C,CAAC;IACJ,CAAC;IAED,YAAY;QACV,uBAAA,IAAI,qCAAW,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC3C,CAAC;;6HAED,KAAK;IACH,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU;QAC1B,EAAE,aAAa,CAAC,MAAM,CAAC;QACvB,EAAE,gBAAgB,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;QACrC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACxC,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC7B,IAAI,IAAI,EAAE,CAAC;QACT,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IAC9C,CAAC;AACH,CAAC;;qBAhCS,EAAE,SAAS,EAAE,mBAAmB,EAAE;gBAElC,EAAE,SAAS,EAAE,aAAa,EAAE;;AAJ/B,yBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY","sourcesContent":["import { LitElement, html } from 'lit';\n\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { RhAlert } from '@rhds/elements/rh-alert/rh-alert.js';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './uxdot-copy-permalink.css';\n\n@customElement('uxdot-copy-permalink')\nexport class UxdotCopyPermalink extends LitElement {\n  static styles = [styles];\n\n  @property({ attribute: 'copy-button-label' }) copyButtonLabel = 'Copy link to clipboard';\n\n  @property({ attribute: 'copied-text' }) copiedText = 'Link copied';\n\n  #internals = this.attachInternals();\n\n  render() {\n    return html`\n      <slot></slot>\n      <span id=\"signifier\">(permalink)</span>\n      <button @click=\"${this.#copyLink}\"\n              id=\"button\"\n              aria-label=\"${this.copyButtonLabel}\">\n        <rh-icon set=\"ui\" icon=\"link\"></rh-icon>\n      </button>\n    `;\n  }\n\n  firstUpdated() {\n    this.#internals.states.add('--rendered');\n  }\n\n  async #copyLink() {\n    const [link] = this.shadowRoot\n        ?.querySelector('slot')\n        ?.assignedElements({ flatten: true })\n        ?.map(child => child.querySelector('a'))\n        ?.filter(x => !!x) ?? [];\n    if (link) {\n      await navigator.clipboard.writeText(link.href);\n      RhAlert.toast({ message: this.copiedText });\n    }\n  }\n}\n"]}