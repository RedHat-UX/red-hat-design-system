{"version":3,"file":"provide.js","sources":["../../src/lib/decorators/provide.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {Context} from '../create-context.js';\nimport {ContextProvider} from '../controllers/context-provider.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextProvider controller to the component\n * making it respond to any `context-request` events from its children consumer.\n *\n * @param context A Context identifier value created via `createContext`\n *\n * @example\n *\n * ```ts\n * import {provide} from '@lit/context';\n * import {Logger} from 'my-logging-library';\n * import {loggerContext} from './logger-context.js';\n *\n * class MyElement {\n *   @provide({context: loggerContext})\n *   logger = new Logger();\n * }\n * ```\n * @category Decorator\n */\nexport function provide<ValueType>({\n  context: context,\n}: {\n  context: Context<unknown, ValueType>;\n}): ProvideDecorator<ValueType> {\n  return (<C extends ReactiveElement, V extends ValueType>(\n    protoOrTarget: ClassAccessorDecoratorTarget<C, V>,\n    nameOrContext: PropertyKey | ClassAccessorDecoratorContext<C, V>\n  ) => {\n    // Map of instances to controllers\n    const controllerMap = new WeakMap<\n      ReactiveElement,\n      ContextProvider<Context<unknown, ValueType>>\n    >();\n    if (typeof nameOrContext === 'object') {\n      // Standard decorators branch\n      nameOrContext.addInitializer(function (this: ReactiveElement) {\n        controllerMap.set(this, new ContextProvider(this, {context}));\n      });\n      return {\n        get(this: ReactiveElement) {\n          return protoOrTarget.get.call(this as unknown as C);\n        },\n        set(this: ReactiveElement, value: V) {\n          controllerMap.get(this)?.setValue(value);\n          return protoOrTarget.set.call(this as unknown as C, value);\n        },\n        init(this: ReactiveElement, value: V) {\n          controllerMap.get(this)?.setValue(value);\n          return value;\n        },\n      };\n    } else {\n      // Experimental decorators branch\n      (protoOrTarget.constructor as typeof ReactiveElement).addInitializer(\n        (element: ReactiveElement): void => {\n          controllerMap.set(element, new ContextProvider(element, {context}));\n        }\n      );\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(\n        protoOrTarget,\n        nameOrContext\n      );\n      let newDescriptor: PropertyDescriptor;\n      if (descriptor === undefined) {\n        const valueMap = new WeakMap<ReactiveElement, ValueType>();\n        newDescriptor = {\n          get: function (this: ReactiveElement) {\n            return valueMap.get(this);\n          },\n          set: function (this: ReactiveElement, value: ValueType) {\n            controllerMap.get(this)!.setValue(value);\n            valueMap.set(this, value);\n          },\n          configurable: true,\n          enumerable: true,\n        };\n      } else {\n        const oldSetter = descriptor.set;\n        newDescriptor = {\n          ...descriptor,\n          set: function (this: ReactiveElement, value: ValueType) {\n            controllerMap.get(this)!.setValue(value);\n            oldSetter?.call(this, value);\n          },\n        };\n      }\n      Object.defineProperty(protoOrTarget, nameOrContext, newDescriptor);\n      return;\n    }\n  }) as ProvideDecorator<ValueType>;\n}\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise compatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\ntype Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\ntype ProvideDecorator<ContextType> = {\n  // legacy\n  <\n    K extends PropertyKey,\n    Proto extends Interface<Omit<ReactiveElement, 'renderRoot'>>,\n  >(\n    protoOrDescriptor: Proto,\n    name?: K\n  ): FieldMustMatchContextType<Proto, K, ContextType>;\n\n  // standard\n  <\n    C extends Interface<Omit<ReactiveElement, 'renderRoot'>>,\n    V extends ContextType,\n  >(\n    value: ClassAccessorDecoratorTarget<C, V>,\n    context: ClassAccessorDecoratorContext<C, V>\n  ): void;\n};\n\n// Note TypeScript requires the return type of a decorator to be `void | any`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype DecoratorReturn = void | any;\n\ntype FieldMustMatchContextType<Obj, Key extends PropertyKey, ContextType> =\n  // First we check whether the object has the property as a required field\n  Obj extends Record<Key, infer ProvidingType>\n    ? // Ok, it does, just check whether it's ok to assign the\n      // provided type to the consuming field\n      [ProvidingType] extends [ContextType]\n      ? DecoratorReturn\n      : {\n          message: 'providing field not assignable to context';\n          context: ContextType;\n          provided: ProvidingType;\n        }\n    : // Next we check whether the object has the property as an optional field\n      Obj extends Partial<Record<Key, infer Providing>>\n      ? // Check assignability again. Note that we have to include undefined\n        // here on the providing type because it's optional.\n        [Providing | undefined] extends [ContextType]\n        ? DecoratorReturn\n        : {\n            message: 'providing field not assignable to context';\n            context: ContextType;\n            consuming: Providing | undefined;\n          }\n      : // Ok, the field isn't present, so either someone's using provide\n        // manually, i.e. not as a decorator (maybe don't do that! but if you do,\n        // you're on your own for your type checking, sorry), or the field is\n        // private, in which case we can't check it.\n        DecoratorReturn;\n"],"names":["provide","context","protoOrTarget","nameOrContext","controllerMap","WeakMap","addInitializer","set","this","ContextProvider","get","call","value","setValue","init","constructor","element","descriptor","Object","getOwnPropertyDescriptor","newDescriptor","undefined","valueMap","configurable","enumerable","oldSetter","defineProperty"],"mappings":";;;;;YAqCgBA,GACdC,QAASA,IAIT,MAAQ,CACNC,EACAC,KAGA,MAAMC,EAAgB,IAAIC,QAI1B,GAA6B,iBAAlBF,EAKT,OAHAA,EAAcG,gBAAe,WAC3BF,EAAcG,IAAIC,KAAM,IAAIC,EAAgBD,KAAM,CAACP,YACrD,IACO,CACL,GAAAS,GACE,OAAOR,EAAcQ,IAAIC,KAAKH,KAC/B,EACD,GAAAD,CAA2BK,GAEzB,OADAR,EAAcM,IAAIF,OAAOK,SAASD,GAC3BV,EAAcK,IAAII,KAAKH,KAAsBI,EACrD,EACD,IAAAE,CAA4BF,GAE1B,OADAR,EAAcM,IAAIF,OAAOK,SAASD,GAC3BA,CACR,GAEE,CAEJV,EAAca,YAAuCT,gBACnDU,IACCZ,EAAcG,IAAIS,EAAS,IAAIP,EAAgBO,EAAS,CAACf,YAAU,IAKvE,MAAMgB,EAAaC,OAAOC,yBACxBjB,EACAC,GAEF,IAAIiB,EACJ,QAAmBC,IAAfJ,EAA0B,CAC5B,MAAMK,EAAW,IAAIjB,QACrBe,EAAgB,CACdV,IAAK,WACH,OAAOY,EAASZ,IAAIF,KACrB,EACDD,IAAK,SAAiCK,GACpCR,EAAcM,IAAIF,MAAOK,SAASD,GAClCU,EAASf,IAAIC,KAAMI,EACpB,EACDW,cAAc,EACdC,YAAY,EAEf,KAAM,CACL,MAAMC,EAAYR,EAAWV,IAC7Ba,EAAgB,IACXH,EACHV,IAAK,SAAiCK,GACpCR,EAAcM,IAAIF,MAAOK,SAASD,GAClCa,GAAWd,KAAKH,KAAMI,EACvB,EAEJ,CAED,YADAM,OAAOQ,eAAexB,EAAeC,EAAeiB,EAErD,CACF,CACH"}