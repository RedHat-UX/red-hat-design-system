{"version":3,"file":"pf-select.js","sourceRoot":"","sources":["pf-select.ts"],"names":[],"mappings":";;AAEA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAuB,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAC;AAChD,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAClD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,wDAAwD,CAAC;AAC3F,OAAO,EAAE,wBAAwB,EAAE,MAAM,gEAAgE,CAAC;AAC1G,OAAO,EAAE,mBAAmB,EAAE,MAAM,0DAA0D,CAAC;AAC/F,OAAO,EAAE,qBAAqB,EAAkB,MAAM,6DAA6D,CAAC;AAEpH,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;;;AAS1C,MAAM,OAAO,mBAAoB,SAAQ,KAAK;IAC5C;QACE,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACrC,CAAC;CACF;AAED,mFAAmF;AACnF,0FAA0F;AAC1F,iEAAiE;AACjE,oFAAoF;AAEpF;;;;;;;;;;;GAWG;AAEI,IAAM,QAAQ,GAAd,MAAM,QAAS,SAAQ,UAAU;IAAjC;;;QAOL,8BAAa,mBAAmB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAC;QAE1C,0BAAS,IAAI,qBAAqB,CAAC,IAAI,EAAE;YACvC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,mBAAmB,CAAC,IAAI,IAAI;SAC5E,CAAC,EAAC;QAEH,oCAAuC,CAAC,yCAAyC;QAEjF,iCAAiC;QACrB,YAAO,GAAiE,QAAQ,CAAC;QAO7F;;WAEG;QAC6D,qCAAgC,GAAG,oBAAoB,CAAC;QAExH;;WAEG;QAC6C,sBAAiB,GAAG,gBAAgB,CAAC;QAErF;;WAEG;QACyC,aAAQ,GAAG,KAAK,CAAC;QAE7D;;WAEG;QACyC,aAAQ,GAAG,KAAK,CAAC;QAE7D;;WAEG;QACoD,eAAU,GAAG,KAAK,CAAC;QAU1E;;;;WAIG;QAC0B,aAAQ,GAAc,QAAQ,CAAC;QAE5D,6FAA6F;QAI1F,iCAA4B,GAAG,KAAK,CAAC;QAmCxC,iCAAgB,IAAI,CAAC,QAAQ,EAAC;IAyThC,CAAC;IA1VC,gFAAgF;IAEhF;;;OAGG;IACH,IAAI,QAAQ,CAAC,WAAkC;QAC7C,uBAAA,IAAI,yBAAS,EAAE,QAAQ,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,uBAAA,IAAI,yBAAS,EAAE,KAAK,CAAC;IAC9B,CAAC;IAED;;OAEG;IACH,IAAI,OAAO;QACT,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5D,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,aAAa,CAAoB,CAAC;QACtF,IAAI,WAAW,EAAE,CAAC;YAChB,OAAO,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC;QAChC,CAAC;aAAM,CAAC;YACN,OAAO,IAAI,CAAC;QACd,CAAC;IACH,CAAC;IA6BQ,UAAU,CAAC,OAA6B;QAC/C,IAAI,IAAI,CAAC,OAAO,KAAK,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,2CAA2C,CAAC,CAAC;QACtD,CAAC;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC;YAC3B,uBAAA,IAAI,qDAAgB,MAApB,IAAI,CAAkB,CAAC;QACzB,CAAC;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YACzB,uBAAA,IAAI,2BAAW,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;QACjD,CAAC;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5B,uBAAA,IAAI,yBAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC1C,CAAC;QACD,4DAA4D;QAC5D,+BAA+B;QAC/B,wCAAwC;QACxC,IAAI;IACN,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;QAC7C,MAAM,EAAE,MAAM,GAAG,QAAQ,EAAE,SAAS,GAAG,OAAO,EAAE,MAAM,GAAG,EAAE,EAAE,GAAG,uBAAA,IAAI,uBAAO,CAAC;QAC5E,MAAM,EAAE,iBAAiB,EAAE,GAAG,uBAAA,IAAI,2BAAW,CAAC;QAC9C,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE,CAAC;QAC7D,MAAM,QAAQ,GAAG,uBAAA,IAAI,mDAAU,CAAC;QAChC,MAAM,eAAe,GAAG,uBAAA,IAAI,yBAAS,EAAE,eAAe,IAAI,EAAE,CAAC;QAC7D,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,OAAO,KAAK,UAAU,CAAC;QAC1C,MAAM,SAAS,GAAG,SAAS,IAAI,WAAW,CAAC;QAC3C,MAAM,KAAK,GAAG,QAAQ,IAAI,OAAO,CAAC;QAGlC,MAAM,WAAW,GACf,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,aAAa,CAAkB,oBAAoB,CAAC;gBACvD,EAAE,aAAa,EAAE;gBACjB,EAAE,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,CAAC;YAC1D,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,CAAC;QAC7D,MAAM,WAAW,GAAG,CAAC,IAAI,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC,CAAC,IAAI;YACrC,mGAAmG;YACnG,CAAC,CAAC,uBAAA,IAAI,yDAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC;QAE/D,OAAO,IAAI,CAAA;;oBAEK,QAAQ,CAAC,MAAM,CAAC;oBAChB,QAAQ,CAAC;YAChB,QAAQ;YACR,SAAS;YACT,QAAQ;YACR,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM;YAClB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,SAAS;SACzB,CAAC;;YAED,CAAC,CAAC,SAAS,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;kCAChC,IAAI,CAAC,gCAAgC;cACzD,MAAM,CAAC,eAAe,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAA;gCAChC,GAAG,CAAC,WAAW;kCACb,IAAI,CAAC,QAAQ;gCACf,uBAAA,IAAI,mDAAc,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,GAAG,CAAC,WAAW,YAAY,CAAC;2BACxE;YACf,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,sBAAsB,CAAC,IAAI,CAAA;;+BAE1B,IAAI,CAAC,eAAe,IAAI,CAAC,iBAAiB,IAAI,WAAW,CAAC;;8BAE3D,QAAQ;4BACV,CAAC,SAAS;gCACN,WAAW;2BAChB,uBAAA,IAAI,uDAAkB;WACtC;;;iCAGsB,SAAS,CAAC,QAAQ,EAAsB;;;;;mCAKtC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAqB;8BAC9C,uBAAA,IAAI,sDAAiB;4BACvB,GAAG,EAAE,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,EAAE;8BAC/B,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;;;6BAGtC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,KAAK,WAAW,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;;oCAEtE,eAAe,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM;sBAC/D;;;;;;;;;;wBAUE,CAAC,QAAQ;sBACX,QAAQ,CAAC;YAChB,SAAS,EAAE,GAAG,MAAM,IAAI,CAAC,IAAI;YAC7B,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC,MAAM;SACrC,CAAC;;4BAEa,uBAAA,IAAI,wDAAmB;2BACxB,uBAAA,IAAI,uDAAkB;wBACzB,QAAQ,CAAC,EAAE,UAAU,EAAE,CAAC;;yCAEP,IAAI,CAAC,WAAW;;iCAExB,uBAAA,IAAI,0DAAqB;;;;KAIrD,CAAC;IACJ,CAAC;IAEQ,OAAO,CAAC,OAA6B;QAC5C,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YAC5B,uBAAA,IAAI,sDAAiB,MAArB,IAAI,CAAmB,CAAC;QAC1B,CAAC;QACD,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC;YACzB,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAC/E,CAAC;QACD,wDAAwD;QACxD,2BAA2B;QAC3B,sDAAsD;QACtD,qCAAqC;QACrC,6CAA6C;QAC7C,sGAAsG;QACtG,mCAAmC;QACnC,yCAAyC;QACzC,8BAA8B;QAC9B,MAAM;QACN,IAAI;IACN,CAAC;IAED,YAAY;QACV,2DAA2D;QAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,6CAA6C;QAC7C,2CAA2C;QAC3C,wCAAwC;QACxC,IAAI;IACN,CAAC;IAgID;;OAEG;IACH,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,MAAM,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,MAAM,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;QAC/B,MAAM,IAAI,CAAC,cAAc,CAAC;IAC5B,CAAC;;;;;;;;IArTC,OAAO,IAAI,CAAC,UAAU,EAAE,cAAc,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;AAC5D,CAAC;;IAMC,2BAA2B;IAC3B,OAAO,IAAI,CAAC,OAAO,KAAK,UAAU,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC;AAC3E,CAAC;;IAMC,OAAO,uBAAA,IAAI,yBAAS,EAAE,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACrF,CAAC;;IAkJC,uBAAA,IAAI,yBAAS,EAAE,gBAAgB,EAAE,CAAC;IAClC,MAAM,cAAc,GAAG,GAAG,EAAE,CAAC,uBAAA,IAAI,yDAAgB,CAAC;IAClD,QAAQ,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,OAAO;QACP,oBAAoB;QACpB,yBAAyB;QACzB,kEAAkE;QAClE,8CAA8C;QAC9C,0DAA0D;QAC1D,QAAQ;QACR,WAAW;QACX;YACE,uBAAA,IAAI,qBAAY,iBAAiB,CAAC,EAAE,CAAW,IAAI,EAAE;gBACnD,KAAK,EAAE,IAAI,CAAC,OAAO,KAAK,UAAU;gBAClC,cAAc;gBACd,UAAU,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ;gBACrC,aAAa,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;oBAClC,uBAAA,IAAI,0BAAiB,IAAI,CAAC,QAAQ,MAAA,CAAC;oBACnC,MAAM,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,CAAC;oBACjD,uBAAA,IAAI,sDAAiB,MAArB,IAAI,CAAmB,CAAC;oBACxB,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,cAAc,EAAE,wBAAwB,CAAC,EAAE,CAAC,IAAI,EAAE;oBAChD,cAAc;oBACd,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO;iBAC7B,CAAC;aACH,CAAC,MAAA,CAAC;YACH,MAAM;IACV,CAAC;AACH,CAAC;4BAED,KAAK;IACH,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;IAC9C,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACpC,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;QAClB,MAAM,uBAAA,IAAI,uBAAO,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,QAAQ,IAAI,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;QAC1F,MAAM,aAAa,GAAG,uBAAA,IAAI,yBAAS,EAAE,UAAU,IAAI,uBAAA,IAAI,yBAAS,EAAE,QAAQ,CAAC;QAC3E,aAAa,EAAE,KAAK,EAAE,CAAC;IACzB,CAAC;SAAM,IAAI,uBAAA,IAAI,8BAAc,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChD,MAAM,uBAAA,IAAI,uBAAO,CAAC,IAAI,EAAE,CAAC;QACzB,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;IACxB,CAAC;AACH,CAAC;4BAED,KAAK;IACH,MAAM,IAAI,CAAC,cAAc,CAAC;IAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;SACzB,IAAI,EAAE;SACN,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;SAChB,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAE,CAAC,KAAK,CAAC;SAClB,IAAI,EAAE,CAAC;IACV,IAAI,CAAC,aAAa,CAAC,IAAI,mBAAmB,EAAE,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,KAAK,QAAQ;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;IAC1B,CAAC;AACH,CAAC;iEAEiB,KAAoB;IACpC,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;QAClB,KAAK,QAAQ;YACX,IAAI,CAAC,IAAI,EAAE,CAAC;YACZ,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;IAC1B,CAAC;AACH,CAAC;mEAEkB,KAAiB;IAClC,QAAQ,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,KAAK,QAAQ,CAAC;QACd,KAAK,UAAU;YACb,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBAChC,IAAI,IAAI,YAAY,UAAU;oBAC1B,IAAI,YAAY,QAAQ;wBACxB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAyB,CAAC,EACzD,CAAC;oBACD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACd,CAAC;YACH,CAAC;IACL,CAAC;AACH,CAAC;+DAEgB,KAAoB;IACnC,QAAQ,IAAI,CAAC,OAAO,EAAE,CAAC;QACrB,KAAK,QAAQ,CAAC;QACd,KAAK,UAAU;YACb,QAAQ,KAAK,CAAC,GAAG,EAAE,CAAC;gBAClB,KAAK,WAAW;oBACd,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;IACL,CAAC;AACH,CAAC;;IAGC,uBAAA,IAAI,yBAAS,EAAE,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE;QAC9C,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC;QAChC,MAAM,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC;yDAMa,GAAa,EAAE,KAAwB;IACrD,sBAAsB;IACtB,4BAA4B;IAC5B,4BAA4B;IAC5B,MAAM;AACN,CAAC;;IAMC,gBAAgB;IAChB,4CAA4C;IAC5C,4CAA4C;IAC5C,iBAAiB;IACjB,IAAI;IACJ,6CAA6C;AAC/C,CAAC;AArYe,eAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAET,0BAAiB,GAAmB,EAAE,GAAG,UAAU,CAAC,iBAAiB,EAAE,cAAc,EAAE,IAAI,EAAE,AAA5E,CAA6E;AAEvG,uBAAc,GAAG,IAAI,AAAP,CAAQ;AAW1B;IAAX,QAAQ,EAAE;yCAAkF;AAKhD;IAA5C,QAAQ,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC;iDAA0B;AAKN;IAA/D,QAAQ,CAAC,EAAE,SAAS,EAAE,qCAAqC,EAAE,CAAC;kEAAyD;AAKxE;IAA/C,QAAQ,CAAC,EAAE,SAAS,EAAE,qBAAqB,EAAE,CAAC;mDAAsC;AAKzC;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAAkB;AAKjB;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAAkB;AAKN;IAAtD,QAAQ,CAAC,EAAE,SAAS,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;4CAAoB;AAK9D;IAAX,QAAQ,EAAE;uCAAgB;AAGf;IAAX,QAAQ,EAAE;6CAAsB;AAOJ;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;0CAAgC;AAMzD;IAHF,QAAQ,CAAC;QACR,SAAS,EAAE,iCAAiC;QAC5C,IAAI,EAAE,OAAO;KACd,CAAC;8DAAsC;AAiCP;IAAhC,KAAK,CAAC,gBAAgB,CAAC;yCAAqC;AApGlD,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CA+ZpB","sourcesContent":["import type { PfChipRemoveEvent } from '@patternfly/elements/pf-chip/pf-chip.js';\n\nimport { LitElement, html, type PropertyValues } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { query } from 'lit/decorators/query.js';\nimport { repeat } from 'lit/directives/repeat.js';\nimport { styleMap } from 'lit/directives/style-map.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\n\nimport { ListboxController } from '@patternfly/pfe-core/controllers/listbox-controller.js';\nimport { RovingTabindexController } from '@patternfly/pfe-core/controllers/roving-tabindex-controller.js';\nimport { InternalsController } from '@patternfly/pfe-core/controllers/internals-controller.js';\nimport { FloatingDOMController, type Placement } from '@patternfly/pfe-core/controllers/floating-dom-controller.js';\n\nimport { PfOption } from './pf-option.js';\n\nimport styles from './pf-select.css';\n\nexport interface PfSelectUserOptions {\n  id: string;\n  value: string;\n}\n\nexport class PfSelectChangeEvent extends Event {\n  constructor() {\n    super('change', { bubbles: true });\n  }\n}\n\n// NOTE: this file contains numerous // comments, which ordinarily would be deleted\n// They are here to save the work already done on typeahead, which has a much more complex\n// accessibility model, and which is planned for the next release\n// * @fires filter - when the filter value changes. used to perform custom filtering\n\n/**\n * A select list enables users to select one or more items from a list.\n *\n * A select component consists of a toggle control to open and close a menu of actions or links.\n * Selects differ from dropdowns in that they persist selection,\n * whereas dropdowns are typically used to present a list of actions or links.\n *\n * @slot - insert `pf-option` and/or `pf-option-groups` here\n * @slot placeholder - placeholder text for the select. Overrides the `placeholder` attribute.\n * @fires open - when the menu toggles open\n * @fires close - when the menu toggles closed\n */\n@customElement('pf-select')\nexport class PfSelect extends LitElement {\n  static readonly styles = [styles];\n\n  static override readonly shadowRootOptions: ShadowRootInit = { ...LitElement.shadowRootOptions, delegatesFocus: true };\n\n  static readonly formAssociated = true;\n\n  #internals = InternalsController.of(this);\n\n  #float = new FloatingDOMController(this, {\n    content: () => this.shadowRoot?.getElementById('listbox-container') ?? null,\n  });\n\n  #listbox?: ListboxController<PfOption>; /* | ListboxActiveDescendantController */\n\n  /** Variant of rendered Select */\n  @property() variant: 'single' | 'checkbox' /* | 'typeahead' | 'typeaheadmulti' */ = 'single';\n\n  /**\n   * Accessible label for the select\n   */\n  @property({ attribute: 'accessible-label' }) accessibleLabel?: string;\n\n  /**\n   * Accessible label for chip group used to describe chips\n   */\n  @property({ attribute: 'accessible-current-selections-label' }) accessibleCurrentSelectionsLabel = 'Current selections';\n\n  /**\n   * multi listbox button text\n   */\n  @property({ attribute: 'items-selected-text' }) itemsSelectedText = 'items selected';\n\n  /**\n   * whether select is disabled\n   */\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  /**\n   * Whether the select listbox is expanded\n   */\n  @property({ type: Boolean, reflect: true }) expanded = false;\n\n  /**\n   * enable to flip listbox when it reaches boundary\n   */\n  @property({ attribute: 'enable-flip', type: Boolean }) enableFlip = false;\n\n  // @property() filter = '';\n\n  /** Current form value */\n  @property() value?: string;\n\n  /** Placeholder entry. Overridden by the `placeholder` slot */\n  @property() placeholder?: string;\n\n  /**\n   * Indicates initial popover position.\n   * There are 6 options: `bottom`, `top`, `top-start`, `top-end`, `bottom-start`, `bottom-end`.\n   * Default is `bottom`.\n   */\n  @property({ reflect: true }) position: Placement = 'bottom';\n\n  /** Flag indicating if selection badge should be hidden for checkbox variant,default false */\n  @property({\n    attribute: 'checkbox-selection-badge-hidden',\n    type: Boolean,\n  }) checkboxSelectionBadgeHidden = false;\n\n  // @property({ attribute: false }) customFilter?: (option: PfOption) => boolean;\n\n  /**\n   * Single select option value for single select menus,\n   * or array of select option values for multi select.\n   */\n  set selected(optionsList: PfOption | PfOption[]) {\n    this.#listbox?.setValue(optionsList);\n  }\n\n  get selected(): PfOption | PfOption[] | undefined {\n    return this.#listbox?.value;\n  }\n\n  /**\n   * array of slotted options\n   */\n  get options(): PfOption[] {\n    const opts = Array.from(this.querySelectorAll('pf-option'));\n    const placeholder = this.shadowRoot?.getElementById('placeholder') as PfOption | null;\n    if (placeholder) {\n      return [placeholder, ...opts];\n    } else {\n      return opts;\n    }\n  }\n\n  // @query('pf-chip-group') private _chipGroup?: PfChipGroup;\n\n  // @query('#toggle-input') private _input?: HTMLInputElement;\n\n  @query('#toggle-button') private _toggle?: HTMLButtonElement;\n\n  #lastSelected = this.selected;\n\n  get #listboxElement() {\n    return this.shadowRoot?.getElementById('listbox') ?? null;\n  }\n\n  /**\n   * whether select has badge for number of selected items\n   */\n  get #hasBadge() {\n    // NOTE: revisit this in v5\n    return this.variant === 'checkbox' && !this.checkboxSelectionBadgeHidden;\n  }\n\n  /**\n   * array of text content from listbox's array of selected options\n   */\n  get #valueTextArray() {\n    return this.#listbox?.selectedOptions.map(option => option.optionText || '') ?? [];\n  }\n\n  override willUpdate(changed: PropertyValues<this>) {\n    if (this.variant === 'checkbox') {\n      import('@patternfly/elements/pf-badge/pf-badge.js');\n    }\n    if (changed.has('variant')) {\n      this.#variantChanged();\n    }\n    if (changed.has('value')) {\n      this.#internals.setFormValue(this.value ?? '');\n    }\n    if (changed.has('disabled')) {\n      this.#listbox!.disabled = this.disabled;\n    }\n    // TODO: handle filtering in the element, not the controller\n    // if (changed.has('filter')) {\n    //   this.#listbox.filter = this.filter;\n    // }\n  }\n\n  render() {\n    const { disabled, expanded, variant } = this;\n    const { anchor = 'bottom', alignment = 'start', styles = {} } = this.#float;\n    const { computedLabelText } = this.#internals;\n    const { height, width } = this.getBoundingClientRect() || {};\n    const hasBadge = this.#hasBadge;\n    const selectedOptions = this.#listbox?.selectedOptions ?? [];\n    const typeahead = variant.startsWith('typeahead');\n    const checkboxes = variant === 'checkbox';\n    const offscreen = typeahead && 'offscreen';\n    const badge = hasBadge && 'badge';\n\n\n    const placeholder =\n      this.placeholder ||\n      this.querySelector<HTMLSlotElement>('[slot=placeholder]')\n        ?.assignedNodes()\n        ?.reduce((acc, node) => `${acc}${node.textContent}`, '') ||\n      this.variant === 'checkbox' ? 'Options' : 'Select a value';\n    const buttonLabel = (this.variant === 'checkbox' ? null\n                      // : this.variant === 'typeaheadmulti' ? `${this.#valueTextArray.length} ${this.itemsSelectedText}`\n                      : this.#valueTextArray.at(0)) ?? placeholder;\n\n    return html`\n      <div id=\"outer\"\n           style=\"${styleMap(styles)}\"\n           class=\"${classMap({\n             disabled,\n             typeahead,\n             expanded,\n             [anchor]: !!anchor,\n             [alignment]: !!alignment,\n           })}\">\n        <div id=\"toggle\">\n          ${!(typeahead && selectedOptions.length < 1) ? '' : html`\n          <pf-chip-group label=\"${this.accessibleCurrentSelectionsLabel}\">\n            ${repeat(selectedOptions, opt => opt.id, opt => html`\n            <pf-chip id=\"chip-${opt.textContent}\"\n                     .readonly=\"${this.disabled}\"\n                     @remove=\"${this.#onChipRemove.bind(this, opt)}\">${opt.textContent}</pf-chip>`)}\n          </pf-chip-group>`}\n          ${!typeahead ? '' : /* TODO: aria attrs */ html`\n          <input id=\"toggle-input\"\n                 aria-label=\"${this.accessibleLabel ?? (computedLabelText || buttonLabel)}\"\n                 aria-autocomplete=\"both\"\n                 ?disabled=\"${disabled}\"\n                 ?hidden=\"${!typeahead}\"\n                 placeholder=\"${buttonLabel}\"\n                 @input=\"${this.#onTypeaheadInput}\">\n          `}\n          <button id=\"toggle-button\"\n                  role=\"combobox\"\n                  aria-hidden=\"${typeahead.toString() as 'true' | 'false'}\"\n                  aria-labelledby=\"button-text\"\n                  aria-describedby=\"placeholder\"\n                  aria-controls=\"listbox\"\n                  aria-haspopup=\"listbox\"\n                  aria-expanded=\"${String(this.expanded) as 'true' | 'false'}\"\n                  @keydown=\"${this.#onButtonKeydown}\"\n                  @click=\"${() => !typeahead && this.toggle()}\"\n                  tabindex=\"${ifDefined(typeahead ? -1 : undefined)}\">\n            <span style=\"display: contents;\" id=\"button-text\">\n              <span id=\"toggle-text\"\n                    class=\"${classMap({ offscreen, badge })}\">${buttonLabel}</span>${!hasBadge ? '' : html`\n              <span id=\"toggle-badge\">\n                <pf-badge number=\"${selectedOptions.length}\">${selectedOptions.length}</pf-badge>\n              </span>`}\n            </span>\n            <svg viewBox=\"0 0 320 512\"\n                 fill=\"currentColor\"\n                 aria-hidden=\"true\">\n              <path d=\"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z\"></path>\n            </svg>\n          </button>\n        </div>\n        <div id=\"listbox-container\"\n             ?hidden=\"${!expanded}\"\n             style=\"${styleMap({\n               marginTop: `${height || 0}px`,\n               width: width ? `${width}px` : 'auto',\n             })}\">\n          <div id=\"listbox\"\n               @focusout=\"${this.#onListboxFocusout}\"\n               @keydown=\"${this.#onListboxKeydown}\"\n               class=\"${classMap({ checkboxes })}\">\n            <pf-option id=\"placeholder\" disabled>\n              <slot name=\"placeholder\">${this.placeholder}</slot>\n            </pf-option>\n            <slot @slotchange=\"${this.#onListboxSlotchange}\"></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  override updated(changed: PropertyValues<this>) {\n    if (changed.has('expanded')) {\n      this.#expandedChanged();\n    }\n    if (changed.has('value')) {\n      this.dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));\n    }\n    // whether select has removable chips for selected items\n    // NOTE: revisit this in v5\n    // const hasChips = this.variant === 'typeaheadmulti';\n    // reset input if chip has been added\n    // if (this.hasChips && this._input?.value) {\n    //   const chip = this.shadowRoot?.querySelector(`pf-chip#chip-${this._input?.value}`) as HTMLElement;\n    //   if (chip && this._chipGroup) {\n    //     this._chipGroup.focusOnChip(chip);\n    //     this._input.value = '';\n    //   }\n    // }\n  }\n\n  firstUpdated() {\n    // kick the renderer to that the placeholder gets picked up\n    this.requestUpdate();\n    // TODO: don't do filtering in the controller\n    // if (this.variant === 'typeaheadmulti') {\n    //   this.#listbox.filter = this.filter;\n    // }\n  }\n\n  #variantChanged() {\n    this.#listbox?.hostDisconnected();\n    const getHTMLElement = () => this.#listboxElement;\n    switch (this.variant) {\n      // TODO\n      // case 'typeahead':\n      // case 'typeaheadmulti':\n      //   this.#controller = new ListboxController.of<PfOption>(this, {\n      //     multi: this.variant==='typeaheadmulti',\n      //     a11yController: ActiveDescendantController.of(this)\n      //   });\n      //   break;\n      default:\n        this.#listbox = ListboxController.of<PfOption>(this, {\n          multi: this.variant === 'checkbox',\n          getHTMLElement,\n          isSelected: option => option.selected,\n          requestSelect: (option, selected) => {\n            this.#lastSelected = this.selected;\n            option.selected = !option.disabled && !!selected;\n            this.#selectedChanged();\n            return true;\n          },\n          a11yController: RovingTabindexController.of(this, {\n            getHTMLElement,\n            getItems: () => this.options,\n          }),\n        });\n        break;\n    }\n  }\n\n  async #expandedChanged() {\n    const will = this.expanded ? 'close' : 'open';\n    this.dispatchEvent(new Event(will));\n    if (this.expanded) {\n      await this.#float.show({ placement: this.position || 'bottom', flip: !!this.enableFlip });\n      const focusableItem = this.#listbox?.activeItem ?? this.#listbox?.nextItem;\n      focusableItem?.focus();\n    } else if (this.#lastSelected === this.selected) {\n      await this.#float.hide();\n      this._toggle?.focus();\n    }\n  }\n\n  async #selectedChanged() {\n    await this.updateComplete;\n    this.value = [this.selected]\n      .flat()\n      .filter(x => !!x)\n      .map(x => x!.value)\n      .join();\n    this.dispatchEvent(new PfSelectChangeEvent());\n    switch (this.variant) {\n      case 'single':\n        this.hide();\n        this._toggle?.focus();\n    }\n  }\n\n  #onListboxKeydown(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Escape':\n        this.hide();\n        this._toggle?.focus();\n    }\n  }\n\n  #onListboxFocusout(event: FocusEvent) {\n    switch (this.variant) {\n      case 'single':\n      case 'checkbox':\n        if (this.expanded) {\n          const root = this.getRootNode();\n          if (root instanceof ShadowRoot ||\n              root instanceof Document &&\n              !this.options.includes(event.relatedTarget as PfOption)\n          ) {\n            this.hide();\n          }\n        }\n    }\n  }\n\n  #onButtonKeydown(event: KeyboardEvent) {\n    switch (this.variant) {\n      case 'single':\n      case 'checkbox':\n        switch (event.key) {\n          case 'ArrowDown':\n            this.show();\n        }\n    }\n  }\n\n  #onListboxSlotchange() {\n    this.#listbox?.setOptions(this.options);\n    this.options.forEach((option, index, options) => {\n      option.setSize = options.length;\n      option.posInSet = index;\n    });\n  }\n\n  /**\n   * handles chip's remove button clicking\n   * @param opt chip text to be removed from values\n   */\n  #onChipRemove(opt: PfOption, event: PfChipRemoveEvent) {\n  //   if (event.chip) {\n  //     opt.selected = false;\n  //     this._input?.focus();\n  //   }\n  }\n\n  /**\n   * handles typeahead combobox input event\n   */\n  #onTypeaheadInput() {\n    // update filter\n    // if (this.filter !== this._input?.value) {\n    //   this.filter = this._input?.value || '';\n    //   this.show();\n    // }\n    // TODO: handle hiding && aria hiding options\n  }\n\n  /**\n   * Opens the dropdown\n   */\n  async show() {\n    this.expanded = true;\n    await this.updateComplete;\n  }\n\n  /**\n   * Closes listbox\n   */\n  async hide() {\n    this.expanded = false;\n    await this.updateComplete;\n  }\n\n  /**\n   * toggles popup based on current state\n   */\n  async toggle() {\n    this.expanded = !this.expanded;\n    await this.updateComplete;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-select': PfSelect;\n  }\n}\n"]}