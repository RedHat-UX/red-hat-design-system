{"version":3,"file":"BaseLabel.js","sourceRoot":"","sources":["BaseLabel.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;;;AAIrF;;EAEE;AACF,MAAM,OAAgB,SAAU,SAAQ,UAAU;IAAlD;;QASE,2DAA2D;QACjD,UAAK,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAgC3D,CAAC;IA9BU,MAAM;QACb,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QACtC,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACxD,OAAO,IAAI,CAAA;;oBAEK,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;wCACrD,IAAI,CAAC,iBAAiB,EAAE,EAAE;;UAExD,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE;;KAEhC,CAAC;IACJ,CAAC;;AAtBe,gBAAM,GAAG,CAAC,MAAM,CAAC,CAAC","sourcesContent":["import { LitElement, html } from 'lit';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport styles from './BaseLabel.css';\n\n/**\n * Base label class\n*/\nexport abstract class BaseLabel extends LitElement {\n  static readonly styles = [styles];\n\n  abstract variant?: string;\n\n  abstract color?: string;\n\n  abstract icon?: string;\n\n  /** Represents the state of the anonymous and icon slots */\n  protected slots = new SlotController(this, null, 'icon');\n\n  override render() {\n    const { variant, color, icon } = this;\n    const hasIcon = !!icon || this.slots.hasSlotted('icon');\n    return html`\n      <span id=\"container\"\n            class=${classMap({ hasIcon, [variant ?? '']: !!variant, [color ?? '']: !!color })}>\n        <slot name=\"icon\" part=\"icon\">${this.renderDefaultIcon?.()}</slot>\n        <slot id=\"text\"></slot>\n        ${this.renderSuffix?.() ?? ''}\n      </span>\n    `;\n  }\n\n  /**\n   * Fallback content for the icon slot. When the `icon` attribute is set, it\n   * should render an icon corresponding to the value.\n   *\n   * @example ```html\n   * <pf-icon icon=${this.icon}></pf-icon>\n   * ```\n   */\n  protected abstract renderDefaultIcon?(): unknown;\n\n  /**\n   * Optional override to render content after the anonymous slot.\n   * @example ```html\n   * <button id=\"close-button\">X</button>\n   * ```\n   */\n  protected abstract renderSuffix?(): unknown;\n}\n"]}