{"version":3,"file":"pf-label.spec.js","sourceRoot":"","sources":["pf-label.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { getColor, hexToRgb } from '@patternfly/pfe-tools/test/hex-to-rgb.js';\nimport { PfLabel } from '@patternfly/elements/pf-label/pf-label.js';\nimport { PfIcon } from '@patternfly/elements/pf-icon/pf-icon.js';\n\nimport '@patternfly/pfe-tools/test/stub-logger.js';\n\nconst example = html`\n  <pf-label>Default</pf-label>\n`;\n\nconst exampleWithColorAttribute = html`\n  <pf-label color=\"red\">Red</pf-label>\n`;\n\nconst exampleWithColorAttributeEmpty = html`\n  <pf-label color=\"\">Default</pf-label>\n`;\n\nconst exampleWithOutlineAttribute = html`\n  <pf-label variant=\"outline\">Default Outline</pf-label>\n`;\n\nconst exampleWithCompactAttribute = html`\n  <pf-label compact>Default Compact</pf-label>\n`;\n\n\ndescribe('<pf-label>', function() {\n  before(function() {\n    // replace the default built-in icon set resolveIconName function\n    // with one that loads local icons.  we don't want tests dependent on\n    // prod servers.\n    PfIcon.addIconSet('rh', function(name: string) {\n      return new URL(`/elements/pf-icon/test/${name.replace('rh', 'rh-icon')}.svg`);\n    });\n  });\n\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-label')).to.be.an.instanceof(PfLabel);\n  });\n\n  it('should upgrade', async function() {\n    const el = await createFixture<PfLabel>(example);\n    const klass = customElements.get('pf-label');\n    expect(el)\n        .to.be.an.instanceOf(klass)\n        .and\n        .to.be.an.instanceOf(PfLabel);\n  });\n\n  it('should display default variant', async function() {\n    const el = await createFixture<PfLabel>(example);\n    await el.updateComplete;\n    const container = el.shadowRoot!.querySelector('#container')!;\n    const beforeStyles = getComputedStyle(container, '::before');\n\n    expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#151515'));\n    expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#f5f5f5'));\n    expect(beforeStyles.getPropertyValue('border-color')).to.equal('rgb(210, 210, 210)');\n  });\n\n  it('should display color variant if color attribute is present', async function() {\n    const el = await createFixture<PfLabel>(exampleWithColorAttribute);\n    await el.updateComplete;\n    const container = el.shadowRoot!.querySelector('#container')!;\n    const beforeStyles = getComputedStyle(container, '::before');\n\n    expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#7d1007'));\n    expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#faeae8'));\n    expect(beforeStyles.getPropertyValue('border-color')).to.equal('rgb(201, 25, 11)');\n  });\n\n  it('should display default variant if color attribute is present but empty', async function() {\n    const el = await createFixture<PfLabel>( exampleWithColorAttributeEmpty);\n    await el.updateComplete;\n    const container = el.shadowRoot!.querySelector('#container')!;\n    const beforeStyles = getComputedStyle(container, '::before');\n\n    expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#151515'));\n    expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#f5f5f5'));\n    expect(beforeStyles.getPropertyValue('border-color')).to.equal('rgb(210, 210, 210)');\n  });\n\n  it('should display outline variant if the attribute outline is present', async function() {\n    const el = await createFixture<PfLabel>(exampleWithOutlineAttribute);\n    await el.updateComplete;\n    const container = el.shadowRoot!.querySelector('#container')!;\n    const beforeStyles = getComputedStyle(container, '::before');\n\n    expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#151515'));\n    expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#ffffff'));\n    expect(beforeStyles.getPropertyValue('border-color')).to.equal('rgb(210, 210, 210)');\n  });\n\n  describe('with valid icon attribute', function() {\n    let element: PfLabel;\n    beforeEach(async function() {\n      element = await createFixture<PfLabel>(html`\n        <pf-label icon=\"rh-icon-virtual-storage-stack\">Default Icon</pf-label>\n      `);\n      element.updateComplete;\n    });\n    it('should render a pf-icon', async function() {\n      const icon = element.shadowRoot!.querySelector('pf-icon')!;\n      expect(icon.hidden).to.be.false;\n      expect(icon.icon).to.equal(element.icon);\n    });\n  });\n\n  describe('with empty icon attribute', function() {\n    let element: PfLabel;\n    beforeEach(async function() {\n      element = await createFixture<PfLabel>(html`\n        <pf-label icon=\"\">Default</pf-label>\n      `);\n      element.updateComplete;\n    });\n    it('should not render a pf-icon', async function() {\n      const icon = element.shadowRoot!.querySelector('pf-icon')!;\n      expect(icon.hidden).to.be.true;\n      expect(icon.icon).to.be.undefined;\n    });\n  });\n\n  it('should display compact version if the attribute is-compact is present', async function() {\n    const el = await createFixture<PfLabel>(exampleWithCompactAttribute);\n    await el.updateComplete;\n    const container = el.shadowRoot!.querySelector('#container')!;\n    const beforeStyles = getComputedStyle(container, '::before');\n    const containerStyles = getComputedStyle(container);\n\n    expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#151515'));\n    expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#f5f5f5'));\n    expect(beforeStyles.getPropertyValue('border-color')).to.equal('rgb(210, 210, 210)');\n\n    expect(containerStyles.getPropertyValue('padding-top')).to.equal('0px');\n    expect(containerStyles.getPropertyValue('padding-right')).to.equal('8px'); // 0.5rem = 8px @ 16px browser default\n    expect(containerStyles.getPropertyValue('padding-bottom')).to.equal('0px');\n    expect(containerStyles.getPropertyValue('padding-left')).to.equal('8px'); // 0.5rem = 8px @ 16px browser default\n  });\n});\n"]}