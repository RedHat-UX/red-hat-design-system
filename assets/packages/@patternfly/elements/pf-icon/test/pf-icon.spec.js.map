{"version":3,"file":"pf-icon.spec.js","sourceRoot":"","sources":["pf-icon.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, fixture, oneEvent } from '@open-wc/testing';\nimport { html, render, type TemplateResult } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nimport { PfIcon } from '@patternfly/elements/pf-icon/pf-icon.js';\n\nimport '@patternfly/pfe-tools/test/stub-logger.js';\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-ignore: don't want to include these\nimport aed from './rh-icon-aed.js';\n// @ts-ignore: don't want to include these\nimport api from './rh-icon-api.js';\n// @ts-ignore: don't want to include these\nimport atom from './rh-icon-atom.js';\n// @ts-ignore: don't want to include these\nimport bike from './rh-icon-bike.js';\n\n/* eslint-enable @typescript-eslint/ban-ts-comment */\n\nconst TEST_ICONS = { aed, api, atom, bike };\n\nasync function expectIconsEqual(element: PfIcon, tpl: TemplateResult) {\n  await oneEvent(element, 'load');\n  const rootNode = render(tpl, document.createDocumentFragment());\n  const actual = element.shadowRoot?.querySelector('svg');\n  const expected = (rootNode.parentNode as DocumentFragment).querySelector('svg');\n  expect(actual?.outerHTML).to.equal(expected?.outerHTML);\n}\n\ndescribe('<pf-icon>', function() {\n  let element: PfIcon;\n\n  beforeEach(async function() {\n    element = await fixture(html`<pf-icon></pf-icon>`);\n  });\n\n  afterEach(function() {\n    PfIcon.reset();\n  });\n\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-icon')).to.be.an.instanceof(PfIcon);\n  });\n\n  it('should upgrade', function() {\n    expect(element, 'pf-icon should be an instance of PfIcon')\n        .to.be.an.instanceOf(customElements.get('pf-icon'))\n        .and\n        .to.be.an.instanceOf(PfIcon);\n  });\n\n  describe('addIconSet', function() {\n    describe('when 1st argument is not a string', function() {\n      beforeEach(function() {\n        PfIcon.addIconSet(\n          // @ts-expect-error: testing bad input\n          {},\n          () => void 0,\n        );\n      });\n      it('should warn', function() {\n        expect(Logger.warn).to.have.been.calledOnceWith(`[PfIcon]: the first argument to addIconSet must be a string.`);\n      });\n    });\n\n    describe('when 2nd argument is not a function', function() {\n      beforeEach(function() {\n        PfIcon.addIconSet(\n          'rh',\n          // @ts-expect-error: testing bad input\n          'haha'\n        );\n      });\n      it('should warn', function() {\n        expect(Logger.warn).to.have.been.calledOnceWith(`[PfIcon]: the second argument to addIconSet must be a function.`);\n      });\n    });\n\n    describe('with a good resolve function', function() {\n      beforeEach(async function() {\n        // replace the default built-in icon set resolveIconName function\n        // with one that loads local icons.  we don't want tests dependent on\n        // prod servers.\n        PfIcon.addIconSet('rh', (_, icon: string) => TEST_ICONS[icon as keyof typeof TEST_ICONS]);\n        element.set = 'rh';\n      });\n\n      for (const [iconName, icon] of Object.entries(TEST_ICONS)) {\n        it('loads icons', async function() {\n          // wait for each test icon to be loaded, then move to the next one\n          element.icon = iconName;\n          await expectIconsEqual(element, icon);\n        });\n      }\n\n      it('should hide the fallback when it successfully upgrades', async function() {\n        element.innerHTML = `<p>Icon failed to load.</p>`;\n        element.icon = 'bike';\n        await oneEvent(element, 'load');\n        expect(element.shadowRoot?.querySelector('[part=fallback]'))\n            .to.have.attribute('hidden');\n      });\n\n      it('should change color when pf-icon\\'s color CSS property is changed', async function() {\n        const newColor = 'rgb(11, 12, 13)';\n        element.style.setProperty('color', newColor);\n        element.icon = 'atom';\n        await oneEvent(element, 'load');\n        const color = getComputedStyle(element.shadowRoot!.querySelector('svg')!).getPropertyValue('color');\n        expect(color).to.equal(newColor);\n      });\n    });\n  });\n\n  describe('changing size attribute', function() {\n    const sizes: PfIcon['size'][] = ['sm', 'md', 'lg', 'xl'];\n    let lastSize = { width: 0, height: 0 };\n\n    for (const size of sizes) {\n      it('should change size based on the attribute value', async function() {\n        element.size = size;\n        await element.updateComplete;\n        const { width, height } = element.getBoundingClientRect();\n        expect(width, `size \"${size}\" should be wider than the size below`).to.be.greaterThan(lastSize.width);\n        expect(height, `size \"${size}\" should be taller than the size below`).to.be.greaterThan(lastSize.height);\n        lastSize = { width, height };\n      });\n    }\n  });\n\n  describe('when the icon has a custom set attribute', function() {\n    let element: PfIcon;\n    before(async function() {\n      element = await fixture(html`<pf-icon set=\"asdfasdf\" icon=\"foo\"></pf-icon>`);\n    });\n    describe('then the icon set is registered', function() {\n      beforeEach(async function() {\n        PfIcon.addIconSet('asdfasdf', () =>\n          import(`./rh-icon-${'bike'}.js`)\n              .then(m => m.default));\n        await oneEvent(element, 'load');\n      });\n      it(`should render the icon`, function() {\n        expectIconsEqual(element, bike);\n      });\n    });\n  });\n\n  describe('when the icon has a fallback content', function() {\n    let element: PfIcon;\n    before(async function() {\n      element = await fixture(html`\n        <pf-icon icon=\"no-scrubs\">\n          <p>Image failed to load.</p>.\n        </pf-icon>`);\n      await oneEvent(element, 'error');\n    });\n    it('should display the fallback', function() {\n      expect(element.shadowRoot!.querySelector('svg')).to.not.be.ok;\n      expect(element).shadowDom.to.equal(`\n        <div id=\"container\" aria-hidden=\"true\">\n          <span part=\"fallback\">\n            <slot></slot>\n          </span>\n        </div>`);\n    });\n  });\n});\n"]}