{"version":3,"file":"pf-timestamp.spec.js","sourceRoot":"","sources":["pf-timestamp.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { PfTimestamp } from '@patternfly/elements/pf-timestamp/pf-timestamp.js';\n\ndescribe('<pf-timestamp>', function() {\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-timestamp')).to.be.an.instanceof(PfTimestamp);\n  });\n\n  it('should upgrade', async function() {\n    const element = await createFixture<PfTimestamp>(html`<pf-timestamp></pf-timestamp>`);\n    expect(element, 'the <pf-timestamp> should be an instance of PfTimestamp')\n        .to.be.an.instanceof(customElements.get('pf-timestamp'))\n        .and\n        .to.be.an.instanceof(PfTimestamp);\n  });\n\n  it('should show the current date by default with default formatting', async function() {\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp></pf-timestamp>\n    `);\n\n    const expected = new Date().toLocaleString();\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should set the correct ISO date on the datetime attribute in the time element', async function() {\n    const date = new Date('Sat Jan 01 2022 00:00:00');\n    const dateString = date.toString();\n    const expected = date.toISOString();\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\"></pf-timestamp>\n    `);\n\n    expect(element.isoString).to.equal(expected);\n  });\n\n  it('should show a passed in date with default formatting', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(new Date(dateString).toLocaleString());\n  });\n\n  it('should show custom formatting when date-format and time-format are passed in', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const expected = new Date(dateString).toLocaleString('en-US', { dateStyle: 'full', timeStyle: 'short' });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\" date-format=\"full\" time-format=\"short\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show only a date when date-format is passed in', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const expected = new Date(dateString).toLocaleString('en-US', { dateStyle: 'full' });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\" date-format=\"full\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show only time when time-format is passed in', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const expected = new Date(dateString).toLocaleString('en-US', { timeStyle: 'short' });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\" time-format=\"short\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show custom formatting when customFormat is passed in', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const options: Intl.DateTimeFormatOptions = {\n      year: '2-digit',\n      month: 'short',\n      weekday: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n    };\n    const expected = new Date(dateString).toLocaleString('en-US', options);\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"Sat Jan 01 2022 00:00:00\" .customFormat=${options}></pf-timestamp>\n    `);\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a custom suffix when display-suffix is passed in', async function() {\n    const dateString = 'Sat Jan 01 2022 00:00:00';\n    const suffix = 'US Eastern';\n    const expected = `${new Date(dateString).toLocaleString('en-US')} ${suffix}`;\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\" display-suffix=\"${suffix}\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a 12 hour time', async function() {\n    const dateString = 'Sat Jan 01 2022 13:00:00';\n    const expected = new Date(dateString).toLocaleString('en-US');\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a 24 hour time when hour-12 is set to false', async function() {\n    const dateString = 'Sat Jan 01 2022 13:00:00';\n    const expected = new Date(dateString).toLocaleString('en-US', { hour12: false });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${dateString}\" hour-12=\"false\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show with locale passed in', async function() {\n    const date = new Date(2022, 1, 1).toString();\n    const expected = new Date(date).toLocaleString('en-GB');\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date}\" locale=\"en-GB\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a 12 hour time by default for US locale', async function() {\n    const date = new Date(2022, 1, 1, 13, 0).toString();\n    const expected = new Date(date).toLocaleString('en-US');\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date}\" locale=\"en-US\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a 24 hour time for US locale when hour-12 is false', async function() {\n    const date = new Date(2022, 1, 1, 13, 0).toString();\n    const expected = new Date(date).toLocaleString('en-US', { hour12: false });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date}\" locale=\"en-US\" hour-12=\"false\"></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show a 12 hour time for a 24 hour locale when hour-12 is passed', async function() {\n    const date = new Date(2022, 1, 1, 13, 0).toString();\n    const expected = new Date(date).toLocaleString('en-GB', { hour12: true });\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date}\" locale=\"en-GB\" hour-12></pf-timestamp>\n    `);\n\n    expect(element.time).to.equal(expected);\n  });\n\n  it('should show relative time of the moment', async function() {\n    const date = new Date();\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date.toString()}\" relative></pf-timestamp>\n    `);\n\n    expect(element.time).to.match(/just now/);\n  });\n\n  it('should show relative time in the past', async function() {\n    const date = new Date(2015, 7, 9, 14, 57, 0);\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date.toString()}\" relative></pf-timestamp>\n    `);\n\n    expect(element.time).to.match(/\\d+ years ago/);\n  });\n\n  it('should show relative time in the future', async function() {\n    const date = new Date(2099, 7, 9, 14, 57, 0);\n    const element = await createFixture<PfTimestamp>(html`\n      <pf-timestamp date=\"${date.toString()}\" relative></pf-timestamp>\n    `);\n\n    expect(element.time).to.match(/in \\d+ years/);\n  });\n});\n"]}