{"version":3,"file":"pf-spinner.spec.js","sourceRoot":"","sources":["pf-spinner.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { PfSpinner } from '@patternfly/elements/pf-spinner/pf-spinner.js';\n\ndescribe('<pf-spinner>', function() {\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-spinner')).to.be.an.instanceof(PfSpinner);\n  });\n\n  it('should upgrade', async function() {\n    const element = await createFixture<PfSpinner>(html`<pf-spinner>Loading...</pf-spinner>`);\n    expect(element, 'pf-spinner should be an instance of PfeSpinner')\n        .to.be.an.instanceOf(customElements.get('pf-spinner'))\n        .and\n        .to.be.an.instanceOf(PfSpinner);\n  });\n\n  it('should properly initialize the component', async function() {\n    const element = await createFixture<PfSpinner>(html`\n      <pf-spinner>Loading...</pf-spinner>\n    `);\n    expect(element.getAttribute('size')).to.equal('xl');\n  });\n\n  describe('basic usage', function() {\n    let element: PfSpinner;\n    beforeEach(async function() {\n      element = await createFixture<PfSpinner>(html`<pf-spinner>Loading...</pf-spinner>`);\n    });\n    it('is accessible', async function() {\n      await expect(element).to.be.accessible();\n    });\n  });\n\n  describe('size attribute', function() {\n    let element: PfSpinner;\n\n    function convertRemToPixels(rem: `${number}rem`) {\n      const { fontSize } = getComputedStyle(document.documentElement);\n      return parseFloat(rem) * parseFloat(fontSize);\n    }\n\n    beforeEach(async function() {\n      element = await createFixture<PfSpinner>(html`\n        <pf-spinner>Loading...</pf-spinner>\n      `);\n    });\n\n    for (const [size, expected] of [\n      ['sm', '0.625rem'],\n      ['md', '1.125rem'],\n      ['lg', '1.5rem'],\n      ['xl', '3.375rem'],\n    ] as const) {\n      it(size, async function() {\n        element.size = size;\n        await element.updateComplete;\n        expect(element.offsetWidth).to.equal(convertRemToPixels(expected));\n      });\n    }\n  });\n\n  describe('diameter attribute', function() {\n    it('sets the element diameter', async function() {\n      const customDiameterValue = 80;\n      const element = await createFixture<PfSpinner>(html`\n        <pf-spinner diameter=\"${customDiameterValue}px\">Loading...</pf-spinner>\n      `);\n\n      expect(element.offsetWidth).to.equal(customDiameterValue);\n    });\n  });\n});\n"]}