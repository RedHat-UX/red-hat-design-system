{"version":3,"file":"pf-tile.spec.js","sourceRoot":"","sources":["pf-tile.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html, nextFrame } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { PfTile } from '@patternfly/elements/pf-tile/pf-tile.js';\n\nconst TEMPLATE = html`\n  <pf-tile>\n    <pf-icon slot=\"icon\" set=\"fas\" icon=\"bell\" size=\"md\" loading=\"idle\"></pf-icon>\n    Default Content\n    <div slot=\"body\">Subtext goes here</div>\n  </pf-tile>\n`;\n\n\ndescribe('<pf-tile>', function() {\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-tile')).to.be.an.instanceof(PfTile);\n  });\n\n  it('should upgrade', async function() {\n    const el = await createFixture <PfTile>(TEMPLATE);\n    const klass = customElements.get('pf-tile');\n    expect(el)\n        .to.be.an.instanceOf(klass)\n        .and\n        .to.be.an.instanceOf(PfTile);\n  });\n\n  it('should have a selected styles when selected', async function() {\n    const el = await createFixture <PfTile>(TEMPLATE);\n    el.selected = true;\n    await nextFrame();\n    const { height } = getComputedStyle(el, ':after');\n    expect(height).to.equal('3px');\n    const { backgroundColor } = getComputedStyle(el, ':after');\n    expect(backgroundColor).to.equal('rgb(0, 102, 204)');\n    // TODO: don't test shadowroots\n    const { color } = getComputedStyle(el.shadowRoot!.querySelector('[part=\"icon\"]')!);\n    expect(color).to.be.equal('rgb(0, 102, 204)');\n  });\n\n  it('should be flex direction column if stacked', async function() {\n    const el = await createFixture <PfTile>(TEMPLATE);\n    el.stacked = 'md';\n    await nextFrame();\n    // TODO: don't test shadowroots\n    const { flexDirection } = getComputedStyle(el.shadowRoot!.querySelector('[part=\"header\"]')!);\n    expect(flexDirection).to.equal('column');\n  });\n\n  it('should have disabled styles when disabled', async function() {\n    const el = await createFixture <PfTile>(TEMPLATE);\n    el.setAttribute('disabled', '');\n    await nextFrame();\n    const { backgroundColor } = getComputedStyle(el);\n    expect(backgroundColor).to.equal('rgb(240, 240, 240)');\n    // TODO: don't test shadowroots\n    const { color } = getComputedStyle(el.shadowRoot!.querySelector('[part=\"title\"]')!);\n    expect(color).to.equal('rgb(106, 110, 115)');\n  });\n});\n"]}