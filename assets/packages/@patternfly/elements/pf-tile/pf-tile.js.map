{"version":3,"file":"pf-tile.js","sourceRoot":"","sources":["pf-tile.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAuB,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;;;AA2C/C,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,UAAU;IAA/B;;QAGuC,aAAQ,GAAG,KAAK,CAAC;;IAIpD,MAAM;QACb,OAAO,IAAI,CAAA;;;;;;;;;;;;KAYV,CAAC;IACJ,CAAC;;AApBe,aAAM,GAAoB,CAAC,MAAM,CAAC,AAA5B,CAA6B;;AAEP;IAA3C,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;wCAAkB;AAEhC;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uCAAuB;AALxC,MAAM;IADlB,aAAa,CAAC,SAAS,CAAC;GACZ,MAAM","sourcesContent":["import { LitElement, html, type TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport styles from './pf-tile.css';\n\nexport type StackedSize = (\n  | 'md'\n  | 'lg'\n);\n\n/**\n * A **tile** component is a form of selection that can be used in place of a\n * radio button and is commonly used in forms. A tile appears visually similar to a\n * [selectable card](../card/). However, tiles are used specifically when the user is selecting\n * a static option, whereas a selectable card triggers an action or opens a quickstart\n * or sidebar to provide additional information.\n * @slot icon           - Icon expects a `<pf-icon>` or `<svg>`\n * @slot title          - the title of the tile should be a heading\n * @slot                - The content should be a paragraph\n * @csspart icon        - container for the icon\n * @csspart title       - container for the title\n * @csspart body        - container for the body content\n * @attr {'boolean'} selected       - selected variant\n * @attr {'md'|'lg'|null} stacked   - stacked variant\n * @cssprop   {<length>} [--pf-c-tile--PaddingTop=1.5rem]\n * @cssprop   {<length>} [--pf-c-tile--PaddingRight=1.5rem]\n * @cssprop   {<length>} [--pf-c-tile--PaddingBottom=1.5rem]\n * @cssprop   {<length>} [--pf-c-tile--PaddingLeft=1.5rem]\n * @cssprop   {<color>} [--pf-c-tile--BackgroundColor=#FFFFFF]\n * @cssprop   [--pf-c-tile--Transition=none]\n * @cssprop   [--pf-c-tile--TranslateY=0]\n * @cssprop   {<length>} [--pf-c-tile--before--BorderWidth=1px]\n * @cssprop   {<color>} [--pf-c-tile--before--BorderColor=#444548]\n * @cssprop   {<length>} [--pf-c-tile--after--Height=3px]\n * @cssprop   {<color>} [--pf-c-tile--after--BackgroundColor=transparent]\n * @cssprop   [--pf-c-tile--after--Transition=none]\n * @cssprop   [--pf-c-tile--after--ScaleY=1]\n * @cssprop   {<color>} [--pf-c-tile__title--Color=#06c]\n * @cssprop   {<color>} [--pf-c-tile__icon--Color=#06c]\n * @cssprop   {<length>} [--pf-c-tile__icon--MarginRight=0]\n * @cssprop   {<length>} [--pf-c-tile__icon--FontSize=1.5rem]\n * @cssprop   {<length>} [--pf-c-tile__header--m-stacked__icon--MarginBottom=0.25rem]\n */\n@customElement('pf-tile')\nexport class PfTile extends LitElement {\n  static readonly styles: CSSStyleSheet[] = [styles];\n\n  @property({ reflect: true, type: Boolean }) selected = false;\n\n  @property({ reflect: true }) stacked?: StackedSize;\n\n  override render(): TemplateResult<1> {\n    return html`\n      <div part=\"header\">\n        <div part=\"icon\">\n          <slot id=\"icon\" name=\"icon\"></slot>\n        </div>\n        <div part=\"title\">\n          <slot id=\"title\" name=\"title\"></slot>\n        </div>\n      </div>\n      <div part=\"body\">\n        <slot id=\"body\"></slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-tile': PfTile;\n  }\n}\n"]}