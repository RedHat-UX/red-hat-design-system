{"version":3,"file":"pf-card.js","sourceRoot":"","sources":["pf-card.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAuB,MAAM,KAAK,CAAC;AAC5D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;;;AAmD9E,IAAM,MAAM,GAAZ,MAAM,MAAO,SAAQ,UAAU;IAA/B;;QAWL;;WAEG;QACyC,YAAO,GAAG,KAAK,CAAC;QAE5D;;WAEG;QACmE,eAAU,GAAG,KAAK,CAAC;QAEzF;;WAEG;QACyC,UAAK,GAAG,KAAK,CAAC;QAE1D,wBAAS,IAAI,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAC;;IAErE,MAAM;QACJ,OAAO,IAAI,CAAA;;;;yBAIU,QAAQ,CAAC,EAAE,KAAK,EAAE,uBAAA,IAAI,qBAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;;mDAExB,uBAAA,IAAI,qBAAO,CAAC,OAAO,CAAC,OAAO,CAAC;;;;sBAIzD,QAAQ,CAAC,EAAE,KAAK,EAAE,uBAAA,IAAI,qBAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;;;;;yBAK3C,QAAQ,CAAC,EAAE,KAAK,EAAE,uBAAA,IAAI,qBAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC;;;;KAItE,CAAC;IACJ,CAAC;;;AAhDe,aAAM,GAAoB,CAAC,KAAK,CAAC,AAA3B,CAA4B;;AAQrB;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;oCAA4B;AAKZ;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;uCAAiB;AAKU;IAArE,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,CAAC;0CAAoB;AAK7C;IAA3C,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;qCAAe;AAxB/C,MAAM;IADlB,aAAa,CAAC,SAAS,CAAC;GACZ,MAAM","sourcesContent":["import { LitElement, html, type TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport style from './pf-card.css';\n\n/**\n * A **card** is a square or rectangular container that can contain any kind of content.\n * Cards symbolize units of information, and each one acts as an entry point for\n * users to access more details. For example, in dashboards and catalog views, cards\n * function as a preview of a detailed page. Cards may also be used in data displays\n * like card views, or for positioning content on a page.\n * @summary Gives a preview of information in a small layout\n * @slot header\n *       When included, defines the contents of a card. Card headers can contain images as well as\n *       the title of a card and an actions menu represented by the right-aligned kebab.\n *       In most cases, your card should include a header. The only exceptions are when cards being\n *       used as a layout element to create a white background behind other content.\n * @slot title\n *       Communicates the title of a card if it's not included in the header.\n *       If a card will be utilized as a selectable and clickable card, the title needs to be made as a linked text to trigger action and indicate interaction.\n * @slot - Body. Provides details about the item. A card body can include any combination of static\n *         text and/or active content.\n * @slot footer\n *       Contains external links, actions, or static text at the bottom of a card.\n * @csspart header - The container for *header* content\n * @csspart body - The container for *body* content\n * @csspart footer - The container for *footer* content\n * @cssprop {<color>} [--pf-c-card--BackgroundColor=#ffffff]\n * @cssprop {<color>} [--pf-c-card--BoxShadow=0 0.0625rem 0.125rem 0 rgba(3, 3, 3, 0.12), 0 0 0.125rem 0 rgba(3, 3, 3, 0.06)]\n * @cssprop {<color>} [--pf-c-card--size-compact__body--FontSize=.875rem]\n * @cssprop {<color>} [--pf-c-card--size-compact__footer--FontSize=1rem]\n * @cssprop {<color>} [--pf-c-card--size-compact--first-child--PaddingTop=1.5rem]\n * @cssprop {<color>} [--pf-c-card--size-compact--child--PaddingRight=1rem]\n * @cssprop {<color>} [--pf-c-card--size-compact--child--PaddingBottom=1rem]\n * @cssprop {<color>} [--pf-c-card--size-compact--child--PaddingLeft=1rem]\n * @cssprop {<color>} [--pf-c-card--size-compact__title--not--last-child--PaddingBottom=.5rem]\n * @cssprop {<color>} [--pf-c-card--size-large__title--FontSize=1.25rem]\n * @cssprop {<color>} [--pf-c-card--size-large--first-child--PaddingTop=2rem]\n * @cssprop {<color>} [--pf-c-card--size-large--child--PaddingRight=2rem]\n * @cssprop {<color>} [--pf-c-card--size-large--child--PaddingBottom=2rem]\n * @cssprop {<color>} [--pf-c-card--size-large--child--PaddingLeft=2rem]\n * @cssprop {<color>} [--pf-c-card--size-large__title--not--last-child--PaddingBottom=1.5rem]\n * @cssprop {<color>} [--pf-c-card--m-flat--BorderWidth=1px solid #d2d2d2]\n * @cssprop {<color>} [--pf-c-card--m-plain--BoxShadow=none]\n * @cssprop {<color>} [--pf-c-card--m-plain--BackgroundColor=transparent]\n * @cssprop {<color>} [--pf-c-card--m-rounded--BorderRadius=3px]\n * @cssprop {<color>} [--pf-c-card--m-full-height--Height=100]\n * @cssprop {<color>} [--pf-c-card__title--FontFamily=\"RedHatDisplayUpdated\", helvetica, arial, sans-serif]\n * @cssprop {<color>} [--pf-c-card__title--FontSize=1rem]\n * @cssprop {<color>} [--pf-c-card__title--FontWeight=700]\n */\n@customElement('pf-card')\nexport class PfCard extends LitElement {\n  static readonly styles: CSSStyleSheet[] = [style];\n\n  /**\n   * Optionally provide a size for the card and the card contents.\n   * The default is set to `undefined` and provides default styles.\n   * Compact provides styles which decreases the padding between the sections.\n   * Large provides styles which increases the padding between the sections and the font size for the title, header, and footer.\n   */\n  @property({ reflect: true }) size?: 'compact' | 'large';\n\n  /**\n   * Optionally apply a border radius for the drop shadow and/or border.\n   */\n  @property({ type: Boolean, reflect: true }) rounded = false;\n\n  /**\n   * Optionally allow the card to take up the full height of the parent element.\n   */\n  @property({ type: Boolean, reflect: true, attribute: 'full-height' }) fullHeight = false;\n\n  /**\n   * Optionally remove the border on the card container.\n   */\n  @property({ type: Boolean, reflect: true }) plain = false;\n\n  #slots = new SlotController(this, 'header', 'title', null, 'footer');\n\n  render(): TemplateResult<1> {\n    return html`\n      <article>\n        <header id=\"header\"\n                part=\"header\"\n                class=\"${classMap({ empty: this.#slots.isEmpty('header') })}\">\n          <slot name=\"header\"></slot>\n          <slot id=\"title\" name=\"title\" ?hidden=\"${this.#slots.isEmpty('title')}\"></slot>\n        </header>\n        <div id=\"body\"\n             part=\"body\"\n             class=\"${classMap({ empty: this.#slots.isEmpty(null) })}\">\n          <slot></slot>\n        </div>\n        <footer id=\"footer\"\n                part=\"footer\"\n                class=\"${classMap({ empty: this.#slots.isEmpty('footer') })}\">\n          <slot name=\"footer\"></slot>\n        </footer>\n      </article>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-card': PfCard;\n  }\n}\n"]}