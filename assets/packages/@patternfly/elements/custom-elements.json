{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "pf-accordion/pf-accordion-header.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Header",
          "name": "PfAccordionHeader",
          "cssProperties": [
            {
              "description": "Sets the font color for the accordion header.",
              "name": "--pf-c-accordion__toggle--Color",
              "syntax": "<color>",
              "default": "var(--pf-global--Color--100, #151515)"
            },
            {
              "description": "Sets the background color for the accordion header toggle element.",
              "name": "--pf-c-accordion__toggle--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "Sets the background color for the after element for the accordion header toggle element.",
              "name": "--pf-c-accordion__toggle--after--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "Sets the top padding for the accordion header.",
              "name": "--pf-c-accordion__toggle--PaddingTop",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--sm, 0.5rem)"
            },
            {
              "description": "Sets the right padding for the accordion header.",
              "name": "--pf-c-accordion__toggle--PaddingRight",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--md, 1rem)"
            },
            {
              "description": "Sets the bottom padding for the accordion header.",
              "name": "--pf-c-accordion__toggle--PaddingBottom",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--sm, 0.5rem)"
            },
            {
              "description": "Sets the left padding for the accordion header.",
              "name": "--pf-c-accordion__toggle--PaddingLeft",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--md, 1rem)"
            },
            {
              "description": "Sets the sidebar background color for the accordion header.",
              "name": "--pf-c-accordion__toggle--FontSize",
              "syntax": "<length>",
              "default": "var(--pf-global--FontSize--lg, 1rem)"
            },
            {
              "description": "Sets the font family for the accordion header.",
              "name": "--pf-c-accordion__toggle--FontFamily",
              "syntax": "<color>",
              "default": "var(--pf-global--FontFamily--redhat-updated--heading--sans-serif, \"RedHatDisplayUpdated\", helvetica, arial, sans-serif)"
            },
            {
              "description": "Sets the font weight for the accordion header.",
              "name": "--pf-c-accordion__toggle--FontWeight",
              "default": "var(--pf-global--FontWeight--normal, 400)"
            },
            {
              "description": "Sets the active backgrdound color for the accordion header.",
              "name": "--pf-c-accordion__toggle--active--BackgroundColor",
              "syntax": "<color>",
              "default": "var(--pf-global--BackgroundColor--200, #f0f0f0)"
            },
            {
              "description": "Sets the active text color for the accordion header.",
              "name": "--pf-c-accordion__toggle--active-text--Color",
              "syntax": "<color>",
              "default": "var(--pf-global--link--Color, #0066cc)"
            },
            {
              "description": "Sets the active text font weight for the accordion header.",
              "name": "--pf-c-accordion__toggle--active-text--FontWeight",
              "default": "var(--pf-global--FontWeight--semi-bold, 700)"
            },
            {
              "description": "Sets the hover expanded before background color for the accordion header.",
              "name": "--pf-c-accordion__toggle--expanded--before--BackgroundColor",
              "syntax": "<color>",
              "default": "var(--pf-global--link--Color, #0066cc)"
            },
            {
              "description": "Sets the expanded icon rotation degrees for the accordion header.",
              "name": "--pf-c-accordion__toggle--expanded-icon--Rotate",
              "default": "90deg"
            },
            {
              "description": "Sets the max width for the text inside the accordion header.",
              "name": "--pf-c-accordion__toggle-text--MaxWidth",
              "syntax": "<length>",
              "default": "calc(100% - var(--pf-global--spacer--lg, 1.5rem))"
            },
            {
              "description": "Sets the sidebar width for the accordion header.",
              "name": "--pf-c-accordion__toggle--before--Width",
              "default": "var(--pf-global--BorderWidth--lg, 3px)"
            },
            {
              "description": "Sets the transition animation for the accordion header.",
              "name": "--pf-c-accordion__toggle-icon--Transition",
              "default": "0.2s ease-in 0s"
            }
          ],
          "cssParts": [
            {
              "description": "inline element containing the heading text or slotted heading content",
              "name": "text"
            },
            {
              "description": "container for accents within the header",
              "name": "accents"
            },
            {
              "description": "caret icon",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "We expect the light DOM of the pf-accordion-header to be a heading level tag (h1, h2, h3, h4, h5, h6)"
            },
            {
              "description": "These elements will appear inline with the accordion header, between the header and the chevron\n(or after the chevron and header in disclosure mode).",
              "name": "accents"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "bordered",
              "type": {
                "text": "'true'|'false' | undefined"
              },
              "attribute": "bordered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "iconSet",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "icon-set",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, 'accents', null)"
            },
            {
              "kind": "method",
              "name": "renderAfterButton",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Template hook: before </button>",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "headingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "heading-text",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "headingTag",
              "type": {
                "text": "string"
              },
              "default": "'h3'",
              "attribute": "heading-tag",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "#generatedHtag",
              "privacy": "private",
              "type": {
                "text": "HTMLHeadingElement | undefined"
              },
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "method",
              "name": "#initHeader",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "method",
              "name": "#getOrCreateHeader",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "AccordionHeaderChangeEvent"
              },
              "description": "when the open panels change",
              "name": "change"
            }
          ],
          "attributes": [
            {
              "name": "bordered",
              "type": {
                "text": "'true'|'false' | undefined"
              },
              "fieldName": "bordered"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "icon"
            },
            {
              "name": "icon-set",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "iconSet"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.ts"
              }
            },
            {
              "name": "heading-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "headingText",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.ts"
              }
            },
            {
              "name": "heading-tag",
              "type": {
                "text": "string"
              },
              "default": "'h3'",
              "fieldName": "headingTag",
              "inheritedFrom": {
                "name": "BaseAccordionHeader",
                "module": "pf-accordion/BaseAccordionHeader.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseAccordionHeader",
            "module": "/pf-accordion/BaseAccordionHeader.js"
          },
          "tagName": "pf-accordion-header",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfAccordionHeader",
          "declaration": {
            "name": "PfAccordionHeader",
            "module": "pf-accordion/pf-accordion-header.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-accordion-header",
          "declaration": {
            "name": "PfAccordionHeader",
            "module": "pf-accordion/pf-accordion-header.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-accordion/pf-accordion-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordion Panel",
          "name": "PfAccordionPanel",
          "cssProperties": [
            {
              "description": "Sets the background color for the panel content.",
              "name": "--pf-c-accordion--BackgroundColor",
              "syntax": "<color>",
              "default": "var(--pf-global--BackgroundColor--light-100, #ffffff)"
            },
            {
              "description": "Sets the font color for the panel content.",
              "name": "--pf-c-accordion__panel--Color",
              "syntax": "<color>",
              "default": "var(--pf-global--Color--dark-200, #6a6e73)"
            },
            {
              "description": "Sets the font size for the panel content.",
              "name": "--pf-c-accordion__panel--FontSize",
              "syntax": "<length>",
              "default": "var(--pf-global--FontSize--sm, 0.875rem)"
            },
            {
              "description": "Sets the sidebar color for the panel when the context is expanded.",
              "name": "--pf-c-accordion__panel--content-body--before--BackgroundColor",
              "syntax": "<color>",
              "default": "var(--pf-global--primary-color--100, #0066cc)"
            },
            {
              "description": "Sets the maximum height for the panel content.\nWill only be used if the `fixed` attribute is used.",
              "name": "--pf-c-accordion__panel--m-fixed--MaxHeight",
              "syntax": "<length>",
              "default": "9.375rem"
            },
            {
              "description": "Sets the padding top for the panel content.",
              "name": "--pf-c-accordion__panel-body--PaddingTop",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--sm, 0.5rem)"
            },
            {
              "description": "Sets the padding right for the panel content.",
              "name": "--pf-c-accordion__panel-body--PaddingRight",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--md, 1rem)"
            },
            {
              "description": "Sets the padding bottom for the panel content.",
              "name": "--pf-c-accordion__panel-body--PaddingBottom",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--sm, 0.5rem)"
            },
            {
              "description": "Sets the padding left for the panel content.",
              "name": "--pf-c-accordion__panel-body--PaddingLeft",
              "syntax": "<length>",
              "default": "var(--pf-global--spacer--md, 1rem)"
            },
            {
              "description": "Sets the background color for the panel content.",
              "name": "--pf-c-accordion__panel-body--before--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "Sets the before width for the panel content.",
              "name": "--pf-c-accordion__panel-body--before--Width",
              "default": "var(--pf-global--BorderWidth--lg, 3px)"
            }
          ],
          "slots": [
            {
              "description": "Panel content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "bordered",
              "type": {
                "text": "'true'|'false' | undefined"
              },
              "attribute": "bordered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAccordionPanel",
                "module": "pf-accordion/BaseAccordionPanel.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "bordered",
              "type": {
                "text": "'true'|'false' | undefined"
              },
              "fieldName": "bordered"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded",
              "inheritedFrom": {
                "name": "BaseAccordionPanel",
                "module": "pf-accordion/BaseAccordionPanel.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseAccordionPanel",
            "module": "/pf-accordion/BaseAccordionPanel.js"
          },
          "tagName": "pf-accordion-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfAccordionPanel",
          "declaration": {
            "name": "PfAccordionPanel",
            "module": "pf-accordion/pf-accordion-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-accordion-panel",
          "declaration": {
            "name": "PfAccordionPanel",
            "module": "pf-accordion/pf-accordion-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-accordion/pf-accordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Accordions toggle the visibility of sections of content.\nThey feature panels that consist of a section text label and a caret icon that collapses or expands to reveal more information.",
          "name": "PfAccordion",
          "cssProperties": [
            {
              "description": "Color for the borders between accordion headers when using bordered or large attributes",
              "name": "--accordion__bordered--Color",
              "syntax": "<color>",
              "default": "var(--rh-color-black-300, #d2d2d2)"
            }
          ],
          "slots": [
            {
              "description": "Place the `pf-accordion-header` and `pf-accordion-panel` elements here."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "single",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, only one accordion panel may be expanded at a time",
              "attribute": "single",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "bordered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to apply the `bordered` style variant",
              "attribute": "bordered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to apply the `large` style variant",
              "attribute": "large",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "fixed",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "parentAccordion",
                  "optional": true,
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to expand.",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "isAccordion",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordion"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "isHeader",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordionHeader"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "isPanel",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordionPanel"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "expandedIndex",
              "type": {
                "text": "number[]"
              },
              "default": "[]",
              "description": "Sets and reflects the currently expanded accordion 0-based indexes.\nUse commas to separate multiple indexes.\n```html\n<pf-accordion expanded-index=\"1,2\">\n...\n</pf-accordion>\n```",
              "attribute": "expanded-index",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "headers",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "panels",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "expandedSets",
              "privacy": "protected",
              "default": "new Set<number>()",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "#styles",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "#transitionDuration",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "#initialized",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              },
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#init())",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#init",
              "description": "Initialize the accordion by connecting headers and panels\nwith aria controls and labels; set up the default disclosure\nstate if not set by the author; and check the URL for default\nopen",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#panelForHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#expandHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                },
                {
                  "name": "index",
                  "default": "this.#getIndex(header)"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#expandPanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#collapseHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                },
                {
                  "name": "index",
                  "default": "this.#getIndex(header)"
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#collapsePanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#getAnimationDuration",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#animate",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#onChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "AccordionHeaderChangeEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#allHeaders",
              "return": {
                "type": {
                  "text": "BaseAccordionHeader[]"
                }
              },
              "parameters": [
                {
                  "name": "accordion",
                  "default": "this",
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#allPanels",
              "return": {
                "type": {
                  "text": "BaseAccordionPanel[]"
                }
              },
              "parameters": [
                {
                  "name": "accordion",
                  "default": "this",
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#previousHeader",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#nextHeader",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#firstHeader",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#lastHeader",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "#getIndex",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "Element | null"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "updateAccessibility",
              "privacy": "public",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to expand or collapse.",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "expandAll",
              "privacy": "public",
              "description": "Expands all accordion items.",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to collapse.",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "privacy": "public",
              "description": "Collapses all accordion items.",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": "AccordionExpandEvent"
              },
              "description": "when a panel expands",
              "name": "expand"
            },
            {
              "type": {
                "text": "AccordionCollapseEvent"
              },
              "description": "when a panel collapses",
              "name": "collapse"
            }
          ],
          "attributes": [
            {
              "name": "single",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "When true, only one accordion panel may be expanded at a time",
              "fieldName": "single"
            },
            {
              "name": "bordered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to apply the `bordered` style variant",
              "fieldName": "bordered"
            },
            {
              "name": "large",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to apply the `large` style variant",
              "fieldName": "large"
            },
            {
              "name": "fixed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fixed"
            },
            {
              "name": "expanded-index",
              "type": {
                "text": "number[]"
              },
              "default": "[]",
              "description": "Sets and reflects the currently expanded accordion 0-based indexes.\nUse commas to separate multiple indexes.\n```html\n<pf-accordion expanded-index=\"1,2\">\n  ...\n</pf-accordion>\n```",
              "fieldName": "expandedIndex",
              "inheritedFrom": {
                "name": "BaseAccordion",
                "module": "pf-accordion/BaseAccordion.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseAccordion",
            "module": "/pf-accordion/BaseAccordion.js"
          },
          "summary": "Toggle the visibility of sections of content",
          "tagName": "pf-accordion",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/accordion/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-accordion/demo/pf-accordion.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./pf-accordion-header.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./pf-accordion-panel.js"
          }
        },
        {
          "kind": "js",
          "name": "PfAccordion",
          "declaration": {
            "name": "PfAccordion",
            "module": "pf-accordion/pf-accordion.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-accordion",
          "declaration": {
            "name": "PfAccordion",
            "module": "pf-accordion/pf-accordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-avatar/pf-avatar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Avatar is an element for displaying a user's avatar image.",
          "name": "PfAvatar",
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm'|'md'|'lg'|'xl'"
              },
              "default": "'sm'",
              "description": "Size of the Avatar",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.js"
              }
            },
            {
              "kind": "field",
              "name": "border",
              "type": {
                "text": "'light'|'dark' | undefined"
              },
              "description": "Whether to display a border around the avatar",
              "attribute": "border",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.",
              "attribute": "src",
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.js"
              }
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Avatar image'",
              "description": "The alt text for the avatar image.",
              "attribute": "alt",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.js"
              }
            },
            {
              "kind": "field",
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Avatar image is dark",
              "attribute": "dark",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'sm'|'md'|'lg'|'xl'"
              },
              "default": "'sm'",
              "description": "Size of the Avatar",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.ts"
              }
            },
            {
              "name": "border",
              "type": {
                "text": "'light'|'dark' | undefined"
              },
              "description": "Whether to display a border around the avatar",
              "fieldName": "border"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.",
              "fieldName": "src",
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.ts"
              }
            },
            {
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Avatar image'",
              "description": "The alt text for the avatar image.",
              "fieldName": "alt",
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.ts"
              }
            },
            {
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Avatar image is dark",
              "fieldName": "dark",
              "inheritedFrom": {
                "name": "BaseAvatar",
                "module": "pf-avatar/BaseAvatar.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseAvatar",
            "module": "/pf-avatar/BaseAvatar.js"
          },
          "summary": "For displaying a user's avatar image",
          "tagName": "pf-avatar",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/avatar/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-avatar/demo/pf-avatar.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfAvatar",
          "declaration": {
            "name": "PfAvatar",
            "module": "pf-avatar/pf-avatar.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-avatar",
          "declaration": {
            "name": "PfAvatar",
            "module": "pf-avatar/pf-avatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-badge/pf-badge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A badge is used to annotate other information like a label or an object name.",
          "name": "PfBadge",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-badge--BorderRadius",
              "syntax": "<length>",
              "default": "180em"
            },
            {
              "description": "",
              "name": "--pf-c-badge--MinWidth",
              "syntax": "<length>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-badge--PaddingLeft",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-badge--PaddingRight",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-badge--FontSize",
              "syntax": "<length>",
              "default": "0.85em"
            },
            {
              "description": "",
              "name": "--pf-c-badge--LineHeight",
              "syntax": "<length>",
              "default": "1.5"
            },
            {
              "description": "",
              "name": "--pf-c-badge--FontWeight",
              "syntax": "<length>",
              "default": "700"
            },
            {
              "description": "",
              "name": "--pf-c-badge--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-badge--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-badge--m-read--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-badge--m-read--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-badge--m-unread--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-badge--m-unread--BackgroundColor",
              "syntax": "<color>",
              "default": "#06c"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "string | undefined"
              },
              "description": "Denotes the state-of-affairs this badge represents\nOptions include read and unread",
              "attribute": "state",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseBadge",
                "module": "pf-badge/BaseBadge.js"
              }
            },
            {
              "kind": "field",
              "name": "number",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets a numeric value for a badge.\n\nYou can pair it with `threshold` attribute to add a `+` sign\nif the number exceeds the threshold value.",
              "attribute": "number",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseBadge",
                "module": "pf-badge/BaseBadge.js"
              }
            },
            {
              "kind": "field",
              "name": "threshold",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets a threshold for the numeric value and adds `+` sign if\nthe numeric value exceeds the threshold value.",
              "attribute": "threshold",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseBadge",
                "module": "pf-badge/BaseBadge.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "state",
              "type": {
                "text": "'unread'|'read' | undefined"
              },
              "description": "Denotes the state-of-affairs this badge represents\nOptions include read and unread",
              "fieldName": "state"
            },
            {
              "name": "number",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "number"
            },
            {
              "name": "threshold",
              "type": {
                "text": "number | undefined"
              },
              "fieldName": "threshold"
            }
          ],
          "superclass": {
            "name": "BaseBadge",
            "module": "/pf-badge/BaseBadge.js"
          },
          "tagName": "pf-badge",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/badge/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-badge/demo/pf-badge.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfBadge",
          "declaration": {
            "name": "PfBadge",
            "module": "pf-badge/pf-badge.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-badge",
          "declaration": {
            "name": "PfBadge",
            "module": "pf-badge/pf-badge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-button/pf-button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Buttons allow users to perform an action when triggered. They feature a text\nlabel, a background or a border, and icons.",
          "name": "PfButton",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-button--FontSize",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-button--FontWeight",
              "default": "400"
            },
            {
              "description": "",
              "name": "--pf-c-button--LineHeight",
              "syntax": "<number>",
              "default": "1.5"
            },
            {
              "description": "",
              "name": "--pf-c-button--PaddingTop",
              "syntax": "<length>",
              "default": "0.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-button--PaddingLeft",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-button--PaddingBottom",
              "syntax": "<length>",
              "default": "0.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-button--PaddingRight",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-button--BorderRadius",
              "syntax": "<length>|<percentage>",
              "default": "3px"
            },
            {
              "description": "",
              "name": "--pf-c-button--after--BorderColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--after--BorderRadius",
              "syntax": "<length>",
              "default": "3px"
            },
            {
              "description": "",
              "name": "--pf-c-button--after--BorderWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-button--active--after--BorderWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--hover--after--BorderWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--focus--after--BorderWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--BackgroundColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--active--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--active--BackgroundColor",
              "syntax": "<color>",
              "default": "#004080"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--focus--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "#004080"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--hover--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-primary--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "#004080"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--active--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--active--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--active--BorderColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--focus--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--focus--BorderColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--hover--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--hover--BorderColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--active--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--active--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--active--BorderColor",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--focus--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--focus--BorderColor",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--hover--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-tertiary--hover--BorderColor",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--BackgroundColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--active--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--active--BackgroundColor",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--focus--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--hover--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-danger--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--Color",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--BorderColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--active--Color",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--active--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--active--BorderColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--focus--Color",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--focus--BorderColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--hover--Color",
              "syntax": "<color>",
              "default": "#a30000"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-secondary--m-danger--hover--BorderColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--disabled--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--BorderRadius",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--after--BorderWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--after--BorderTopColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--after--BorderRightColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--after--BorderBottomColor",
              "syntax": "<color>",
              "default": "#8a8d90"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--after--BorderLeftColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--active--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--active--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--active--BorderBottomColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--active--after--BorderBottomWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--focus--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--focus--BorderBottomColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--focus--after--BorderBottomWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--hover--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--hover--BorderBottomColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-control--hover--after--BorderBottomWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-button--disabled--Color",
              "syntax": "<color>",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--pf-c-button--disabled--BackgroundColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-button--disabled--after--BorderColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0ab00"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--active--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--active--BackgroundColor",
              "syntax": "<color>",
              "default": "#c58c00"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--focus--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "#c58c00"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--hover--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-warning--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "#c58c00"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--Color",
              "syntax": "<color>",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--hover--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--hover--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--focus--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--focus--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--active--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--active--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--disabled--Color",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-button--m-plain--disabled--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            }
          ],
          "cssParts": [
            {
              "description": "Container for the state slot.",
              "name": "state"
            }
          ],
          "slots": [
            {
              "description": "Contains the button's icon or state indicator, e.g. a spinner.",
              "name": "icon"
            },
            {
              "description": "Must contain exactly one `<button>` element as the only content not assigned to a named slot."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the state of a stateful button",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies plain styles",
              "attribute": "plain",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "warning",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Not as urgent as danger",
              "attribute": "warning",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | undefined"
              },
              "description": "Changes the size of the button.",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "iconSet",
              "type": {
                "text": "string | undefined"
              },
              "description": "Icon set for the `icon` property",
              "attribute": "icon-set"
            },
            {
              "kind": "field",
              "name": "danger",
              "type": {
                "text": "unknown"
              },
              "description": "Use danger buttons for actions a user can take that are potentially\ndestructive or difficult/impossible to undo, like deleting or removing\nuser data.",
              "default": "false",
              "attribute": "danger",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'primary'",
              "description": "Changes the style of the button.\n- Primary: Used for the most important call to action on a page. Try to\nlimit primary buttons to one per page.\n- Secondary: Use secondary buttons for general actions on a page, that\ndon’t require as much emphasis as primary button actions. For example,\nyou can use secondary buttons where there are multiple actions, like in\ntoolbars or data lists.\n- Tertiary: Tertiary buttons are flexible and can be used as needed.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Fallback content for the icon slot. When the `icon` attribute is set, it\nshould render an icon corresponding to the value.",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button'|'submit'|'reset' | undefined"
              },
              "attribute": "type",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Accessible name for the button, use when the button does not have slotted text",
              "attribute": "label",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "attribute": "icon",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "default": "new InternalsController(this)",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "string"
              },
              "description": "ARIA label for the loading indicator",
              "name": "loading-label",
              "default": "'loading'"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Represents the state of a stateful button",
              "fieldName": "loading"
            },
            {
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Applies plain styles",
              "fieldName": "plain"
            },
            {
              "name": "warning",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Not as urgent as danger",
              "fieldName": "warning"
            },
            {
              "name": "size",
              "type": {
                "text": "'small'|'large' | undefined"
              },
              "fieldName": "size"
            },
            {
              "name": "icon-set",
              "type": {
                "text": "string | undefined"
              },
              "description": "Icon set for the `icon` property",
              "fieldName": "iconSet"
            },
            {
              "name": "danger",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "danger"
            },
            {
              "name": "variant",
              "type": {
                "text": "ButtonVariant"
              },
              "default": "'primary'",
              "description": "Changes the style of the button.\n- Primary: Used for the most important call to action on a page. Try to\n  limit primary buttons to one per page.\n- Secondary: Use secondary buttons for general actions on a page, that\n  don’t require as much emphasis as primary button actions. For example,\n  you can use secondary buttons where there are multiple actions, like in\n  toolbars or data lists.\n- Tertiary: Tertiary buttons are flexible and can be used as needed.",
              "fieldName": "variant"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button",
              "fieldName": "disabled",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            },
            {
              "name": "type",
              "type": {
                "text": "'button'|'submit'|'reset' | undefined"
              },
              "fieldName": "type",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Accessible name for the button, use when the button does not have slotted text",
              "fieldName": "label",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "fieldName": "icon",
              "inheritedFrom": {
                "name": "BaseButton",
                "module": "pf-button/BaseButton.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseButton",
            "module": "/pf-button/BaseButton.js"
          },
          "summary": "Allows users to perform an action when triggered",
          "tagName": "pf-button",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/button/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-button/demo/pf-button.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/button/demo/form-control/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-button/demo/form-control.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfButton",
          "declaration": {
            "name": "PfButton",
            "module": "pf-button/pf-button.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-button",
          "declaration": {
            "name": "PfButton",
            "module": "pf-button/pf-button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-card/pf-card.js",
      "declarations": [
        {
          "kind": "class",
          "description": "This element creates a header, body, and footer region in which to place\ncontent or other components.",
          "name": "PfCard",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-card--BackgroundColor",
              "syntax": "<color>",
              "default": "#ffffff"
            },
            {
              "description": "",
              "name": "--pf-c-card--BoxShadow",
              "syntax": "<color>",
              "default": "0 0.0625rem 0.125rem 0 rgba(3, 3, 3, 0.12), 0 0 0.125rem 0 rgba(3, 3, 3, 0.06)"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact__body--FontSize",
              "syntax": "<color>",
              "default": ".875rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact__footer--FontSize",
              "syntax": "<color>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact--first-child--PaddingTop",
              "syntax": "<color>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact--child--PaddingRight",
              "syntax": "<color>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact--child--PaddingBottom",
              "syntax": "<color>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact--child--PaddingLeft",
              "syntax": "<color>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-compact__title--not--last-child--PaddingBottom",
              "syntax": "<color>",
              "default": ".5rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large__title--FontSize",
              "syntax": "<color>",
              "default": "1.25rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large--first-child--PaddingTop",
              "syntax": "<color>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large--child--PaddingRight",
              "syntax": "<color>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large--child--PaddingBottom",
              "syntax": "<color>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large--child--PaddingLeft",
              "syntax": "<color>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--size-large__title--not--last-child--PaddingBottom",
              "syntax": "<color>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-card--m-flat--BorderWidth",
              "syntax": "<color>",
              "default": "1px solid #d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-card--m-plain--BoxShadow",
              "syntax": "<color>",
              "default": "none"
            },
            {
              "description": "",
              "name": "--pf-c-card--m-plain--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-card--m-rounded--BorderRadius",
              "syntax": "<color>",
              "default": "3px"
            },
            {
              "description": "",
              "name": "--pf-c-card--m-full-height--Height",
              "syntax": "<color>",
              "default": "100%"
            },
            {
              "description": "",
              "name": "--pf-c-card__title--FontFamily",
              "syntax": "<color>",
              "default": "\"RedHatDisplayUpdated\", helvetica, arial, sans-serif"
            },
            {
              "description": "",
              "name": "--pf-c-card__title--FontSize",
              "syntax": "<color>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-card__title--FontWeight",
              "syntax": "<color>",
              "default": "700"
            }
          ],
          "cssParts": [
            {
              "description": "The container for *header* content",
              "name": "header"
            },
            {
              "description": "The container for *body* content",
              "name": "body"
            },
            {
              "description": "The container for *footer* content",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "If this slot is used, we expect a heading level tag (h1, h2, h3, h4, h5, h6).\nAn icon, svg, or use of the icon component are also valid in this region.",
              "name": "header"
            },
            {
              "description": "Any content that is not designated for the header or footer slot, will go to this slot.",
              "name": ""
            },
            {
              "description": "Use this slot for anything that you want to be stuck to the base of the card.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'compact' | 'large' | undefined"
              },
              "description": "Optionally provide a size for the card and the card contents.\nThe default is set to `undefined` and provides default styles.\nCompact provides styles which decreases the padding between the sections.\nLarge provides styles which increases the padding between the sections and the font size for the title, header, and footer.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally apply a border radius for the drop shadow and/or border.",
              "attribute": "rounded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fullHeight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally allow the card to take up the full height of the parent element.",
              "attribute": "full-height",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally remove the border on the card container.",
              "attribute": "plain",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "protected",
              "default": "new SlotController(this, 'header', null, 'footer')",
              "inheritedFrom": {
                "name": "BaseCard",
                "module": "pf-card/BaseCard.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'compact' | 'large' | undefined"
              },
              "description": "Optionally provide a size for the card and the card contents.\nThe default is set to `undefined` and provides default styles.\nCompact provides styles which decreases the padding between the sections.\nLarge provides styles which increases the padding between the sections and the font size for the title, header, and footer.",
              "fieldName": "size"
            },
            {
              "name": "rounded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally apply a border radius for the drop shadow and/or border.",
              "fieldName": "rounded"
            },
            {
              "name": "full-height",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally allow the card to take up the full height of the parent element.",
              "fieldName": "fullHeight"
            },
            {
              "name": "plain",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Optionally remove the border on the card container.",
              "fieldName": "plain"
            }
          ],
          "superclass": {
            "name": "BaseCard",
            "module": "/pf-card/BaseCard.js"
          },
          "summary": "Gives a preview of information in a small layout",
          "tagName": "pf-card",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/card/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-card/demo/pf-card.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfCard",
          "declaration": {
            "name": "PfCard",
            "module": "pf-card/pf-card.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-card",
          "declaration": {
            "name": "PfCard",
            "module": "pf-card/pf-card.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-clipboard-copy/pf-clipboard-copy.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Clipboard Copy",
          "name": "PfClipboardCopy",
          "slots": [
            {
              "description": "Place content to copy here, or use the `value` attribute",
              "name": ""
            },
            {
              "description": "Place additional action buttons here",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...BaseClipboardCopy.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "clickTip",
              "type": {
                "text": "string"
              },
              "default": "'Copied'",
              "attribute": "click-tip"
            },
            {
              "kind": "field",
              "name": "hoverTip",
              "type": {
                "text": "string"
              },
              "default": "'Copy'",
              "attribute": "hover-tip"
            },
            {
              "kind": "field",
              "name": "textAriaLabel",
              "type": {
                "text": "string"
              },
              "default": "'Copyable input'",
              "attribute": "text-label"
            },
            {
              "kind": "field",
              "name": "toggleAriaLabel",
              "type": {
                "text": "string"
              },
              "default": "'Show content'",
              "attribute": "toggle-label"
            },
            {
              "kind": "field",
              "name": "entryDelay",
              "type": {
                "text": "number"
              },
              "default": "300",
              "attribute": "entry-delay"
            },
            {
              "kind": "field",
              "name": "exitDelay",
              "type": {
                "text": "number"
              },
              "default": "1500",
              "attribute": "exit-delay"
            },
            {
              "kind": "field",
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "block",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "code",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "code",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Implies not `inline`.",
              "attribute": "expandable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "readonly",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Implies not expandable. Overrules `expandable`.",
              "attribute": "inline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "compact",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "value",
              "inheritedFrom": {
                "name": "BaseClipboardCopy",
                "module": "pf-clipboard-copy/BaseClipboardCopy.js"
              }
            },
            {
              "kind": "field",
              "name": "#copied",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#onMutation())"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onMutation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#dedent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "copy",
              "description": "Copy the current value to the clipboard.",
              "inheritedFrom": {
                "name": "BaseClipboardCopy",
                "module": "pf-clipboard-copy/BaseClipboardCopy.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "click-tip",
              "type": {
                "text": "string"
              },
              "default": "'Copied'",
              "fieldName": "clickTip"
            },
            {
              "name": "hover-tip",
              "type": {
                "text": "string"
              },
              "default": "'Copy'",
              "fieldName": "hoverTip"
            },
            {
              "name": "text-label",
              "type": {
                "text": "string"
              },
              "default": "'Copyable input'",
              "fieldName": "textAriaLabel"
            },
            {
              "name": "toggle-label",
              "type": {
                "text": "string"
              },
              "default": "'Show content'",
              "fieldName": "toggleAriaLabel"
            },
            {
              "name": "entry-delay",
              "type": {
                "text": "number"
              },
              "default": "300",
              "fieldName": "entryDelay"
            },
            {
              "name": "exit-delay",
              "type": {
                "text": "number"
              },
              "default": "1500",
              "fieldName": "exitDelay"
            },
            {
              "name": "block",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "block"
            },
            {
              "name": "code",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "code"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Implies not `inline`.",
              "fieldName": "expandable"
            },
            {
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "readonly"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Implies not expandable. Overrules `expandable`.",
              "fieldName": "inline"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "compact"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "BaseClipboardCopy",
            "module": "/pf-clipboard-copy/BaseClipboardCopy.js"
          },
          "tagName": "pf-clipboard-copy",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/clipboard-copy/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-clipboard-copy/demo/pf-clipboard-copy.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfClipboardCopy",
          "declaration": {
            "name": "PfClipboardCopy",
            "module": "pf-clipboard-copy/pf-clipboard-copy.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-clipboard-copy",
          "declaration": {
            "name": "PfClipboardCopy",
            "module": "pf-clipboard-copy/pf-clipboard-copy.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-code-block/pf-code-block.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfCodeBlock",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-code-block--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__header--BorderBottomWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__header--BorderBottomColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__content--PaddingTop",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__content--PaddingRight",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__content--PaddingBottom",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__content--PaddingLeft",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__pre--FontSize",
              "syntax": "<length>",
              "default": "0.875rem"
            },
            {
              "description": "",
              "name": "--pf-c-code-block__pre--FontFamily",
              "syntax": "<string>",
              "default": "\"Liberation Mono\", consolas, \"SFMono-Regular\", menlo, monaco, \"Courier New\", monospace"
            }
          ],
          "slots": [
            {
              "description": "The slot to put the code in",
              "name": "code"
            },
            {
              "description": "The slot to put the code in that should be revealed when the \"Show more\" button is\nclicked to expand the code-block",
              "name": "expandable-code"
            },
            {
              "description": "Contains the actions for the code-block. For example, copy to clipboard.",
              "name": "actions"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "#toggle",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#expandedContent",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "content",
              "privacy": "protected",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseCodeBlock",
                "module": "pf-code-block/BaseCodeBlock.js"
              }
            },
            {
              "kind": "method",
              "name": "dedent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseCodeBlock",
                "module": "pf-code-block/BaseCodeBlock.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if the code-block has been expanded",
              "name": "expanded",
              "default": "false",
              "fieldName": "expanded"
            }
          ],
          "superclass": {
            "name": "BaseCodeBlock",
            "module": "/pf-code-block/BaseCodeBlock.js"
          },
          "tagName": "pf-code-block",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/code-block/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-code-block/demo/pf-code-block.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfCodeBlock",
          "declaration": {
            "name": "PfCodeBlock",
            "module": "pf-code-block/pf-code-block.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-code-block",
          "declaration": {
            "name": "PfCodeBlock",
            "module": "pf-code-block/pf-code-block.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-icon/pf-icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "PatternFly Icon component lazy-loads icons and allows custom icon sets",
          "name": "PfIcon",
          "cssParts": [
            {
              "description": "Container for the fallback (i.e. slotted) content",
              "name": "fallback"
            }
          ],
          "slots": [
            {
              "description": "Slotted content is used as a fallback in case the icon doesn't load",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "defaultIconSet",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true,
              "default": "'fas'",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the icon",
              "default": "'sm'",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "method",
              "name": "addIconSet",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "setName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "getter",
                  "type": {
                    "text": "typeof BaseIcon['getIconUrl']"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "getIconUrl",
              "type": {
                "text": "URLGetter"
              },
              "privacy": "public",
              "static": true,
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "onIntersect",
              "type": {
                "text": "IntersectionObserverCallback"
              },
              "privacy": "private",
              "static": true,
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "io",
              "privacy": "private",
              "static": true,
              "default": "new IntersectionObserver(this.onIntersect)",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "getters",
              "privacy": "private",
              "static": true,
              "default": "new Map<string, URLGetter>()",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<BaseIcon>()",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "set",
              "description": "Icon set",
              "attribute": "set",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Icon name",
              "attribute": "icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "'idle'|'lazy'|'eager' | undefined"
              },
              "default": "'lazy'",
              "description": "Controls how eager the element will be to load the icon data\n- `eager`: eagerly load the icon, blocking the main thread\n- `idle`: wait for the browser to attain an idle state before loading\n- `lazy` (default): wait for the element to enter the viewport before loading",
              "attribute": "loading",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "unknown | undefined"
              },
              "privacy": "private",
              "description": "Icon content. Any value that lit can render",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "#intersecting",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "field",
              "name": "#class",
              "privacy": "private",
              "type": {
                "text": "typeof BaseIcon"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "method",
              "name": "#lazyLoad",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "method",
              "name": "#iconChanged",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            },
            {
              "kind": "method",
              "name": "load",
              "privacy": "protected",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.js"
              }
            }
          ],
          "events": [
            {
              "name": "load",
              "type": {
                "text": "Event"
              },
              "description": "Fired when an icon is loaded and rendered",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.ts"
              }
            },
            {
              "description": "Fired when an icon fails to load",
              "name": "error",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.ts"
              }
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'sm'|'md'|'lg'|'xl'"
              },
              "default": "'sm'",
              "description": "Size of the icon",
              "fieldName": "size"
            },
            {
              "name": "set",
              "description": "Icon set",
              "fieldName": "set",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.ts"
              }
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Icon name",
              "fieldName": "icon",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.ts"
              }
            },
            {
              "name": "loading",
              "type": {
                "text": "'idle'|'lazy'|'eager' | undefined"
              },
              "default": "'lazy'",
              "description": "Controls how eager the element will be to load the icon data\n- `eager`: eagerly load the icon, blocking the main thread\n- `idle`: wait for the browser to attain an idle state before loading\n- `lazy` (default): wait for the element to enter the viewport before loading",
              "fieldName": "loading",
              "inheritedFrom": {
                "name": "BaseIcon",
                "module": "pf-icon/BaseIcon.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseIcon",
            "module": "/pf-icon/BaseIcon.js"
          },
          "tagName": "pf-icon",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/icon/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-icon/demo/pf-icon.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/icon/demo/custom-icon-sets/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-icon/demo/custom-icon-sets.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/icon/demo/styling-icons/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-icon/demo/styling-icons.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfIcon",
          "declaration": {
            "name": "PfIcon",
            "module": "pf-icon/pf-icon.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-icon",
          "declaration": {
            "name": "PfIcon",
            "module": "pf-icon/pf-icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-jump-links/pf-jump-links-item.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfJumpLinksItem",
          "cssProperties": [
            {
              "description": "-- padding around the link",
              "name": "--pf-c-jump-links__link--PaddingTop"
            },
            {
              "name": "--pf-c-jump-links__link--PaddingRight"
            },
            {
              "name": "--pf-c-jump-links__link--PaddingBottom"
            },
            {
              "name": "--pf-c-jump-links__link--PaddingLeft"
            },
            {
              "name": "--pf-c-jump-links__link--OutlineOffset"
            },
            {
              "name": "--pf-c-jump-links__link-text--Color"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "link",
              "type": {
                "text": "HTMLAnchorElement"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "active",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "href",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "default": "new InternalsController(this, {\n    role: 'listitem'\n  })"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "activeChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onFocus",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "select",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "focus",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "href",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "href"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-jump-links-item",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfJumpLinksItem",
          "declaration": {
            "name": "PfJumpLinksItem",
            "module": "pf-jump-links/pf-jump-links-item.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-jump-links-item",
          "declaration": {
            "name": "PfJumpLinksItem",
            "module": "pf-jump-links/pf-jump-links-item.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-jump-links/pf-jump-links-list.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfJumpLinksList",
          "cssProperties": [
            {
              "description": "-- padding around each link",
              "name": "--pf-c-jump-links__list__list__link--PaddingTop"
            },
            {
              "name": "--pf-c-jump-links__list__list__link--PaddingBottom"
            },
            {
              "name": "--pf-c-jump-links__list__list__link--PaddingLeft"
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-jump-links-list",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfJumpLinksList",
          "declaration": {
            "name": "PfJumpLinksList",
            "module": "pf-jump-links/pf-jump-links-list.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-jump-links-list",
          "declaration": {
            "name": "PfJumpLinksList",
            "module": "pf-jump-links/pf-jump-links-list.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-jump-links/pf-jump-links.js",
      "declarations": [
        {
          "kind": "class",
          "description": "**Jump links** allow users to navigate to sections within a page.",
          "name": "PfJumpLinks",
          "cssProperties": [
            {
              "name": "--pf-c-jump-links__list--Display"
            },
            {
              "name": "--pf-c-jump-links__list--FlexDirection"
            },
            {
              "description": "-- padding around the list of links",
              "name": "--pf-c-jump-links__list--PaddingTop"
            },
            {
              "name": "--pf-c-jump-links__list--PaddingRight"
            },
            {
              "name": "--pf-c-jump-links__list--PaddingBottom"
            },
            {
              "name": "--pf-c-jump-links__list--PaddingLeft"
            },
            {
              "name": "--pf-c-jump-links__list--Visibility"
            },
            {
              "name": "--pf-c-jump-links__list--before--BorderColor"
            },
            {
              "name": "--pf-c-jump-links__list--before--BorderTopWidth"
            },
            {
              "name": "--pf-c-jump-links__list--before--BorderRightWidth"
            },
            {
              "name": "--pf-c-jump-links__list--before--BorderBottomWidth"
            },
            {
              "name": "--pf-c-jump-links__list--before--BorderLeftWidth"
            },
            {
              "description": "",
              "name": "--pf-c-jump-links__toggle--MarginBottom--base"
            },
            {
              "description": "-- padding around the expandable jump links disclosure widget.",
              "name": "--pf-c-jump-links__toggle--MarginTop"
            },
            {
              "name": "--pf-c-jump-links__toggle--MarginBottom"
            },
            {
              "name": "--pf-c-jump-links__toggle--MarginBottom--base"
            },
            {
              "name": "--pf-c-jump-links__toggle--MarginLeft"
            },
            {
              "name": "--pf-c-jump-links__toggle-text--Color"
            },
            {
              "description": "-- padding around the expandable jump links disclosure widget.",
              "name": "--pf-c-button--PaddingTop"
            },
            {
              "name": "--pf-c-button--PaddingRight"
            },
            {
              "name": "--pf-c-button--PaddingBottom"
            },
            {
              "description": "",
              "name": "--pf-c-button--PaddingLeft"
            },
            {
              "name": "--pf-c-jump-links__toggle-icon--Rotate"
            },
            {
              "name": "--pf-c-jump-links__toggle-icon--Transition"
            },
            {
              "description": "",
              "name": "--pf-c-jump-links__toggle-text--MarginLeft"
            },
            {
              "name": "--pf-c-jump-links--m-expanded__toggle--MarginBottom"
            },
            {
              "name": "--pf-c-jump-links--m-expanded__toggle-icon--Rotate"
            },
            {
              "description": "",
              "name": "--pf-c-jump-links--m-expanded__toggle-icon--Color"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--PaddingTop"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--PaddingRight"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--PaddingBottom"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--PaddingLeft"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--before--BorderTopWidth"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--before--BorderLeftWidth"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__item--m-current__link--before--BorderTopWidth"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__item--m-current__link--before--BorderLeftWidth"
            },
            {
              "name": "--pf-c-jump-links--m-vertical__list--FlexDirection"
            }
          ],
          "slots": [
            {
              "description": "Place pf-jump-links-items here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "_items",
              "type": {
                "text": "PfJumpLinksItem[]"
              }
            },
            {
              "kind": "field",
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expandable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "centered",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "attribute": "offset"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "PfJumpLinksItem[]"
              }
            },
            {
              "kind": "field",
              "name": "#init",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#rovingTabindexController",
              "privacy": "private",
              "default": "new RovingTabindexController(this)"
            },
            {
              "kind": "field",
              "name": "#spy",
              "privacy": "private",
              "default": "new ScrollSpyController(this, {\n    rootMargin: `${this.offset}px 0px 0px 0px`,\n    tagNames: ['pf-jump-links-item'],\n  })"
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onToggle",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "toggle",
              "type": {
                "text": "Event"
              },
              "description": "when the `expanded` disclosure widget is toggled"
            }
          ],
          "attributes": [
            {
              "name": "expandable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expandable"
            },
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "vertical"
            },
            {
              "name": "centered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "centered"
            },
            {
              "name": "offset",
              "type": {
                "text": "number"
              },
              "default": "0",
              "fieldName": "offset"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-jump-links",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/jump-links/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-jump-links/demo/pf-jump-links.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/jump-links/demo/scrollspy-with-subsections/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-jump-links/demo/scrollspy-with-subsections.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfJumpLinks",
          "declaration": {
            "name": "PfJumpLinks",
            "module": "pf-jump-links/pf-jump-links.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-jump-links",
          "declaration": {
            "name": "PfJumpLinks",
            "module": "pf-jump-links/pf-jump-links.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-label/pf-label.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Labels allow users to display meta data in a stylized form.",
          "name": "PfLabel",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-label--FontSize",
              "syntax": "<length>",
              "default": "0.875em"
            },
            {
              "description": "",
              "name": "--pf-c-label--PaddingTop",
              "syntax": "<length>",
              "default": "0.25rem"
            },
            {
              "description": "",
              "name": "--pf-c-label--PaddingRight",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-label--PaddingBottom",
              "syntax": "<length>",
              "default": "0.25rem"
            },
            {
              "description": "",
              "name": "--pf-c-label--PaddingLeft",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-label--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-label--BackgroundColor",
              "syntax": "<color>",
              "default": "#f5f5f5"
            },
            {
              "description": "",
              "name": "--pf-c-label--BorderRadius",
              "syntax": "<length>",
              "default": "30em"
            },
            {
              "description": "",
              "name": "--pf-c-label__content--MaxWidth",
              "syntax": "<length>",
              "default": "100%"
            },
            {
              "description": "",
              "name": "--pf-c-label__content--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-label__content--before--BorderWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-label__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline__content--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--BackgroundColor",
              "syntax": "<color>",
              "default": "#ffffff"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-blue__content--Color",
              "syntax": "<color>",
              "default": "#002952"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-blue--BackgroundColor",
              "syntax": "<color>",
              "default": "#e7f1fa"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-blue__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#bee1f4"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-blue__content--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-cyan__content--Color",
              "syntax": "<color>",
              "default": "#3b1f00"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-cyan--BackgroundColor",
              "syntax": "<color>",
              "default": "#f2f9f9"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-cyan__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#a2d9d9"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-cyan__content--Color",
              "syntax": "<color>",
              "default": "#005f60"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-green__content--Color",
              "syntax": "<color>",
              "default": "#1e4f18"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-green--BackgroundColor",
              "syntax": "<color>",
              "default": "#f3faf2"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-green__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#bde5b8"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-green__content--Color",
              "syntax": "<color>",
              "default": "#3e8635"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-orange__content--Color",
              "syntax": "<color>",
              "default": "#003737"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-orange--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff6ec"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-orange__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#f4b678"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-orange__content--Color",
              "syntax": "<color>",
              "default": "#8f4700"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-purple__content--Color",
              "syntax": "<color>",
              "default": "#1f0066"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-purple--BackgroundColor",
              "syntax": "<color>",
              "default": "#f2f0fc"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-purple__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#cbc1ff"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-purple__content--Color",
              "syntax": "<color>",
              "default": "#6753ac"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-red__content--Color",
              "syntax": "<color>",
              "default": "#7d1007"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-red--BackgroundColor",
              "syntax": "<color>",
              "default": "#faeae8"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-red__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-red__content--Color",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-gold__content--Color",
              "syntax": "<color>",
              "default": "#3d2c00"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-gold--BackgroundColor",
              "syntax": "<color>",
              "default": "#fdf7e7"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-gold__content--before--BorderColor",
              "syntax": "<color>",
              "default": "#f9e0a2"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-outline--m-gold__content--Color",
              "syntax": "<color>",
              "default": "#795600"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-blue__icon--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-cyan__icon--Color",
              "syntax": "<color>",
              "default": "#009596"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-green__icon--Color",
              "syntax": "<color>",
              "default": "#3e8635"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-orange__icon--Color",
              "syntax": "<color>",
              "default": "#ec7a08"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-red__icon--Color",
              "syntax": "<color>",
              "default": "#c9190b"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-gold__icon--Color",
              "syntax": "<color>",
              "default": "#f0ab00"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-compact--PaddingTop",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-compact--PaddingRight",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-compact--PaddingBottom",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-label--m-compact--PaddingLeft",
              "syntax": "<length>",
              "default": "0.5rem"
            }
          ],
          "cssParts": [
            {
              "description": "container for the label icon",
              "name": "icon"
            },
            {
              "description": "container for removable labels' close button",
              "name": "close-button"
            }
          ],
          "slots": [
            {
              "description": "Contains the labels's icon, e.g. web-icon-alert-success.",
              "name": "icon"
            },
            {
              "description": "Must contain the text for the label."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...BaseLabel.shadowRootOptions, delegatesFocus: true }",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "string | undefined"
              },
              "default": "'filled'",
              "description": "Changes the style of the label.\n- Filled: Colored background with colored border.\n- Outline: White background with colored border.",
              "attribute": "variant",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | undefined"
              },
              "default": "'grey'",
              "description": "Changes the color of the label",
              "attribute": "color",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "attribute": "icon",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label is compact",
              "attribute": "compact"
            },
            {
              "kind": "field",
              "name": "truncated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label text should be truncated",
              "attribute": "truncated"
            },
            {
              "kind": "field",
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label is removable",
              "attribute": "removable"
            },
            {
              "kind": "field",
              "name": "closeButtonLabel",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label for a removable label's close button",
              "attribute": "close-button-label"
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "description": "Fallback content for the icon slot. When the `icon` attribute is set, it\nshould render an icon corresponding to the value.",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "description": "Optional override to render content after the anonymous slot.",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "protected",
              "default": "new SlotController(this, null, 'icon')",
              "description": "Represents the state of the anonymous and icon slots",
              "inheritedFrom": {
                "name": "BaseLabel",
                "module": "pf-label/BaseLabel.js"
              }
            }
          ],
          "events": [
            {
              "name": "close",
              "type": {
                "text": "ComposedEvent"
              },
              "description": "when a removable label's close button is clicked"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "LabelVariant"
              },
              "default": "'filled'",
              "description": "Changes the style of the label.\n- Filled: Colored background with colored border.\n- Outline: White background with colored border.",
              "fieldName": "variant"
            },
            {
              "name": "color",
              "type": {
                "text": "LabelColor"
              },
              "default": "'grey'",
              "description": "Changes the color of the label",
              "fieldName": "color"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "fieldName": "icon"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label is compact",
              "fieldName": "compact"
            },
            {
              "name": "truncated",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label text should be truncated",
              "fieldName": "truncated"
            },
            {
              "name": "removable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Flag indicating the label is removable",
              "fieldName": "removable"
            },
            {
              "name": "close-button-label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Text label for a removable label's close button",
              "fieldName": "closeButtonLabel"
            }
          ],
          "superclass": {
            "name": "BaseLabel",
            "module": "/pf-label/BaseLabel.js"
          },
          "summary": "Allows users to display meta data in a stylized form.",
          "tagName": "pf-label",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/label/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-label/demo/pf-label.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/label/demo/patternfly/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-label/demo/patternfly.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfLabel",
          "declaration": {
            "name": "PfLabel",
            "module": "pf-label/pf-label.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-label",
          "declaration": {
            "name": "PfLabel",
            "module": "pf-label/pf-label.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-modal/pf-modal.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ModalCancelEvent",
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ModalCloseEvent",
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "ModalOpenEvent",
          "members": [
            {
              "kind": "field",
              "description": "The trigger element which triggered the modal to open",
              "type": {
                "text": "HTMLElement | null",
                "name": "HTMLElement | null"
              },
              "name": "trigger",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "Modals display information in a window or help a user focus on a task without navigating them away from the page.\nA user can’t perform other actions until the modal is dismissed.",
          "name": "PfModal",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-modal-box--ZIndex",
              "syntax": "<length>",
              "default": "500"
            },
            {
              "description": "Width of the modal",
              "name": "--pf-c-modal-box--Width",
              "syntax": "<length>",
              "default": "calc(100% - 2rem)"
            },
            {
              "description": "Max width of the modal",
              "name": "--pf-c-modal-box--MaxWidth",
              "syntax": "<length>",
              "default": "calc(100% - 2rem)"
            },
            {
              "description": "Max width of the small variant modal",
              "name": "--pf-c-modal-box--m-sm--sm--MaxWidth",
              "syntax": "<length>",
              "default": "35rem"
            },
            {
              "description": "Max width of the small variant modal",
              "name": "--pf-c-modal-box--m-md--MaxWidth",
              "syntax": "<length>",
              "default": "52.5rem"
            },
            {
              "description": "Max width of the large variant modal",
              "name": "--pf-c-modal-box--m-lg--lg--MaxWidth",
              "syntax": "<length>",
              "default": "70rem"
            },
            {
              "description": "Max height of the modal",
              "name": "--pf-c-modal-box--MaxHeight",
              "syntax": "<length>",
              "default": "calc(100% - 3rem)"
            },
            {
              "description": "",
              "name": "--pf-c-modal-box--BoxShadow",
              "syntax": "<length>",
              "default": "var(--pf-global--BoxShadow--xl)"
            },
            {
              "description": "",
              "name": "--pf-c-modal-box__title--FontSize",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-modal-box--m-align-top--MarginTop",
              "syntax": "<length>",
              "default": "2rem"
            },
            {
              "name": "--pf-c-modal-box--m-align-top--MaxWidth",
              "syntax": "<length>"
            },
            {
              "name": "--pf-c-modal-box--m-align-top--MaxHeight",
              "syntax": "<length>"
            },
            {
              "description": "",
              "name": "--pf-c-modal-box--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "default font family for header-slotted headings",
              "name": "--pf-c-modal-box__title--FontFamily"
            }
          ],
          "cssParts": [
            {
              "description": "The modal overlay which lies under the dialog and above the page body",
              "name": "overlay"
            },
            {
              "description": "The dialog element",
              "name": "dialog"
            },
            {
              "description": "The container for the dialog content",
              "name": "content"
            },
            {
              "description": "The container for the optional dialog header",
              "name": "header"
            },
            {
              "description": "The container for the optional dialog description in the header",
              "name": "description"
            },
            {
              "description": "The modal's close button",
              "name": "close-button"
            },
            {
              "description": "Actions footer container",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "The default slot can contain any type of content. When the header is not present this unnamed slot appear at the top of the modal window (to the left of the close button). Otherwise it will appear beneath the header.",
              "name": ""
            },
            {
              "description": "The header is an optional slot that appears at the top of the modal window. It should be a header tag (h2-h6).",
              "name": "header"
            },
            {
              "description": "Optional footer content. Good place to put action buttons.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "closeOnOutsideClick",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "static": true,
              "default": "false",
              "description": "Should the dialog close when user clicks outside the dialog?"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'small' | 'medium' | 'large' | undefined"
              },
              "description": "The `variant` controls the width of the modal.\nThere are three options: `small`, `medium` and `large`. The default is `large`.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "'small' | 'medium' | 'large' | undefined"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'top' | undefined"
              },
              "description": "`position=\"top\"` aligns the dialog with the top of the page",
              "attribute": "position",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional ID of the trigger element",
              "attribute": "trigger"
            },
            {
              "kind": "field",
              "name": "returnValue",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "closeButton",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#headerId",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#triggerElement",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#header",
              "privacy": "private",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#body",
              "privacy": "private",
              "type": {
                "text": "Element[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#headings",
              "privacy": "private",
              "type": {
                "text": "Element[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#cancelling",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, null, 'header', 'description', 'footer')"
            },
            {
              "kind": "method",
              "name": "_init",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "_openChanged",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "oldValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "newValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_triggerChanged",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onClick",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onKeydown",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "cancel",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setTrigger",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "toggle",
              "description": "Manually toggles the modal.\n```js\nmodal.toggle();\n```"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Manually opens the modal.\n```js\nmodal.open();\n```"
            },
            {
              "kind": "method",
              "name": "showModal"
            },
            {
              "kind": "method",
              "name": "close",
              "parameters": [
                {
                  "name": "returnValue",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Manually closes the modal.\n```js\nmodal.close();\n```"
            }
          ],
          "events": [
            {
              "type": {
                "text": "ModalOpenEvent"
              },
              "description": "Fires when a user clicks on the trigger or manually opens a modal.",
              "name": "open"
            },
            {
              "type": {
                "text": "ModalCloseEvent"
              },
              "description": "Fires when either a user clicks on either the close button or the overlay or manually closes a modal.",
              "name": "close"
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'small' | 'medium' | 'large' | undefined"
              },
              "description": "The `variant` controls the width of the modal.\nThere are three options: `small`, `medium` and `large`. The default is `large`.",
              "fieldName": "variant"
            },
            {
              "name": "position",
              "type": {
                "text": "'top' | undefined"
              },
              "description": "`position=\"top\"` aligns the dialog with the top of the page",
              "fieldName": "position"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "open"
            },
            {
              "name": "trigger",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional ID of the trigger element",
              "fieldName": "trigger"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Displays information or helps a user focus on a task",
          "tagName": "pf-modal",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/modal/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-modal/demo/pf-modal.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ModalCancelEvent",
          "declaration": {
            "name": "ModalCancelEvent",
            "module": "pf-modal/pf-modal.js"
          }
        },
        {
          "kind": "js",
          "name": "ModalCloseEvent",
          "declaration": {
            "name": "ModalCloseEvent",
            "module": "pf-modal/pf-modal.js"
          }
        },
        {
          "kind": "js",
          "name": "ModalOpenEvent",
          "declaration": {
            "name": "ModalOpenEvent",
            "module": "pf-modal/pf-modal.js"
          }
        },
        {
          "kind": "js",
          "name": "PfModal",
          "declaration": {
            "name": "PfModal",
            "module": "pf-modal/pf-modal.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-modal",
          "declaration": {
            "name": "PfModal",
            "module": "pf-modal/pf-modal.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-panel/pf-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Panel",
          "name": "PfPanel",
          "slots": [
            {
              "description": "Place header content here",
              "name": "header"
            },
            {
              "description": "Place main content here",
              "name": ""
            },
            {
              "description": "Place footer content here",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scrollable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "scrollable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'raised'|'bordered' | undefined"
              },
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, 'header', null, 'footer')"
            }
          ],
          "attributes": [
            {
              "name": "scrollable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "scrollable"
            },
            {
              "name": "variant",
              "type": {
                "text": "'raised'|'bordered' | undefined"
              },
              "fieldName": "variant"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-panel",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/panel/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-panel/demo/pf-panel.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfPanel",
          "declaration": {
            "name": "PfPanel",
            "module": "pf-panel/pf-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-panel",
          "declaration": {
            "name": "PfPanel",
            "module": "pf-panel/pf-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-progress-stepper/pf-progress-step.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfProgressStep",
          "slots": [
            {
              "description": "Short description of the current step.",
              "name": ""
            },
            {
              "description": "Longer description of the current step.",
              "name": "description"
            },
            {
              "description": "Overrides the icon property",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "parentTagName",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'pf-progress-stepper'"
            },
            {
              "kind": "field",
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional extended description of the step",
              "attribute": "description"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Step Icon",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "iconSet",
              "type": {
                "text": "string | undefined"
              },
              "description": "Step icon set",
              "attribute": "icon-set"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'pending'|'info'|'success'|'warning'|'danger' | undefined"
              },
              "description": "Describes the state of the current item",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if this item is the current active item.",
              "attribute": "current",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#slots",
              "privacy": "private",
              "default": "new SlotController(this, 'title', 'description')"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "default": "new InternalsController(this, {\n    role: 'listitem',\n  })"
            }
          ],
          "attributes": [
            {
              "name": "description",
              "type": {
                "text": "string | undefined"
              },
              "description": "Optional extended description of the step",
              "fieldName": "description"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Step Icon",
              "fieldName": "icon"
            },
            {
              "name": "icon-set",
              "type": {
                "text": "string | undefined"
              },
              "description": "Step icon set",
              "fieldName": "iconSet"
            },
            {
              "name": "variant",
              "type": {
                "text": "'pending'|'info'|'success'|'warning'|'danger' | undefined"
              },
              "description": "Describes the state of the current item",
              "fieldName": "variant"
            },
            {
              "name": "current",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates if this item is the current active item.",
              "fieldName": "current"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-progress-step",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfProgressStep",
          "declaration": {
            "name": "PfProgressStep",
            "module": "pf-progress-stepper/pf-progress-step.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-progress-step",
          "declaration": {
            "name": "PfProgressStep",
            "module": "pf-progress-stepper/pf-progress-step.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-progress-stepper/pf-progress-stepper.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A **progress stepper** displays a timeline of tasks in a workflow and tracks the user's current progress through this workflow.",
          "name": "PfProgressStepper",
          "members": [
            {
              "kind": "field",
              "name": "childTagName",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'pf-progress-step'"
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true"
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the vertical layout",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the center alignment",
              "attribute": "center",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the compact layout",
              "attribute": "compact",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "default": "new InternalsController(this, {\n    role: 'progressbar',\n    ariaValueNow: this.value.toString(),\n  })"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#onMutation())"
            },
            {
              "kind": "field",
              "name": "value",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#onMutation",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the vertical layout",
              "fieldName": "vertical"
            },
            {
              "name": "center",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the center alignment",
              "fieldName": "center"
            },
            {
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to use the compact layout",
              "fieldName": "compact"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-progress-stepper",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/progress-stepper/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-progress-stepper/demo/pf-progress-stepper.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfProgressStepper",
          "declaration": {
            "name": "PfProgressStepper",
            "module": "pf-progress-stepper/pf-progress-stepper.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-progress-stepper",
          "declaration": {
            "name": "PfProgressStepper",
            "module": "pf-progress-stepper/pf-progress-stepper.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-spinner/pf-spinner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfSpinner",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-spinner--diameter",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Width",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Height",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-sm--diameter",
              "syntax": "<length>",
              "default": "0.625rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-md--diameter",
              "syntax": "<length>",
              "default": "1.125rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-lg--diameter",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-xl--diameter",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--AnimationDuration",
              "syntax": "<time>",
              "default": "1.4s"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--AnimationTimingFunction",
              "syntax": "<string>",
              "default": "linear"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--stroke-width",
              "syntax": "<number>",
              "default": "10"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--Stroke",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--StrokeWidth",
              "syntax": "<number>",
              "default": "10"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--AnimationTimingFunction",
              "syntax": "<string>",
              "default": "ease-in-out"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'xl'",
              "description": "Preset sizes for the spinner",
              "attribute": "size",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseSpinner",
                "module": "pf-spinner/BaseSpinner.js"
              }
            },
            {
              "kind": "field",
              "name": "diameter",
              "type": {
                "text": "`${string}${'px'|'%'|'rem'|'em'|'fr'|'pt'}` | undefined"
              },
              "description": "Custom diameter of spinner set as CSS variable",
              "attribute": "diameter",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseSpinner",
                "module": "pf-spinner/BaseSpinner.js"
              }
            }
          ],
          "superclass": {
            "name": "BaseSpinner",
            "module": "/pf-spinner/BaseSpinner.js"
          },
          "tagName": "pf-spinner",
          "customElement": true,
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'xl'",
              "description": "Preset sizes for the spinner",
              "fieldName": "size",
              "inheritedFrom": {
                "name": "BaseSpinner",
                "module": "pf-spinner/BaseSpinner.ts"
              }
            },
            {
              "name": "diameter",
              "type": {
                "text": "`${string}${'px'|'%'|'rem'|'em'|'fr'|'pt'}` | undefined"
              },
              "description": "Custom diameter of spinner set as CSS variable",
              "fieldName": "diameter",
              "inheritedFrom": {
                "name": "BaseSpinner",
                "module": "pf-spinner/BaseSpinner.ts"
              }
            }
          ],
          "demos": [
            {
              "url": "https://patternflyelements.org/components/spinner/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-spinner/demo/pf-spinner.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfSpinner",
          "declaration": {
            "name": "PfSpinner",
            "module": "pf-spinner/pf-spinner.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-spinner",
          "declaration": {
            "name": "PfSpinner",
            "module": "pf-spinner/pf-spinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-switch/pf-switch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Switch",
          "name": "PfSwitch",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-switch--FontSize",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-switch--ColumnGap",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle-icon--FontSize",
              "default": "calc(1rem * .625)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle-icon--Color",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle-icon--Left",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle-icon--Offset",
              "syntax": "<length>",
              "default": "0.125rem"
            },
            {
              "description": "",
              "name": "--pf-c-switch--LineHeight",
              "syntax": "<number>",
              "default": "1.5"
            },
            {
              "description": "",
              "name": "--pf-c-switch--Height",
              "syntax": "<length>",
              "default": "auto"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--checked__toggle--BackgroundColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--checked__toggle--before--TranslateX",
              "syntax": "<length>",
              "default": "calc(100% + 0.125rem)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--checked__label--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--not-checked__label--Color",
              "syntax": "<color>",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--disabled__label--Color",
              "syntax": "<color>",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--disabled__toggle--BackgroundColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--disabled__toggle--before--BackgroundColor",
              "syntax": "<color>",
              "default": "#f5f5f5"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--focus__toggle--OutlineWidth",
              "syntax": "<length>",
              "default": "2px"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--focus__toggle--OutlineOffset",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-switch__input--focus__toggle--OutlineColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--Height",
              "syntax": "<length>",
              "default": "calc(1rem * 1.5)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--BackgroundColor",
              "syntax": "<color>",
              "default": "#8a8d90"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--BorderRadius",
              "syntax": "<length>",
              "default": "calc(1rem * 1.5)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--Width",
              "syntax": "<length>",
              "default": "calc(1rem - 0.125rem)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--Height",
              "syntax": "<length>",
              "default": "calc(1rem - 0.125rem)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--Top",
              "syntax": "<length>",
              "default": "calc((calc(1rem * 1.5) - calc(1rem - 0.125rem)) / 2)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--Left",
              "syntax": "<length>",
              "default": "calc((calc(1rem * 1.5) - calc(1rem - 0.125rem)) / 2)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--BackgroundColor",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--BorderRadius",
              "syntax": "<length>",
              "default": "30em"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--BoxShadow",
              "default": "0 0.25rem 0.5rem 0rem rgba(3, 3, 3, 0.12), 0 0 0.25rem 0 rgba(3, 3, 3, 0.06)"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--before--Transition",
              "default": "transform .25s ease 0s"
            },
            {
              "description": "",
              "name": "--pf-c-switch__toggle--Width",
              "syntax": "<length>",
              "default": "calc(calc(1rem * 1.5) + 0.125rem + calc(1rem - 0.125rem))"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRoot",
              "type": {
                "text": "ShadowRoot"
              },
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "#initiallyDisabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "label",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "showCheckIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show-check-icon",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement>"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "method",
              "name": "#onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "method",
              "name": "#onKeyup",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "method",
              "name": "#toggle",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            },
            {
              "kind": "method",
              "name": "#updateLabels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.js"
              }
            }
          ],
          "superclass": {
            "name": "BaseSwitch",
            "module": "/pf-switch/BaseSwitch.js"
          },
          "tagName": "pf-switch",
          "customElement": true,
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "label",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.ts"
              }
            },
            {
              "name": "show-check-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "showCheckIcon",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.ts"
              }
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked",
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.ts"
              }
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              },
              "inheritedFrom": {
                "name": "BaseSwitch",
                "module": "pf-switch/BaseSwitch.ts"
              }
            }
          ],
          "demos": [
            {
              "url": "https://patternflyelements.org/components/switch/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-switch/demo/pf-switch.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfSwitch",
          "declaration": {
            "name": "PfSwitch",
            "module": "pf-switch/pf-switch.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-switch",
          "declaration": {
            "name": "PfSwitch",
            "module": "pf-switch/pf-switch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/pf-tab-panel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfTabPanel",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-tab-content--m-light-300",
              "syntax": "<color>",
              "default": "#f0f0f0"
            }
          ],
          "cssParts": [
            {
              "description": "container for the panel content",
              "name": "container"
            }
          ],
          "slots": [
            {
              "description": "Tab panel content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "BaseTabPanel",
                "module": "pf-tabs/BaseTabPanel.js"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTabPanel",
                "module": "pf-tabs/BaseTabPanel.js"
              }
            }
          ],
          "superclass": {
            "name": "BaseTabPanel",
            "module": "/pf-tabs/BaseTabPanel.js"
          },
          "tagName": "pf-tab-panel",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTabPanel",
          "declaration": {
            "name": "PfTabPanel",
            "module": "pf-tabs/pf-tab-panel.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-tab-panel",
          "declaration": {
            "name": "PfTabPanel",
            "module": "pf-tabs/pf-tab-panel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/pf-tab.js",
      "declarations": [
        {
          "kind": "class",
          "description": "PfTab",
          "name": "PfTab",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-tabs--m-box__item--m-current--first-child__link--before--BorderLeftWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-box__item--m-current--last-child__link--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--BackgroundColor",
              "syntax": "<color>",
              "default": "#f0f0f0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--disabled--BackgroundColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderTopWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderBottomWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderLeftWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--disabled--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--Top",
              "syntax": "<length>",
              "default": "auto"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--Right",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--Bottom",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--Left",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--PaddingTop",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--PaddingBottom",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--disabled--before--BorderBottomWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--disabled--before--BorderLeftWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderTopColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderRightColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderBottomColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--before--BorderLeftColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--FontSize",
              "syntax": "<length>",
              "default": "1rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--Color",
              "syntax": "<color>",
              "default": "#6a6e73"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--OutlineOffset",
              "syntax": "<length>",
              "default": "-0.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--BorderColor",
              "syntax": "<color>",
              "default": "#b8bbbe"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--BorderTopWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--BorderRightWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--BorderBottomWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--after--BorderLeftWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__item--m-current__link--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__item--m-current__link--after--BorderColor",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__item--m-current__link--after--BorderWidth",
              "syntax": "<length>",
              "default": "3px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__link--child--MarginRight",
              "syntax": "<length>",
              "default": "1rem"
            }
          ],
          "cssParts": [
            {
              "description": "button element",
              "name": "button"
            },
            {
              "description": "span container for the icon",
              "name": "icon"
            },
            {
              "description": "span container for the title text",
              "name": "text"
            }
          ],
          "slots": [
            {
              "description": "Can contain an `<svg>` or `<pf-icon>`",
              "name": "icon"
            },
            {
              "description": "Tab title text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "description": "`active` should be observed, and true when the tab is selected",
              "default": "false",
              "attribute": "active",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "`active` should be observed, and true when the tab is disabled",
              "default": "false",
              "attribute": "disabled",
              "reflects": true,
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "field",
              "name": "icons",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "method",
              "name": "#clickHandler",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "method",
              "name": "#activeChanged",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            },
            {
              "kind": "method",
              "name": "#disabledChanged",
              "description": "if a tab is disabled, then it is also aria-disabled\nif a tab is removed from disabled its not necessarily\nnot still aria-disabled so we don't remove the aria-disabled",
              "privacy": "private",
              "inheritedFrom": {
                "name": "BaseTab",
                "module": "pf-tabs/BaseTab.js"
              }
            }
          ],
          "events": [
            {
              "type": {
                "text": " TabExpandEvent "
              },
              "description": "when a tab expands",
              "name": "tab-expand"
            }
          ],
          "attributes": [
            {
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "active"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            }
          ],
          "superclass": {
            "name": "BaseTab",
            "module": "/pf-tabs/BaseTab.js"
          },
          "tagName": "pf-tab",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTab",
          "declaration": {
            "name": "PfTab",
            "module": "pf-tabs/pf-tab.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-tab",
          "declaration": {
            "name": "PfTab",
            "module": "pf-tabs/pf-tab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/pf-tabs.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tabs allow users to navigate between views within the same page or context. Variants include\nhorizontal, vertical, inset, and filled. Most tab variations are available as open (default) or\nbox style tabs. Box style tabs also feature a light and dark variation.",
          "name": "PfTabs",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-tabs--Width",
              "syntax": "<length>",
              "default": "auto"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--inset",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--before--BorderColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--before--BorderTopWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--before--BorderBottomWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--before---BorderLeftWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical--MaxWidth",
              "syntax": "<length>",
              "default": "15.625rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical__list--before--BorderColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical__list--before--BorderTopWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical__list--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical__list--before--BorderBottomWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical__list--before--BorderLeftWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs--m-vertical--m-box--inset",
              "syntax": "<length>",
              "default": "2rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__list--Display",
              "syntax": "<display>",
              "default": "flex"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--Width",
              "syntax": "<length>",
              "default": "3rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--Color",
              "syntax": "<color>",
              "default": "#151515"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--BackgroundColor",
              "syntax": "<color>",
              "default": "#ffffff"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--OutlineOffset",
              "syntax": "<length>",
              "default": "-0.25rem"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--TransitionDuration--margin",
              "syntax": "<time>",
              "default": ".125s"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--TransitionDuration--transform",
              "syntax": "<time>",
              "default": ".125s"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--hover--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--before--BorderColor",
              "syntax": "<color>",
              "default": "#d2d2d2"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--before--BorderRightWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--before--BorderBottomWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--before--BorderLeftWidth",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--before--border-width--base",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tabs__scroll-button--disabled--Color",
              "syntax": "<color>",
              "default": "#d2d2d2"
            }
          ],
          "cssParts": [
            {
              "description": "outer container",
              "name": "container"
            },
            {
              "description": "tabs container",
              "name": "tabs-container"
            },
            {
              "description": "tablist",
              "name": "tabs"
            },
            {
              "description": "panels",
              "name": "panels"
            }
          ],
          "slots": [
            {
              "description": "Must contain one or more `<pf-tab>`",
              "name": "tab"
            },
            {
              "description": "Must contain one or more `<pf-panel>`",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "scrollTimeoutDelay",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "150",
              "description": "Time in milliseconds to debounce between scroll events and updating scroll button state",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "method",
              "name": "isTab",
              "static": true,
              "return": {
                "type": {
                  "text": "element is PfTab"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "method",
              "name": "isPanel",
              "static": true,
              "return": {
                "type": {
                  "text": "element is PfTabPanel"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "field",
              "name": "box",
              "type": {
                "text": "'light' | 'dark' | null"
              },
              "default": "null",
              "attribute": "box",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "vertical",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "fill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "fill",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "borderBottom",
              "type": {
                "text": "'true' | 'false'"
              },
              "default": "'true'",
              "attribute": "border-bottom"
            },
            {
              "kind": "field",
              "name": "canShowScrollButtons",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconLeft",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-left'",
              "description": "Icon name to use for the scroll left button",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "field",
              "name": "scrollIconRight",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-right'",
              "description": "Icon name to use for the scroll right button",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "field",
              "name": "scrollIconSet",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'fas'",
              "description": "Icon set to use for the scroll buttons",
              "readonly": true,
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "field",
              "name": "#instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<BaseTabs>()",
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            },
            {
              "kind": "field",
              "name": "",
              "static": true,
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.js"
              }
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "number"
              },
              "description": "DOM Property: `activeKey`",
              "name": "active-key",
              "default": "0"
            },
            {
              "name": "box",
              "type": {
                "text": "'light' | 'dark' | null"
              },
              "default": "null",
              "fieldName": "box"
            },
            {
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "vertical"
            },
            {
              "name": "fill",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "fill"
            },
            {
              "name": "border-bottom",
              "type": {
                "text": "'true' | 'false'"
              },
              "default": "'true'",
              "fieldName": "borderBottom"
            },
            {
              "description": "accessible label for the tab panel's scroll left button.",
              "name": "label-scroll-left",
              "default": "\"Scroll left\"",
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.ts"
              }
            },
            {
              "description": "accessible label for the tab panel's scroll right button.\n",
              "name": "label-scroll-right",
              "default": "\"Scroll right\"",
              "inheritedFrom": {
                "name": "BaseTabs",
                "module": "pf-tabs/BaseTabs.ts"
              }
            }
          ],
          "superclass": {
            "name": "BaseTabs",
            "module": "/pf-tabs/BaseTabs.js"
          },
          "tagName": "pf-tabs",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/tabs/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-tabs/demo/pf-tabs.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTabs",
          "declaration": {
            "name": "PfTabs",
            "module": "pf-tabs/pf-tabs.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-tabs",
          "declaration": {
            "name": "PfTabs",
            "module": "pf-tabs/pf-tabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tile/pf-tile.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Tile",
          "name": "PfTile",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-tile--PaddingTop",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-tile--PaddingRight",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-tile--PaddingBottom",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-tile--PaddingLeft",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-tile--BackgroundColor",
              "syntax": "<color>",
              "default": "#FFFFFF"
            },
            {
              "description": "",
              "name": "--pf-c-tile--Transition",
              "default": "none"
            },
            {
              "description": "",
              "name": "--pf-c-tile--TranslateY",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tile--before--BorderWidth",
              "syntax": "<length>",
              "default": "1px"
            },
            {
              "description": "",
              "name": "--pf-c-tile--before--BorderColor",
              "syntax": "<color>",
              "default": "#444548"
            },
            {
              "description": "",
              "name": "--pf-c-tile--after--Height",
              "syntax": "<length>",
              "default": "3px"
            },
            {
              "description": "",
              "name": "--pf-c-tile--after--BackgroundColor",
              "syntax": "<color>",
              "default": "transparent"
            },
            {
              "description": "",
              "name": "--pf-c-tile--after--Transition",
              "default": "none"
            },
            {
              "description": "",
              "name": "--pf-c-tile--after--ScaleY",
              "default": "1"
            },
            {
              "description": "",
              "name": "--pf-c-tile__title--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-tile__icon--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-tile__icon--MarginRight",
              "syntax": "<length>",
              "default": "0"
            },
            {
              "description": "",
              "name": "--pf-c-tile__icon--FontSize",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-tile__header--m-stacked__icon--MarginBottom",
              "syntax": "<lenght>",
              "default": "0.25rem"
            }
          ],
          "cssParts": [
            {
              "description": "container for the icon",
              "name": "icon"
            },
            {
              "description": "container for the title",
              "name": "title"
            },
            {
              "description": "container for the body content",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "Icon expects a `<pf-icon>` or `<svg>`",
              "name": "icon"
            },
            {
              "description": "the title of the tile should be a heading",
              "name": "title"
            },
            {
              "description": "The content should be a paragraph",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "selected",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "stacked",
              "type": {
                "text": "StackedSize | undefined"
              },
              "attribute": "stacked",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "type": {
                "text": "boolean"
              },
              "description": "selected variant",
              "name": "selected",
              "default": "false",
              "fieldName": "selected"
            },
            {
              "type": {
                "text": "StackedSize | undefined"
              },
              "description": "stacked variant\n",
              "name": "stacked",
              "fieldName": "stacked"
            }
          ],
          "superclass": {
            "name": "BaseTile",
            "module": "/pf-tile/BaseTile.js"
          },
          "tagName": "pf-tile",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/tile/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-tile/demo/pf-tile.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTile",
          "declaration": {
            "name": "PfTile",
            "module": "pf-tile/pf-tile.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-tile",
          "declaration": {
            "name": "PfTile",
            "module": "pf-tile/pf-tile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-timestamp/pf-timestamp.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PfTimestamp",
          "members": [
            {
              "kind": "field",
              "name": "date",
              "attribute": "date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dateFormat",
              "type": {
                "text": "'full' | 'long' | 'medium' | 'short' | undefined"
              },
              "attribute": "date-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "timeFormat",
              "type": {
                "text": "'full' | 'long' | 'medium' | 'short' | undefined"
              },
              "attribute": "time-format",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "customFormat",
              "type": {
                "text": "object | undefined"
              }
            },
            {
              "kind": "field",
              "name": "displaySuffix",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "display-suffix",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "locale",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "locale",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "relative",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "relative",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "utc",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "utc",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hour12",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hour-12",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#date",
              "privacy": "private",
              "default": "new Date()"
            },
            {
              "kind": "field",
              "name": "#isoString",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isoString",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "time",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#getTimeRelative",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  }
                }
              ],
              "description": "Based off of Github Relative Time\nhttps://github.com/github/time-elements/blob/master/src/relative-time.js",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "date",
              "fieldName": "date"
            },
            {
              "name": "date-format",
              "type": {
                "text": "'full' | 'long' | 'medium' | 'short' | undefined"
              },
              "fieldName": "dateFormat"
            },
            {
              "name": "time-format",
              "type": {
                "text": "'full' | 'long' | 'medium' | 'short' | undefined"
              },
              "fieldName": "timeFormat"
            },
            {
              "name": "display-suffix",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "displaySuffix"
            },
            {
              "name": "locale",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "locale"
            },
            {
              "name": "relative",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "relative"
            },
            {
              "name": "utc",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "utc"
            },
            {
              "name": "hour-12",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hour12"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "tagName": "pf-timestamp",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/timestamp/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-timestamp/demo/pf-timestamp.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTimestamp",
          "declaration": {
            "name": "PfTimestamp",
            "module": "pf-timestamp/pf-timestamp.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-timestamp",
          "declaration": {
            "name": "PfTimestamp",
            "module": "pf-timestamp/pf-timestamp.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tooltip/pf-tooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Patternfly tooltip\n\nA Tooltip is a floating text area triggered by a user that provides helpful or contextual information.",
          "name": "PfTooltip",
          "cssProperties": [
            {
              "description": "Sets the background color for the tooltip content.",
              "name": "--pf-c-tooltip__content--BackgroundColor",
              "syntax": "<color>",
              "default": "#1b1d21"
            },
            {
              "description": "Sets the font color for the tooltip content.",
              "name": "--pf-c-tooltip__content--Color",
              "syntax": "<color>",
              "default": "#e0e0e0"
            },
            {
              "description": "Sets the font color for the tooltip content.",
              "name": "--pf-c-tooltip--line-height",
              "syntax": "<number>",
              "default": "1.5"
            },
            {
              "description": "Maximum width for the tooltip.",
              "name": "--pf-c-tooltip--MaxWidth",
              "syntax": "<length>",
              "default": "18.75rem"
            },
            {
              "description": "Box shadow for the tooltip.",
              "name": "--pf-c-tooltip--BoxShadow",
              "default": "0 0.25rem 0.5rem 0rem rgba(3, 3, 3, 0.12), 0 0 0.25rem 0 rgba(3, 3, 3, 0.06)"
            },
            {
              "description": "Top padding for the tooltip.",
              "name": "--pf-c-tooltip__content--PaddingTop",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Right padding for the tooltip.",
              "name": "--pf-c-tooltip__content--PaddingRight",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Bottom padding for the tooltip.",
              "name": "--pf-c-tooltip__content--PaddingBottom",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Left Padding for the tooltip.",
              "name": "--pf-c-tooltip__content--PaddingLeft",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Font size for the tooltip content.",
              "name": "--pf-c-tooltip__content--FontSize",
              "default": "0.875rem"
            },
            {
              "description": "Tooltip arrow width.",
              "name": "--pf-c-tooltip__arrow--Width",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Tooltip arrow height.",
              "name": "--pf-c-tooltip__arrow--Height",
              "syntax": "<length>",
              "default": "0.5rem"
            },
            {
              "description": "Positions the tooltip arrow along the x axis for `top` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-top--TranslateX",
              "default": "-50%"
            },
            {
              "description": "Positions the tooltip arrow along the y axis for `top` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-top--TranslateY",
              "default": "50%"
            },
            {
              "description": "Rotates the tooltip arrow based on degrees of movement for `top` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-top--Rotate",
              "default": "45deg"
            },
            {
              "description": "Positions the tooltip arrow along the x axis for `right` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-right--TranslateX",
              "default": "-50%"
            },
            {
              "description": "Positions the tooltip arrow along the y axis for `right` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-right--TranslateY",
              "default": "-50%"
            },
            {
              "description": "Rotates the tooltip arrow based on degrees of movement for `right` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-right--Rotate",
              "default": "45deg"
            },
            {
              "description": "Positions the tooltip arrow along the x axis for `bottom` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-bottom--TranslateX",
              "default": "-50%"
            },
            {
              "description": "Positions the tooltip arrow along the y axis for `bottom` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-bottom--TranslateY",
              "default": "-50%"
            },
            {
              "description": "Rotates the tooltip arrow based on degrees of movement for `bottom` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-bottom--Rotate",
              "default": "45deg"
            },
            {
              "description": "Positions the tooltip arrow along the x axis for `left` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-left--TranslateX",
              "default": "50%"
            },
            {
              "description": "Positions the tooltip arrow along the y axis for `left` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-left--TranslateY",
              "default": "-50%"
            },
            {
              "description": "Rotates the tooltip arrow based on degrees of movement for `left` positioned arrows.",
              "name": "--pf-c-tooltip__arrow--m-left--Rotate",
              "default": "45deg"
            }
          ],
          "slots": [
            {
              "description": "This slot wraps around the element that should be used to invoke the tooltip content to display.\nTypically this would be an icon, button, or other small sized element."
            },
            {
              "description": "This slot renders the content that will be displayed inside of the tooltip.\nTypically this would include a string of text without any additional elements.\nThis element is wrapped with a div inside of the component to give it the stylings and background colors.",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "Placement | undefined"
              },
              "description": "The position of the tooltip, relative to the invoking content",
              "default": "'top'",
              "attribute": "position",
              "inheritedFrom": {
                "name": "BaseTooltip",
                "module": "pf-tooltip/BaseTooltip.js"
              }
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tooltip content. Overridden by the content slot",
              "attribute": "content",
              "inheritedFrom": {
                "name": "BaseTooltip",
                "module": "pf-tooltip/BaseTooltip.js"
              }
            },
            {
              "kind": "field",
              "name": "#float",
              "privacy": "private",
              "default": "new FloatingDOMController(this, {\n    arrow: true,\n    content: (): HTMLElement | undefined | null => this.shadowRoot?.querySelector('#tooltip'),\n  })",
              "inheritedFrom": {
                "name": "BaseTooltip",
                "module": "pf-tooltip/BaseTooltip.js"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "inheritedFrom": {
                "name": "BaseTooltip",
                "module": "pf-tooltip/BaseTooltip.js"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "inheritedFrom": {
                "name": "BaseTooltip",
                "module": "pf-tooltip/BaseTooltip.js"
              }
            }
          ],
          "attributes": [
            {
              "name": "position",
              "type": {
                "text": "Placement"
              },
              "default": "'top'",
              "fieldName": "position"
            },
            {
              "name": "content",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tooltip content. Overridden by the content slot",
              "fieldName": "content"
            }
          ],
          "superclass": {
            "name": "BaseTooltip",
            "module": "/pf-tooltip/BaseTooltip.js"
          },
          "summary": "Toggle the visiblity of helpful or contextual information.",
          "tagName": "pf-tooltip",
          "customElement": true,
          "demos": [
            {
              "url": "https://patternflyelements.org/components/tooltip/demo/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-tooltip/demo/pf-tooltip.html"
              }
            },
            {
              "url": "https://patternflyelements.org/components/tooltip/demo/performance/",
              "source": {
                "href": "https://github.com/patternfly/patternfly-elements/tree/main/elements/pf-tooltip/demo/performance.html"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PfTooltip",
          "declaration": {
            "name": "PfTooltip",
            "module": "pf-tooltip/pf-tooltip.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "pf-tooltip",
          "declaration": {
            "name": "PfTooltip",
            "module": "pf-tooltip/pf-tooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-accordion/BaseAccordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AccordionExpandEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordionHeader",
                "name": "BaseAccordionHeader",
                "module": "./BaseAccordionHeader.js"
              },
              "name": "toggle",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordionPanel",
                "name": "BaseAccordionPanel",
                "module": "./BaseAccordionPanel.js"
              },
              "name": "panel",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "AccordionCollapseEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordionHeader",
                "name": "BaseAccordionHeader",
                "module": "./BaseAccordionHeader.js"
              },
              "name": "toggle",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordionPanel",
                "name": "BaseAccordionPanel",
                "module": "./BaseAccordionPanel.js"
              },
              "name": "panel",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BaseAccordion",
          "members": [
            {
              "kind": "method",
              "name": "isAccordion",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordion"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isHeader",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordionHeader"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPanel",
              "static": true,
              "return": {
                "type": {
                  "text": "target is BaseAccordionPanel"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandedIndex",
              "type": {
                "text": "number[]"
              },
              "default": "[]",
              "description": "Sets and reflects the currently expanded accordion 0-based indexes.\nUse commas to separate multiple indexes.\n```html\n<pf-accordion expanded-index=\"1,2\">\n...\n</pf-accordion>\n```",
              "attribute": "expanded-index"
            },
            {
              "kind": "field",
              "name": "headers",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "panels",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "expandedSets",
              "privacy": "protected",
              "default": "new Set<number>()"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "#styles",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#transitionDuration",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#initialized",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "getUpdateComplete",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "Promise<boolean>"
                }
              }
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(() => this.#init())"
            },
            {
              "kind": "method",
              "name": "#init",
              "description": "Initialize the accordion by connecting headers and panels\nwith aria controls and labels; set up the default disclosure\nstate if not set by the author; and check the URL for default\nopen",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#panelForHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#expandHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                },
                {
                  "name": "index",
                  "default": "this.#getIndex(header)"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#expandPanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#collapseHeader",
              "parameters": [
                {
                  "name": "header",
                  "type": {
                    "text": "BaseAccordionHeader"
                  }
                },
                {
                  "name": "index",
                  "default": "this.#getIndex(header)"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#collapsePanel",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getAnimationDuration",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#animate",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "BaseAccordionPanel"
                  }
                },
                {
                  "name": "start",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "end",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "AccordionHeaderChangeEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onKeydown",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#allHeaders",
              "return": {
                "type": {
                  "text": "BaseAccordionHeader[]"
                }
              },
              "parameters": [
                {
                  "name": "accordion",
                  "default": "this",
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#allPanels",
              "return": {
                "type": {
                  "text": "BaseAccordionPanel[]"
                }
              },
              "parameters": [
                {
                  "name": "accordion",
                  "default": "this",
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#previousHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#nextHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#firstHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#lastHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getIndex",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "Element | null"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateAccessibility",
              "privacy": "public"
            },
            {
              "kind": "method",
              "name": "toggle",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to expand or collapse."
            },
            {
              "kind": "method",
              "name": "expand",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "parentAccordion",
                  "optional": true,
                  "type": {
                    "text": "BaseAccordion"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to expand."
            },
            {
              "kind": "method",
              "name": "expandAll",
              "privacy": "public",
              "description": "Expands all accordion items."
            },
            {
              "kind": "method",
              "name": "collapse",
              "privacy": "public",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Accepts a 0-based index value (integer) for the set of accordion items to collapse."
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "privacy": "public",
              "description": "Collapses all accordion items."
            }
          ],
          "attributes": [
            {
              "name": "expanded-index",
              "type": {
                "text": "number[]"
              },
              "default": "[]",
              "description": "Sets and reflects the currently expanded accordion 0-based indexes.\nUse commas to separate multiple indexes.\n```html\n<pf-accordion expanded-index=\"1,2\">\n  ...\n</pf-accordion>\n```",
              "fieldName": "expandedIndex"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionExpandEvent",
          "declaration": {
            "name": "AccordionExpandEvent",
            "module": "pf-accordion/BaseAccordion.js"
          }
        },
        {
          "kind": "js",
          "name": "AccordionCollapseEvent",
          "declaration": {
            "name": "AccordionCollapseEvent",
            "module": "pf-accordion/BaseAccordion.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseAccordion",
          "declaration": {
            "name": "BaseAccordion",
            "module": "pf-accordion/BaseAccordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-accordion/BaseAccordionHeader.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AccordionHeaderChangeEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "boolean",
                "name": "boolean"
              },
              "name": "expanded",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordionHeader",
                "name": "BaseAccordionHeader"
              },
              "name": "toggle",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "BaseAccordion",
                "name": "BaseAccordion",
                "module": "./BaseAccordion.js"
              },
              "name": "accordion",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BaseAccordionHeader",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headingText",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "heading-text",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "headingTag",
              "type": {
                "text": "string"
              },
              "default": "'h3'",
              "attribute": "heading-tag",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#generatedHtag",
              "privacy": "private",
              "type": {
                "text": "HTMLHeadingElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "method",
              "name": "#initHeader",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderAfterButton",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Template hook: before </button>"
            },
            {
              "kind": "method",
              "name": "#getOrCreateHeader",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ],
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            },
            {
              "name": "heading-text",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "headingText"
            },
            {
              "name": "heading-tag",
              "type": {
                "text": "string"
              },
              "default": "'h3'",
              "fieldName": "headingTag"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AccordionHeaderChangeEvent",
          "declaration": {
            "name": "AccordionHeaderChangeEvent",
            "module": "pf-accordion/BaseAccordionHeader.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseAccordionHeader",
          "declaration": {
            "name": "BaseAccordionHeader",
            "module": "pf-accordion/BaseAccordionHeader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-accordion/BaseAccordionPanel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseAccordionPanel",
          "members": [
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "expanded",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "expanded"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseAccordionPanel",
          "declaration": {
            "name": "BaseAccordionPanel",
            "module": "pf-accordion/BaseAccordionPanel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-avatar/BaseAvatar.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "AvatarLoadEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "Event",
                "name": "Event"
              },
              "name": "originalEvent",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "Event",
            "module": "global:"
          }
        },
        {
          "kind": "class",
          "description": "Avatar is an element for displaying a user's avatar image.",
          "name": "BaseAvatar",
          "members": [
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Avatar image'",
              "description": "The alt text for the avatar image.",
              "attribute": "alt",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'sm'|'md'|'lg'|'xl'"
              },
              "default": "'sm'",
              "description": "Size of the Avatar",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Avatar image is dark",
              "attribute": "dark",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "The URL to the user's custom avatar image.",
              "fieldName": "src"
            },
            {
              "name": "alt",
              "type": {
                "text": "string | undefined"
              },
              "default": "'Avatar image'",
              "description": "The alt text for the avatar image.",
              "fieldName": "alt"
            },
            {
              "name": "size",
              "type": {
                "text": "'sm'|'md'|'lg'|'xl'"
              },
              "default": "'sm'",
              "description": "Size of the Avatar",
              "fieldName": "size"
            },
            {
              "name": "dark",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether or not the Avatar image is dark",
              "fieldName": "dark"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "For displaying a user's avatar image",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "AvatarLoadEvent",
          "declaration": {
            "name": "AvatarLoadEvent",
            "module": "pf-avatar/BaseAvatar.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseAvatar",
          "declaration": {
            "name": "BaseAvatar",
            "module": "pf-avatar/BaseAvatar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-badge/BaseBadge.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseBadge",
          "members": [
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "number",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets a numeric value for a badge.\n\nYou can pair it with `threshold` attribute to add a `+` sign\nif the number exceeds the threshold value."
            },
            {
              "kind": "field",
              "name": "threshold",
              "type": {
                "text": "number | undefined"
              },
              "description": "Sets a threshold for the numeric value and adds `+` sign if\nthe numeric value exceeds the threshold value."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseBadge",
          "declaration": {
            "name": "BaseBadge",
            "module": "pf-badge/BaseBadge.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-button/BaseButton.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Base button class",
          "name": "BaseButton",
          "cssParts": [
            {
              "description": "Container for the icon slot",
              "name": "icon"
            }
          ],
          "slots": [
            {
              "description": "Contains the button's icon or state indicator, e.g. a spinner.",
              "name": "icon"
            },
            {
              "description": "Must contain exactly one `<button>` element as the only content not assigned to a named slot."
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "ShadowRootInit"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button'|'submit'|'reset' | undefined"
              },
              "attribute": "type",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Accessible name for the button, use when the button does not have slotted text",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "attribute": "icon"
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | undefined"
              },
              "description": "Changes the size of the button."
            },
            {
              "kind": "field",
              "name": "danger",
              "type": {
                "text": "unknown"
              },
              "description": "Use danger buttons for actions a user can take that are potentially\ndestructive or difficult/impossible to undo, like deleting or removing\nuser data."
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private",
              "default": "new InternalsController(this)"
            },
            {
              "kind": "field",
              "name": "hasIcon",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "privacy": "protected"
            },
            {
              "kind": "method",
              "name": "#onClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "TemplateResult"
                }
              },
              "description": "Fallback content for the icon slot. When the `icon` attribute is set, it\nshould render an icon corresponding to the value."
            }
          ],
          "attributes": [
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button",
              "fieldName": "disabled"
            },
            {
              "name": "type",
              "type": {
                "text": "'button'|'submit'|'reset' | undefined"
              },
              "fieldName": "type"
            },
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "description": "Accessible name for the button, use when the button does not have slotted text",
              "fieldName": "label"
            },
            {
              "name": "value",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "value"
            },
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "name"
            },
            {
              "name": "icon",
              "type": {
                "text": "string | undefined"
              },
              "description": "Shorthand for the `icon` slot, the value is icon name",
              "fieldName": "icon"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseButton",
          "declaration": {
            "name": "BaseButton",
            "module": "pf-button/BaseButton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-card/BaseCard.js",
      "declarations": [
        {
          "kind": "class",
          "description": "This element creates a header, body, and footer region in which to place\ncontent or other components.",
          "name": "BaseCard",
          "cssParts": [
            {
              "description": "The container for *header* content",
              "name": "header"
            },
            {
              "description": "The container for *body* content",
              "name": "body"
            },
            {
              "description": "The container for *footer* content",
              "name": "footer"
            }
          ],
          "slots": [
            {
              "description": "If this slot is used, we expect a heading level tag (h1, h2, h3, h4, h5, h6).\nAn icon, svg, or use of the icon component are also valid in this region.",
              "name": "header"
            },
            {
              "description": "Any content that is not designated for the header or footer slot, will go to this slot.",
              "name": ""
            },
            {
              "description": "Use this slot for anything that you want to be stuck to the base of the card.",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "slots",
              "privacy": "protected",
              "default": "new SlotController(this, 'header', null, 'footer')"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "summary": "Gives a preview of information in a small layout",
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseCard",
          "declaration": {
            "name": "BaseCard",
            "module": "pf-card/BaseCard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-clipboard-copy/BaseClipboardCopy.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ClipboardCopyCopiedEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "string",
                "name": "string"
              },
              "name": "text",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "Clipboard Copy",
          "name": "BaseClipboardCopy",
          "slots": [
            {
              "description": "Place element content here",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "copy",
              "description": "Copy the current value to the clipboard."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ClipboardCopyCopiedEvent",
          "declaration": {
            "name": "ClipboardCopyCopiedEvent",
            "module": "pf-clipboard-copy/BaseClipboardCopy.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseClipboardCopy",
          "declaration": {
            "name": "BaseClipboardCopy",
            "module": "pf-clipboard-copy/BaseClipboardCopy.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-code-block/BaseCodeBlock.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseCodeBlock",
          "members": [
            {
              "kind": "field",
              "name": "content",
              "privacy": "protected",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "dedent",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "str",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseCodeBlock",
          "declaration": {
            "name": "BaseCodeBlock",
            "module": "pf-code-block/BaseCodeBlock.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-icon/BaseIcon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Icon component lazy-loads icons and allows custom icon sets",
          "name": "BaseIcon",
          "cssParts": [
            {
              "description": "Container for the fallback (i.e. slotted) content",
              "name": "fallback"
            }
          ],
          "slots": [
            {
              "description": "Slotted content is used as a fallback in case the icon doesn't load",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "addIconSet",
              "privacy": "public",
              "static": true,
              "parameters": [
                {
                  "name": "setName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "getter",
                  "type": {
                    "text": "typeof BaseIcon['getIconUrl']"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "getIconUrl",
              "type": {
                "text": "URLGetter"
              },
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "onIntersect",
              "type": {
                "text": "IntersectionObserverCallback"
              },
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "io",
              "privacy": "private",
              "static": true,
              "default": "new IntersectionObserver(this.onIntersect)"
            },
            {
              "kind": "field",
              "name": "getters",
              "privacy": "private",
              "static": true,
              "default": "new Map<string, URLGetter>()"
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<BaseIcon>()"
            },
            {
              "kind": "field",
              "name": "defaultIconSet",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "set",
              "description": "Icon set",
              "attribute": "set"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Icon name",
              "attribute": "icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Size of the icon"
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "'idle'|'lazy'|'eager' | undefined"
              },
              "default": "'lazy'",
              "description": "Controls how eager the element will be to load the icon data\n- `eager`: eagerly load the icon, blocking the main thread\n- `idle`: wait for the browser to attain an idle state before loading\n- `lazy` (default): wait for the element to enter the viewport before loading",
              "attribute": "loading"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "unknown | undefined"
              },
              "privacy": "private",
              "description": "Icon content. Any value that lit can render"
            },
            {
              "kind": "field",
              "name": "#intersecting",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "default": "new Logger(this)"
            },
            {
              "kind": "field",
              "name": "#class",
              "privacy": "private",
              "type": {
                "text": "typeof BaseIcon"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#lazyLoad",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#iconChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "load",
              "privacy": "protected"
            }
          ],
          "events": [
            {
              "name": "load",
              "type": {
                "text": "Event"
              },
              "description": "Fired when an icon is loaded and rendered"
            },
            {
              "description": "Fired when an icon fails to load",
              "name": "error"
            }
          ],
          "attributes": [
            {
              "name": "set",
              "description": "Icon set",
              "fieldName": "set"
            },
            {
              "name": "icon",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Icon name",
              "fieldName": "icon"
            },
            {
              "name": "loading",
              "type": {
                "text": "'idle'|'lazy'|'eager' | undefined"
              },
              "default": "'lazy'",
              "description": "Controls how eager the element will be to load the icon data\n- `eager`: eagerly load the icon, blocking the main thread\n- `idle`: wait for the browser to attain an idle state before loading\n- `lazy` (default): wait for the element to enter the viewport before loading",
              "fieldName": "loading"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseIcon",
          "declaration": {
            "name": "BaseIcon",
            "module": "pf-icon/BaseIcon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-label/BaseLabel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Base label class",
          "name": "BaseLabel",
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "slots",
              "privacy": "protected",
              "default": "new SlotController(this, null, 'icon')",
              "description": "Represents the state of the anonymous and icon slots"
            },
            {
              "kind": "method",
              "name": "renderDefaultIcon",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "description": "Fallback content for the icon slot. When the `icon` attribute is set, it\nshould render an icon corresponding to the value."
            },
            {
              "kind": "method",
              "name": "renderSuffix",
              "privacy": "protected",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "description": "Optional override to render content after the anonymous slot."
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseLabel",
          "declaration": {
            "name": "BaseLabel",
            "module": "pf-label/BaseLabel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-spinner/BaseSpinner.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Base spinner class",
          "name": "BaseSpinner",
          "cssProperties": [
            {
              "description": "",
              "name": "--pf-c-spinner--diameter",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Width",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Height",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--Color",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-sm--diameter",
              "syntax": "<length>",
              "default": "0.625rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-md--diameter",
              "syntax": "<length>",
              "default": "1.125rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-lg--diameter",
              "syntax": "<length>",
              "default": "1.5rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--m-xl--diameter",
              "syntax": "<length>",
              "default": "3.375rem"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--AnimationDuration",
              "syntax": "<time>",
              "default": "1.4s"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--AnimationTimingFunction",
              "syntax": "<string>",
              "default": "linear"
            },
            {
              "description": "",
              "name": "--pf-c-spinner--stroke-width",
              "syntax": "<number>",
              "default": "10"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--Stroke",
              "syntax": "<color>",
              "default": "#06c"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--StrokeWidth",
              "syntax": "<number>",
              "default": "10"
            },
            {
              "description": "",
              "name": "--pf-c-spinner__path--AnimationTimingFunction",
              "syntax": "<string>",
              "default": "ease-in-out"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'xl'",
              "description": "Preset sizes for the spinner",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "diameter",
              "type": {
                "text": "`${string}${'px'|'%'|'rem'|'em'|'fr'|'pt'}` | undefined"
              },
              "description": "Custom diameter of spinner set as CSS variable",
              "attribute": "diameter",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "SpinnerSize"
              },
              "default": "'xl'",
              "description": "Preset sizes for the spinner",
              "fieldName": "size"
            },
            {
              "name": "diameter",
              "type": {
                "text": "`${string}${'px'|'%'|'rem'|'em'|'fr'|'pt'}` | undefined"
              },
              "description": "Custom diameter of spinner set as CSS variable",
              "fieldName": "diameter"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseSpinner",
          "declaration": {
            "name": "BaseSpinner",
            "module": "pf-spinner/BaseSpinner.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-switch/BaseSwitch.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Switch",
          "name": "BaseSwitch",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true, }",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formAssociated",
              "type": {
                "text": "boolean"
              },
              "static": true,
              "default": "true",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "shadowRoot",
              "type": {
                "text": "ShadowRoot"
              }
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#initiallyDisabled",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showCheckIcon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "show-check-icon",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "checked",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeListOf<HTMLLabelElement>"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "formDisabledCallback",
              "parameters": [
                {
                  "name": "disabled",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onKeyup",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateLabels",
              "privacy": "private"
            }
          ],
          "events": [
            {
              "name": "change",
              "type": {
                "text": "Event"
              }
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "label"
            },
            {
              "name": "show-check-icon",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "showCheckIcon"
            },
            {
              "name": "checked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "checked"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseSwitch",
          "declaration": {
            "name": "BaseSwitch",
            "module": "pf-switch/BaseSwitch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/BaseTab.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabExpandEvent",
          "members": [
            {
              "kind": "field",
              "type": {
                "text": "boolean",
                "name": "boolean"
              },
              "name": "active",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "BaseTab",
                "name": "BaseTab"
              },
              "name": "tab",
              "privacy": "public"
            }
          ],
          "superclass": {
            "name": "ComposedEvent",
            "package": "@patternfly/pfe-core"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "BaseTab",
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{ ...LitElement.shadowRootOptions, delegatesFocus: true }"
            },
            {
              "kind": "field",
              "name": "icons",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "type": {
                "text": "boolean"
              },
              "description": "`active` should be observed, and true when the tab is selected"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "`active` should be observed, and true when the tab is disabled"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#clickHandler",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#activeChanged",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#disabledChanged",
              "description": "if a tab is disabled, then it is also aria-disabled\nif a tab is removed from disabled its not necessarily\nnot still aria-disabled so we don't remove the aria-disabled",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabExpandEvent",
          "declaration": {
            "name": "TabExpandEvent",
            "module": "pf-tabs/BaseTab.js"
          }
        },
        {
          "kind": "js",
          "name": "BaseTab",
          "declaration": {
            "name": "BaseTab",
            "module": "pf-tabs/BaseTab.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/BaseTabPanel.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseTabPanel",
          "members": [
            {
              "kind": "field",
              "name": "hidden",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#internals",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseTabPanel",
          "declaration": {
            "name": "BaseTabPanel",
            "module": "pf-tabs/BaseTabPanel.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tabs/BaseTabs.js",
      "declarations": [
        {
          "kind": "class",
          "description": "BaseTabs",
          "name": "BaseTabs",
          "members": [
            {
              "kind": "method",
              "name": "isTab",
              "static": true,
              "return": {
                "type": {
                  "text": "element is BaseTab"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "BaseTab"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isPanel",
              "static": true,
              "return": {
                "type": {
                  "text": "element is BaseTabPanel"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "BaseTabPanel"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "scrollTimeoutDelay",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0",
              "description": "Time in milliseconds to debounce between scroll events and updating scroll button state",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconLeft",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-left'",
              "description": "Icon name to use for the scroll left button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconRight",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'angle-right'",
              "description": "Icon name to use for the scroll right button",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "scrollIconSet",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "static": true,
              "default": "'fas'",
              "description": "Icon set to use for the scroll buttons",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<BaseTabs>()"
            },
            {
              "kind": "field",
              "name": "",
              "static": true
            }
          ],
          "attributes": [
            {
              "description": "accessible label for the tab panel's scroll left button.",
              "name": "label-scroll-left",
              "default": "\"Scroll left\""
            },
            {
              "description": "accessible label for the tab panel's scroll right button.\n",
              "name": "label-scroll-right",
              "default": "\"Scroll right\""
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseTabs",
          "declaration": {
            "name": "BaseTabs",
            "module": "pf-tabs/BaseTabs.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tile/BaseTile.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseTile",
          "cssParts": [
            {
              "description": "container for the icon",
              "name": "icon"
            },
            {
              "description": "container for the title",
              "name": "title"
            },
            {
              "description": "container for the body content",
              "name": "body"
            }
          ],
          "slots": [
            {
              "description": "Icon expects a `<pf-icon>` or `<svg>`",
              "name": "icon"
            },
            {
              "description": "the title of the tile should be a heading",
              "name": "title"
            },
            {
              "description": "The content should be a paragraph",
              "name": ""
            }
          ],
          "members": [],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseTile",
          "declaration": {
            "name": "BaseTile",
            "module": "pf-tile/BaseTile.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "pf-tooltip/BaseTooltip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "BaseTooltip",
          "members": [
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "Placement | undefined"
              },
              "description": "The position of the tooltip, relative to the invoking content"
            },
            {
              "kind": "field",
              "name": "#float",
              "privacy": "private",
              "default": "new FloatingDOMController(this, {\n    arrow: true,\n    content: (): HTMLElement | undefined | null => this.shadowRoot?.querySelector('#tooltip'),\n  })"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BaseTooltip",
          "declaration": {
            "name": "BaseTooltip",
            "module": "pf-tooltip/BaseTooltip.js"
          }
        }
      ]
    }
  ]
}
