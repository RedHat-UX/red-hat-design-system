{"version":3,"file":"pf-accordion-header.js","sourceRoot":"","sources":["pf-accordion-header.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,KAAK,CAAC;AAC3B,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AAEtD,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;AAErF,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;;;AAI/D,OAAO,yCAAyC,CAAC;AAEjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAqEG;AAEI,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,mBAAmB;IAAnD;;QASL,mCAAS,IAAI,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,EAAC;IAcrD,CAAC;IAZC,iBAAiB;QACf,OAAO,IAAI,CAAA,GAAG,CAAC,uBAAA,IAAI,gCAAO,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;;;cAGlD;;wBAEU,IAAI,CAAC,IAAI,IAAI,aAAa;uBAC3B,IAAI,CAAC,OAAO,IAAI,KAAK;;;KAGvC,CAAC;IACJ,CAAC;;;AArBe,wBAAM,GAAG,CAAC,GAAG,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;AAEnC;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;mDAA2B;AAE1B;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;+CAAe;AAES;IAAnD,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC;kDAAkB;AAP1D,iBAAiB;IAD7B,aAAa,CAAC,qBAAqB,CAAC;GACxB,iBAAiB,CAuB7B;SAvBY,iBAAiB","sourcesContent":["import { html } from 'lit';\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport { BaseAccordionHeader } from './BaseAccordionHeader.js';\n\nimport style from './pf-accordion-header.css';\n\nimport '@patternfly/elements/pf-icon/pf-icon.js';\n\n/**\n * Accordion Header\n *\n * @csspart text - inline element containing the heading text or slotted heading content\n * @csspart accents - container for accents within the header\n * @csspart icon - caret icon\n *\n * @slot\n *       We expect the light DOM of the pf-accordion-header to be a heading level tag (h1, h2, h3, h4, h5, h6)\n * @slot accents\n *       These elements will appear inline with the accordion header, between the header and the chevron\n *       (or after the chevron and header in disclosure mode).\n *\n * @fires {AccordionHeaderChangeEvent} change - when the open panels change\n *\n * @cssprop     {<color>} --pf-c-accordion__toggle--Color\n *              Sets the font color for the accordion header.\n *              {@default `var(--pf-global--Color--100, #151515)`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--BackgroundColor\n *              Sets the background color for the accordion header toggle element.\n *              {@default `transparent`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--after--BackgroundColor\n *              Sets the background color for the after element for the accordion header toggle element.\n *              {@default `transparent`}\n * @cssprop     {<length>} --pf-c-accordion__toggle--PaddingTop\n *              Sets the top padding for the accordion header.\n *              {@default `var(--pf-global--spacer--sm, 0.5rem)`}\n * @cssprop     {<length>} --pf-c-accordion__toggle--PaddingRight\n *              Sets the right padding for the accordion header.\n *              {@default `var(--pf-global--spacer--md, 1rem)`}\n * @cssprop     {<length>} --pf-c-accordion__toggle--PaddingBottom\n *              Sets the bottom padding for the accordion header.\n *              {@default `var(--pf-global--spacer--sm, 0.5rem)`}\n * @cssprop     {<length>} --pf-c-accordion__toggle--PaddingLeft\n *              Sets the left padding for the accordion header.\n *              {@default `var(--pf-global--spacer--md, 1rem)`}\n * @cssprop     {<length>} --pf-c-accordion__toggle--FontSize\n *              Sets the sidebar background color for the accordion header.\n *              {@default `var(--pf-global--FontSize--lg, 1rem)`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--FontFamily\n *              Sets the font family for the accordion header.\n *              {@default `var(--pf-global--FontFamily--redhat-updated--heading--sans-serif, \"RedHatDisplayUpdated\", helvetica, arial, sans-serif)`}\n * @cssprop     --pf-c-accordion__toggle--FontWeight\n *              Sets the font weight for the accordion header.\n *              {@default `var(--pf-global--FontWeight--normal, 400)`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--active--BackgroundColor\n *              Sets the active backgrdound color for the accordion header.\n *              {@default `var(--pf-global--BackgroundColor--200, #f0f0f0)`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--active-text--Color\n *              Sets the active text color for the accordion header.\n *              {@default `var(--pf-global--link--Color, #0066cc)`}\n * @cssprop     --pf-c-accordion__toggle--active-text--FontWeight\n *              Sets the active text font weight for the accordion header.\n *              {@default `var(--pf-global--FontWeight--semi-bold, 700)`}\n * @cssprop     {<color>} --pf-c-accordion__toggle--expanded--before--BackgroundColor\n *              Sets the hover expanded before background color for the accordion header.\n *              {@default `var(--pf-global--link--Color, #0066cc)`}\n * @cssprop     --pf-c-accordion__toggle--expanded-icon--Rotate\n *              Sets the expanded icon rotation degrees for the accordion header.\n *              {@default `90deg`}\n * @cssprop     {<length>} --pf-c-accordion__toggle-text--MaxWidth\n *              Sets the max width for the text inside the accordion header.\n *              {@default `calc(100% - var(--pf-global--spacer--lg, 1.5rem))`}\n * @cssprop     --pf-c-accordion__toggle--before--Width\n *              Sets the sidebar width for the accordion header.\n *              {@default `var(--pf-global--BorderWidth--lg, 3px)`}\n * @cssprop     --pf-c-accordion__toggle-icon--Transition\n *              Sets the transition animation for the accordion header.\n *              {@default `0.2s ease-in 0s`}\n */\n@customElement('pf-accordion-header')\nexport class PfAccordionHeader extends BaseAccordionHeader {\n  static readonly styles = [...BaseAccordionHeader.styles, style];\n\n  @property({ reflect: true }) bordered?: 'true'|'false';\n\n  @property({ reflect: true }) icon?: string;\n\n  @property({ reflect: true, attribute: 'icon-set' }) iconSet?: string;\n\n  #slots = new SlotController(this, 'accents', null);\n\n  renderAfterButton() {\n    return html`${!this.#slots.hasSlotted('accents') ? '' : html`\n      <span part=\"accents\">\n        <slot name=\"accents\"></slot>\n      </span>`}\n      <pf-icon part=\"icon\"\n                icon=\"${this.icon ?? 'angle-right'}\"\n                set=\"${this.iconSet ?? 'fas'}\"\n                class=\"icon\"\n                size=\"lg\"></pf-icon>\n    `;\n  }\n}\n\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-accordion-header': PfAccordionHeader;\n  }\n}\n"]}