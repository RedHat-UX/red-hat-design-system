{"version":3,"file":"pf-banner.js","sourceRoot":"","sources":["pf-banner.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAuB,MAAM,KAAK,CAAC;AAE5D,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,MAAM,qDAAqD,CAAC;;;AAYrF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AAEH,IAAa,QAAQ,GAArB,MAAa,QAAS,SAAQ,UAAU;IAAxC;;QASE,4DAA4D;QAC/B,WAAM,GAAG,KAAK,CAAC;QAE5C,2DAA2D;QAC3D,0BAAS,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,EAAC;IAqBlD,CAAC;IAnBU,UAAU,CAAC,OAA6B;QAC/C,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;YACpC,MAAM,CAAC,yCAAyC,CAAC,CAAC;SACnD;IACH,CAAC;IAEQ,MAAM;QACb,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAC/B,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,IAAI,uBAAA,IAAI,uBAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QACzD,OAAO,IAAI,CAAA;;oBAEK,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;wCAC7B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;2BACnC,IAAI,CAAC,IAAI,cAAc;;;;KAI7C,CAAC;IACJ,CAAC;;;AAhCe,eAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAGL;IAA5B,QAAQ,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;yCAAyB;AAGzC;IAAX,QAAQ,EAAE;sCAAe;AAGG;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;wCAAgB;AAVjC,QAAQ;IADpB,aAAa,CAAC,WAAW,CAAC;GACd,QAAQ,CAkCpB;SAlCY,QAAQ","sourcesContent":["import { LitElement, html, type PropertyValues } from 'lit';\n\nimport { customElement } from 'lit/decorators/custom-element.js';\nimport { property } from 'lit/decorators/property.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport styles from './pf-banner.css';\n\nexport type BannerVariant = (\n  | 'default'\n  | 'info'\n  | 'warning'\n  | 'danger'\n  | 'success'\n)\n\n/**\n * A banner is a 1-line, full color, full width container that can be used to communicate short snippets of information to users.\n * Banners are un-intrusive and non-dismissible.\n *\n * @summary Allows users to display a stylized banner.\n *\n * @cssprop {<length>} --pf-c-banner--PaddingTop  {@default `0.25rem`}\n * @cssprop {<length>} --pf-c-banner--PaddingRight  {@default `1rem`}\n * @cssprop {<length>} --pf-c-banner--PaddingBottom  {@default `0.25rem`}\n * @cssprop {<length>} --pf-c-banner--PaddingLeft  {@default `1rem`}\n *\n * @cssprop {<length>} --pf-c-banner--md--PaddingRight  {@default `1.5rem`}\n * @cssprop {<length>} --pf-c-banner--md--PaddingLeft  {@default `1.5rem`}\n *\n * @cssprop {<length>} --pf-c-banner--FontSize {@default `0.875rem`}\n *\n * @cssprop {<color>} --pf-c-banner--BackgroundColor  {@default `#4f5255`}\n * @cssprop {<color>} --pf-c-banner--m-info--BackgroundColor  {@default `#73bcf7`}\n * @cssprop {<color>} --pf-c-banner--m-danger--BackgroundColor  {@default `#c9190b`}\n * @cssprop {<color>} --pf-c-banner--m-success--BackgroundColor  {@default `#3e8635`}\n * @cssprop {<color>} --pf-c-banner--m-warning--BackgroundColor  {@default `#f0ab00`}\n *\n * @cssprop --pf-c-banner--m-sticky--ZIndex  {@default `300`}\n *\n * @cssprop --pf-c-banner--m-sticky--BoxShadow {@default `0 0.5rem 0.5rem -0.375rem rgba(3, 3, 3, 0.18)`}\n *\n * @csspart container - The container of the banner\n *\n * @slot icon\n *       Contains the labels's icon, e.g. web-icon-alert-success.\n * @slot\n *       Contains the text for the banner\n */\n@customElement('pf-banner')\nexport class PfBanner extends LitElement {\n  static readonly styles = [styles];\n\n  /** Changes the visual appearance of the banner. */\n  @property({ reflect: true }) variant?: BannerVariant;\n\n  /** Shorthand for the `icon` slot, the value is icon name */\n  @property() icon?: string;\n\n  /** Shorthand for the `icon` slot, the value is icon name */\n  @property({ type: Boolean }) sticky = false;\n\n  /** Represents the state of the anonymous and icon slots */\n  #slots = new SlotController(this, null, 'icon');\n\n  override willUpdate(changed: PropertyValues<this>) {\n    if (changed.has('icon') && this.icon) {\n      import('@patternfly/elements/pf-icon/pf-icon.js');\n    }\n  }\n\n  override render() {\n    const { variant, icon } = this;\n    const hasIcon = !!icon || this.#slots.hasSlotted('icon');\n    return html`\n      <div id=\"container\" part=\"container\"\n            class=${classMap({ hasIcon, [variant ?? '']: !!variant })}>\n        <slot name=\"icon\" part=\"icon\">${!this.icon ? '' : html`\n          <pf-icon icon=\"${this.icon}\"></pf-icon>`}\n        </slot>\n        <slot id=\"text\"></slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'pf-banner': PfBanner;\n  }\n}\n"]}