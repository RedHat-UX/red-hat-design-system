{"version":3,"file":"pf-banner.spec.js","sourceRoot":"","sources":["pf-banner.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { getColor, hexToRgb } from '@patternfly/pfe-tools/test/hex-to-rgb.js';\nimport { PfBanner } from '@patternfly/elements/pf-banner/pf-banner.js';\n\ndescribe('<pf-banner>', function() {\n  describe('simply instantiating', function() {\n    it('imperatively instantiates', function() {\n      expect(document.createElement('pf-banner')).to.be.an.instanceof(PfBanner);\n    });\n\n    it('should upgrade', async function() {\n      const el = await createFixture<PfBanner>(html`\n        <pf-banner>Default</pf-banner>\n      `);\n      const klass = customElements.get('pf-banner');\n      expect(el)\n          .to.be.an.instanceOf(klass)\n          .and\n          .to.be.an.instanceOf(PfBanner);\n    });\n\n    describe('without variant attribute', function() {\n      let element: PfBanner;\n      beforeEach(async function() {\n        element = await createFixture<PfBanner>(html`\n          <pf-banner>Default</pf-banner>\n        `);\n        await element.updateComplete;\n      });\n      // TODO: remove assertions on shadow roots\n      it('should display default variant', async function() {\n        const container = element.shadowRoot!.querySelector('#container')!;\n        expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#ffffff'));\n        expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#4f5255'));\n      });\n    });\n\n    describe('with variant=\"info\" attribute', function() {\n      let element: PfBanner;\n      beforeEach(async function() {\n        element = await createFixture<PfBanner>(html`\n          <pf-banner variant=\"info\">Info</pf-banner>\n        `);\n        await element.updateComplete;\n      });\n      // TODO: remove assertions on shadow roots\n      it('should display info variant', async function() {\n        const container = element.shadowRoot!.querySelector('#container')!;\n        expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#151515'));\n        expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#73bcf7'));\n      });\n    });\n\n    describe('with variant=\"danger\" attribute', function() {\n      let element: PfBanner;\n      beforeEach(async function() {\n        element = await createFixture<PfBanner>(html`\n          <pf-banner variant=\"danger\">Info</pf-banner>\n        `);\n        await element.updateComplete;\n      });\n      // TODO: remove assertions on shadow roots\n      it('should display danger variant', async function() {\n        const container = element.shadowRoot!.querySelector('#container')!;\n        expect(getColor(container, 'color')).to.deep.equal(hexToRgb('#ffffff'));\n        expect(getColor(container, 'background-color')).to.deep.equal(hexToRgb('#c9190b'));\n      });\n    });\n\n    describe('with valid icon attribute', function() {\n      let element: PfBanner;\n      beforeEach(async function() {\n        element = await createFixture<PfBanner>(html`\n          <pf-banner icon=\"info\">Info</pf-banner>\n        `);\n        await element.updateComplete;\n      });\n      // TODO: remove assertions on shadow roots\n      it('should render an icon', async function() {\n        const icon = element.shadowRoot!.querySelector('pf-icon');\n        expect(icon).to.exist;\n      });\n    });\n  });\n});\n"]}