{"version":3,"file":"pf-badge.spec.js","sourceRoot":"","sources":["pf-badge.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, html, nextFrame } from '@open-wc/testing';\nimport { createFixture } from '@patternfly/pfe-tools/test/create-fixture.js';\nimport { hexToRgb, getColor } from '@patternfly/pfe-tools/test/hex-to-rgb.js';\nimport { PfBadge } from '@patternfly/elements/pf-badge/pf-badge.js';\n\n// Background colors for the various states\nconst states = {\n  default: '#f0f0f0',\n  read: '#f0f0f0',\n  unread: '#0066cc',\n};\n\nconst element = html`<pf-badge number=\"10\">10</pf-badge>`;\n\ndescribe('<pf-badge>', function() {\n  it('imperatively instantiates', function() {\n    expect(document.createElement('pf-badge')).to.be.an.instanceof(PfBadge);\n  });\n\n  it('should upgrade', async function() {\n    const el = await createFixture<PfBadge>(element);\n    expect(el, 'pf-badge should be an instance of PfBadge')\n        .to.be.an\n        .instanceOf(customElements.get('pf-badge'))\n        .and\n        .to.be.an.instanceof(PfBadge);\n  });\n\n  it('should display text equivalent to the number attribute', async function() {\n    const el = await createFixture<PfBadge>(html`<pf-badge number=\"100\">10</pf-badge>`);\n    await nextFrame();\n    expect(el.shadowRoot!.querySelector('span')!.textContent).to.equal('100');\n  });\n\n  it('should add \\'+\\' sign if the value exceeds the threshold', async function() {\n    const el = await createFixture<PfBadge>(html`<pf-badge number=\"900\" threshold=\"100\">900</pf-badge>`);\n    await nextFrame();\n    expect(el.shadowRoot!.querySelector('span')!.textContent).to.equal('100+');\n  });\n\n  it('shouldn\\'t add a \\'+\\' sign if the value doesn\\'t exceed the threshold', async function() {\n    const el = await createFixture<PfBadge>(html`<pf-badge number=\"900\" threshold=\"1000\">900</pf-badge>`);\n    await el.updateComplete;\n    expect(el.textContent).to.equal('900');\n    expect(el.shadowRoot!.querySelector('span')!.textContent).to.equal('900');\n  });\n\n  // This is the one that created an error:\n  Object.entries(states).forEach(([state, color]) => {\n    it(`should have a background color of '${color}' when state is ${state}`, async function() {\n      const el = await createFixture<PfBadge>(element);\n\n      if (state !== 'default') {\n        el.setAttribute('state', state);\n      }\n\n      const [r, g, b] = getColor(el, 'background-color');\n      expect([r, g, b]).to.deep.equal(hexToRgb(color));\n    });\n  });\n});\n"]}