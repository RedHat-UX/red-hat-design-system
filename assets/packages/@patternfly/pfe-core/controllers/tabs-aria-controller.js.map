{"version":3,"file":"tabs-aria-controller.js","sourceRoot":"","sources":["tabs-aria-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { isServer, type ReactiveController, type ReactiveControllerHost } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nexport interface TabsAriaControllerOptions<Tab, Panel> {\n  /** Add an `isTab` predicate to ensure this tabs instance' state does not leak into parent tabs' state */\n  isTab: (node: unknown) => node is Tab;\n  isActiveTab: (tab: Tab) => boolean;\n  /** Add an `isPanel` predicate to ensure this tabs instance' state does not leak into parent tabs' state */\n  isPanel: (node: unknown) => node is Panel;\n  getHTMLElement?: () => HTMLElement;\n}\n\nexport class TabsAriaController<\n  Tab extends HTMLElement = HTMLElement,\n  Panel extends HTMLElement = HTMLElement\n> implements ReactiveController {\n  #logger: Logger;\n\n  #host: ReactiveControllerHost;\n\n  #element!: HTMLElement;\n\n  #tabPanelMap = new Map<Tab, Panel>();\n\n  #options: TabsAriaControllerOptions<Tab, Panel>;\n\n  #mo = new MutationObserver(this.#onSlotchange.bind(this));\n\n  get tabs() {\n    return [...this.#tabPanelMap.keys()] as Tab[];\n  }\n\n  get activeTab(): Tab | undefined {\n    return this.tabs.find(x => this.#options.isActiveTab(x));\n  }\n\n  /**\n   * @param host controller host\n   * @param options controller options\n   * @example Usage in PfTab\n   *          ```ts\n   *          new TabsController(this, {\n   *             isTab: (x): x is PfTab => x instanceof PfTab,\n   *             isPanel: (x): x is PfTabPanel => x instanceof PfTabPanel\n   *          });\n   *          ```\n   */\n  constructor(\n    host: ReactiveControllerHost,\n    options: TabsAriaControllerOptions<Tab, Panel>,\n  ) {\n    this.#options = options;\n    this.#logger = new Logger(host);\n    (this.#host = host).addController(this);\n    if (isServer) {\n      return;\n    }\n    if (host instanceof HTMLElement) {\n      this.#element = host;\n    } else {\n      const element = options.getHTMLElement?.();\n      if (!element) {\n        throw new Error(\n          'TabsController must be instantiated with an HTMLElement or a `getHTMLElement()` option',\n        );\n      }\n      this.#element = element;\n    }\n    this.#element.addEventListener('slotchange', this.#onSlotchange);\n    if (this.#element.isConnected) {\n      this.hostConnected();\n    }\n  }\n\n  hostConnected(): void {\n    this.#mo.observe(this.#element, { attributes: false, childList: true, subtree: false });\n    this.#onSlotchange();\n  }\n\n  hostUpdated(): void {\n    for (const [tab, panel] of this.#tabPanelMap) {\n      panel.setAttribute('aria-labelledby', tab.id);\n      tab.setAttribute('aria-controls', panel.id);\n    }\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  /**\n   * zip the tabs and panels together into #tabPanelMap\n   */\n  #onSlotchange() {\n    this.#tabPanelMap.clear();\n    const tabs = [];\n    const panels = [];\n    for (const child of this.#element?.children ?? []) {\n      if (this.#options.isTab(child)) {\n        tabs.push(child);\n        child.role ??= 'tab';\n      } else if (this.#options.isPanel(child)) {\n        panels.push(child);\n        child.role ??= 'tabpanel';\n      }\n    }\n    if (tabs.length > panels.length) {\n      this.#logger.warn('Too many tabs!');\n    } else if (panels.length > tabs.length) {\n      this.#logger.warn('Too many panels!');\n    }\n    while (tabs.length) {\n      this.#tabPanelMap.set(tabs.shift()!, panels.shift()!);\n    }\n    this.#host.requestUpdate();\n  }\n\n  panelFor(tab: Tab): Panel | undefined {\n    return this.#tabPanelMap.get(tab);\n  }\n\n  tabFor(panel: Panel): Tab | undefined {\n    for (const [tab, panelToCheck] of this.#tabPanelMap) {\n      if (panel === panelToCheck) {\n        return tab;\n      }\n    }\n  }\n}\n"]}