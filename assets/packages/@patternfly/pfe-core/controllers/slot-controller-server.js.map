{"version":3,"file":"slot-controller-server.js","sourceRoot":"","sources":["slot-controller-server.ts"],"names":[],"mappings":";AACA,OAAO,EAGN,MAAM,sBAAsB,CAAC;AAE9B,MAAM,OAAO,cAAc;IAUzB,YAAmB,IAAqB,EAAE,GAAG,CAAqB;QAA/C,SAAI,GAAJ,IAAI,CAAiB;QACtC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC3B,CAAC;IAIO,aAAa,CAAC,KAAoB;QACxC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;aACf,KAAK,CAAC,MAAM,CAAC;aACb,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED,UAAU,CAA8B,GAAG,CAAoB;QAC7D,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,UAAU,CAAC,GAAG,KAAwB;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAc,CAAC,SAAS,CAAC,CAAC;QAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAc,CAAC,kBAAkB,CAAC,CAAC;QACvE,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YAClB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnB,CAAC;QACD,OAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,OAAO,CAAC,GAAG,KAAwB;QACjC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,KAAK,CAAC,CAAC;IACpC,CAAC;;;AArCa,sBAAO,GAAG,MAAM,CAAC,cAAc,CAA4B,AAApD,CAAqD;AAE1E,gCAAgC;AAClB,wBAAS,GAAW,EAAI,CAAC,OAAO,AAAvB,CAAwB;AAExC,wBAAS,GAAG,sBAA+B,AAAlC,CAAmC;AAE5C,iCAAkB,GAAG,8BAAuC,AAA1C,CAA2C","sourcesContent":["import type { ReactiveElement } from 'lit';\nimport {\n  type SlotControllerArgs,\n  type SlotControllerPublicAPI,\n} from './slot-controller.js';\n\nexport class SlotController implements SlotControllerPublicAPI {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  static attribute = 'ssr-hint-has-slotted' as const;\n\n  static anonymousAttribute = 'ssr-hint-has-slotted-default' as const;\n\n  constructor(public host: ReactiveElement, ..._: SlotControllerArgs) {\n    host.addController(this);\n  }\n\n  hostConnected?(): Promise<void>;\n\n  private fromAttribute(slots: string | null) {\n    return (slots ?? '')\n        .split(/[, ]/)\n        .map(x => x.trim());\n  }\n\n  getSlotted<T extends Element = Element>(..._: (string | null)[]): T[] {\n    return [];\n  }\n\n  hasSlotted(...names: (string | null)[]): boolean {\n    const attr = this.host.getAttribute(SlotController.attribute);\n    const anon = this.host.hasAttribute(SlotController.anonymousAttribute);\n    const hints = new Set(this.fromAttribute(attr));\n    if (!names.length) {\n      names.push(null);\n    }\n    return names.every(x => x === null ? anon : hints.has(x));\n  }\n\n  isEmpty(...names: (string | null)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n}\n"]}