{"version":3,"file":"activedescendant-controller.js","sourceRoot":"","sources":["activedescendant-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveControllerHost } from 'lit';\n\nimport { type ATFocusControllerOptions, ATFocusController } from './at-focus-controller.js';\n\nimport { isServer, nothing } from 'lit';\nimport { getRandomId } from '../functions/random.js';\nimport { bound } from '../decorators/bound.js';\n\nexport interface ActivedescendantControllerOptions<\n  Item extends HTMLElement\n> extends ATFocusControllerOptions<Item> {\n  /**\n   * Returns a reference to the element which acts as the assistive technology container for\n   * the items. In the case of a combobox, this is the input element.\n   */\n  getActiveDescendantContainer(): HTMLElement | null;\n  /**\n   * Optional callback to control the assistive technology focus behavior of items.\n   * By default, ActivedescendantController will not do anything special to items when they receive\n   * assistive technology focus, and will only set the `activedescendant` property on the container.\n   * If you provide this callback, ActivedescendantController will call it on your item with the\n   * active state. You may use this to set active styles.\n   */\n  setItemActive?(item: Item, active: boolean): void;\n  /**\n   * Optional callback to retrieve the value from an option element.\n   * By default, retrieves the `value` attribute, or the text content.\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement\n   */\n  getItemValue?(item: Item): string;\n}\n\n/**\n * Implements activedescendant pattern, as described in WAI-ARIA practices,\n * [Managing Focus in Composites Using aria-activedescendant][ad]\n *\n * The steps for using the aria-activedescendant method of managing focus are as follows.\n *\n *  - When the container element that has a role that supports aria-activedescendant is loaded\n *    or created, ensure that:\n *    - The container element is included in the tab sequence as described in\n *      Keyboard Navigation Between Components or is a focusable element of a composite\n *      that implements a roving tabindex.\n *    - It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\n *      the container that should be identified as active when the widget receives focus.\n *      The referenced element needs to meet the DOM relationship requirements described below.\n *  - When the container element receives DOM focus, draw a visual focus indicator on the active\n *    element and ensure the active element is scrolled into view.\n *  - When the composite widget contains focus and the user presses a navigation key that moves\n *    focus within the widget, such as an arrow key:\n *    - Change the value of aria-activedescendant on the container to refer to the element\n *      that should be reported to assistive technologies as active.\n *    - Move the visual focus indicator and, if necessary, scrolled the active element into view.\n *  - If the design calls for a specific element to be focused the next time a user moves focus\n *    into the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\n *    that target element when the container loses focus. If it is not, set aria-activedescendant\n *    to refer to the target element.\n *\n * The specification for aria-activedescendant places important restrictions on the\n * DOM relationship between the focused element that has the aria-activedescendant attribute\n * and the element referenced as active by the value of the attribute.\n * One of the following three conditions must be met.\n *\n * 1. The element referenced as active is a DOM descendant of the focused referencing element.\n * 2. The focused referencing element has a value specified for the aria-owns property that\n *    includes the ID of the element referenced as active.\n * 3. The focused referencing element has role of combobox, textbox, or searchbox\n *    and has aria-controls property referring to an element with a role that supports\n *    aria-activedescendant and either:\n *   1. The element referenced as active is a descendant of the controlled element.\n *   2. The controlled element has a value specified for the aria-owns property that includes\n *      the ID of the element referenced as active.\n *\n * [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant\n */\nexport class ActivedescendantController<\n  Item extends HTMLElement = HTMLElement\n> extends ATFocusController<Item> {\n  /**\n   * When true, the browser supports cross-root ARIA such that the controller does not need\n   * to copy item nodes into the controlling nodes' root\n   */\n  public static get supportsCrossRootActiveDescendant(): boolean {\n    return !isServer && 'ariaActiveDescendantElement' in HTMLElement.prototype;\n  }\n\n  static of<Item extends HTMLElement>(\n    host: ReactiveControllerHost,\n    options: ActivedescendantControllerOptions<Item>,\n  ): ActivedescendantController<Item> {\n    return new ActivedescendantController(host, options);\n  }\n\n  /** Maps from original element to shadow DOM clone */\n  #lightToShadowMap = new WeakMap<Item, Item>();\n\n  /** Maps from shadow DOM clone to original element */\n  #shadowToLightMap = new WeakMap<Item, Item>();\n\n  /** Set of item which should not be cloned */\n  #noCloneSet = new WeakSet<Item>();\n\n  /** Element which controls the list i.e. combobox */\n  #controlsElements: HTMLElement[] = [];\n\n  #observing = false;\n\n  #listMO = new MutationObserver(records => this.#onItemsDOMChange(records));\n\n  #attrMO = new MutationObserver(records => this.#onItemAttributeChange(records));\n\n  #syncAttr(attributeName: string, fromNode: Item) {\n    const toNode = this.#shadowToLightMap.get(fromNode as Item)\n                ?? this.#lightToShadowMap.get(fromNode as Item);\n    const newVal = fromNode.getAttribute(attributeName);\n    const oldVal = toNode?.getAttribute(attributeName);\n    if (!fromNode.hasAttribute(attributeName)) {\n      toNode?.removeAttribute(attributeName);\n    } else if (oldVal !== newVal) {\n      toNode?.setAttribute(attributeName, newVal!);\n    }\n  }\n\n  get atFocusedItemIndex(): number {\n    return super.atFocusedItemIndex;\n  }\n\n  /**\n   * Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\n   * using AriaIDLAttributes for cross-root aria, if supported by the browser\n   * @param item item\n   */\n  set atFocusedItemIndex(index: number) {\n    super.atFocusedItemIndex = index;\n    const item = this._items.at(this.atFocusedItemIndex);\n    for (const _item of this.items) {\n      this.options.setItemActive?.(_item, _item === item);\n    }\n    const container = this.options.getActiveDescendantContainer();\n    if (!ActivedescendantController.supportsCrossRootActiveDescendant) {\n      container?.setAttribute('aria-activedescendant', item?.id ?? '');\n    } else if (container) {\n      container.ariaActiveDescendantElement = item ?? null;\n    }\n    this.host.requestUpdate();\n  }\n\n  protected get controlsElements(): HTMLElement[] {\n    return this.#controlsElements;\n  }\n\n  protected set controlsElements(elements: HTMLElement[]) {\n    for (const old of this.#controlsElements) {\n      old?.removeEventListener('keydown', this.onKeydown);\n    }\n    this.#controlsElements = elements;\n    for (const element of this.#controlsElements) {\n      element.addEventListener('keydown', this.onKeydown);\n    }\n  }\n\n  /** All items */\n  get items() {\n    return this._items;\n  }\n\n  /**\n   * Sets the list of items and activates the next activatable item after the current one\n   * @param items tabindex items\n   */\n  override set items(items: Item[]) {\n    const container = this.options.getItemsContainer?.() ?? this.host;\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('items container must be an HTMLElement');\n    }\n    this.itemsContainerElement = container;\n    const { supportsCrossRootActiveDescendant } = ActivedescendantController;\n    if (supportsCrossRootActiveDescendant\n        || [container] // all nodes are in the same root\n            .concat(this.controlsElements)\n            .concat(items)\n            .every((node, _, a) => node.getRootNode() === a[0].getRootNode())) {\n      this._items = items.map(x => {\n        if (!supportsCrossRootActiveDescendant) {\n          x.id ||= getRandomId();\n        }\n        return x;\n      });\n    } else {\n      this._items = items?.map((item: Item) => {\n        item.removeAttribute('tabindex');\n        if (container.contains(item)) {\n          item.id ||= getRandomId();\n          this.#noCloneSet.add(item);\n          this.#shadowToLightMap.set(item, item);\n          return item;\n        } else {\n          const clone = item.cloneNode(true) as Item;\n          clone.id = getRandomId();\n          this.#lightToShadowMap.set(item, clone);\n          this.#shadowToLightMap.set(clone, item);\n          // Though efforts were taken to disconnect\n          // this observer, it may still be a memory leak\n          this.#attrMO.observe(clone, { attributes: true });\n          this.#attrMO.observe(item, { attributes: true });\n          return clone;\n        }\n      });\n    }\n  }\n\n  private constructor(\n    public host: ReactiveControllerHost,\n    protected options: ActivedescendantControllerOptions<Item>,\n  ) {\n    super(host, options);\n    this.options.getItemValue ??= function(this: Item) {\n      return (this as unknown as HTMLOptionElement).value;\n    };\n  }\n\n  #onItemsDOMChange(records: MutationRecord[]) {\n    for (const { removedNodes } of records) {\n      for (const removed of removedNodes as NodeListOf<Item>) {\n        this.#lightToShadowMap.get(removed)?.remove();\n        this.#lightToShadowMap.delete(removed);\n      }\n    }\n  };\n\n  #onItemAttributeChange(records: MutationRecord[]) {\n    for (const { target, attributeName } of records) {\n      if (attributeName) {\n        this.#syncAttr(attributeName, target as Item);\n      }\n    }\n  };\n\n  protected override initItems(): void {\n    this.#attrMO.disconnect();\n    super.initItems();\n    this.controlsElements = this.options.getControlsElements?.() ?? [];\n    if (!this.#observing && this.itemsContainerElement && this.itemsContainerElement.isConnected) {\n      this.#listMO.observe(this.itemsContainerElement, { childList: true });\n      this.#observing = true;\n    }\n  }\n\n  hostDisconnected(): void {\n    this.controlsElements = [];\n    this.#observing = false;\n    this.#listMO.disconnect();\n    this.#attrMO.disconnect();\n  }\n\n  @bound\n  protected override onKeydown(event: KeyboardEvent): void {\n    if (!event.ctrlKey\n        && !event.altKey\n        && !event.metaKey\n        && !!this.atFocusableItems.length) {\n      super.onKeydown(event);\n    };\n  }\n\n  public renderItemsToShadowRoot(): typeof nothing | Node[] {\n    if (ActivedescendantController.supportsCrossRootActiveDescendant) {\n      return nothing;\n    } else {\n      return this.items?.filter(x => !this.#noCloneSet.has(x));\n    }\n  }\n}\n"]}