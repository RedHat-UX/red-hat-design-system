{"version":3,"file":"slot-controller.js","sourceRoot":"","sources":["slot-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\ninterface AnonymousSlot {\n  hasContent: boolean;\n  elements: Element[];\n  slot: HTMLSlotElement | null;\n}\n\ninterface NamedSlot extends AnonymousSlot {\n  name: string;\n  initialized: true;\n}\n\nexport type Slot = NamedSlot | AnonymousSlot;\n\nexport type SlotName = string | null;\n\nexport interface SlotsConfig {\n  slots: SlotName[];\n  /**\n   * Object mapping new slot name keys to deprecated slot name values\n   * @example `pf-modal--header` is deprecated in favour of `header`\n   * ```js\n   * new SlotController(this, {\n   *   slots: ['header'],\n   *   deprecations: {\n   *     'header': 'pf-modal--header'\n   *   }\n   * })\n   * ```\n   */\n  deprecations?: Record<string, string>;\n}\n\nexport type SlotControllerArgs = [SlotsConfig] | SlotName[];\n\nexport function isObjectSpread(config: SlotControllerArgs): config is [SlotsConfig] {\n  return config.length === 1 && typeof config[0] === 'object' && config[0] !== null;\n}\n\nfunction isContent(node: Node) {\n  switch (node.nodeType) {\n    case Node.TEXT_NODE:\n      return !!node.textContent?.trim();\n    case Node.COMMENT_NODE:\n      return false;\n    default:\n      return true;\n  }\n}\n\nexport declare class SlotControllerPublicAPI implements ReactiveController {\n  static default: symbol;\n\n  public host: ReactiveElement;\n\n  constructor(host: ReactiveElement, ...args: SlotControllerArgs);\n\n  hostConnected?(): Promise<void>;\n\n  hostDisconnected?(): void;\n\n  hostUpdated?(): void;\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  getSlotted<T extends Element = Element>(...slotNames: string[]): T[];\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  hasSlotted(...names: (string | null | undefined)[]): boolean;\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  isEmpty(...names: (string | null | undefined)[]): boolean;\n}\n\nclass SlotRecord {\n  constructor(\n    public slot: HTMLSlotElement,\n    public name: string | symbol,\n    private host: ReactiveElement,\n  ) {}\n\n  get elements() {\n    return this.slot?.assignedElements?.();\n  }\n\n  get hasContent() {\n    if (this.name === SlotController.default) {\n      return !!this.elements.length\n        || !![...this.host.childNodes]\n            .some(node => {\n              if (node instanceof Element) {\n                return !node.hasAttribute('slot');\n              } else {\n                return isContent(node);\n              }\n            });\n    } else {\n      return !!this.slot.assignedNodes()\n          .some(isContent);\n    }\n  }\n}\n\nexport class SlotController implements SlotControllerPublicAPI {\n  public static default = Symbol('default slot') satisfies symbol as symbol;\n\n  /** @deprecated use `default` */\n  public static anonymous: symbol = this.default;\n\n  #slotRecords = new Map<string | typeof SlotController.default, SlotRecord>();\n\n  #slotNames: (string | symbol | null)[] = [];\n\n  #deprecations: Record<string, string> = {};\n\n  #initSlotMap = async () => {\n    const { host } = this;\n    await host.updateComplete;\n    const slotRecords = this.#slotRecords;\n    // Loop over the properties provided by the schema\n    for (let slotName of this.#slotNames.concat(Object.values(this.#deprecations))) {\n      slotName ||= SlotController.default;\n      const slot = this.#getSlotElement(slotName);\n      if (slot) {\n        slotRecords.set(slotName, new SlotRecord(slot, slotName, host));\n      }\n    }\n    host.requestUpdate();\n  };\n\n  #mo = new MutationObserver(this.#initSlotMap);\n\n  constructor(public host: ReactiveElement, ...args: SlotControllerArgs) {\n    host.addController(this);\n    this.#initialize(...args);\n    if (!this.#slotNames.length) {\n      this.#slotNames = [null];\n    }\n  }\n\n  #initialize(...config: SlotControllerArgs) {\n    if (isObjectSpread(config)) {\n      const [{ slots, deprecations }] = config;\n      this.#slotNames = slots;\n      this.#deprecations = deprecations ?? {};\n    } else if (config.length >= 1) {\n      this.#slotNames = config;\n      this.#deprecations = {};\n    }\n  }\n\n  #getSlotElement(slotId: string | symbol) {\n    const selector =\n      slotId === SlotController.default ? 'slot:not([name])' : `slot[name=\"${slotId as string}\"]`;\n    return this.host.shadowRoot?.querySelector?.<HTMLSlotElement>(selector) ?? null;\n  }\n\n  async hostConnected(): Promise<void> {\n    this.#mo.observe(this.host, { childList: true });\n    // Map the defined slots into an object that is easier to query\n    this.#slotRecords.clear();\n    await this.host.updateComplete;\n    this.#initSlotMap();\n    // insurance for framework integrations\n    await this.host.updateComplete;\n    this.host.requestUpdate();\n  }\n\n  hostDisconnected(): void {\n    this.#mo.disconnect();\n  }\n\n  /**\n   * Given a slot name or slot names, returns elements assigned to the requested slots as an array.\n   * If no value is provided, it returns all children not assigned to a slot (without a slot attribute).\n   * @param slotNames slots to query\n   * @example Get header-slotted elements\n   *          ```js\n   *          this.getSlotted('header')\n   *          ```\n   * @example Get header- and footer-slotted elements\n   *          ```js\n   *          this.getSlotted('header', 'footer')\n   *          ```\n   * @example Get default-slotted elements\n   *          ```js\n   *          this.getSlotted();\n   *          ```\n   */\n  public getSlotted<T extends Element = Element>(...slotNames: string[] | [null]): T[] {\n    if (!slotNames.length || slotNames.length === 1 && slotNames.at(0) === null) {\n      return (this.#slotRecords.get(SlotController.default)?.elements ?? []) as T[];\n    } else {\n      return slotNames.flatMap(slotName =>\n        this.#slotRecords.get(slotName ?? SlotController.default)?.elements ?? []) as T[];\n    }\n  }\n\n  /**\n   * Returns a boolean statement of whether or not any of those slots exists in the light DOM.\n   * @param names The slot names to check.\n   * @example this.hasSlotted('header');\n   */\n  public hasSlotted(...names: (string | null | undefined)[]): boolean {\n    const slotNames = Array.from(names, x =>\n      x == null ? SlotController.default : x);\n    if (!slotNames.length) {\n      slotNames.push(SlotController.default);\n    }\n    return slotNames.some(slotName => {\n      const slot = this.#slotRecords.get(slotName);\n      if (!slot) {\n        return false;\n      } else {\n        return slot.hasContent;\n      }\n    });\n  }\n\n  /**\n   * Whether or not all the requested slots are empty.\n   * @param  names The slot names to query.  If no value is provided, it returns the default slot.\n   * @example this.isEmpty('header', 'footer');\n   * @example this.isEmpty();\n   * @returns\n   */\n  public isEmpty(...names: (string | null | undefined)[]): boolean {\n    return !this.hasSlotted(...names);\n  }\n}\n"]}