{"version":3,"file":"arraysAreEquivalent.js","sourceRoot":"","sources":["arraysAreEquivalent.ts"],"names":[],"mappings":"AAAA;;;;;;;GAOG;AACH,MAAM,UAAU,mBAAmB,CAAC,CAAU,EAAE,CAAU;IACxD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QAC3C,OAAO,CAAC,KAAK,CAAC,CAAC;IACjB,CAAC;SAAM,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,wBAAwB;QAC1D,OAAO,KAAK,CAAC;IACf,CAAC;SAAM,IAAI,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,iBAAiB;QACpD,OAAO,IAAI,CAAC;IACd,CAAC;SAAM,CAAC,CAAC,oCAAoC;QAC3C,KAAK,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC;YACvC,IAAI,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACrB,OAAO,KAAK,CAAC;YACf,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;AACH,CAAC","sourcesContent":["/**\n * Whether the two arrays are equivalent\n * Arrays are equivalent when they are both empty, or when their lengths are equal and each of\n * their members is equal (===) to the corresponding member in the other array.\n * If either argument is not an array, the result will be strict equivalence (===)\n * @param a first array\n * @param b second array\n */\nexport function arraysAreEquivalent(a: unknown, b: unknown): boolean {\n  if (!Array.isArray(a) || !Array.isArray(b)) {\n    return a === b;\n  } else if (a.length !== b.length) { // lengths are different\n    return false;\n  } else if (!a.length && !b.length) { // both are empty\n    return true;\n  } else { // multi and length of both is equal\n    for (const [i, element] of a.entries()) {\n      if (element !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n"]}