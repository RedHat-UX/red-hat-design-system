{"version":3,"file":"context.js","sourceRoot":"","sources":["context.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE1D,IAAI,IAAiB,CAAC;AAEtB,SAAS,eAAe;IACtB,IAAI,GAAG,IAAI,WAAW,EAAE,CAAC;IACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC3B,OAAO,IAAI,CAAC;AACd,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,qBAAqB,CAAI,GAAG,IAAsC;IAChF,IAAI,KAAJ,IAAI,GAAK,eAAe,EAAE,EAAC;IAC3B,OAAO,aAAa,CAAI,GAAG,IAAI,CAAC,CAAC;AACnC,CAAC","sourcesContent":["import { ContextRoot, createContext } from '@lit/context';\n\nlet root: ContextRoot;\n\nfunction makeContextRoot() {\n  root = new ContextRoot();\n  root.attach(document.body);\n  return root;\n}\n\n/**\n * In order to prevent late-upgrading-context-consumers from 'missing'\n * their rightful context providers, we must set up a `ContextRoot` on the body.\n * Always use this function when creating contexts that are shared with child elements.\n */\nexport function createContextWithRoot<T>(...args: Parameters<typeof createContext>) {\n  root ??= makeContextRoot();\n  return createContext<T>(...args);\n}\n"]}