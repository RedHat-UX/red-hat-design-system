{"version":3,"file":"deprecation.js","sourceRoot":"","sources":["deprecation.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAC;AAOlD;;;;;;;;;GASG;AACH,MAAM,UAAU,WAAW,CAAwB,OAAkC;IACnF,OAAO,UACL,KAAgC,EAChC,GAAqB;QAErB,MAAM,EAAE,KAAK,EAAE,GAAG,kBAAkB,EAAE,GAAG,OAAO,CAAC;QACjD,MAAM,KAAK,GAAI,KAAK,CAAC,WAAsC,CAAC;QAC5D,MAAM,WAAW,GAAG,KAAK,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,KAAK,CAAC,cAAc,CAAC,GAAG,EAAE,EAAE,GAAG,WAAW,EAAE,GAAG,kBAAkB,EAAE,CAAC,CAAC;QACrE,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC9B,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAW,CAAC,QAAa,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED,MAAM,WAAW;IAKf,YACU,IAAO,EACP,OAAkC,EAClC,aAA+B;QAF/B,SAAI,GAAJ,IAAI,CAAG;QACP,YAAO,GAAP,OAAO,CAA2B;QAClC,kBAAa,GAAb,aAAa,CAAkB;QALjC,WAAM,GAAG,KAAK,CAAC;QAOrB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IAED,UAAU;QACR,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,IAAI,CAAC;QACnD,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YAC5B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAgB,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;gBAC5D,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;oBAChB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa,uBAAuB,KAAK,UAAU,CAAC,CAAC;oBACzE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;iBACpB;gBACD,IAAI,CAAC,IAAI,CAAC,KAAgB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;aACxD;SACF;IACH,CAAC;CACF","sourcesContent":["import type { ReactiveElement, PropertyDeclaration, ReactiveController } from 'lit';\n\nimport { Logger } from '../controllers/logger.js';\n\nexport type DeprecationDeclaration<K extends PropertyKey> = PropertyDeclaration & {\n  alias: string & K;\n  attribute: string;\n}\n\n/**\n * Aliases the decorated field to an existing property, and logs a warning if it is used\n * @example deprecating an attribute\n * ```ts\n * @property({ reflect: true, attribute: 'color-palette'})\n * colorPalette: ColorPalette = 'base';\n *\n * @deprecation('colorPalette') color?: ColorPalette;\n * ```\n */\nexport function deprecation<K extends PropertyKey>(options: DeprecationDeclaration<K>) {\n  return function<T extends ReactiveElement, L extends PropertyKey>(\n    proto: Partial<Record<K | L, T>>,\n    key: string & keyof T\n  ) {\n    const { alias, ...deprecationOptions } = options;\n    const klass = (proto.constructor as typeof ReactiveElement);\n    const declaration = klass.getPropertyOptions(alias);\n    klass.createProperty(key, { ...declaration, ...deprecationOptions });\n    klass.addInitializer(instance => {\n      instance.addController(new Deprecation(instance as T, options, key));\n    });\n  };\n}\n\nclass Deprecation<T extends ReactiveElement, K extends PropertyKey> implements ReactiveController {\n  private logger: Logger;\n\n  private logged = false;\n\n  constructor(\n    private host: T,\n    private options: DeprecationDeclaration<K>,\n    private deprecatedKey: string & keyof T\n  ) {\n    this.logger = new Logger(host);\n  }\n\n  hostUpdate() {\n    const { deprecatedKey, options: { alias } } = this;\n    if (this.host[deprecatedKey]) {\n      if (this.host[alias as keyof T] !== this.host[deprecatedKey]) {\n        if (!this.logged) {\n          this.logger.warn(`${deprecatedKey} is deprecated, use ${alias} instead`);\n          this.logged = true;\n        }\n        this.host[alias as keyof T] = this.host[deprecatedKey];\n      }\n    }\n  }\n}\n"]}