{"version":3,"file":"cascades.js","sourceRoot":"","sources":["cascades.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sCAAsC,CAAC;AAEzE;;GAEG;AACH,MAAM,UAAU,QAAQ,CAA4B,GAAG,KAAe;IACpE,OAAO,UAAS,KAAQ,EAAE,GAAqB;QAC5C,KAAK,CAAC,WAAsC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;YAC/D,MAAM,QAAQ,GAAG,CAAoB,CAAC;YACtC,6DAA6D;YAC7D,6DAA6D;YAC7D,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC9C,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;aAC5E;YAED,iBAAiB,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAsB,CAAC;AACzB,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\n\nimport { CascadeController } from '../controllers/cascade-controller.js';\n\n/**\n * Cascades the decorated attribute to children\n */\nexport function cascades<T extends ReactiveElement>(...items: string[]): PropertyDecorator {\n  return function(proto: T, key: string & keyof T) {\n    (proto.constructor as typeof ReactiveElement).addInitializer(x => {\n      const instance = x as ReactiveElement;\n      // You can have multiple `@cascades` decorators on an element\n      // and it will only get one CascadeController for all of them\n      if (!CascadeController.instances.has(instance)) {\n        CascadeController.instances.set(instance, new CascadeController(instance));\n      }\n\n      CascadeController.instances.get(instance)?.initProp(key, items);\n    });\n  } as PropertyDecorator;\n}\n"]}