{"version":3,"file":"observes.js","sourceRoot":"","sources":["observes.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,0BAA0B,GAG3B,MAAM,kEAAkE,CAAC;AAE1E;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,QAAQ,CACtB,YAA8B,EAC9B,OAAmF;IAEnF,OAAO,UAAS,KAAQ,EAAE,UAAkB;QAC1C,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAqB,CAAsB,CAAC;QACnE,IAAI,OAAO,QAAQ,KAAK,UAAU,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;QAC5D,CAAC;QACD,MAAM,KAAK,GAAG,KAAK,CAAC,WAAqC,CAAC;QAC1D,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC9B,QAAQ,CAAC,aAAa,CAAC,IAAI,0BAA0B,CAAC,QAAa,EAAE;gBACnE,GAAG,OAAO;gBACV,YAAY;gBACZ,QAAQ;aACT,CAAC,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { ReactiveElement } from 'lit';\n\nimport {\n  PropertyObserverController,\n  type ChangeCallback,\n  type PropertyObserverOptions,\n} from '@patternfly/pfe-core/controllers/property-observer-controller.js';\n\n/**\n * Observes changes on the given property and calls the decorated method\n * with the old and new values when it changes. In cases where the decorated method\n * needs to access uninitialized class fields, You may need to wait for the element to connect\n * before running your effects. In that case, you can optionally specify which\n * lifecycle state to wait for. e.g.:\n * - `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n * - `waitFor: 'updated'` waits until the next update cycle has completed\n * - `waitFor: 'connected'` waits until the element connects\n * @param propertyName property to react to\n * @param [options] options including lifecycle to wait on.\n */\nexport function observes<T extends ReactiveElement>(\n  propertyName: string & keyof T,\n  options?: Partial<Exclude<PropertyObserverOptions<T>, 'callback' | 'propertyName'>>,\n) {\n  return function(proto: T, methodName: string): void {\n    const callback = proto[methodName as keyof T] as ChangeCallback<T>;\n    if (typeof callback !== 'function') {\n      throw new Error('@observes must decorate a class method');\n    }\n    const klass = proto.constructor as typeof ReactiveElement;\n    klass.addInitializer(instance => {\n      instance.addController(new PropertyObserverController(instance as T, {\n        ...options,\n        propertyName,\n        callback,\n      }));\n    });\n  };\n}\n\n"]}