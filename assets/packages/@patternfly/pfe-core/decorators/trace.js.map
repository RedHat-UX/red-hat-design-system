{"version":3,"file":"trace.js","sourceRoot":"","sources":["trace.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,UAAU,KAAK,CAAC,GAAY;IAChC,OAAO,UACL,CAAU,EACV,GAAW,EACX,UAA8B;QAE9B,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,UAAU,CAAC;QAChC,UAAU,CAAC,KAAK,GAAG,UAAS,GAAG,IAAW;YACxC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YAEhC,MAAM,GAAG,GAAG,GAAG,EAAE;gBACf,sCAAsC;gBACtC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC3B,OAAO,CAAC,CAAC;YACX,CAAC,CAAC;YAEF,IAAI,CAAC,YAAY,OAAO,EAAE,CAAC;gBACzB,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;iBAAM,CAAC;gBACN,OAAO,GAAG,EAAE,CAAC;YACf,CAAC;QACH,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * Logs the result of a class method\n * @param tag log tag, prepended to outputs\n */\nexport function trace(tag?: string) {\n  return function(\n    _: unknown,\n    key: string,\n    descriptor: PropertyDescriptor,\n  ): void {\n    const { value: f } = descriptor;\n    descriptor.value = function(...args: any[]) {\n      const x = f.call(this, ...args);\n\n      const ret = () => {\n        // eslint-disable-next-line no-console\n        console.log(tag ?? key, x);\n        return x;\n      };\n\n      if (x instanceof Promise) {\n        return x.then(ret);\n      } else {\n        return ret();\n      }\n    };\n  };\n}\n"]}