{"version":3,"file":"listen.js","sourceRoot":"","sources":["listen.ts"],"names":[],"mappings":"AAEA;;;;;GAKG;AACH,MAAM,UAAU,MAAM,CACpB,IAA+B,EAC/B,OAAiC;IAEjC,OAAO,UACL,KAAiB,EACjB,UAAkB;QAElB,MAAM,aAAa,GAAG,KAAK,CAAC,iBAAiB,CAAC;QAC9C,MAAM,gBAAgB,GAAG,KAAK,CAAC,oBAAoB,CAAC;QACpD,MAAM,QAAQ,GAAI,KAAW,CAAC,UAAqB,CAAkB,CAAC;QACtE,KAAK,CAAC,iBAAiB,GAAG;YACxB,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC1B,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC;QACF,KAAK,CAAC,oBAAoB,GAAG;YAC3B,gBAAgB,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import type { LitElement } from 'lit';\n\n/**\n * Listens for a given event on the custom element.\n * equivalent to calling `this.addEventListener` in the constructor\n * @param type event type e.g. `click`\n * @param options event listener options object e.g. `{ passive: true }`\n */\nexport function listen<P extends LitElement>(\n  type: keyof HTMLElementEventMap,\n  options?: AddEventListenerOptions,\n) {\n  return function(\n    proto: LitElement,\n    methodName: string,\n  ): void {\n    const origConnected = proto.connectedCallback;\n    const origDisconnected = proto.disconnectedCallback;\n    const listener = (proto as P)[methodName as keyof P] as EventListener;\n    proto.connectedCallback = function() {\n      origConnected?.call(this);\n      this.addEventListener(type, listener, options);\n    };\n    proto.disconnectedCallback = function() {\n      origDisconnected?.call(this);\n      this.removeEventListener(type, listener, options);\n    };\n  };\n}\n"]}