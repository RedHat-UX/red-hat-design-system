{
  "schemaVersion": "2.1.0",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "controllers/activedescendant-controller.js",
      "declarations": [
        {
          "name": "ActivedescendantController",
          "description": "Implements activedescendant pattern, as described in WAI-ARIA practices,\n[Managing Focus in Composites Using aria-activedescendant][ad]\n* The steps for using the aria-activedescendant method of managing focus are as follows.\n*  - When the container element that has a role that supports aria-activedescendant is loaded\nor created, ensure that:\n- The container element is included in the tab sequence as described in\nKeyboard Navigation Between Components or is a focusable element of a composite\nthat implements a roving tabindex.\n- It has aria-activedescendant=\"IDREF\" where IDREF is the ID of the element within\nthe container that should be identified as active when the widget receives focus.\nThe referenced element needs to meet the DOM relationship requirements described below.\n- When the container element receives DOM focus, draw a visual focus indicator on the active\nelement and ensure the active element is scrolled into view.\n- When the composite widget contains focus and the user presses a navigation key that moves\nfocus within the widget, such as an arrow key:\n- Change the value of aria-activedescendant on the container to refer to the element\nthat should be reported to assistive technologies as active.\n- Move the visual focus indicator and, if necessary, scrolled the active element into view.\n- If the design calls for a specific element to be focused the next time a user moves focus\ninto the composite with Tab or Shift+Tab, check if aria-activedescendant is referring to\nthat target element when the container loses focus. If it is not, set aria-activedescendant\nto refer to the target element.\n* The specification for aria-activedescendant places important restrictions on the\nDOM relationship between the focused element that has the aria-activedescendant attribute\nand the element referenced as active by the value of the attribute.\nOne of the following three conditions must be met.\n* 1. The element referenced as active is a DOM descendant of the focused referencing element.\n2. The focused referencing element has a value specified for the aria-owns property that\nincludes the ID of the element referenced as active.\n3. The focused referencing element has role of combobox, textbox, or searchbox\nand has aria-controls property referring to an element with a role that supports\naria-activedescendant and either:\n1. The element referenced as active is a descendant of the controlled element.\n2. The controlled element has a value specified for the aria-owns property that includes\nthe ID of the element referenced as active.\n* [ad]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_focus_activedescendant",
          "superclass": {
            "name": "ATFocusController"
          },
          "members": [
            {
              "name": "supportsCrossRootActiveDescendant",
              "description": "When true, the browser supports cross-root ARIA such that the controller does not need\nto copy item nodes into the controlling nodes' root",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "kind": "field",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ActivedescendantControllerOptions\u003cItem\u003e"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ActivedescendantController\u003cItem\u003e"
                }
              },
              "name": "of",
              "kind": "method",
              "static": true
            },
            {
              "name": "atFocusedItemIndex",
              "description": "Rather than setting DOM focus, applies the `aria-activedescendant` attribute,\nusing AriaIDLAttributes for cross-root aria, if supported by the browser",
              "type": {
                "text": "number"
              },
              "kind": "field"
            },
            {
              "name": "controlsElements",
              "type": {
                "text": "HTMLElement[]"
              },
              "kind": "field",
              "privacy": "protected"
            },
            {
              "name": "items",
              "description": "All items",
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "initItems",
              "kind": "method",
              "privacy": "protected"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "onKeydown",
              "kind": "method",
              "privacy": "protected"
            },
            {
              "return": {
                "type": {
                  "text": "typeof nothing | Node[]"
                }
              },
              "name": "renderItemsToShadowRoot",
              "kind": "method",
              "privacy": "public"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ActivedescendantController",
          "declaration": {
            "name": "ActivedescendantController",
            "module": "controllers/activedescendant-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/at-focus-controller.js"
    },
    {
      "kind": "javascript-module",
      "path": "controllers/cascade-controller.js",
      "declarations": [
        {
          "name": "CascadeController",
          "members": [
            {
              "name": "class",
              "type": {
                "text": "typeof ReactiveElement"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "logger",
              "type": {
                "text": "Logger"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "instances",
              "type": {
                "text": "WeakMap\u003cReactiveElement, CascadeController\u003cReactiveElement\u003e\u003e"
              },
              "default": "new WeakMap\u003cReactiveElement, CascadeController\u003cReactiveElement\u003e\u003e()",
              "kind": "field",
              "static": true
            },
            {
              "name": "mo",
              "type": {
                "text": "MutationObserver"
              },
              "default": "new MutationObserver(this.parse)",
              "kind": "field"
            },
            {
              "name": "cache",
              "type": {
                "text": "Map\u003cstring, string[]\u003e"
              },
              "default": "new Map\u003cstring, string[]\u003e()",
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdated",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "nodeList",
                  "type": {
                    "text": "HTMLCollection | NodeList"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "cascadeProperties",
              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "propName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "cascade",
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "initProp",
              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ],
              "name": "parse",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "el",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "name": "_copyAttribute",
              "description": "Copy the named attribute to a target element.",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "selectors",
                  "type": {
                    "text": "IterableIterator\u003cstring\u003e"
                  }
                },
                {
                  "name": "set",
                  "type": {
                    "text": "this['cache']"
                  }
                }
              ],
              "name": "_cascadeAttributes",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "to",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "name": "_cascadeAttribute",
              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM.",
              "kind": "method",
              "privacy": "private"
            }
          ],
          "kind": "class",
          "deprecated": "use context, especially via `@patternfly/pfe-core/functions/context.js`;"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CascadeController",
          "declaration": {
            "name": "CascadeController",
            "module": "controllers/cascade-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/combobox-controller.js",
      "declarations": [
        {
          "name": "ComboboxController",
          "summary": "Implements the WAI-ARIA pattern [Editable Combobox with Both List and Inline Autocomplete].\n* Combobox with keyboard and pointer navigation, using the aria-activedescendant pattern.\n* WARNING: Safari VoiceOver does not support aria-activedescendant, so Safari users\nrely on the combobox input value being announced when navigating the listbox with the keyboard.\nWe have erred on the side that it may be less-broken to avoid announcing disabled items in that\ncase, rather than announcing the disabled items value without indicating that it is disabled.",
          "members": [
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ComboboxControllerOptions\u003cT\u003e"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ComboboxController\u003cT\u003e"
                }
              },
              "name": "of",
              "kind": "method",
              "static": true,
              "privacy": "public"
            },
            {
              "name": "supportsCrossRootActiveDescendant",
              "description": "Whether the `ariaActiveDescendantElement` IDL attribute is supported for cross-root ARIA.",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "kind": "field",
              "static": true
            },
            {
              "name": "langs",
              "default": "[\\n    'en',\\n    'es',\\n    'de',\\n    'fr',\\n    'it',\\n    'ja',\\n    'zh',\\n  ] as const",
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "name": "langsRE",
              "default": "new RegExp(ComboboxController.langs.join('|'))",
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "name": "options",
              "type": {
                "text": "RequireProps\u003cComboboxControllerOptions\u003cItem\u003e,\n    | 'isItemDisabled'\n    | 'isItem'\n    | 'isItemFiltered'\n    | 'getItemValue'\n    | 'getOrientation'\n    | 'getComboboxValue'\n    | 'setComboboxValue'\n    | 'setItemHidden'\n  \u003e"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "items",
              "description": "All items",
              "type": {
                "text": "Item[]"
              },
              "kind": "field"
            },
            {
              "name": "disabled",
              "description": "Whether the combobox is disabled",
              "kind": "field"
            },
            {
              "name": "multi",
              "description": "Whether multiselect is enabled",
              "kind": "field"
            },
            {
              "name": "selected",
              "description": "The current selection: a list of items",
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdated",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "Node[] | typeof nothing"
                }
              },
              "name": "renderItemsToShadowRoot",
              "description": "For Browsers which do not support `ariaActiveDescendantElement`, we must clone\nthe listbox items into the same root as the combobox input\nCall this method to return either an array of (cloned) list box items, to be placed in your\nshadow template, or nothing in the case the browser supports cross-root aria.",
              "kind": "method",
              "privacy": "public"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ComboboxController",
          "declaration": {
            "name": "ComboboxController",
            "module": "controllers/combobox-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/css-variable-controller.js",
      "declarations": [
        {
          "name": "CssVariableController",
          "members": [
            {
              "name": "style",
              "type": {
                "text": "CSSStyleDeclaration"
              },
              "kind": "field"
            },
            {
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "name": "parseProperty",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "name": "getVariable",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CssVariableController",
          "declaration": {
            "name": "CssVariableController",
            "module": "controllers/css-variable-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/floating-dom-controller.js",
      "declarations": [
        {
          "name": "FloatingDOMController",
          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
          "members": [
            {
              "name": "alignment",
              "description": "The crosswise alignment of the invoker on which to display the floating DOM",
              "type": {
                "text": "Alignment"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "anchor",
              "description": "The side of the invoker on which to display the floating DOM",
              "type": {
                "text": "Anchor"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "open",
              "description": "When true, the floating DOM is visible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "placement",
              "description": "The computed placement of the floating DOM",
              "type": {
                "text": "Placement"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "styles",
              "description": "Styles to apply to your element's container\n* - `--_floating-content-translate`: translate to apply to floating content.",
              "type": {
                "text": "StyleInfo"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "show",
              "description": "Show the floating DOM",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "hide",
              "description": "Hide the floating DOM",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FloatingDOMController",
          "declaration": {
            "name": "FloatingDOMController",
            "module": "controllers/floating-dom-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/internals-controller.js",
      "declarations": [
        {
          "name": "InternalsController",
          "description": "reactively forward the internals object's aria mixin prototype",
          "members": [
            {
              "name": "instances",
              "default": "new WeakMap\u003cReactiveControllerHost, InternalsController\u003e()",
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "name": "form",
              "type": {
                "text": "ElementInternals['form']"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "shadowRoot",
              "type": {
                "text": "ElementInternals['shadowRoot']"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "states",
              "type": {
                "text": "unknown"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "willValidate",
              "type": {
                "text": "ElementInternals['willValidate']"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "validationMessage",
              "type": {
                "text": "ElementInternals['validationMessage']"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "name": "getLabels",
              "kind": "method",
              "static": true,
              "privacy": "public"
            },
            {
              "name": "isSafari",
              "type": {
                "text": "boolean"
              },
              "default": "!isServer \u0026\u0026 /^((?!chrome|android).)*safari/i.test(navigator.userAgent)",
              "kind": "field",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "InternalsControllerOptions"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "InternalsController"
                }
              },
              "name": "of",
              "kind": "method",
              "static": true,
              "privacy": "public"
            },
            {
              "name": "role",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaActivedescendant",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaAtomic",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaAutoComplete",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaBusy",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaBrailleLabel",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaBrailleRoleDescription",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaChecked",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaColCount",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaColIndex",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaColIndexText",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaColSpan",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaCurrent",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaDescription",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaDisabled",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaExpanded",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaHasPopup",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaHidden",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaInvalid",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaKeyShortcuts",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaLevel",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaLive",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaModal",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaMultiLine",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaMultiSelectable",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaOrientation",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaPlaceholder",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaPosInSet",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaPressed",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaReadOnly",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRelevant",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRequired",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRoleDescription",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRowCount",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRowIndex",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRowIndexText",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaRowSpan",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaSelected",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaSetSize",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaSort",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaValueMax",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaValueMin",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaValueNow",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaValueText",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaActiveDescendantElement",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaControlsElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaDescribedByElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaDetailsElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaErrorMessageElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaFlowToElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaLabelledByElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "ariaOwnsElements",
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "type": {
                "text": "Element[] | null"
              },
              "default": "null",
              "kind": "field"
            },
            {
              "name": "formDisabled",
              "description": "True when the control is disabled via it's containing fieldset element",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "labels",
              "type": {
                "text": "NodeList"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "validity",
              "type": {
                "text": "ValidityState"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "computedLabelText",
              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "element",
              "readonly": true,
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "_formDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "attachOrRetrieveInternals",
              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "Partial\u003cARIAMixin\u003e"
                  }
                }
              ],
              "name": "initializeOptions",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters\u003cElementInternals['setFormValue']\u003e"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "setFormValue",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters\u003cElementInternals['setValidity']\u003e"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "setValidity",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters\u003cElementInternals['checkValidity']\u003e"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "checkValidity",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters\u003cElementInternals['reportValidity']\u003e"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "reportValidity",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "submit",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "reset",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InternalsController",
          "declaration": {
            "name": "InternalsController",
            "module": "controllers/internals-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/light-dom-controller.js",
      "declarations": [
        {
          "name": "LightDOMController",
          "members": [
            {
              "name": "mo",
              "type": {
                "text": "MutationObserver"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "logger",
              "type": {
                "text": "Logger"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "initializer",
              "type": {
                "text": "() =\u003e void"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "name": "initObserver",
              "kind": "method",
              "privacy": "private"
            },
            {
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "hasLightDOM",
              "description": "Returns a boolean statement of whether or not this component contains any light DOM.",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LightDOMController",
          "declaration": {
            "name": "LightDOMController",
            "module": "controllers/light-dom-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/listbox-controller.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "item",
              "description": "possible disabled item",
              "type": {
                "text": "EventTarget | null"
              }
            }
          ],
          "name": "isItem",
          "kind": "function"
        },
        {
          "parameters": [
            {
              "name": "item",
              "description": "possibly disabled item",
              "type": {
                "text": "Item"
              }
            }
          ],
          "name": "isItemDisabled",
          "description": "This is a fib. aria-disabled might not be present on an element that uses internals,\nand the `disabled` attribute may not accurately represent the disabled state.\nshort of patching the `attachInternals` constructor, it may not be possible at\nruntime to know with certainty that an arbitrary custom element is disabled or not.",
          "kind": "function"
        },
        {
          "name": "ListboxController",
          "description": "Options for listbox controller",
          "members": [
            {
              "name": "instances",
              "default": "new WeakMap\u003cReactiveControllerHost, ListboxController\u003cHTMLElement\u003e\u003e()",
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ListboxControllerOptions\u003cItem\u003e"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "ListboxController\u003cItem\u003e"
                }
              },
              "name": "of",
              "kind": "method",
              "static": true,
              "privacy": "public"
            },
            {
              "name": "disabled",
              "description": "Whether listbox is disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field"
            },
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "multi",
              "type": {
                "text": "boolean"
              },
              "kind": "field"
            },
            {
              "name": "items",
              "description": "register's the host's Item elements as listbox controller items\nsets aria-setsize and aria-posinset on items",
              "type": {
                "text": "Item[]"
              },
              "kind": "field"
            },
            {
              "name": "selected",
              "description": "sets the listbox value based on selected options",
              "type": {
                "text": "Item[]"
              },
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdate",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdated",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Item"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "isSelected",
              "kind": "method",
              "privacy": "public"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isItem",
          "declaration": {
            "name": "isItem",
            "module": "controllers/listbox-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "isItemDisabled",
          "declaration": {
            "name": "isItemDisabled",
            "module": "controllers/listbox-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "ListboxController",
          "declaration": {
            "name": "ListboxController",
            "module": "controllers/listbox-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/logger.js",
      "declarations": [
        {
          "name": "Logger",
          "members": [
            {
              "name": "logDebug",
              "type": {
                "text": "boolean"
              },
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "name": "instances",
              "default": "new WeakMap\u003cReactiveControllerHost, Logger\u003e()",
              "kind": "field",
              "static": true,
              "privacy": "private"
            },
            {
              "name": "prefix",
              "readonly": true,
              "kind": "field",
              "privacy": "private"
            },
            {
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "debugLog",
              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "debug",
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "info",
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "log",
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "warn",
              "description": "A console warning wrapper which formats your output with useful debugging information.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "error",
              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function.",
              "kind": "method",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "debug",
              "description": "Debug logging that outputs the tag name as a prefix automatically",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "info",
              "description": "Info logging that outputs the tag name as a prefix automatically",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "log",
              "description": "Local logging that outputs the tag name as a prefix automatically",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "warn",
              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function.",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "error",
              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function.",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Logger",
          "declaration": {
            "name": "Logger",
            "module": "controllers/logger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/overflow-controller.js",
      "declarations": [
        {
          "name": "OverflowController",
          "members": [
            {
              "name": "showScrollButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field"
            },
            {
              "name": "overflowLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field"
            },
            {
              "name": "overflowRight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field"
            },
            {
              "name": "firstItem",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "lastItem",
              "type": {
                "text": "HTMLElement | undefined"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "items",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "init",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "onScroll",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "scrollLeft",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "scrollRight",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "update",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverflowController",
          "declaration": {
            "name": "OverflowController",
            "module": "controllers/overflow-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/perf-controller.js",
      "declarations": [
        {
          "name": "PerfController",
          "members": [
            {
              "name": "hasMeasured",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field"
            },
            {
              "name": "markId",
              "type": {
                "text": "string"
              },
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdate",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "measure",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PerfController",
          "declaration": {
            "name": "PerfController",
            "module": "controllers/perf-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/property-observer-controller.js",
      "declarations": [
        {
          "name": "PropertyObserverController",
          "members": [
            {
              "name": "oldVal",
              "type": {
                "text": "T[keyof T]"
              },
              "default": "UNINITIALIZED as T[keyof T]",
              "kind": "field",
              "privacy": "private"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "hostUpdate",
              "description": "Set any cached valued accumulated between constructor and connectedCallback",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PropertyObserverController",
          "declaration": {
            "name": "PropertyObserverController",
            "module": "controllers/property-observer-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/roving-tabindex-controller.js",
      "declarations": [
        {
          "name": "RovingTabindexController",
          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n* [rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
          "superclass": {
            "name": "ATFocusController"
          },
          "members": [
            {
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "RovingTabindexControllerOptions\u003cItem\u003e"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "RovingTabindexController\u003cItem\u003e"
                }
              },
              "name": "of",
              "kind": "method",
              "static": true
            },
            {
              "name": "atFocusedItemIndex",
              "description": "Sets the DOM Focus on the item with assistive technology focus",
              "type": {
                "text": "number"
              },
              "kind": "field"
            },
            {
              "name": "items",
              "kind": "field"
            },
            {
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "onKeydown",
              "kind": "method",
              "privacy": "protected"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "controllers/roving-tabindex-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/scroll-spy-controller.js",
      "declarations": [
        {
          "name": "ScrollSpyController",
          "members": [
            {
              "name": "root",
              "type": {
                "text": "Element | Document | null | undefined"
              },
              "kind": "field"
            },
            {
              "name": "rootMargin",
              "type": {
                "text": "string | undefined"
              },
              "kind": "field"
            },
            {
              "name": "threshold",
              "type": {
                "text": "number | number[]"
              },
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "link",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "setActive",
              "description": "Explicitly set the active item",
              "kind": "method",
              "privacy": "public"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollSpyController",
          "declaration": {
            "name": "ScrollSpyController",
            "module": "controllers/scroll-spy-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/slot-controller-server.js",
      "declarations": [
        {
          "name": "SlotController",
          "members": [
            {
              "name": "default",
              "default": "Symbol('default slot') satisfies symbol as symbol",
              "kind": "field",
              "static": true
            },
            {
              "name": "anonymous",
              "type": {
                "text": "symbol"
              },
              "default": "this.default",
              "deprecated": "use `default`",
              "kind": "field",
              "static": true
            },
            {
              "name": "attribute",
              "type": {
                "text": "string"
              },
              "default": "'ssr-hint-has-slotted' as const",
              "kind": "field",
              "static": true
            },
            {
              "name": "anonymousAttribute",
              "type": {
                "text": "string"
              },
              "default": "'ssr-hint-has-slotted-default' as const",
              "kind": "field",
              "static": true
            },
            {
              "parameters": [
                {
                  "name": "slots",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "name": "fromAttribute",
              "kind": "method",
              "privacy": "private"
            },
            {
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "(string | null)[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "name": "getSlotted",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null)[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "hasSlotted",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null)[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "isEmpty",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "controllers/slot-controller-server.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/slot-controller.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "config",
              "type": {
                "text": "SlotControllerArgs"
              }
            }
          ],
          "name": "isObjectSpread",
          "kind": "function"
        },
        {
          "name": "SlotControllerPublicAPI",
          "members": [
            {
              "name": "default",
              "type": {
                "text": "symbol"
              },
              "kind": "field",
              "static": true
            },
            {
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              },
              "kind": "field"
            }
          ],
          "kind": "class"
        },
        {
          "name": "SlotRecord",
          "members": [
            {
              "name": "elements",
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "hasContent",
              "readonly": true,
              "kind": "field"
            }
          ],
          "kind": "class"
        },
        {
          "name": "SlotController",
          "members": [
            {
              "name": "default",
              "default": "Symbol('default slot') satisfies symbol as symbol",
              "kind": "field",
              "static": true
            },
            {
              "name": "anonymous",
              "type": {
                "text": "symbol"
              },
              "default": "this.default",
              "deprecated": "use `default`",
              "kind": "field",
              "static": true
            },
            {
              "return": {
                "type": {
                  "text": "Promise\u003cvoid\u003e"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "slotNames",
                  "type": {
                    "text": "string[] | [null]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "name": "getSlotted",
              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute).",
              "kind": "method",
              "privacy": "public"
            },
            {
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "hasSlotted",
              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM.",
              "kind": "method",
              "privacy": "public"
            },
            {
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  },
                  "rest": true
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "name": "isEmpty",
              "description": "Whether or not all the requested slots are empty.",
              "kind": "method",
              "privacy": "public"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isObjectSpread",
          "declaration": {
            "name": "isObjectSpread",
            "module": "controllers/slot-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "controllers/slot-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/style-controller.js",
      "declarations": [
        {
          "name": "StyleController",
          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
          "members": [
            {
              "name": "stylesAdopted",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field",
              "privacy": "private"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StyleController",
          "declaration": {
            "name": "StyleController",
            "module": "controllers/style-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/tabs-aria-controller.js",
      "declarations": [
        {
          "name": "TabsAriaController",
          "members": [
            {
              "name": "tabs",
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "activeTab",
              "type": {
                "text": "Tab | undefined"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostConnected",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostUpdated",
              "kind": "method"
            },
            {
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "hostDisconnected",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Panel | undefined"
                }
              },
              "name": "panelFor",
              "kind": "method"
            },
            {
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "Panel"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Tab | undefined"
                }
              },
              "name": "tabFor",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabsAriaController",
          "declaration": {
            "name": "TabsAriaController",
            "module": "controllers/tabs-aria-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/timestamp-controller.js",
      "declarations": [
        {
          "name": "TimestampController",
          "members": [
            {
              "name": "localeString",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "date",
              "type": {
                "text": "Date"
              },
              "kind": "field"
            },
            {
              "name": "isoString",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "name": "time",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "kind": "field"
            },
            {
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "name": "set",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimestampController",
          "declaration": {
            "name": "TimestampController",
            "module": "controllers/timestamp-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/bound.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "_",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "name": "bound",
          "description": "Binds a class method to the instance",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bound",
          "declaration": {
            "name": "bound",
            "module": "decorators/bound.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/cascades.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "string[]"
              },
              "rest": true
            }
          ],
          "name": "cascades",
          "description": "Cascades the decorated attribute to children",
          "deprecated": "use context, especially via `@patternfly/pfe-core/functions/context.js`;",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cascades",
          "declaration": {
            "name": "cascades",
            "module": "decorators/cascades.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/deprecation.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "options",
              "description": "alias is a drop in replacement",
              "type": {
                "text": "DeprecationDeclaration\u003cK\u003e"
              }
            }
          ],
          "name": "deprecation",
          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used",
          "kind": "function"
        },
        {
          "name": "Deprecation",
          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used",
          "members": [
            {
              "name": "logger",
              "type": {
                "text": "Logger"
              },
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "logged",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "kind": "field",
              "privacy": "private"
            },
            {
              "name": "hostUpdate",
              "kind": "method"
            }
          ],
          "kind": "class"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "deprecation",
          "declaration": {
            "name": "deprecation",
            "module": "decorators/deprecation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/initializer.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "options",
              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options",
              "type": {
                "text": "Options"
              }
            }
          ],
          "name": "initializer",
          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "initializer",
          "declaration": {
            "name": "initializer",
            "module": "decorators/initializer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/listen.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "type",
              "description": "event type e.g. `click`",
              "type": {
                "text": "keyof HTMLElementEventMap"
              }
            }
          ],
          "name": "listen",
          "description": "Listens for a given event on the custom element.\nequivalent to calling `this.addEventListener` in the constructor",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "listen",
          "declaration": {
            "name": "listen",
            "module": "decorators/listen.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/observed.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "methodName",
              "type": {
                "text": "string"
              }
            }
          ],
          "name": "observed",
          "kind": "function"
        },
        {
          "parameters": [
            {
              "name": "proto",
              "type": {
                "text": "T"
              }
            }
          ],
          "name": "observed",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/observes.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "propertyName",
              "description": "property to react to",
              "type": {
                "text": "string \u0026 keyof T"
              }
            }
          ],
          "name": "observes",
          "description": "Observes changes on the given property and calls the decorated method\nwith the old and new values when it changes. In cases where the decorated method\nneeds to access uninitialized class fields, You may need to wait for the element to connect\nbefore running your effects. In that case, you can optionally specify which\nlifecycle state to wait for. e.g.:\n- `waitFor: 'firstUpdate'` waits until the first update cycle has completed\n- `waitFor: 'updated'` waits until the next update cycle has completed\n- `waitFor: 'connected'` waits until the element connects",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observes",
          "declaration": {
            "name": "observes",
            "module": "decorators/observes.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/time.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "tag",
              "description": "- short string to identify the method name",
              "type": {
                "text": "string"
              }
            }
          ],
          "name": "time",
          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "time",
          "declaration": {
            "name": "time",
            "module": "decorators/time.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/trace.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "tag",
              "description": "log tag, prepended to outputs",
              "type": {
                "text": "string"
              }
            }
          ],
          "name": "trace",
          "description": "Logs the result of a class method",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trace",
          "declaration": {
            "name": "trace",
            "module": "decorators/trace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/arraysAreEquivalent.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "a",
              "description": "first array",
              "type": {
                "text": "unknown"
              }
            }
          ],
          "name": "arraysAreEquivalent",
          "description": "Whether the two arrays are equivalent\nArrays are equivalent when they are both empty, or when their lengths are equal and each of\ntheir members is equal (===) to the corresponding member in the other array.\nIf either argument is not an array, the result will be strict equivalence (===)",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "arraysAreEquivalent",
          "declaration": {
            "name": "arraysAreEquivalent",
            "module": "functions/arraysAreEquivalent.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/containsDeep.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "container",
              "description": "haystack",
              "type": {
                "text": "Element"
              }
            }
          ],
          "name": "containsDeep",
          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "containsDeep",
          "declaration": {
            "name": "containsDeep",
            "module": "functions/containsDeep.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/context.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "args",
              "description": "createContext args",
              "type": {
                "text": "Parameters\u003ctypeof createContext\u003e"
              },
              "rest": true
            }
          ],
          "name": "createContextWithRoot",
          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements.",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContextWithRoot",
          "declaration": {
            "name": "createContextWithRoot",
            "module": "functions/context.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/debounce.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "func",
              "description": "Function to be debounced",
              "type": {
                "text": "(...args: any[]) =\u003e unknown"
              }
            }
          ],
          "name": "debounce",
          "description": "Debounce helper function",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "functions/debounce.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/isElementInView.js",
      "declarations": [
        {
          "parameters": [
            {
              "name": "container",
              "description": "The container to check if the element is in view of.",
              "type": {
                "text": "HTMLElement"
              }
            }
          ],
          "return": {
            "description": "True if the component is in View."
          },
          "name": "isElementInView",
          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view.",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementInView",
          "declaration": {
            "name": "isElementInView",
            "module": "functions/isElementInView.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/random.js",
      "declarations": [
        {
          "name": "getRandomId",
          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned.",
          "kind": "function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRandomId",
          "declaration": {
            "name": "getRandomId",
            "module": "functions/random.js"
          }
        }
      ]
    }
  ]
}
