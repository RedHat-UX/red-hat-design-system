{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "core.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "trackPerformance",
          "return": {
            "type": {
              "text": "boolean | undefined"
            }
          },
          "parameters": [
            {
              "name": "preference",
              "optional": true,
              "type": {
                "text": "boolean | typeof noPref"
              }
            }
          ],
          "description": "A boolean value that indicates if the performance should be tracked.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
        },
        {
          "kind": "variable",
          "name": "NumberListConverter",
          "type": {
            "text": "ComplexAttributeConverter<number[] | null, unknown>"
          },
          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
        },
        {
          "kind": "variable",
          "name": "StringListConverter",
          "type": {
            "text": "ComplexAttributeConverter<string[] | null, unknown>"
          },
          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
        },
        {
          "kind": "class",
          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
          "name": "ComposedEvent",
          "superclass": {
            "name": "Event",
            "module": "global:"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trackPerformance",
          "declaration": {
            "name": "trackPerformance",
            "module": "core.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "NumberListConverter",
          "declaration": {
            "name": "NumberListConverter",
            "module": "core.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "StringListConverter",
          "declaration": {
            "name": "StringListConverter",
            "module": "core.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "ComposedEvent",
          "declaration": {
            "name": "ComposedEvent",
            "module": "core.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "core.js",
      "declarations": [
        {
          "kind": "function",
          "name": "trackPerformance",
          "parameters": [
            {
              "name": "preference",
              "default": "noPref"
            }
          ],
          "description": "A boolean value that indicates if the performance should be tracked.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
        },
        {
          "kind": "variable",
          "name": "NumberListConverter",
          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
        },
        {
          "kind": "variable",
          "name": "StringListConverter",
          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
        },
        {
          "kind": "class",
          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
          "name": "ComposedEvent",
          "superclass": {
            "name": "Event",
            "module": "global:"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trackPerformance",
          "declaration": {
            "name": "trackPerformance",
            "module": "core.js"
          }
        },
        {
          "kind": "js",
          "name": "NumberListConverter",
          "declaration": {
            "name": "NumberListConverter",
            "module": "core.js"
          }
        },
        {
          "kind": "js",
          "name": "StringListConverter",
          "declaration": {
            "name": "StringListConverter",
            "module": "core.js"
          }
        },
        {
          "kind": "js",
          "name": "ComposedEvent",
          "declaration": {
            "name": "ComposedEvent",
            "module": "core.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "core.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "trackPerformance",
          "parameters": [
            {
              "name": "preference",
              "default": "noPref",
              "type": {
                "text": "boolean | typeof noPref"
              }
            }
          ],
          "description": "A boolean value that indicates if the performance should be tracked.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
        },
        {
          "kind": "variable",
          "name": "NumberListConverter",
          "description": "A LitElement property converter which represents a list of numbers as a comma separated string"
        },
        {
          "kind": "variable",
          "name": "StringListConverter",
          "description": "A LitElement property converter which represents a list of strings as a comma separated string"
        },
        {
          "kind": "class",
          "description": "A composed, bubbling event for UI interactions\ne.g. when an accordion panel opens.",
          "name": "ComposedEvent",
          "superclass": {
            "name": "Event",
            "module": "global:"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trackPerformance",
          "declaration": {
            "name": "trackPerformance",
            "module": "core.ts"
          }
        },
        {
          "kind": "js",
          "name": "NumberListConverter",
          "declaration": {
            "name": "NumberListConverter",
            "module": "core.ts"
          }
        },
        {
          "kind": "js",
          "name": "StringListConverter",
          "declaration": {
            "name": "StringListConverter",
            "module": "core.ts"
          }
        },
        {
          "kind": "js",
          "name": "ComposedEvent",
          "declaration": {
            "name": "ComposedEvent",
            "module": "core.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators.d.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/bound.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/cascades.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/deprecation.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/initializer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/observed.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/time.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/trace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/bound.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/cascades.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/deprecation.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/initializer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/observed.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/time.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/trace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/bound.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/cascades.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/deprecation.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/initializer.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/observed.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/time.js"
          }
        },
        {
          "kind": "js",
          "name": "*",
          "declaration": {
            "name": "*",
            "package": "./decorators/trace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/cascade-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CascadeController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "E"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Options<E> | undefined | undefined"
              }
            },
            {
              "kind": "field",
              "name": "class",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "logger",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "instances",
              "type": {
                "text": "WeakMap<ReactiveElement, CascadeController<ReactiveElement>>"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "mo",
              "type": {
                "text": "MutationObserver"
              }
            },
            {
              "kind": "field",
              "name": "cache",
              "type": {
                "text": "Map<string, string[]>"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "cascadeProperties",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "nodeList",
                  "optional": true,
                  "type": {
                    "text": "HTMLCollection | NodeList"
                  }
                }
              ],
              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
            },
            {
              "kind": "method",
              "name": "initProp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "propName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "cascade",
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
            },
            {
              "kind": "field",
              "name": "parse",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_copyAttribute",
              "privacy": "private",
              "description": "Copy the named attribute to a target element."
            },
            {
              "kind": "field",
              "name": "_cascadeAttributes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_cascadeAttribute",
              "privacy": "private",
              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM.",
              "parameters": [
                {
                  "description": "The name of the attribute to cascade (not necessarily the same as the property name).",
                  "name": "name"
                },
                {
                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees.",
                  "name": "to"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CascadeController",
          "declaration": {
            "name": "CascadeController",
            "module": "controllers/cascade-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/cascade-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CascadeController",
          "members": [
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "cascadeProperties",
              "parameters": [
                {
                  "name": "nodeList",
                  "default": "this.host.children"
                }
              ],
              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
            },
            {
              "kind": "method",
              "name": "initProp",
              "parameters": [
                {
                  "name": "propName"
                },
                {
                  "name": "cascade"
                }
              ],
              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
            },
            {
              "kind": "method",
              "name": "parse",
              "parameters": [
                {
                  "name": "mutations"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_copyAttribute",
              "parameters": [
                {
                  "name": "name"
                },
                {
                  "name": "el"
                }
              ],
              "description": "Copy the named attribute to a target element."
            },
            {
              "kind": "method",
              "name": "_cascadeAttributes",
              "parameters": [
                {
                  "name": "selectors"
                },
                {
                  "name": "set"
                }
              ]
            },
            {
              "kind": "method",
              "name": "_cascadeAttribute",
              "parameters": [
                {
                  "name": "name",
                  "description": "The name of the attribute to cascade (not necessarily the same as the property name)."
                },
                {
                  "name": "to",
                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees."
                }
              ],
              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM."
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "options",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "mo",
              "default": "new MutationObserver(this.parse)"
            },
            {
              "kind": "field",
              "name": "cache",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "name": "class"
            },
            {
              "kind": "field",
              "name": "logger",
              "default": "new Logger(this.host)"
            },
            {
              "kind": "field",
              "name": "cascadeProperties"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CascadeController",
          "declaration": {
            "name": "CascadeController",
            "module": "controllers/cascade-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/cascade-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CascadeController",
          "members": [
            {
              "kind": "field",
              "name": "class",
              "type": {
                "text": "typeof ReactiveElement"
              },
              "privacy": "private",
              "default": "host.constructor"
            },
            {
              "kind": "field",
              "name": "logger",
              "type": {
                "text": "Logger"
              },
              "privacy": "private",
              "default": "new Logger(this.host)"
            },
            {
              "kind": "field",
              "name": "instances",
              "type": {
                "text": "WeakMap<ReactiveElement, CascadeController<ReactiveElement>>"
              },
              "static": true,
              "default": "new WeakMap()"
            },
            {
              "kind": "field",
              "name": "mo",
              "default": "new MutationObserver(this.parse)"
            },
            {
              "kind": "field",
              "name": "cache",
              "default": "new Map<string, string[]>()"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "cascadeProperties",
              "parameters": [
                {
                  "name": "nodeList",
                  "default": "this.host.children",
                  "type": {
                    "text": "HTMLCollection | NodeList"
                  }
                }
              ],
              "description": "Handles the cascading of properties to nested components when new elements are added\nAttribute updates/additions are handled by the attribute callback"
            },
            {
              "kind": "method",
              "name": "initProp",
              "parameters": [
                {
                  "name": "propName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "cascade",
                  "type": {
                    "text": "string | string[]"
                  }
                }
              ],
              "description": "Gets the configured attribute name for the decorated property,\nfalling back to the lowercased property name, and caches the attribute name\nwith it's designated child selectors for value-propagation on change"
            },
            {
              "kind": "method",
              "name": "parse",
              "privacy": "private",
              "parameters": [
                {
                  "name": "mutations",
                  "type": {
                    "text": "MutationRecord[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_copyAttribute",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "el",
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "Copy the named attribute to a target element."
            },
            {
              "kind": "method",
              "name": "_cascadeAttributes",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selectors",
                  "type": {
                    "text": "IterableIterator<string>"
                  }
                },
                {
                  "name": "set",
                  "type": {
                    "text": "this['cache']"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_cascadeAttribute",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  },
                  "description": "The name of the attribute to cascade (not necessarily the same as the property name)."
                },
                {
                  "name": "to",
                  "type": {
                    "text": "string"
                  },
                  "description": "A CSS selector that matches the elements that should received the cascaded attribute.  The selector will be applied within `this` element's light and shadow DOM trees."
                }
              ],
              "description": "Trigger a cascade of the named attribute to any child elements that match\nthe `to` selector.  The selector can match elements in the light DOM and\nshadow DOM."
            },
            {
              "kind": "field",
              "type": {
                "text": "E",
                "name": "E"
              },
              "name": "host",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "Options<E>",
                "name": "Options<E>"
              },
              "name": "options",
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "cascadeProperties"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CascadeController",
          "declaration": {
            "name": "CascadeController",
            "module": "controllers/cascade-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/css-variable-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CssVariableController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              }
            },
            {
              "kind": "field",
              "name": "style",
              "type": {
                "text": "CSSStyleDeclaration"
              }
            },
            {
              "kind": "field",
              "name": "parseProperty",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getVariable",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CssVariableController",
          "declaration": {
            "name": "CssVariableController",
            "module": "controllers/css-variable-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/css-variable-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CssVariableController",
          "members": [
            {
              "kind": "method",
              "name": "parseProperty",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVariable",
              "parameters": [
                {
                  "name": "name"
                }
              ]
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "style"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CssVariableController",
          "declaration": {
            "name": "CssVariableController",
            "module": "controllers/css-variable-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/css-variable-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "CssVariableController",
          "members": [
            {
              "kind": "field",
              "name": "style",
              "type": {
                "text": "CSSStyleDeclaration"
              }
            },
            {
              "kind": "method",
              "name": "parseProperty",
              "privacy": "private",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getVariable",
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CssVariableController",
          "declaration": {
            "name": "CssVariableController",
            "module": "controllers/css-variable-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/floating-dom-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
          "name": "FloatingDOMController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alignment",
              "type": {
                "text": "Alignment"
              },
              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "anchor",
              "type": {
                "text": "Anchor"
              },
              "description": "The side of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "description": "When true, the floating DOM is visible"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "description": "The computed placement of the floating DOM"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "StyleInfo"
              },
              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "{ offset, placement, flip, fallbackPlacements }",
                  "optional": true,
                  "type": {
                    "text": "ShowOptions"
                  }
                }
              ],
              "description": "Show the floating DOM"
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hide the floating DOM"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Placement",
          "declaration": {
            "name": "Placement",
            "module": "controllers/floating-dom-controller.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "FloatingDOMController",
          "declaration": {
            "name": "FloatingDOMController",
            "module": "controllers/floating-dom-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/floating-dom-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
          "name": "FloatingDOMController",
          "members": [
            {
              "kind": "field",
              "name": "alignment",
              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "The side of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When true, the floating DOM is visible"
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "The computed placement of the floating DOM"
            },
            {
              "kind": "field",
              "name": "styles",
              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "{ offset, placement, flip, fallbackPlacements }",
                  "default": "{}"
                }
              ],
              "description": "Show the floating DOM"
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hide the floating DOM"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FloatingDOMController",
          "declaration": {
            "name": "FloatingDOMController",
            "module": "controllers/floating-dom-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/floating-dom-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controls floating DOM within a web component, e.g. tooltips and popovers",
          "name": "FloatingDOMController",
          "members": [
            {
              "kind": "field",
              "name": "#open",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#opening",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#cleanup",
              "privacy": "private",
              "type": {
                "text": "() => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#anchor",
              "privacy": "private",
              "type": {
                "text": "Anchor | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#alignment",
              "privacy": "private",
              "type": {
                "text": "Alignment | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#styles",
              "privacy": "private",
              "type": {
                "text": "StyleInfo | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#placement",
              "privacy": "private",
              "type": {
                "text": "Placement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "FloatingDOMControllerOptions"
              },
              "default": "{\n      invoker: (host instanceof HTMLElement ? () => host : () => undefined),\n      shift: true,\n      ...options,\n    }"
            },
            {
              "kind": "field",
              "name": "#invoker",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#content",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#arrow",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "alignment",
              "description": "The crosswise alignment of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "anchor",
              "description": "The side of the invoker on which to display the floating DOM"
            },
            {
              "kind": "field",
              "name": "open",
              "description": "When true, the floating DOM is visible"
            },
            {
              "kind": "field",
              "name": "placement",
              "type": {
                "text": "Placement"
              },
              "description": "The computed placement of the floating DOM"
            },
            {
              "kind": "field",
              "name": "styles",
              "type": {
                "text": "StyleInfo"
              },
              "description": "Styles to apply to your element's container\n\n- `--_floating-content-translate`: translate to apply to floating content."
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "#update",
              "parameters": [
                {
                  "name": "placement",
                  "default": "'top'",
                  "type": {
                    "text": "Placement"
                  }
                },
                {
                  "name": "offset",
                  "optional": true,
                  "type": {
                    "text": "Offset"
                  }
                },
                {
                  "name": "flip",
                  "default": "true"
                },
                {
                  "name": "fallbackPlacements",
                  "optional": true,
                  "type": {
                    "text": "Placement[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "{ offset, placement, flip, fallbackPlacements }",
                  "default": "{}",
                  "type": {
                    "text": "ShowOptions"
                  }
                }
              ],
              "description": "Show the floating DOM"
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hide the floating DOM"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost",
                "name": "ReactiveControllerHost",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Placement",
          "declaration": {
            "name": "Placement",
            "module": "controllers/floating-dom-controller.ts"
          }
        },
        {
          "kind": "js",
          "name": "FloatingDOMController",
          "declaration": {
            "name": "FloatingDOMController",
            "module": "controllers/floating-dom-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/internals-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InternalsController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "ElementInternals['form']"
              }
            },
            {
              "kind": "field",
              "name": "shadowRoot",
              "type": {
                "text": "ElementInternals['shadowRoot']"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "ElementInternals['willValidate']"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "ElementInternals['validationMessage']"
              }
            },
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "return": {
                "type": {
                  "text": "InternalsController"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "InternalsControllerOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaActivedescendant",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaAtomic",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaAutoComplete",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaBusy",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaChecked",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaColCount",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaColIndex",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaColIndexText",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaColSpan",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaDescription",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaHasPopup",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaHidden",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaInvalid",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaKeyShortcuts",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaLevel",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaModal",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaMultiLine",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaMultiSelectable",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaOrientation",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaPlaceholder",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaPosInSet",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaPressed",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaReadOnly",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRequired",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRoleDescription",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRowCount",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRowIndex",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRowIndexText",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaRowSpan",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaSetSize",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaSort",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueMax",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueNow",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaValueText",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendantElement",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaControlsElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaDescribedByElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaDetailsElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaErrorMessageElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaFlowToElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaLabelledByElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaOwnsElements",
              "type": {
                "text": "Element | null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "formDisabled",
              "type": {
                "text": "boolean"
              },
              "description": "True when the control is disabled via it's containing fieldset element"
            },
            {
              "kind": "field",
              "name": "labels",
              "type": {
                "text": "NodeList"
              }
            },
            {
              "kind": "field",
              "name": "validity",
              "type": {
                "text": "ValidityState"
              }
            },
            {
              "kind": "field",
              "name": "computedLabelText",
              "type": {
                "text": "string"
              },
              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
            },
            {
              "kind": "field",
              "name": "element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "internals",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_formDisabled",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attach",
              "privacy": "private",
              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
            },
            {
              "kind": "field",
              "name": "initializeOptions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['setFormValue']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['setValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['checkValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['reportValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "submit",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "reset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InternalsController",
          "declaration": {
            "name": "InternalsController",
            "module": "controllers/internals-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/internals-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InternalsController",
          "members": [
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "parameters": [
                {
                  "name": "host"
                },
                {
                  "name": "options"
                }
              ]
            },
            {
              "kind": "field",
              "name": "formDisabled",
              "description": "True when the control is disabled via it's containing fieldset element"
            },
            {
              "kind": "field",
              "name": "labels"
            },
            {
              "kind": "field",
              "name": "validity"
            },
            {
              "kind": "field",
              "name": "computedLabelText",
              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
            },
            {
              "kind": "field",
              "name": "element"
            },
            {
              "kind": "method",
              "name": "attach",
              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
            },
            {
              "kind": "method",
              "name": "initializeOptions",
              "parameters": [
                {
                  "name": "options"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "parameters": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "parameters": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "parameters": [
                {
                  "name": "args"
                }
              ]
            },
            {
              "kind": "method",
              "name": "submit"
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "options",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaActivedescendant",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaAtomic",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaAutoComplete",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaBusy",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaChecked",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColCount",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColIndex",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColIndexText",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColSpan",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDescription",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaHasPopup",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaHidden",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaInvalid",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaKeyShortcuts",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLevel",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaModal",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaMultiLine",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaMultiSelectable",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaOrientation",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPlaceholder",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPosInSet",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPressed",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaReadOnly",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRequired",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRoleDescription",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowCount",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowIndex",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowIndexText",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowSpan",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSetSize",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSort",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueMax",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueNow",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueText",
              "type": {
                "text": "null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendantElement",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaControlsElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDescribedByElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDetailsElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaErrorMessageElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaFlowToElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLabelledByElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaOwnsElements",
              "type": {
                "text": "null"
              },
              "description": "WARNING: be careful of cross-root ARIA browser support",
              "default": "null"
            },
            {
              "kind": "field",
              "name": "_formDisabled",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InternalsController",
          "declaration": {
            "name": "InternalsController",
            "module": "controllers/internals-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/internals-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InternalsController",
          "members": [
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true,
              "default": "new WeakMap<ReactiveControllerHost, InternalsController>()"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "ElementInternals['form']"
              }
            },
            {
              "kind": "field",
              "name": "shadowRoot",
              "type": {
                "text": "ElementInternals['shadowRoot']"
              }
            },
            {
              "kind": "field",
              "name": "states",
              "type": {
                "text": "unknown"
              }
            },
            {
              "kind": "field",
              "name": "willValidate",
              "type": {
                "text": "ElementInternals['willValidate']"
              }
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "type": {
                "text": "ElementInternals['validationMessage']"
              }
            },
            {
              "kind": "method",
              "name": "of",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "InternalsController"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "InternalsControllerOptions"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "role",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaActivedescendant",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaAtomic",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaAutoComplete",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaBusy",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaChecked",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColCount",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColIndex",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColIndexText",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaColSpan",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaCurrent",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDescription",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaDisabled",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaExpanded",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaHasPopup",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaHidden",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaInvalid",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaKeyShortcuts",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLabel",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLevel",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaLive",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaModal",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaMultiLine",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaMultiSelectable",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaOrientation",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPlaceholder",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPosInSet",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaPressed",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaReadOnly",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRequired",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRoleDescription",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowCount",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowIndex",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowIndexText",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaRowSpan",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSelected",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSetSize",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaSort",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueMax",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueMin",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueNow",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaValueText",
              "type": {
                "text": "string | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "ariaActiveDescendantElement",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaControlsElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaDescribedByElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaDetailsElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaErrorMessageElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaFlowToElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaLabelledByElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "ariaOwnsElements",
              "type": {
                "text": "Element | null"
              },
              "default": "null",
              "description": "WARNING: be careful of cross-root ARIA browser support"
            },
            {
              "kind": "field",
              "name": "formDisabled",
              "description": "True when the control is disabled via it's containing fieldset element"
            },
            {
              "kind": "field",
              "name": "labels"
            },
            {
              "kind": "field",
              "name": "validity"
            },
            {
              "kind": "field",
              "name": "computedLabelText",
              "description": "A best-attempt based on observed behaviour in FireFox 115 on fedora 38"
            },
            {
              "kind": "field",
              "name": "element",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "internals",
              "type": {
                "text": "ElementInternals"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "_formDisabled",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "#polyfillDisabledPseudo",
              "description": "We need to polyfill :disabled\nsee https://github.com/calebdwilliams/element-internals-polyfill/issues/88"
            },
            {
              "kind": "method",
              "name": "attach",
              "privacy": "private",
              "description": "Typescript (with experimental decorators) will compile the class\nsuch that the order of operations is:\n1. set up constructor parameter fields\n2. run decorated field setters with initializers as the value\n3. run the rest of the constructor\nBecause of that, `this.internals` may not be available in the decorator setter\nso we cheat here with nullish coalescing assignment operator `??=`;"
            },
            {
              "kind": "method",
              "name": "initializeOptions",
              "privacy": "private",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "Partial<ARIAMixin>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFormValue",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['setFormValue']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['setValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['checkValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Parameters<ElementInternals['reportValidity']>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "submit"
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost",
                "name": "ReactiveControllerHost",
                "package": "lit"
              },
              "name": "host",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "InternalsControllerOptions",
                "name": "InternalsControllerOptions"
              },
              "name": "options",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InternalsController",
          "declaration": {
            "name": "InternalsController",
            "module": "controllers/internals-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/light-dom-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LightDOMController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "mo",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "logger",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "initializer",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "initObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasLightDOM",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LightDOMController",
          "declaration": {
            "name": "LightDOMController",
            "module": "controllers/light-dom-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/light-dom-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LightDOMController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "initObserver"
            },
            {
              "kind": "method",
              "name": "hasLightDOM",
              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "options",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "initializer"
            },
            {
              "kind": "field",
              "name": "mo",
              "default": "new MutationObserver(this.initializer)"
            },
            {
              "kind": "field",
              "name": "logger",
              "default": "new Logger(this.host)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LightDOMController",
          "declaration": {
            "name": "LightDOMController",
            "module": "controllers/light-dom-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/light-dom-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "LightDOMController",
          "members": [
            {
              "kind": "field",
              "name": "mo",
              "type": {
                "text": "MutationObserver"
              },
              "privacy": "private",
              "default": "new MutationObserver(this.initializer)"
            },
            {
              "kind": "field",
              "name": "logger",
              "type": {
                "text": "Logger"
              },
              "privacy": "private",
              "default": "new Logger(this.host)"
            },
            {
              "kind": "field",
              "name": "initializer",
              "type": {
                "text": "() => void"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "initObserver",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasLightDOM",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns a boolean statement of whether or not this component contains any light DOM."
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "type": {
                "text": "Options",
                "name": "Options"
              },
              "name": "options",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LightDOMController",
          "declaration": {
            "name": "LightDOMController",
            "module": "controllers/light-dom-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/listbox-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
          "name": "ListboxController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "_options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "return": {
                "type": {
                  "text": "ListboxController<Item>"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ListboxConfigOptions<Item>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Whether listbox is disabled"
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "Current active descendant in listbox"
            },
            {
              "kind": "field",
              "name": "nextItem",
              "type": {
                "text": "Item | undefined"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Item[]"
              }
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "type": {
                "text": "Item[]"
              },
              "description": "array of options which are selected"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "Item | Item[]"
              }
            },
            {
              "kind": "field",
              "name": "element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Item | Item[]"
                  }
                }
              ],
              "description": "sets the listbox value based on selected options"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "Item[]"
                  }
                }
              ],
              "description": "register's the host's Item elements as listbox controller items"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxController",
          "declaration": {
            "name": "ListboxController",
            "module": "controllers/listbox-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/listbox-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
          "name": "ListboxController",
          "members": [
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "parameters": [
                {
                  "name": "host"
                },
                {
                  "name": "options"
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeItem",
              "description": "Current active descendant in listbox"
            },
            {
              "kind": "field",
              "name": "nextItem"
            },
            {
              "kind": "field",
              "name": "options"
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "description": "array of options which are selected"
            },
            {
              "kind": "field",
              "name": "value"
            },
            {
              "kind": "field",
              "name": "element"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value"
                }
              ],
              "description": "sets the listbox value based on selected options"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "parameters": [
                {
                  "name": "options"
                }
              ],
              "description": "register's the host's Item elements as listbox controller items"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "_options",
              "default": "_options"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Whether listbox is disabled",
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxController",
          "declaration": {
            "name": "ListboxController",
            "module": "controllers/listbox-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/listbox-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements listbox semantics and accesibility. As there are two recognized\npatterns for implementing keyboard interactions with listbox patterns,\nprovide a secondary controller (either RovingTabindexController or\nActiveDescendantController) to complete the implementation.",
          "name": "ListboxController",
          "members": [
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true,
              "default": "new WeakMap<ReactiveControllerHost, ListboxController<any>>()"
            },
            {
              "kind": "method",
              "name": "of",
              "privacy": "public",
              "static": true,
              "return": {
                "type": {
                  "text": "ListboxController<Item>"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "ListboxConfigOptions<Item>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#shiftStartingItem",
              "privacy": "private",
              "type": {
                "text": "Item | null"
              },
              "default": "null",
              "description": "Current active descendant when shift key is pressed"
            },
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "Item[]"
              },
              "default": "[]",
              "description": "All options that will not be hidden by a filter"
            },
            {
              "kind": "field",
              "name": "#listening",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether listbox is disabled"
            },
            {
              "kind": "field",
              "name": "activeItem",
              "description": "Current active descendant in listbox"
            },
            {
              "kind": "field",
              "name": "nextItem"
            },
            {
              "kind": "field",
              "name": "options"
            },
            {
              "kind": "field",
              "name": "selectedOptions",
              "description": "array of options which are selected"
            },
            {
              "kind": "field",
              "name": "value"
            },
            {
              "kind": "field",
              "name": "element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "#getEnabledOptions",
              "parameters": [
                {
                  "name": "options",
                  "default": "this.options"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getEventOption",
              "return": {
                "type": {
                  "text": "Item | undefined"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#onFocus",
              "privacy": "private",
              "description": "handles focusing on an option:\nupdates roving tabindex and active descendant"
            },
            {
              "kind": "field",
              "name": "#onClick",
              "privacy": "private",
              "description": "handles clicking on a listbox option:\nwhich selects an item by default\nor toggles selection if multiselectable"
            },
            {
              "kind": "field",
              "name": "#onKeyup",
              "privacy": "private",
              "description": "handles keyup:\ntrack whether shift key is being used for multiselectable listbox"
            },
            {
              "kind": "field",
              "name": "#onKeydown",
              "privacy": "private",
              "description": "handles keydown:\nfilters listbox by keyboard event when slotted option has focus,\nor by external element such as a text field"
            },
            {
              "kind": "method",
              "name": "#optionsChanged",
              "parameters": [
                {
                  "name": "oldOptions",
                  "type": {
                    "text": "Item[]"
                  }
                }
              ],
              "description": "handles change to options given previous options array"
            },
            {
              "kind": "method",
              "name": "#updateSingleselect",
              "description": "updates option selections for single select listbox"
            },
            {
              "kind": "method",
              "name": "#updateMultiselect",
              "parameters": [
                {
                  "name": "currentItem",
                  "optional": true,
                  "type": {
                    "text": "Item"
                  }
                },
                {
                  "name": "referenceItem",
                  "default": "this.activeItem"
                },
                {
                  "name": "ctrlA",
                  "default": "false"
                }
              ],
              "description": "updates option selections for multiselectable listbox:\ntoggles all options between active descendant and target"
            },
            {
              "kind": "method",
              "name": "setValue",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Item | Item[]"
                  }
                }
              ],
              "description": "sets the listbox value based on selected options"
            },
            {
              "kind": "method",
              "name": "setOptions",
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "Item[]"
                  }
                }
              ],
              "description": "register's the host's Item elements as listbox controller items"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost",
                "name": "ReactiveControllerHost",
                "package": "lit"
              },
              "name": "host",
              "privacy": "public"
            },
            {
              "kind": "field",
              "type": {
                "text": "ListboxConfigOptions<Item>",
                "name": "ListboxConfigOptions<Item>"
              },
              "name": "_options",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ListboxController",
          "declaration": {
            "name": "ListboxController",
            "module": "controllers/listbox-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/logger.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Logger",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "logDebug",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "instances",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "prefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "debugLog",
              "static": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "preference",
                  "optional": true,
                  "type": {
                    "text": "null"
                  }
                }
              ],
              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
            },
            {
              "kind": "method",
              "name": "debug",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "info",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "log",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "warn",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A console warning wrapper which formats your output with useful debugging information."
            },
            {
              "kind": "method",
              "name": "error",
              "static": true,
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "debug",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Debug logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "info",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Info logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "log",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "warn",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "error",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Logger",
          "declaration": {
            "name": "Logger",
            "module": "controllers/logger.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/logger.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Logger",
          "members": [
            {
              "kind": "field",
              "name": "prefix"
            },
            {
              "kind": "method",
              "name": "debugLog",
              "static": true,
              "parameters": [
                {
                  "name": "preference",
                  "default": "null"
                }
              ],
              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
            },
            {
              "kind": "method",
              "name": "debug",
              "static": true,
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "info",
              "static": true,
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "log",
              "static": true,
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "warn",
              "static": true,
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "A console warning wrapper which formats your output with useful debugging information."
            },
            {
              "kind": "method",
              "name": "error",
              "static": true,
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "debug",
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "Debug logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "info",
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "Info logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "log",
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "Local logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "warn",
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "error",
              "parameters": [
                {
                  "name": "msgs"
                }
              ],
              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Logger",
          "declaration": {
            "name": "Logger",
            "module": "controllers/logger.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/logger.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "Logger",
          "members": [
            {
              "kind": "field",
              "name": "logDebug",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "instances",
              "type": {
                "text": "WeakMap<ReactiveControllerHost, Logger>"
              },
              "privacy": "private",
              "static": true,
              "default": "new WeakMap()"
            },
            {
              "kind": "field",
              "name": "prefix",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "debugLog",
              "static": true,
              "parameters": [
                {
                  "name": "preference",
                  "default": "null"
                }
              ],
              "description": "A boolean value that indicates if the logging should be printed to the console; used for debugging.\nFor use in a JS file or script tag; can also be added in the constructor of a component during development."
            },
            {
              "kind": "method",
              "name": "debug",
              "static": true,
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "info",
              "static": true,
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "log",
              "static": true,
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A logging wrapper which checks the debugLog boolean and prints to the console if true."
            },
            {
              "kind": "method",
              "name": "warn",
              "static": true,
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A console warning wrapper which formats your output with useful debugging information."
            },
            {
              "kind": "method",
              "name": "error",
              "static": true,
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "A console error wrapper which formats your output with useful debugging information.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "debug",
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Debug logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "info",
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Info logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "log",
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local logging that outputs the tag name as a prefix automatically"
            },
            {
              "kind": "method",
              "name": "warn",
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local warning wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "error",
              "parameters": [
                {
                  "name": "msgs",
                  "type": {
                    "text": "unknown[]"
                  }
                }
              ],
              "description": "Local error wrapper that outputs the tag name as a prefix automatically.\nFor use inside a component's function."
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost",
                "name": "ReactiveControllerHost",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "Logger",
          "declaration": {
            "name": "Logger",
            "module": "controllers/logger.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/overflow-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OverflowController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "showScrollButtons",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "overflowLeft",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "overflowRight",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "firstItem",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "lastItem",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "method",
              "name": "init",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "HTMLElement"
                  }
                },
                {
                  "name": "items",
                  "type": {
                    "text": "HTMLElement[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "onScroll",
              "type": {
                "text": "() => void"
              }
            },
            {
              "kind": "method",
              "name": "scrollLeft",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "scrollRight",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "update",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverflowController",
          "declaration": {
            "name": "OverflowController",
            "module": "controllers/overflow-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/overflow-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OverflowController",
          "members": [
            {
              "kind": "field",
              "name": "firstItem"
            },
            {
              "kind": "field",
              "name": "lastItem"
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "container"
                },
                {
                  "name": "items"
                }
              ]
            },
            {
              "kind": "method",
              "name": "scrollLeft"
            },
            {
              "kind": "method",
              "name": "scrollRight"
            },
            {
              "kind": "method",
              "name": "update"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "options",
              "default": "options"
            },
            {
              "kind": "field",
              "name": "showScrollButtons",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "overflowLeft",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "overflowRight",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "onScroll"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverflowController",
          "declaration": {
            "name": "OverflowController",
            "module": "controllers/overflow-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/overflow-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "OverflowController",
          "members": [
            {
              "kind": "field",
              "name": "#instances",
              "privacy": "private",
              "static": true,
              "default": "new Set<OverflowController>()"
            },
            {
              "kind": "field",
              "name": "",
              "static": true
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "OverflowController",
          "declaration": {
            "name": "OverflowController",
            "module": "controllers/overflow-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/perf-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PerfController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasMeasured",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "markId",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "measure",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PerfController",
          "declaration": {
            "name": "PerfController",
            "module": "controllers/perf-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/perf-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PerfController",
          "members": [
            {
              "kind": "method",
              "name": "hostUpdate"
            },
            {
              "kind": "method",
              "name": "measure"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "hasMeasured",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PerfController",
          "declaration": {
            "name": "PerfController",
            "module": "controllers/perf-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/perf-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "PerfController",
          "members": [
            {
              "kind": "field",
              "name": "hasMeasured",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "markId",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "hostUpdate"
            },
            {
              "kind": "method",
              "name": "measure"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "PerfController",
          "declaration": {
            "name": "PerfController",
            "module": "controllers/perf-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/property-observer-controller.d.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "observedController",
          "type": {
            "text": "unique symbol"
          }
        },
        {
          "kind": "class",
          "description": "This controller holds a cache of observed property values which were set before the element updated",
          "name": "PropertyObserverController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hosts",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "delete",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set any cached valued accumulated between constructor and connectedCallback"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Once the element has updated, we no longer need this controller, so we remove it"
            },
            {
              "kind": "method",
              "name": "cache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "methodName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "vals",
                  "type": {
                    "text": "[unknown, unknown]"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observedController",
          "declaration": {
            "name": "observedController",
            "module": "controllers/property-observer-controller.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyObserverController",
          "declaration": {
            "name": "PropertyObserverController",
            "module": "controllers/property-observer-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/property-observer-controller.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "observedController"
        },
        {
          "kind": "class",
          "description": "This controller holds a cache of observed property values which were set before the element updated",
          "name": "PropertyObserverController",
          "members": [
            {
              "kind": "method",
              "name": "delete",
              "parameters": [
                {
                  "name": "key"
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "description": "Set any cached valued accumulated between constructor and connectedCallback"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "description": "Once the element has updated, we no longer need this controller, so we remove it"
            },
            {
              "kind": "method",
              "name": "cache",
              "parameters": [
                {
                  "name": "key"
                },
                {
                  "name": "methodName"
                },
                {
                  "name": "vals"
                }
              ]
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "values",
              "default": "new Map()"
            },
            {
              "kind": "field",
              "default": "this"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observedController",
          "declaration": {
            "name": "observedController",
            "module": "controllers/property-observer-controller.js"
          }
        },
        {
          "kind": "js",
          "name": "PropertyObserverController",
          "declaration": {
            "name": "PropertyObserverController",
            "module": "controllers/property-observer-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/property-observer-controller.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "observedController"
        },
        {
          "kind": "class",
          "description": "This controller holds a cache of observed property values which were set before the element updated",
          "name": "PropertyObserverController",
          "members": [
            {
              "kind": "field",
              "name": "hosts",
              "type": {
                "text": "WeakMap<HTMLElement, PropertyObserverController>"
              },
              "privacy": "private",
              "static": true,
              "default": "new WeakMap()"
            },
            {
              "kind": "field",
              "name": "values",
              "privacy": "private",
              "default": "new Map<string, [methodName: string, values: [unknown, unknown]]>()"
            },
            {
              "kind": "method",
              "name": "delete",
              "privacy": "private",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hostUpdate",
              "description": "Set any cached valued accumulated between constructor and connectedCallback"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "description": "Once the element has updated, we no longer need this controller, so we remove it"
            },
            {
              "kind": "method",
              "name": "cache",
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "methodName",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "vals",
                  "type": {
                    "text": "[unknown, unknown]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "default": "this"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observedController",
          "declaration": {
            "name": "observedController",
            "module": "controllers/property-observer-controller.ts"
          }
        },
        {
          "kind": "js",
          "name": "PropertyObserverController",
          "declaration": {
            "name": "PropertyObserverController",
            "module": "controllers/property-observer-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/roving-tabindex-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "hosts",
              "privacy": "private",
              "static": true
            },
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "return": {
                "type": {
                  "text": "RovingTabindexController<Item>"
                }
              },
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "RovingTabindexControllerOptions<Item> & {\n        getItems(): Item[];\n    }"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "active item of array of items"
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Item[]"
              },
              "description": "all items from array"
            },
            {
              "kind": "field",
              "name": "focusableItems",
              "type": {
                "text": "Item[]"
              },
              "description": "all focusable items from array"
            },
            {
              "kind": "field",
              "name": "firstItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "first item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "lastItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "last item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "nextItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "next item  after active item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "prevItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "previous item  after active item in array of focusable items"
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "removes event listeners from items container"
            },
            {
              "kind": "method",
              "name": "setActiveItem",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Item"
                  }
                }
              ],
              "description": "Sets the active item and focuses it"
            },
            {
              "kind": "method",
              "name": "updateItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "optional": true,
                  "type": {
                    "text": "Item[]"
                  }
                }
              ],
              "description": "Focuses next focusable item"
            },
            {
              "kind": "method",
              "name": "focusOnItem",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Item"
                  }
                }
              ],
              "deprecated": "use setActiveItem"
            },
            {
              "kind": "method",
              "name": "initItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "Item[]"
                  }
                },
                {
                  "name": "itemsContainer",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "from array of HTML items, and sets active items",
              "deprecated": ": use getItems and getItemContainer option functions"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "controllers/roving-tabindex-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/roving-tabindex-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "parameters": [
                {
                  "name": "host"
                },
                {
                  "name": "options"
                }
              ]
            },
            {
              "kind": "field",
              "name": "activeItem",
              "description": "active item of array of items"
            },
            {
              "kind": "field",
              "name": "items",
              "description": "all items from array"
            },
            {
              "kind": "field",
              "name": "focusableItems",
              "description": "all focusable items from array"
            },
            {
              "kind": "field",
              "name": "firstItem",
              "description": "first item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "lastItem",
              "description": "last item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "nextItem",
              "description": "next item  after active item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "prevItem",
              "description": "previous item  after active item in array of focusable items"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "description": "removes event listeners from items container"
            },
            {
              "kind": "method",
              "name": "setActiveItem",
              "parameters": [
                {
                  "name": "item"
                }
              ],
              "description": "Sets the active item and focuses it"
            },
            {
              "kind": "method",
              "name": "updateItems",
              "parameters": [
                {
                  "name": "items",
                  "default": "__classPrivateFieldGet(this, _RovingTabindexController_options, \"f\").getItems?.() ?? []"
                }
              ],
              "description": "Focuses next focusable item"
            },
            {
              "kind": "method",
              "name": "focusOnItem",
              "parameters": [
                {
                  "name": "item"
                }
              ],
              "deprecated": "use setActiveItem"
            },
            {
              "kind": "method",
              "name": "initItems",
              "parameters": [
                {
                  "name": "items"
                },
                {
                  "name": "itemsContainer"
                }
              ],
              "description": "from array of HTML items, and sets active items",
              "deprecated": ": use getItems and getItemContainer option functions"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "controllers/roving-tabindex-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/roving-tabindex-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Implements roving tabindex, as described in WAI-ARIA practices, [Managing Focus Within\nComponents Using a Roving tabindex][rti]\n\n[rti]: https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex",
          "name": "RovingTabindexController",
          "members": [
            {
              "kind": "field",
              "name": "hosts",
              "privacy": "private",
              "static": true,
              "default": "new WeakMap<ReactiveControllerHost, RovingTabindexController>()"
            },
            {
              "kind": "method",
              "name": "of",
              "static": true,
              "parameters": [
                {
                  "name": "host",
                  "type": {
                    "text": "ReactiveControllerHost"
                  }
                },
                {
                  "name": "options",
                  "type": {
                    "text": "RovingTabindexControllerOptions<Item> & { getItems(): Item[] }"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#activeItem",
              "privacy": "private",
              "type": {
                "text": "Item | undefined"
              },
              "description": "active focusable element"
            },
            {
              "kind": "field",
              "name": "#itemsContainer",
              "privacy": "private",
              "type": {
                "text": "Element | undefined"
              },
              "description": "closest ancestor containing items"
            },
            {
              "kind": "field",
              "name": "#items",
              "privacy": "private",
              "type": {
                "text": "Item[]"
              },
              "default": "[]",
              "description": "array of all focusable elements"
            },
            {
              "kind": "field",
              "name": "#gainedInitialFocus",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "flags whether the host's element has gained focus at least once"
            },
            {
              "kind": "field",
              "name": "#focusableItems",
              "privacy": "private",
              "type": {
                "text": "Item[]"
              },
              "description": "finds focusable items from a group of items"
            },
            {
              "kind": "field",
              "name": "#activeIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "description": "index of active item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "#itemIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "description": "index of active item in array of items"
            },
            {
              "kind": "field",
              "name": "activeItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "active item of array of items"
            },
            {
              "kind": "field",
              "name": "items",
              "description": "all items from array"
            },
            {
              "kind": "field",
              "name": "focusableItems",
              "description": "all focusable items from array"
            },
            {
              "kind": "field",
              "name": "firstItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "first item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "lastItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "last item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "nextItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "next item  after active item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "prevItem",
              "type": {
                "text": "Item | undefined"
              },
              "description": "previous item  after active item in array of focusable items"
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "RequireProps<RovingTabindexControllerOptions<Item>, 'getHTMLElement'>"
              },
              "default": "{\n      getHTMLElement: options?.getHTMLElement ??\n        (options?.getElement as (() => HTMLElement | null)) ??\n        (() => host instanceof HTMLElement ? host : null),\n      getItems: options?.getItems,\n      getItemContainer: options?.getItemContainer,\n    }"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "description": "removes event listeners from items container"
            },
            {
              "kind": "method",
              "name": "#initContainer",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "Element"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#onKeydown",
              "privacy": "private",
              "description": "handles keyboard navigation"
            },
            {
              "kind": "method",
              "name": "setActiveItem",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Item"
                  }
                }
              ],
              "description": "Sets the active item and focuses it"
            },
            {
              "kind": "method",
              "name": "updateItems",
              "parameters": [
                {
                  "name": "items",
                  "default": "this.#options.getItems?.() ?? []",
                  "type": {
                    "text": "Item[]"
                  }
                }
              ],
              "description": "Focuses next focusable item"
            },
            {
              "kind": "method",
              "name": "focusOnItem",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Item"
                  }
                }
              ],
              "deprecated": "use setActiveItem"
            },
            {
              "kind": "method",
              "name": "initItems",
              "parameters": [
                {
                  "name": "items",
                  "type": {
                    "text": "Item[]"
                  }
                },
                {
                  "name": "itemsContainer",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  }
                }
              ],
              "description": "from array of HTML items, and sets active items",
              "deprecated": ": use getItems and getItemContainer option functions"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost",
                "name": "ReactiveControllerHost",
                "package": "lit"
              },
              "name": "host",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "RovingTabindexController",
          "declaration": {
            "name": "RovingTabindexController",
            "module": "controllers/roving-tabindex-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/scroll-spy-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScrollSpyController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "Element | Document | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "rootMargin",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "threshold",
              "type": {
                "text": "number | number[]"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setActive",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "link",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "description": "Explicitly set the active item"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollSpyController",
          "declaration": {
            "name": "ScrollSpyController",
            "module": "controllers/scroll-spy-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/scroll-spy-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScrollSpyController",
          "members": [
            {
              "kind": "field",
              "name": "root"
            },
            {
              "kind": "field",
              "name": "rootMargin"
            },
            {
              "kind": "field",
              "name": "threshold"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "setActive",
              "parameters": [
                {
                  "name": "link"
                }
              ],
              "description": "Explicitly set the active item"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollSpyController",
          "declaration": {
            "name": "ScrollSpyController",
            "module": "controllers/scroll-spy-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/scroll-spy-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "ScrollSpyController",
          "members": [
            {
              "kind": "field",
              "name": "#tagNames",
              "privacy": "private",
              "type": {
                "text": "string[]"
              }
            },
            {
              "kind": "field",
              "name": "#activeAttribute",
              "privacy": "private",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "#io",
              "privacy": "private",
              "type": {
                "text": "IntersectionObserver | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#passedLinks",
              "privacy": "private",
              "default": "new Set<Element>()",
              "description": "Which link's targets have already scrolled past?"
            },
            {
              "kind": "field",
              "name": "#force",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Ignore intersections?"
            },
            {
              "kind": "field",
              "name": "#intersected",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Has the intersection observer found an element?"
            },
            {
              "kind": "field",
              "name": "#root",
              "privacy": "private",
              "type": {
                "text": "ScrollSpyControllerOptions['root']"
              }
            },
            {
              "kind": "field",
              "name": "#rootMargin",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#threshold",
              "privacy": "private",
              "type": {
                "text": "number | number[]"
              }
            },
            {
              "kind": "field",
              "name": "#rootNode",
              "privacy": "private",
              "type": {
                "text": "Node"
              }
            },
            {
              "kind": "field",
              "name": "#getHash",
              "privacy": "private",
              "type": {
                "text": "(el: Element) => string | null"
              }
            },
            {
              "kind": "field",
              "name": "#linkChildren",
              "privacy": "private",
              "type": {
                "text": "Element[]"
              }
            },
            {
              "kind": "field",
              "name": "root"
            },
            {
              "kind": "field",
              "name": "rootMargin"
            },
            {
              "kind": "field",
              "name": "threshold"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "#initIo"
            },
            {
              "kind": "method",
              "name": "#markPassed",
              "parameters": [
                {
                  "name": "link",
                  "type": {
                    "text": "Element"
                  }
                },
                {
                  "name": "force",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setActive",
              "parameters": [
                {
                  "name": "link",
                  "optional": true,
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#nextIntersection"
            },
            {
              "kind": "method",
              "name": "#onIo",
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "IntersectionObserverEntry[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setActive",
              "privacy": "public",
              "parameters": [
                {
                  "name": "link",
                  "type": {
                    "text": "EventTarget | null"
                  }
                }
              ],
              "description": "Explicitly set the active item"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveControllerHost & HTMLElement",
                "name": "ReactiveControllerHost & HTMLElement"
              },
              "name": "host",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ScrollSpyController",
          "declaration": {
            "name": "ScrollSpyController",
            "module": "controllers/scroll-spy-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/slot-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlotController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "host",
              "type": {
                "text": "ReactiveElement"
              }
            },
            {
              "kind": "field",
              "name": "default",
              "type": {
                "text": "symbol"
              },
              "static": true
            },
            {
              "kind": "field",
              "name": "anonymous",
              "type": {
                "text": "symbol"
              },
              "static": true,
              "deprecated": "use `default`"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSlotted",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "slotNames",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
            },
            {
              "kind": "method",
              "name": "hasSlotted",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  },
                  "description": "The slot names to check."
                }
              ],
              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
            },
            {
              "kind": "method",
              "name": "isEmpty",
              "return": {
                "type": {
                  "text": "Boolean"
                }
              },
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  }
                },
                {
                  "description": "The slot name.  If no value is provided, it returns the default slot.",
                  "name": "slots"
                }
              ],
              "description": "Whether or not all the requested slots are empty."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "controllers/slot-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/slot-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlotController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "getSlotted",
              "parameters": [
                {
                  "name": "slotNames"
                }
              ],
              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
            },
            {
              "kind": "method",
              "name": "hasSlotted",
              "parameters": [
                {
                  "name": "names",
                  "description": "The slot names to check."
                }
              ],
              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
            },
            {
              "kind": "method",
              "name": "isEmpty",
              "parameters": [
                {
                  "name": "names"
                },
                {
                  "description": "The slot name.  If no value is provided, it returns the default slot.",
                  "name": "slots"
                }
              ],
              "description": "Whether or not all the requested slots are empty.",
              "return": {
                "type": {
                  "text": "Boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "controllers/slot-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/slot-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "SlotController",
          "members": [
            {
              "kind": "field",
              "name": "default",
              "privacy": "public",
              "static": true
            },
            {
              "kind": "field",
              "name": "anonymous",
              "privacy": "public",
              "static": true,
              "deprecated": "use `default`"
            },
            {
              "kind": "field",
              "name": "#nodes",
              "privacy": "private",
              "default": "new Map<string | typeof SlotController.default, Slot>()"
            },
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "type": {
                "text": "Logger"
              },
              "default": "new Logger(this.host)"
            },
            {
              "kind": "field",
              "name": "#firstUpdated",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(records => this.#onMutation(records))"
            },
            {
              "kind": "field",
              "name": "#slotNames",
              "privacy": "private",
              "type": {
                "text": "(string | null)[]"
              }
            },
            {
              "kind": "field",
              "name": "#deprecations",
              "privacy": "private",
              "type": {
                "text": "Record<string, string>"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "getSlotted",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "slotNames",
                  "type": {
                    "text": "string[]"
                  }
                }
              ],
              "description": "Given a slot name or slot names, returns elements assigned to the requested slots as an array.\nIf no value is provided, it returns all children not assigned to a slot (without a slot attribute)."
            },
            {
              "kind": "method",
              "name": "hasSlotted",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  },
                  "description": "The slot names to check."
                }
              ],
              "description": "Returns a boolean statement of whether or not any of those slots exists in the light DOM."
            },
            {
              "kind": "method",
              "name": "isEmpty",
              "return": {
                "type": {
                  "text": "Boolean"
                }
              },
              "parameters": [
                {
                  "name": "names",
                  "type": {
                    "text": "(string | null | undefined)[]"
                  }
                },
                {
                  "description": "The slot name.  If no value is provided, it returns the default slot.",
                  "name": "slots"
                }
              ],
              "description": "Whether or not all the requested slots are empty."
            },
            {
              "kind": "field",
              "name": "#onSlotChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#onMutation",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getChildrenForSlot",
              "return": {
                "type": {
                  "text": "T[]"
                }
              },
              "parameters": [
                {
                  "name": "name",
                  "type": {
                    "text": "string | typeof SlotController.default"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#initSlot",
              "privacy": "private"
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "public"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SlotController",
          "declaration": {
            "name": "SlotController",
            "module": "controllers/slot-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/style-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
          "name": "StyleController",
          "members": [
            {
              "kind": "field",
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "styles",
              "privacy": "private",
              "description": "These styles will be applied to the host element"
            },
            {
              "kind": "field",
              "name": "stylesAdopted",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StyleController",
          "declaration": {
            "name": "StyleController",
            "module": "controllers/style-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/style-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
          "name": "StyleController",
          "members": [
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "field",
              "name": "host",
              "default": "host"
            },
            {
              "kind": "field",
              "name": "styles",
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "stylesAdopted",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StyleController",
          "declaration": {
            "name": "StyleController",
            "module": "controllers/style-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/style-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Controller which adds styles to it's host element.\nLike `static styles = []`, except a controller.\nShould typically only be used within other controllers.",
          "name": "StyleController",
          "members": [
            {
              "kind": "field",
              "name": "stylesAdopted",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "type": {
                "text": "ReactiveElement",
                "name": "ReactiveElement",
                "package": "lit"
              },
              "name": "host",
              "privacy": "private"
            },
            {
              "kind": "field",
              "description": "These styles will be applied to the host element",
              "type": {
                "text": "CSSResultGroup",
                "name": "CSSResultGroup",
                "package": "lit"
              },
              "name": "styles",
              "privacy": "private"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StyleController",
          "declaration": {
            "name": "StyleController",
            "module": "controllers/style-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/tabs-aria-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabsAriaController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "tabs",
              "type": {
                "text": "Tab[]"
              }
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "Tab | undefined"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostUpdated",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "panelFor",
              "return": {
                "type": {
                  "text": "Panel | undefined"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tabFor",
              "return": {
                "type": {
                  "text": "Tab | undefined"
                }
              },
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "Panel"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabsAriaController",
          "declaration": {
            "name": "TabsAriaController",
            "module": "controllers/tabs-aria-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/tabs-aria-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabsAriaController",
          "members": [
            {
              "kind": "field",
              "name": "tabs"
            },
            {
              "kind": "field",
              "name": "activeTab"
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected"
            },
            {
              "kind": "method",
              "name": "panelFor",
              "parameters": [
                {
                  "name": "tab"
                }
              ]
            },
            {
              "kind": "method",
              "name": "tabFor",
              "parameters": [
                {
                  "name": "panel"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabsAriaController",
          "declaration": {
            "name": "TabsAriaController",
            "module": "controllers/tabs-aria-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/tabs-aria-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TabsAriaController",
          "members": [
            {
              "kind": "field",
              "name": "#logger",
              "privacy": "private",
              "type": {
                "text": "Logger"
              },
              "default": "new Logger(host)"
            },
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "ReactiveControllerHost"
              }
            },
            {
              "kind": "field",
              "name": "#element",
              "privacy": "private",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "#tabPanelMap",
              "privacy": "private",
              "default": "new Map<Tab, Panel>()"
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "TabsAriaControllerOptions<Tab, Panel>"
              },
              "default": "options"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "default": "new MutationObserver(this.#onSlotchange.bind(this))"
            },
            {
              "kind": "field",
              "name": "tabs"
            },
            {
              "kind": "field",
              "name": "activeTab",
              "type": {
                "text": "Tab | undefined"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected"
            },
            {
              "kind": "method",
              "name": "hostUpdated"
            },
            {
              "kind": "method",
              "name": "hostDisconnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onSlotchange",
              "description": "zip the tabs and panels together into #tabPanelMap"
            },
            {
              "kind": "method",
              "name": "panelFor",
              "return": {
                "type": {
                  "text": "Panel | undefined"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "Tab"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tabFor",
              "return": {
                "type": {
                  "text": "Tab | undefined"
                }
              },
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "Panel"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TabsAriaController",
          "declaration": {
            "name": "TabsAriaController",
            "module": "controllers/tabs-aria-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/timestamp-controller.d.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TimestampController",
          "members": [
            {
              "kind": "field",
              "name": "#private",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "localeString",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "date",
              "type": {
                "text": "Date"
              }
            },
            {
              "kind": "field",
              "name": "isoString",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "time",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "set",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimestampController",
          "declaration": {
            "name": "TimestampController",
            "module": "controllers/timestamp-controller.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/timestamp-controller.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TimestampController",
          "members": [
            {
              "kind": "field",
              "name": "localeString"
            },
            {
              "kind": "field",
              "name": "date"
            },
            {
              "kind": "field",
              "name": "isoString"
            },
            {
              "kind": "field",
              "name": "time"
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "prop"
                },
                {
                  "name": "value"
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimestampController",
          "declaration": {
            "name": "TimestampController",
            "module": "controllers/timestamp-controller.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "controllers/timestamp-controller.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TimestampController",
          "members": [
            {
              "kind": "method",
              "name": "#isTimestampOptionKey",
              "static": true,
              "return": {
                "type": {
                  "text": "prop is keyof TimestampOptions"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "PropertyKey"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#date",
              "privacy": "private",
              "default": "new Date()"
            },
            {
              "kind": "field",
              "name": "#options",
              "privacy": "private",
              "type": {
                "text": "TimestampOptions"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#host",
              "privacy": "private",
              "type": {
                "text": "ReactiveControllerHost"
              },
              "default": "host"
            },
            {
              "kind": "field",
              "name": "localeString"
            },
            {
              "kind": "field",
              "name": "date"
            },
            {
              "kind": "field",
              "name": "isoString"
            },
            {
              "kind": "field",
              "name": "time"
            },
            {
              "kind": "method",
              "name": "hostConnected",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getTimeRelative",
              "description": "Based off of Github Relative Time\nhttps://github.com/github/time-elements/blob/master/src/relative-time.js"
            },
            {
              "kind": "method",
              "name": "set",
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "PropertyKey"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "unknown"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TimestampController",
          "declaration": {
            "name": "TimestampController",
            "module": "controllers/timestamp-controller.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/bound.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "bound",
          "return": {
            "type": {
              "text": "PropertyDescriptor"
            }
          },
          "parameters": [
            {
              "name": "_",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "descriptor",
              "type": {
                "text": "PropertyDescriptor"
              }
            }
          ],
          "description": "Binds a class method to the instance"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bound",
          "declaration": {
            "name": "bound",
            "module": "decorators/bound.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/bound.js",
      "declarations": [
        {
          "kind": "function",
          "name": "bound",
          "parameters": [
            {
              "name": "_"
            },
            {
              "name": "key"
            },
            {
              "name": "descriptor"
            }
          ],
          "description": "Binds a class method to the instance"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bound",
          "declaration": {
            "name": "bound",
            "module": "decorators/bound.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/bound.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "bound",
          "return": {
            "type": {
              "text": "PropertyDescriptor"
            }
          },
          "parameters": [
            {
              "name": "_",
              "type": {
                "text": "unknown"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "descriptor",
              "type": {
                "text": "PropertyDescriptor"
              }
            }
          ],
          "description": "Binds a class method to the instance"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "bound",
          "declaration": {
            "name": "bound",
            "module": "decorators/bound.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/cascades.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cascades",
          "return": {
            "type": {
              "text": "PropertyDecorator"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Cascades the decorated attribute to children",
          "deprecated": ": use context, especially via `@patternfly/pfe-core/functions/context.js`;"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cascades",
          "declaration": {
            "name": "cascades",
            "module": "decorators/cascades.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/cascades.js",
      "declarations": [
        {
          "kind": "function",
          "name": "cascades",
          "parameters": [
            {
              "name": "items"
            }
          ],
          "description": "Cascades the decorated attribute to children",
          "deprecated": ": use context, especially via `@patternfly/pfe-core/functions/context.js`;"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cascades",
          "declaration": {
            "name": "cascades",
            "module": "decorators/cascades.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/cascades.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "cascades",
          "return": {
            "type": {
              "text": "PropertyDecorator"
            }
          },
          "parameters": [
            {
              "name": "items",
              "type": {
                "text": "string[]"
              }
            }
          ],
          "description": "Cascades the decorated attribute to children",
          "deprecated": ": use context, especially via `@patternfly/pfe-core/functions/context.js`;"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "cascades",
          "declaration": {
            "name": "cascades",
            "module": "decorators/cascades.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/deprecation.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "deprecation",
          "return": {
            "type": {
              "text": "<T extends ReactiveElement, L extends PropertyKey>(proto: Partial<Record<K | L, T>>, key: string & keyof T) => void"
            }
          },
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "DeprecationDeclaration<K>"
              }
            }
          ],
          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "deprecation",
          "declaration": {
            "name": "deprecation",
            "module": "decorators/deprecation.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/deprecation.js",
      "declarations": [
        {
          "kind": "function",
          "name": "deprecation",
          "parameters": [
            {
              "name": "options"
            }
          ],
          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "deprecation",
          "declaration": {
            "name": "deprecation",
            "module": "decorators/deprecation.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/deprecation.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "deprecation",
          "parameters": [
            {
              "name": "options",
              "type": {
                "text": "DeprecationDeclaration<K>"
              }
            }
          ],
          "description": "Aliases the decorated field to an existing property, and logs a warning if it is used"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "deprecation",
          "declaration": {
            "name": "deprecation",
            "module": "decorators/deprecation.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/initializer.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "initializer",
          "return": {
            "type": {
              "text": "(proto: T, key: string) => void"
            }
          },
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              },
              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
            }
          ],
          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "initializer",
          "declaration": {
            "name": "initializer",
            "module": "decorators/initializer.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/initializer.js",
      "declarations": [
        {
          "kind": "function",
          "name": "initializer",
          "parameters": [
            {
              "name": "options",
              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
            }
          ],
          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "initializer",
          "declaration": {
            "name": "initializer",
            "module": "decorators/initializer.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/initializer.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "initializer",
          "parameters": [
            {
              "name": "options",
              "optional": true,
              "type": {
                "text": "Options"
              },
              "description": "Set `observe` to `false` to skip mutation observer setup, or pass a MutationObserverInit as options"
            }
          ],
          "description": "Runs the decorated method in `connectedCallback`,\nprovided the element has light children, and sets\nup a mutation observer to re-run the callback,\nunless opted-out with `{ observe: false }`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "initializer",
          "declaration": {
            "name": "initializer",
            "module": "decorators/initializer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/observed.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "TypedFieldDecorator<T>"
            }
          },
          "parameters": [
            {
              "name": "methodName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Calls a _fooChanged method on the instance when the value changes.\nWorks on any class field. When using on lit observed properties,\nMake sure `@observed` is to the left (i.e. called after) the `@property`\nor `@state` decorator."
        },
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "TypedFieldDecorator<T>"
            }
          },
          "parameters": [
            {
              "name": "cb",
              "type": {
                "text": "ChangeCallback<T>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "proto",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "observeProperty",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "proto",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string & keyof T"
              }
            },
            {
              "name": "callbackOrMethod",
              "optional": true,
              "type": {
                "text": "ChangeCallback<T>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.d.ts"
          }
        },
        {
          "kind": "js",
          "name": "observeProperty",
          "declaration": {
            "name": "observeProperty",
            "module": "decorators/observed.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/observed.js",
      "declarations": [
        {
          "kind": "function",
          "name": "observed",
          "parameters": [
            {
              "name": "as"
            }
          ]
        },
        {
          "kind": "function",
          "name": "observeProperty",
          "parameters": [
            {
              "name": "proto"
            },
            {
              "name": "key"
            },
            {
              "name": "callbackOrMethod"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.js"
          }
        },
        {
          "kind": "js",
          "name": "observeProperty",
          "declaration": {
            "name": "observeProperty",
            "module": "decorators/observed.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/observed.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "TypedFieldDecorator<T>"
            }
          },
          "parameters": [
            {
              "name": "methodName",
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Calls a _fooChanged method on the instance when the value changes.\nWorks on any class field. When using on lit observed properties,\nMake sure `@observed` is to the left (i.e. called after) the `@property`\nor `@state` decorator."
        },
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "TypedFieldDecorator<T>"
            }
          },
          "parameters": [
            {
              "name": "cb",
              "type": {
                "text": "ChangeCallback<T>"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "proto",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "observed",
          "return": {
            "type": {
              "text": "void | TypedFieldDecorator<T>"
            }
          },
          "parameters": [
            {
              "name": "as",
              "type": {
                "text": "any[]"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "observeProperty",
          "parameters": [
            {
              "name": "proto",
              "type": {
                "text": "T"
              }
            },
            {
              "name": "key",
              "type": {
                "text": "string & keyof T"
              }
            },
            {
              "name": "callbackOrMethod",
              "optional": true,
              "type": {
                "text": "ChangeCallback<T>"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.ts"
          }
        },
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.ts"
          }
        },
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.ts"
          }
        },
        {
          "kind": "js",
          "name": "observed",
          "declaration": {
            "name": "observed",
            "module": "decorators/observed.ts"
          }
        },
        {
          "kind": "js",
          "name": "observeProperty",
          "declaration": {
            "name": "observeProperty",
            "module": "decorators/observed.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/time.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "time",
          "return": {
            "type": {
              "text": "(_: unknown, key: string, descriptor: PropertyDescriptor) => void"
            }
          },
          "parameters": [
            {
              "name": "tag",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "time",
          "declaration": {
            "name": "time",
            "module": "decorators/time.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/time.js",
      "declarations": [
        {
          "kind": "function",
          "name": "time",
          "parameters": [
            {
              "name": "tag"
            }
          ],
          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "time",
          "declaration": {
            "name": "time",
            "module": "decorators/time.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/time.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "time",
          "parameters": [
            {
              "name": "tag",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Tracks the time a method takes to complete using the [performance API](https://developer.mozilla.org/en-US/docs/Web/API/Performance)"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "time",
          "declaration": {
            "name": "time",
            "module": "decorators/time.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/trace.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "trace",
          "return": {
            "type": {
              "text": "(_: unknown, key: string, descriptor: PropertyDescriptor) => void"
            }
          },
          "parameters": [
            {
              "name": "tag",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Logs the result of a class method"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trace",
          "declaration": {
            "name": "trace",
            "module": "decorators/trace.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/trace.js",
      "declarations": [
        {
          "kind": "function",
          "name": "trace",
          "parameters": [
            {
              "name": "tag"
            }
          ],
          "description": "Logs the result of a class method"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trace",
          "declaration": {
            "name": "trace",
            "module": "decorators/trace.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "decorators/trace.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "trace",
          "parameters": [
            {
              "name": "tag",
              "optional": true,
              "type": {
                "text": "string"
              }
            }
          ],
          "description": "Logs the result of a class method"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "trace",
          "declaration": {
            "name": "trace",
            "module": "decorators/trace.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/containsDeep.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "containsDeep",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "node",
              "type": {
                "text": "Node"
              }
            }
          ],
          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "containsDeep",
          "declaration": {
            "name": "containsDeep",
            "module": "functions/containsDeep.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/containsDeep.js",
      "declarations": [
        {
          "kind": "function",
          "name": "containsDeep",
          "parameters": [
            {
              "name": "container"
            },
            {
              "name": "node"
            }
          ],
          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "containsDeep",
          "declaration": {
            "name": "containsDeep",
            "module": "functions/containsDeep.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/containsDeep.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "containsDeep",
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "Element"
              }
            },
            {
              "name": "node",
              "type": {
                "text": "Node"
              }
            }
          ],
          "description": "Whether or not the container contains the node,\nand if not, whether the node is contained by any element\nslotted in to the container"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "containsDeep",
          "declaration": {
            "name": "containsDeep",
            "module": "functions/containsDeep.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/context.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createContextWithRoot",
          "return": {
            "type": {
              "text": "{\n    __context__: T;\n}"
            }
          },
          "parameters": [
            {
              "name": "args",
              "type": {
                "text": "Parameters<typeof createContext>"
              }
            }
          ],
          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContextWithRoot",
          "declaration": {
            "name": "createContextWithRoot",
            "module": "functions/context.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/context.js",
      "declarations": [
        {
          "kind": "function",
          "name": "createContextWithRoot",
          "parameters": [
            {
              "name": "args"
            }
          ],
          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContextWithRoot",
          "declaration": {
            "name": "createContextWithRoot",
            "module": "functions/context.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/context.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "createContextWithRoot",
          "parameters": [
            {
              "name": "args",
              "type": {
                "text": "Parameters<typeof createContext>"
              }
            }
          ],
          "description": "In order to prevent late-upgrading-context-consumers from 'missing'\ntheir rightful context providers, we must set up a `ContextRoot` on the body.\nAlways use this function when creating contexts that are shared with child elements."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "createContextWithRoot",
          "declaration": {
            "name": "createContextWithRoot",
            "module": "functions/context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/debounce.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "return": {
            "type": {
              "text": "(this: unknown, ...args: any[]) => void"
            }
          },
          "parameters": [
            {
              "name": "func",
              "type": {
                "text": "(...args: any[]) => unknown"
              },
              "description": "Function to be debounced"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "description": "How long until it will be run"
            },
            {
              "name": "immediate",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "Whether it should be run at the start instead of the end of the debounce"
            }
          ],
          "description": "Debounce helper function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "functions/debounce.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/debounce.js",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "func",
              "description": "Function to be debounced"
            },
            {
              "name": "delay",
              "description": "How long until it will be run"
            },
            {
              "name": "immediate",
              "default": "false",
              "description": "Whether it should be run at the start instead of the end of the debounce"
            }
          ],
          "description": "Debounce helper function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "functions/debounce.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/debounce.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "debounce",
          "parameters": [
            {
              "name": "func",
              "type": {
                "text": "(...args: any[]) => unknown"
              },
              "description": "Function to be debounced"
            },
            {
              "name": "delay",
              "type": {
                "text": "number"
              },
              "description": "How long until it will be run"
            },
            {
              "name": "immediate",
              "default": "false",
              "description": "Whether it should be run at the start instead of the end of the debounce"
            }
          ],
          "description": "Debounce helper function"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "debounce",
          "declaration": {
            "name": "debounce",
            "module": "functions/debounce.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/isElementInView.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementInView",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The container to check if the element is in view of."
            },
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element to check if it is view"
            },
            {
              "name": "partial",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "true if partial view is allowed"
            },
            {
              "name": "strict",
              "optional": true,
              "type": {
                "text": "boolean"
              },
              "description": "true if strict mode is set, never consider the container width and element width"
            }
          ],
          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementInView",
          "declaration": {
            "name": "isElementInView",
            "module": "functions/isElementInView.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/isElementInView.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementInView",
          "parameters": [
            {
              "name": "container",
              "description": "The container to check if the element is in view of.",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "element",
              "description": "The element to check if it is view",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "name": "partial",
              "default": "false",
              "description": "true if partial view is allowed",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "strict",
              "default": "false",
              "description": "true if strict mode is set, never consider the container width and element width",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementInView",
          "declaration": {
            "name": "isElementInView",
            "module": "functions/isElementInView.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/isElementInView.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isElementInView",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The container to check if the element is in view of."
            },
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element to check if it is view"
            },
            {
              "name": "partial",
              "default": "false",
              "description": "true if partial view is allowed",
              "type": {
                "text": "boolean"
              }
            },
            {
              "name": "strict",
              "default": "false",
              "description": "true if strict mode is set, never consider the container width and element width",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "description": "This function returns whether or not an element is within the viewable area of a container. If partial is true,\nthen this function will return true even if only part of the element is in view."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isElementInView",
          "declaration": {
            "name": "isElementInView",
            "module": "functions/isElementInView.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/random.d.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getRandomId",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "prefix",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "id-safe string prefix"
            }
          ],
          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRandomId",
          "declaration": {
            "name": "getRandomId",
            "module": "functions/random.d.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/random.js",
      "declarations": [
        {
          "kind": "function",
          "name": "getRandomId",
          "parameters": [
            {
              "name": "prefix",
              "default": "'pfe'",
              "description": "id-safe string prefix"
            }
          ],
          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRandomId",
          "declaration": {
            "name": "getRandomId",
            "module": "functions/random.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "functions/random.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getRandomId",
          "parameters": [
            {
              "name": "prefix",
              "default": "'pfe'",
              "description": "id-safe string prefix"
            }
          ],
          "description": "A quick way to fetch a random ID value.\n_Note:_ All values are prefixed automatically to ensure an ID-safe value is returned."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getRandomId",
          "declaration": {
            "name": "getRandomId",
            "module": "functions/random.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "test/kitchen-sink.e2e.d.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "test/kitchen-sink.e2e.js",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "test/kitchen-sink.e2e.ts",
      "declarations": [],
      "exports": []
    }
  ]
}
