{"version":3,"file":"rh-secondary-nav.js","sourceRoot":"","sources":["rh-secondary-nav.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { bound, observed } from '@patternfly/pfe-core/decorators.js';\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\n\nimport '../rh-context-provider/rh-context-provider.js';\n\nimport './rh-secondary-nav-menu-section.js';\n\nimport type { RhSecondaryNavOverlay } from './rh-secondary-nav-overlay.js';\n\nimport { SecondaryNavOverlayChangeEvent } from './rh-secondary-nav-overlay.js';\nimport { RhSecondaryNavDropdown, SecondaryNavDropdownExpandEvent } from './rh-secondary-nav-dropdown.js';\n\nimport { DirController } from '../../lib/DirController.js';\nimport { ScreenSizeController } from '../../lib/ScreenSizeController.js';\nimport { colorContextProvider } from '../../lib/context/color.js';\n\nexport type NavPalette = (\n  | 'lighter'\n  | 'darker'\n);\n\nimport styles from './rh-secondary-nav.css';\n\n/**\n * Red Hat Secondary Nav\n *\n * @summary A non primary navigation bar.\n *\n * @slot logo           - Logo added to the main nav bar, expects a `<a> | <a><svg/></a> | <a><img/></a>`\n * @slot nav            - Navigation list added to the main nav bar, expects a `<ul>`\n * @slot cta            - Nav bar level CTA, expects a `<rh-cta>\n * @slot mobile-menu    - Text label for the mobile menu button, for l10n. Defaults to \"Menu\"\n *\n * @csspart nav         - container, <nav> element\n * @csspart container   - container, <div> element\n * @csspart cta         - container, <div> element\n *\n * @fires { SecondaryNavOverlayChangeEvent } overlay-change - Fires when an dropdown is opened or closed in desktop view or when\n *                                        the mobile menu button is toggled in mobile view.\n */\n@customElement('rh-secondary-nav')\nexport class RhSecondaryNav extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  #logger = new Logger(this);\n\n  #logoCopy: HTMLElement | null = null;\n\n  /** Is the element in an RTL context? */\n  #dir = new DirController(this);\n\n  /**\n   * executes this.shadowRoot.querySelector('rh-secondary-nav-overlay')\n   */\n  @query('rh-secondary-nav-overlay') _overlay!: RhSecondaryNavOverlay;\n\n  /**\n   * executes this.shadowRoot.querySelector('#container')\n   */\n  @query('#container') _container?: HTMLElement;\n\n  /**\n   * executes this.shadowRoot.querySelector('nav');\n   */\n  @query('nav') _nav?: HTMLElement;\n\n  /**\n   * executes this.shadowRoot.querySelector('button')\n   */\n  @query('button') _mobileMenuButton?: HTMLButtonElement;\n\n  /**\n   * `_compact` property is true when viewport `(min-width: ${tabletLandscapeBreakpoint})`.\n   * Property is observed for changes, and its value is updated using matchMediaController\n   * when viewport changes at breakpoint or first load of the component.\n   */\n  @observed\n  @state() private _compact = false;\n\n  /**\n   * ScreenSizeController effects callback to set _compact\n   */\n  protected screenSize = new ScreenSizeController(this, 'tabletLandscape', {\n    onChange: matches => {\n      this._compact = !matches;\n    }\n  });\n\n  /**\n   * `_mobileMenuExpanded` property is toggled when the mobile menu button is clicked,\n   * a focusout event occurs, or on an overlay click event.  It also switches state\n   * when the viewport changes breakpoints depending on if a dropdown is open or not.\n   */\n  @state() private _mobileMenuExpanded = false;\n\n  /**\n   * Define custom attribute 'main' and watch for DOM changes of the attribute\n   */\n  @property({ reflect: true, attribute: 'main', type: Boolean }) mainNav = false;\n\n\n  @colorContextProvider()\n  @property({ reflect: true, attribute: 'color-palette' }) colorPalette: NavPalette = 'lighter';\n\n  /**\n   * If the host color-palette=\"lighter\", the cta color context should be on=\"light\"\n   * by default.  However when the host color-palette=\"darker\", the cta context should be\n   * on=\"dark\" when in desktop mode, but on=\"light\" when in mobile compact mode because the cta shifts\n   * to a white background in the mobile compact nav. This state property is set on firstUpdated()\n   * and __compactChanged() and is used on a wrapping `<rh-context-provider>` around the cta allowing\n   * it to dynamically change with viewport changes.\n   */\n  @state() private _ctaColorPalette: NavPalette | 'lightest' = this.colorPalette;\n\n  /**\n   * Checks if passed in element is a RhSecondaryNavDropdown\n   * @param element:\n   * @returns {boolean}\n   */\n  static isDropdown(element: Element | null): element is RhSecondaryNavDropdown {\n    return element instanceof RhSecondaryNavDropdown;\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener('expand-request', this._dropdownChangeHandler);\n    this.addEventListener('overlay-change', this._toggleNavOverlay);\n    this.addEventListener('focusout', this._focusOutHandler);\n    this.addEventListener('keydown', this._keyboardControls);\n    this.#updateAccessibility();\n  }\n\n  firstUpdated() {\n    // after update the overlay should be available to attach an event listener to\n    this._overlay.addEventListener('click', this._overlayClickHandler);\n    // if compact menu and dark variant then set cta color to lightest\n    if (this.colorPalette === 'darker' && this._compact) {\n      this._ctaColorPalette = 'lightest';\n    }\n  }\n\n  render() {\n    const navClasses = { compact: this._compact, rtl: this.#dir.dir === 'rtl' };\n    const containerClasses = { 'expanded': this._mobileMenuExpanded };\n    return html`\n      <nav part=\"nav\" class=\"${classMap(navClasses)}\" aria-label=\"${this.#setNavOrder()}\">\n        ${this.#logoCopy}\n        <div id=\"container\" part=\"container\" class=\"${classMap(containerClasses)}\">\n          <slot name=\"logo\" id=\"logo\"></slot>\n          <button aria-controls=\"container\" aria-expanded=\"${this._mobileMenuExpanded}\" @click=\"${this.#toggleMobileMenu}\"><slot name=\"mobile-menu\">Menu</slot></button>\n          <slot name=\"nav\"></slot>\n          <div id=\"cta\" part=\"cta\">\n            <rh-context-provider color-palette=\"${this._ctaColorPalette}\">\n              <slot name=\"cta\"><slot>\n            </rh-context-provider>\n          </div>\n        </div>\n      </nav>\n      <rh-secondary-nav-overlay></rh-secondary-nav-overlay>\n    `;\n  }\n\n  /**\n   * Public API, opens a specific dropdown based on index.\n   * Closes all open dropdowns before opening specified.\n   * Toggles overlay to open\n   * @param index\n   * @returns {void}\n   */\n  public open(index: number): void {\n    if (index == null) {\n      return;\n    }\n    const dropdown = this.#dropdownByIndex(index);\n    if (dropdown && RhSecondaryNav.isDropdown(dropdown)) {\n      this.close();\n      this.#expand(index);\n      dropdown?.querySelector('a')?.focus();\n      this._overlay.open = true;\n    }\n  }\n\n  /**\n   * Public API, closes all open dropdowns\n   * @returns {void}\n   */\n  public close(): void {\n    const dropdowns = this.#allDropdowns();\n    dropdowns.forEach(dropdown => this.#closeDropdown(dropdown));\n  }\n\n  /**\n   * When dropdown event is triggered gets dropdown index that triggered\n   * event then closes all dropdowns.\n   * If the event is to open a dropdown, run #expand(index)\n   * If isMobile is set dispatch an SecondaryNavOverlayChangeEvent event\n   * to open the overlay\n   * @param event - {SecondaryNavDropdownExpandEvent}\n   * @return {void}\n   */\n  @bound\n  private _dropdownChangeHandler(event: Event): void {\n    if (event instanceof SecondaryNavDropdownExpandEvent) {\n      const index = this.#getDropdownIndex(event.target as Element);\n      if (index === null || index === undefined) {\n        return;\n      }\n      this.close();\n      if (event.expanded) {\n        this.#expand(index);\n      }\n      if (!this._nav?.classList.contains('compact')) {\n        this.dispatchEvent(new SecondaryNavOverlayChangeEvent(event.expanded, event.toggle));\n      }\n    }\n  }\n\n  /**\n   * Handles when focus changes outside of the navigation\n   * If _compact is set, close the mobileMenu\n   * Closes all dropdowns and toggles overlay to closed\n   * @param event {FocusEvent}\n   */\n  @bound\n  private _focusOutHandler(event: FocusEvent) {\n    const target = event.relatedTarget as HTMLElement;\n    if (target?.closest('rh-secondary-nav') === this || target === null) {\n      // if the focus is still inside the rh-secondary-nav exit\n      return;\n    } else {\n      if (this._compact) {\n        this._mobileMenuExpanded = false;\n      }\n      this.close();\n      this._overlay.open = false;\n    }\n  }\n\n  /**\n   * Handles when the overlay receives a click event\n   * Closes all dropdowns and toggles overlay to closed\n   * If _compact then closes mobile menu to closed\n   * @param event {PointerEvent}\n   */\n  @bound\n  private _overlayClickHandler() {\n    this.close();\n    this._overlay.open = false;\n    if (this._compact) {\n      this._mobileMenuExpanded = false;\n    }\n  }\n\n  /**\n   * When _compact value is changed\n   * Get all open navMenus\n   * If _compact is true, open mobile menu\n   * If _compact is false, close mobile menu and close overlay\n   * @param oldVal {boolean | undefined}\n   * @param newVal {boolean | undefined}\n   * @returns {void}\n   */\n  private __compactChanged(oldVal?: boolean | undefined, newVal?: boolean | undefined): void {\n    if (newVal === undefined || newVal === oldVal) {\n      return;\n    }\n    const dropdownsOpen = this.#getOpenDropdowns().length;\n\n    if (newVal === true) {\n      // Switching to Mobile\n      if (dropdownsOpen > 0) {\n        this._mobileMenuExpanded = true;\n      }\n      if (this.colorPalette === 'darker') {\n        this._ctaColorPalette = 'lightest';\n      }\n    } else {\n      this._mobileMenuExpanded = false;\n      // Switching to Desktop\n      if (dropdownsOpen === 0) {\n        if (this._overlay) {\n          this._overlay.open = false;\n        }\n      }\n      if (this.colorPalette === 'darker') {\n        this._ctaColorPalette = this.colorPalette;\n      }\n    }\n  }\n\n  /**\n   * Closes dropdown menu on keydown, then places\n   * focus on last button clicked\n   * @param event {KeyboardEvent}\n   */\n  @bound\n  private _keyboardControls(event: KeyboardEvent) {\n    switch (event.key) {\n      case 'Escape':\n        if (this._compact) {\n          this._mobileMenuExpanded = false;\n          this._mobileMenuButton?.focus();\n        } else {\n          const open = this.#getOpenDropdowns();\n          open[0].querySelector('a')?.focus();\n        }\n        this.close();\n        this._overlay.open = false;\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Finds all open dropdowns\n   * @returns {RhSecondaryNavDropdown[]}\n   */\n  #getOpenDropdowns(): RhSecondaryNavDropdown[] {\n    const dropdowns = this.#allDropdowns();\n    const openDropdowns: RhSecondaryNavDropdown[] = [];\n    dropdowns.forEach(dropdown => {\n      if (dropdown.expanded) {\n        openDropdowns.push(dropdown);\n      }\n    });\n    return openDropdowns;\n  }\n\n  /**\n   * Gets all dropdowns and finds the element given and returns its index\n   * @param element {Element}\n   * @returns {void | number}\n   */\n  #getDropdownIndex(element: Element | null): void | number {\n    if (!RhSecondaryNav.isDropdown(element)) {\n      this.#logger.warn('The getDropdownIndex method expects to receive a dropdown element.');\n      return;\n    }\n    const dropdowns = this.#allDropdowns();\n    const index = dropdowns.findIndex(dropdown => dropdown.id === element.id);\n    return index;\n  }\n\n  /**\n   * Gets all dropdowns and returns the dropdown given an index\n   * @param index {number}\n   * @returns {void | RhSecondaryNavDropdown}\n   */\n  #dropdownByIndex(index: number): void | RhSecondaryNavDropdown {\n    const dropdowns = this.#allDropdowns();\n    if (dropdowns[index] === undefined) {\n      this.#logger.error('This dropdown index does not exist.');\n      return;\n    }\n    return dropdowns[index];\n  }\n\n  /**\n   * Opens a dropdown given an index\n   * @param index {number}\n   * @returns {void}\n   */\n  #expand(index: number): void {\n    if (index == null) {\n      return;\n    }\n    const dropdown = this.#dropdownByIndex(index);\n    if (dropdown && RhSecondaryNav.isDropdown(dropdown)) {\n      this.#openDropdown(dropdown);\n    }\n  }\n\n  /**\n   * Gets all dropdowns\n   * @returns {RhSecondaryNavDropdown[]}\n   */\n  #allDropdowns(): RhSecondaryNavDropdown[] {\n    return Array.from(this.querySelectorAll('rh-secondary-nav-dropdown')).filter(RhSecondaryNav.isDropdown);\n  }\n\n  /**\n   * Sets property expanded=false on dropdown given\n   * @param dropdown {RhSecondaryNavDropdown}\n   * @returns {void}\n   */\n  #closeDropdown(dropdown: RhSecondaryNavDropdown): void {\n    if (dropdown.expanded === false) {\n      return;\n    }\n    dropdown.expanded = false;\n  }\n\n  /**\n   * Sets property expanded=true on dropdown given\n   * @param dropdown {RhSecondaryNavDropdown}\n   * @returns {void}\n   */\n  #openDropdown(dropdown: RhSecondaryNavDropdown): void {\n    if (dropdown.expanded === true) {\n      return;\n    }\n    dropdown.expanded = true;\n  }\n\n  /**\n   * Toggles the overlay triggered by eventListener\n   * @param event {SecondaryNavOverlayChangeEvent}\n   */\n  @bound\n  private _toggleNavOverlay(event: Event) {\n    if (event instanceof SecondaryNavOverlayChangeEvent) {\n      if (this.contains(event.toggle)) {\n        this._overlay.open = event.open;\n      }\n    }\n  }\n\n  /**\n   * Upgrades the aria attributes on upgrade\n   * @returns {void}\n  */\n  #updateAccessibility(): void {\n    // remove role=\"navigation\" from host on upgrade\n    this.removeAttribute('role');\n    // remove aria-labelledby from slotted `<ul>` on upgrade\n    const nav = this.querySelector(':is([slot=\"nav\"]):is(ul)');\n    nav?.removeAttribute('aria-labelledby');\n  }\n\n  /**\n   * Toggles the mobile menu from `@click` of the _mobileMenuButton\n   */\n  #toggleMobileMenu() {\n    if (this._mobileMenuExpanded) {\n      this._mobileMenuExpanded = false;\n    } else {\n      this._mobileMenuExpanded = true;\n    }\n    this.dispatchEvent(new SecondaryNavOverlayChangeEvent(this._mobileMenuExpanded, this));\n  }\n\n  /**\n   * Set the aria label on the custom tag to designate the nav as main or secondary based on attributes set by the content author\n   * @returns 'main' || 'secondary'\n   */\n  #setNavOrder() {\n    return this.mainNav ? 'main' : 'secondary';\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-secondary-nav': RhSecondaryNav;\n  }\n}\n"]}