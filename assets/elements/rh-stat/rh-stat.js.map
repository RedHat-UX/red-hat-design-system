{"version":3,"file":"rh-stat.js","sourceRoot":"","sources":["rh-stat.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport type { ColorTheme } from '@patternfly/pfe-core';\nimport { LitElement, html } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { pfelement, colorContextConsumer } from '@patternfly/pfe-core/decorators.js';\nimport { SlotController } from '@patternfly/pfe-core/controllers/slot-controller.js';\n\nimport styles from './rh-stat.css';\nimport { tabletLandscapeBreakpoint } from '../../lib/tokens.js';\nimport { MatchMediaController } from '../../lib/MatchMediaController.js';\n\n/**\n * Stat\n * @slot - Place element content here\n */\n@customElement('rh-stat') @pfelement()\nexport class RhStat extends LitElement {\n  static readonly version = '{{version}}';\n\n  static readonly styles = [styles];\n\n  @colorContextConsumer()\n  @property({ reflect: true }) on: ColorTheme = 'light';\n\n  @property({ reflect: true, type: String }) icon;\n\n  @property({ reflect: true, type: String }) top: 'default'|'statistic';\n\n  @property({ reflect: true, type: String }) size: 'default'|'large';\n\n  protected matchMedia = new MatchMediaController(this, `(max-width: ${tabletLandscapeBreakpoint})`, {\n    onChange: ({ matches }) =>\n      this.isMobile = matches,\n  });\n\n  @property({ type: Boolean, reflect: true, attribute: 'is-mobile' }) isMobile = false;\n\n  private slots = new SlotController(this, {\n    slots: ['icon'],\n  });\n\n  constructor() {\n    super();\n    this.icon = '';\n    this.top = 'default';\n    this.size = 'default';\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateIcons();\n  }\n\n  render() {\n    const hasSlottedIcon = this.slots.hasSlotted('icon');\n    return html`\n          <slot class=\"${classMap({ hasIcon: hasSlottedIcon || this.icon.length > 0 })}\" name=\"icon\">\n            ${this.icon.length > 0 ?\n              html`\n                <pfe-icon size=${this.size === 'default' ? 'md' : 'lg'} icon=${this.icon}></pfe-icon>\n              ` : html``}\n            </slot>\n          <slot name=\"title\"></slot>\n          <slot name=\"statistic\">Statistic Placeholder</slot>\n          <slot name=\"description\">Description Placeholder</slot>\n          <slot name=\"cta\"></slot>\n    `;\n  }\n\n  public updateIcons(): void {\n    if (this.querySelectorAll('pfe-icon')?.length > 0) {\n      const pfeIcon = this.querySelectorAll('pfe-icon')?.[0];\n      pfeIcon.setAttribute('size', this.size === 'default' ? 'md' : 'lg');\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'rh-stat': RhStat;\n  }\n}\n"]}