{"version":3,"file":"uxdot-copy-button.js","sourceRoot":"","sources":["uxdot-copy-button.ts"],"names":[],"mappings":";;AAEA,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,KAAK,CAAC;AAEvC,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,MAAM,kCAAkC,CAAC;AAEjE,OAAO,EAAE,OAAO,EAAE,MAAM,qCAAqC,CAAC;AAE9D,OAAO,yCAAyC,CAAC;AACjD,OAAO,mCAAmC,CAAC;;;AAKpC,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,UAAU;IAAxC;;;QAKO,SAAI,GAAuB,MAAM,CAAC;QAE9C,qCAAa,IAAI,CAAC,eAAe,EAAE,EAAC;IAwBtC,CAAC;IAtBC,MAAM;QACJ,OAAO,IAAI,CAAA;;4CAE6B,IAAI,CAAC,IAAI,IAAI,eAAe;0BAC9C,uBAAA,IAAI,4DAAS;;oCAEH,IAAI,CAAC,IAAI;;;KAGxC,CAAC;IACJ,CAAC;IAED,YAAY;QACV,uBAAA,IAAI,kCAAW,CAAC,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACzC,CAAC;;;;2BAED,KAAK;IACH,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;IACjD,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IAC5B,MAAM,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC7C,OAAO,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;AAChD,CAAC;AA7BM,sBAAM,GAAG,CAAC,MAAM,CAAC,AAAX,CAAY;AAEb;IAAX,QAAQ,EAAE;6CAAe;AAEd;IAAX,QAAQ,EAAE;6CAAmC;AALnC,eAAe;IAD3B,aAAa,CAAC,mBAAmB,CAAC;GACtB,eAAe,CA+B3B","sourcesContent":["import type { IconNameFor } from '@rhds/icons';\n\nimport { html, LitElement } from 'lit';\n\nimport { property } from 'lit/decorators/property.js';\nimport { customElement } from 'lit/decorators/custom-element.js';\n\nimport { RhAlert } from '@rhds/elements/rh-alert/rh-alert.js';\n\nimport '@rhds/elements/rh-tooltip/rh-tooltip.js';\nimport '@rhds/elements/rh-icon/rh-icon.js';\n\nimport styles from './uxdot-copy-button.css';\n\n@customElement('uxdot-copy-button')\nexport class UxdotCopyButton extends LitElement {\n  static styles = [styles];\n\n  @property() copy?: string;\n\n  @property() icon?: IconNameFor<'ui'> = 'copy';\n\n  #internals = this.attachInternals();\n\n  render() {\n    return html`\n      <rh-tooltip position=\"left-start\">\n        <span id=\"caption\" slot=\"content\">${this.copy ?? 'Click to copy'}</span>\n        <button @click=\"${this.#onClick}\">\n          <code><slot></slot></code>\n          <rh-icon set=\"ui\" icon=\"${this.icon}\"></rh-icon>\n        </button>\n      </rh-tooltip>\n    `;\n  }\n\n  firstUpdated() {\n    this.#internals.states.add('rendered');\n  }\n\n  async #onClick() {\n    const text = this.copy ?? this.textContent ?? '';\n    const message = text.trim();\n    await navigator.clipboard.writeText(message);\n    RhAlert.toast({ heading: 'Copied', message });\n  }\n}\n"]}