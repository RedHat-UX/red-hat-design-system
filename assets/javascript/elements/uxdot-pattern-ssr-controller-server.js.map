{"version":3,"file":"uxdot-pattern-ssr-controller-server.js","sourceRoot":"","sources":["uxdot-pattern-ssr-controller-server.ts"],"names":[],"mappings":"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","sourcesContent":["import type { DirectiveResult } from 'lit/directive.js';\n\nimport { readFile } from 'node:fs/promises';\nimport { join, dirname } from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport { parseFragment, serialize } from 'parse5';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html.js';\nimport { RHDSSSRController } from '@rhds/elements/lib/ssr-controller.js';\n\nimport * as Tools from '@parse5/tools';\nimport type { UxdotPattern } from './uxdot-pattern.js';\n\nlet HighlightPairedShortcode: (\n  content: string,\n  language: string,\n  highlights: '',\n  options: {\n    lineSeparator: string;\n    errorOnInvalidLanguage: boolean;\n    alwaysWrapLineHighlights: boolean;\n    preAttributes: Record<string, string>;\n    codeAttributes: Record<string, string>;\n  },\n) => string;\n\nfunction dedent(str: string) {\n  const stripped = str.replace(/^\\n/, '');\n  const match = stripped.match(/^\\s+/);\n  return match ? stripped.replace(new RegExp(`^${match[0]}`, 'gm'), '') : str;\n}\n\nfunction isScript(node: Tools.Element) {\n  if (node.tagName === 'script') {\n    const type = Tools.getAttribute(node, 'type');\n    switch (type) {\n      case 'module':\n      case 'javascript':\n      case 'application/javascript':\n      case 'text/javascript':\n      case null:\n        return true;\n    }\n  }\n  return false;\n}\n\nfunction isStyle(node: Tools.Element) {\n  return node.tagName === 'style';\n}\n\ninterface EleventyPageData {\n  inputPath: string;\n  outputPath: string;\n}\n\nexport class UxdotPatternSSRControllerServer extends RHDSSSRController {\n  declare host: UxdotPattern;\n  allContent?: DirectiveResult;\n  htmlContent?: DirectiveResult;\n  cssContent?: DirectiveResult;\n  jsContent?: DirectiveResult;\n  hasCss = false;\n  hasJs = false;\n  // this is set in the worker\n  page!: EleventyPageData;\n\n\n  async #extractInlineContent(kind: 'js' | 'css', partial: Tools.Node) {\n    const prop = kind === 'js' ? 'jsSrc' as const : 'cssSrc' as const;\n    const nodePred = kind === 'js' ? isScript\n                   : kind === 'css' ? isStyle\n                   : () => false;\n    const baseUrl = pathToFileURL(this.page.inputPath);\n    let content = !this.host[prop] ? ''\n                  : await readFile(new URL(this.host[prop], baseUrl.href), 'utf-8');\n    for (const scriptTag of Tools.queryAll(partial, node =>\n      Tools.isElementNode(node) && nodePred(node))) {\n      content += `\\n${dedent(Tools.getTextContent(scriptTag))}`;\n      Tools.removeNode(scriptTag);\n    }\n    return content.trim();\n  }\n\n  async #getPatternContent() {\n    const { src } = this.host;\n    if (!src) {\n      return '';\n    } else {\n      return readFile(join(dirname(this.page.inputPath), src), 'utf8');\n    }\n  }\n\n  #highlight(language: string, content: string) {\n    const result = HighlightPairedShortcode(content, language, '', {\n      lineSeparator: '\\n',\n      errorOnInvalidLanguage: false,\n      alwaysWrapLineHighlights: false,\n      preAttributes: {},\n      codeAttributes: {},\n    }) ?? '';\n    return result;\n  }\n\n  async #loadHighlighter() {\n    // START workaround for ssr: prism will try to use the DOM is `document` is available\n    // but lit-ssr needs the shims, so delete it before highlighting and restore it after\n    const shim = globalThis.document;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    delete globalThis.document;\n    const hl = await import('@11ty/eleventy-plugin-syntaxhighlight/src/HighlightPairedShortcode.js')\n        .then(m => m.default);\n    // END workaround\n    globalThis.document = shim;\n    return hl;\n  }\n\n  async ssrSetup() {\n    HighlightPairedShortcode ||= await this.#loadHighlighter();\n    const allContent = await this.#getPatternContent();\n    const partial = parseFragment(allContent);\n\n    // NB: the css and js content functions *mutate* the partial,\n    //     so it's important that the HTML content is serialized last, and that\n    //     the entire content is printed as the runtime portion of the pattern.\n    const cssContent = await this.#extractInlineContent('css', partial);\n    const jsContent = await this.#extractInlineContent('js', partial);\n    const htmlContent = serialize(partial).trim();\n\n    this.hasCss = !!cssContent.length;\n    this.hasJs = !!jsContent.length;\n    this.allContent = unsafeHTML(allContent);\n    this.cssContent = unsafeHTML(this.#highlight('css', cssContent));\n    this.jsContent = unsafeHTML(this.#highlight('js', jsContent));\n    this.htmlContent = unsafeHTML(this.#highlight('html', htmlContent));\n  }\n}\n\n"]}