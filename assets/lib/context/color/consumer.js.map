{"version":3,"file":"consumer.js","sourceRoot":"","sources":["consumer.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ReactiveController, ReactiveElement } from 'lit';\n\nimport {\n  contextEvents,\n  ColorContextController,\n  type ColorContextOptions\n} from './controller.js';\n\nimport { ContextEvent } from '../event.js';\n\n/**\n   * A Color theme is a context-specific restriction on the available color palettes\n   *\n   * `ColorTheme` is associated with the `on` attribute and the `--context` css property\n   */\nexport type ColorTheme = (\n  | 'dark'\n  | 'light'\n  | 'saturated'\n);\n\ninterface ColorContextConsumerOptions<T extends ReactiveElement> extends ColorContextOptions<T> {\n  /** Private callback for instances where a consumer is also a provider. */\n  callback?: (value: ColorTheme) => void;\n}\n\n/**\n * A color context consumer receives sets it's context property based on the context provided\n * by the closest color context provider.\n * The consumer has no direct access to the context, it must receive it from the provider.\n */\nexport class ColorContextConsumer<\n  T extends ReactiveElement\n> extends ColorContextController<T> implements ReactiveController {\n  #propertyName: keyof T;\n\n  get #propertyValue() {\n    return this.host[this.#propertyName] as ColorTheme;\n  }\n\n  set #propertyValue(x) {\n    this.host[this.#propertyName] = x as T[keyof T];\n    this.host.requestUpdate();\n  }\n\n  get value() {\n    return this.#propertyValue;\n  }\n\n  #dispose?: () => void;\n\n  #override: ColorTheme | null = null;\n\n  constructor(host: T, private options?: ColorContextConsumerOptions<T>) {\n    super(host, options);\n    this.#propertyName = options?.propertyName ?? 'on' as keyof T;\n  }\n\n  /** When a consumer connects, it requests colour context from the closest provider. */\n  async hostConnected() {\n    const event = new ContextEvent(this.context, e => this.#contextCallback(e), true);\n    this.#override = this.#propertyValue;\n    this.host.dispatchEvent(event);\n    contextEvents.set(this.host, event);\n    await this.host.updateComplete;\n    this.#override = null;\n  }\n\n  /** When a consumer disconnects, it's removed from the list of consumers. */\n  hostDisconnected() {\n    this.#dispose?.();\n    this.#dispose = undefined;\n    contextEvents.delete(this.host);\n  }\n\n  /** Register the dispose callback for hosts that requested multiple updates, then update the colour-context */\n  #contextCallback(value: ColorTheme|null, dispose?: () => void) {\n    // protect against changing providers\n    if (dispose && dispose !== this.#dispose) {\n      this.#dispose?.();\n      this.#dispose = dispose;\n    }\n    this.update(value);\n  }\n\n  /** Sets the `on` attribute on the host and any children that requested multiple updates */\n  public update(next: ColorTheme|null) {\n    const { last } = this;\n    if (!this.#override && next !== last) {\n      this.last = next;\n      this.#propertyValue = (next ?? undefined) as ColorTheme;\n    }\n    this.options?.callback?.(this.#propertyValue);\n  }\n}\n\nexport function colorContextConsumer<T extends ReactiveElement>(options?: ColorContextOptions<T>) {\n  return function(proto: T, _propertyName: string|keyof T) {\n    const propertyName = _propertyName as keyof T;\n    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {\n      const controller = new ColorContextConsumer(instance as T, { propertyName, ...options });\n      // @ts-expect-error: this assignment is strictly for debugging purposes\n      instance.__DEBUG_colorContextConsumer = controller;\n    });\n  };\n}\n"]}