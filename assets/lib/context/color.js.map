{"version":3,"file":"color.js","sourceRoot":"","sources":["color.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Context, ContextCallback, UnknownContext } from './event.js';\n\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\nimport { StyleController } from '@patternfly/pfe-core/controllers/style-controller.js';\nimport { createContext, ContextEvent } from './event.js';\n\nimport CONTEXT_BASE_STYLES from './context-color.css';\n\n/**\n * A `ColorPalette` is a collection of specific color values\n * Choosing a palette sets both color properties and, if the component is a context provider,\n * implies a color theme for descendents.\n *\n * `ColorPalette` is associated with the `color-palette` attribute\n */\nexport type ColorPalette = (\n  | 'base'\n  | 'accent'\n  | 'complement'\n  | 'lighter'\n  | 'lightest'\n  | 'darker'\n  | 'darkest'\n);\n\n/**\n * A Color theme is a context-specific restriction on the available color palettes\n *\n * `ColorTheme` is associated with the `on` attribute and the `--context` css property\n */\nexport type ColorTheme = (\n  | 'dark'\n  | 'light'\n  | 'saturated'\n);\n\nexport interface ColorContextOptions<T extends ReactiveElement> {\n  prefix?: string;\n  propertyName?: keyof T;\n}\n\nexport interface ColorContextProviderOptions<T extends ReactiveElement> extends ColorContextOptions<T> {\n  /** Attribute to set context. Providers only */\n  attribute?: string;\n}\n\n// TODO: QA\n// 1. verify elements\n//   rh-band - (easy)\n//   rh-card - (easy)\n//   rh-tabs - (easy)\n//   rh-jump-links - (potentially fraught)\n//   rh-autocomplete - (anyways broken)\n//   rh-cta - (anyways broken)\n\n/**\n* Maps from consumer host elements to already-fired request events\n* We hold these in memory in order to re-fire the events every time a new provider connects.\n* This is a hedge against cases where an early-upgrading provider claims an early-upgrading\n* consumer before a late-upgrading provider has a chance to register as the rightful provider\n* @example Monkey-in-the-middle error\n*          In this example, we must re-fire the event from eager-consumer when late-provider\n*          upgrades, so as to ensure that late-provider claims it for itself\n*          ```html\n*          <early-provider>\n*            <late-provider>\n*              <eager-consumer>\n*            </late-provider>\n*          </early-provider>\n*          ```\n*/\nconst contextEvents = new Map<ReactiveElement, ContextEvent<UnknownContext>>();\n\n/**\n * Color context is derived from the `--context` css custom property,\n * which *must* be set by the `color-palette` attribute\n * This property is set (in most cases) in `color-context.scss`,\n * which is added to components via `StyleController`.\n *\n * In this way, we avoid the need to execute javascript in order to convert from a given\n * `ColorPalette` to a given `ColorTheme`, since those relationships are specified in CSS.\n */\nabstract class ColorContextController<T extends ReactiveElement> implements ReactiveController {\n  abstract update(next: ColorTheme | null): void;\n\n  /** The context object which describes the host's colour context */\n  protected context: Context<ColorTheme|null>;\n\n  /** The style controller which provides the necessary CSS. */\n  protected styleController: StyleController;\n\n  /** Prefix for colour context. Set this in Options to create a separate context */\n  protected prefix = 'rh-';\n\n  /** The last-known color context on the host */\n  protected last: ColorTheme|null = null;\n\n  protected logger: Logger;\n\n  hostUpdate?(): void\n\n  constructor(protected host: T, options?: ColorContextOptions<T>) {\n    this.logger = new Logger(host);\n    this.prefix = options?.prefix ?? 'rh-';\n    this.context = createContext(`${this.prefix}-color-context`);\n    this.styleController = new StyleController(host, CONTEXT_BASE_STYLES);\n    host.addController(this);\n  }\n}\n\n/**\n * `ColorContextProvider` is responsible to derive a context value from CSS and provide it to its\n * descendents.\n */\nexport class ColorContextProvider<T extends ReactiveElement> extends ColorContextController<T> implements ReactiveController {\n  #attribute: string;\n\n  /** Cache of context callbacks. Call each to update consumers */\n  #callbacks = new Set<ContextCallback<ColorTheme|null>>();\n\n  /** Mutation observer which updates consumers when `on` or `color-palette` attributes change. */\n  #mo = new MutationObserver(() => this.update(this.#contextVariable));\n\n  /**\n   * Cached (live) computed style declaration\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\n   */\n  #style: CSSStyleDeclaration;\n\n  #initialized = false;\n\n  /** Return the current CSS `--context` value, or null */\n  get #contextVariable(): ColorTheme | null {\n    return this.#style.getPropertyValue('--context').trim() as ColorTheme || null;\n  }\n\n  constructor(host: T, options?: ColorContextProviderOptions<T>) {\n    const { attribute = 'color-palette', ...rest } = options ?? {};\n    super(host, rest);\n    this.#style = window.getComputedStyle(host);\n    this.#attribute = attribute;\n    if (this.#attribute !== 'color-palette') {\n      this.logger.warn('color context currently supports the `color-palette` attribute only.');\n    }\n  }\n\n  /**\n   * When a context provider connects, it listens for context-request events\n   * it also fires all previously fired context-request events from their hosts,\n   * in case this context provider upgraded after and is closer to a given consumer.\n   */\n  async hostConnected() {\n    this.host.addEventListener('context-request', e => this.#onChildContextEvent(e));\n    this.#mo.observe(this.host, { attributes: true, attributeFilter: [this.#attribute] });\n    for (const [host, fired] of contextEvents) {\n      host.dispatchEvent(fired);\n    }\n    await this.host.updateComplete;\n    this.update();\n  }\n\n  hostUpdated() {\n    this.#initialized ??= (this.update(), true);\n  }\n\n  /**\n   * When a context provider disconnects, it disconnects its mutation observer\n   */\n  hostDisconnected() {\n    this.#callbacks.forEach(x => this.#callbacks.delete(x));\n    this.#mo.disconnect();\n  }\n\n  /** Was the context event fired requesting our colour-context context? */\n  #isColorContextEvent(\n    event: ContextEvent<UnknownContext>\n  ): event is ContextEvent<Context<ColorTheme|null>> {\n    return (\n      event.target !== this.host &&\n      event.context.name === `${this.prefix}-color-context`\n    );\n  }\n\n  /**\n   * Provider part of context API\n   * When a child connects, claim its context-request event\n   * and add its callback to the Set of children if it requests multiple updates\n   */\n  #onChildContextEvent(event: ContextEvent<UnknownContext>) {\n    // only handle ContextEvents relevant to colour context\n    if (this.#isColorContextEvent(event)) {\n      // claim the context-request event for ourselves (required by context protocol)\n      event.stopPropagation();\n\n      // Run the callback to initialize the child's colour-context\n      event.callback(this.#contextVariable);\n\n      // Cache the callback for future updates, if requested\n      if (event.multiple) {\n        this.#callbacks.add(event.callback);\n      }\n    }\n  }\n\n  /** Calls the context callback for all consumers */\n  public update(next: ColorTheme | null = this.#contextVariable) {\n    for (const cb of this.#callbacks) {\n      cb(next);\n    }\n  }\n}\n\n/**\n * A color context consumer receives sets it's context property based on the context provided\n * by the closest color context provider.\n * The consumer has no direct access to the context, it must receive it from the provider.\n */\nexport class ColorContextConsumer<T extends ReactiveElement> extends ColorContextController<T> implements ReactiveController {\n  #propertyName: keyof T;\n\n  get #propertyValue() {\n    return this.host[this.#propertyName] as ColorTheme;\n  }\n\n  set #propertyValue(x) {\n    this.host[this.#propertyName] = x as T[keyof T];\n    this.host.requestUpdate();\n  }\n\n  #dispose?: () => void;\n\n  #override: ColorTheme | null = null;\n\n  constructor(host: T, private options?: ColorContextOptions<T>) {\n    super(host, options);\n    this.#propertyName = options?.propertyName ?? 'on' as keyof T;\n  }\n\n  /** When a consumer connects, it requests colour context from the closest provider. */\n  async hostConnected() {\n    const event = new ContextEvent(this.context, e => this.#contextCallback(e), true);\n    this.#override = this.#propertyValue;\n    this.host.dispatchEvent(event);\n    contextEvents.set(this.host, event);\n    await this.host.updateComplete;\n    this.#override = null;\n  }\n\n  /** When a consumer disconnects, it's removed from the list of consumers. */\n  hostDisconnected() {\n    this.#dispose?.();\n    this.#dispose = undefined;\n    contextEvents.delete(this.host);\n  }\n\n  /** Register the dispose callback for hosts that requested multiple updates, then update the colour-context */\n  #contextCallback(value: ColorTheme|null, dispose?: () => void) {\n    // protect against changing providers\n    if (dispose && dispose !== this.#dispose) {\n      this.#dispose?.();\n      this.#dispose = dispose;\n    }\n    this.update(value);\n  }\n\n  /** Sets the `on` attribute on the host and any children that requested multiple updates */\n  public update(next: ColorTheme|null) {\n    if (!this.#override && next !== this.last) {\n      this.last = next;\n      this.logger.log(`setting context from ${this.#propertyValue} to ${next}`);\n      this.#propertyValue = (next ?? undefined) as ColorTheme;\n    }\n  }\n}\n\nexport function colorContextProvider<T extends ReactiveElement>(options?: ColorContextOptions<T>) {\n  return function(proto: T, _propertyName: string) {\n    const propertyName = _propertyName as keyof T;\n    const klass = (proto.constructor as typeof ReactiveElement);\n    const propOpts = klass.getPropertyOptions(_propertyName);\n    const attribute = typeof propOpts.attribute === 'boolean' ? undefined : propOpts.attribute;\n    klass.addInitializer(instance => {\n      const controller = new ColorContextProvider(instance as T, { propertyName, attribute, ...options });\n      // @ts-expect-error: this assignment is strictly for debugging purposes\n      instance.__DEBUG_colorContextProvider = controller;\n    });\n  };\n}\n\nexport function colorContextConsumer<T extends ReactiveElement>(options?: ColorContextOptions<T>) {\n  return function(proto: T, _propertyName: string|keyof T) {\n    const propertyName = _propertyName as keyof T;\n    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {\n      const controller = new ColorContextConsumer(instance as T, { propertyName, ...options });\n      // @ts-expect-error: this assignment is strictly for debugging purposes\n      instance.__DEBUG_colorContextConsumer = controller;\n    });\n  };\n}\n"]}