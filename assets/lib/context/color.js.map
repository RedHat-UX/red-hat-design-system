{"version":3,"file":"color.js","sourceRoot":"","sources":["color.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Context, ContextCallback, UnknownContext } from './event.js';\n\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nimport { Logger } from '@patternfly/pfe-core/controllers/logger.js';\nimport { StyleController } from '@patternfly/pfe-core/controllers/style-controller.js';\nimport { createContext, ContextEvent } from './event.js';\n\nimport CONTEXT_BASE_STYLES from './context-color.css';\n\n/**\n * A `ColorPalette` is a collection of specific color values\n * Choosing a palette sets both color properties and, if the component is a context provider,\n * implies a color theme for descendents.\n *\n * `ColorPalette` is associated with the `color-palette` attribute\n */\nexport type ColorPalette = (\n  | 'base'\n  | 'accent'\n  | 'complement'\n  | 'lighter'\n  | 'lightest'\n  | 'darker'\n  | 'darkest'\n);\n\n/**\n * A Color theme is a context-specific restriction on the available color palettes\n *\n * `ColorTheme` is associated with the `on` attribute and the `--context` css property\n */\nexport type ColorTheme = (\n  | 'dark'\n  | 'light'\n  | 'saturated'\n);\n\nexport interface ColorContextOptions {\n  prefix?: string;\n  attribute?: string;\n}\n\n// TODO: CSS\n// 1. move sass that maps from palette to theme from _colors.scss:198+ to color-context.scss (and rename them)\n// 2. except don't because hard, wait for design tokens instead\n\n// TODO: QA\n// 1. verify elements\n//   rh-band - (easy)\n//   rh-card - (easy)\n//   rh-tabs - (easy)\n//   rh-jump-links - (potentially fraught)\n//   rh-autocomplete - (anyways broken)\n//   rh-cta - (anyways broken)\n\n/**\n* Maps from consumer host elements to already-fired request events\n* We hold these in memory in order to re-fire the events every time a new provider connects.\n* This is a hedge against cases where an early-upgrading provider claims an early-upgrading\n* consumer before a late-upgrading provider has a chance to register as the rightful provider\n* @example Monkey-in-the-middle error\n*          In this example, we must re-fire the event from eager-consumer when late-provider\n*          upgrades, so as to ensure that late-provider claims it for itself\n*          ```html\n*          <early-provider>\n*            <late-provider>\n*              <eager-consumer>\n*            </late-provider>\n*          </early-provider>\n*          ```\n*/\nconst contextEvents = new Map<ReactiveElement, ContextEvent<UnknownContext>>();\n\n/**\n * Color context is derived from the `--context` css custom property,\n * which can be set by the `on` attribute, but *must* be set by the `color-palette` attribute\n * This property is set (in most cases) in `color-context.scss`,\n * which is added to components via `StyleController`.\n *\n * In this way, we avoid the need to execute javascript in order to convert from a given\n * `ColorPalette` to a given `ColorTheme`, since those relationships are specified in CSS.\n */\nabstract class ColorContextController implements ReactiveController {\n  abstract update(next: ColorTheme | null): void;\n\n  protected abstract attribute: string;\n\n  /** The context object which describes the host's colour context */\n  protected context: Context<ColorTheme|null>;\n\n  /** The style controller which provides the necessary CSS. */\n  protected styleController: StyleController;\n\n  /** Prefix for colour context. Set this in Options to create a separate context */\n  protected prefix = 'rh-';\n\n  /** The last-known color context on the host */\n  protected last: ColorTheme|null = null;\n\n  protected logger: Logger;\n\n  hostUpdate?(): void\n\n  constructor(protected host: ReactiveElement, options?: ColorContextOptions) {\n    this.prefix = options?.prefix ?? 'rh-';\n    this.context = createContext(`${this.prefix}-color-context`);\n    this.logger = new Logger(host);\n    this.styleController = new StyleController(host, CONTEXT_BASE_STYLES);\n    host.addController(this as ReactiveController);\n  }\n}\n\n/**\n * `ColorContextProvider` is responsible to derive a context value from CSS and provide it to its\n * descendents.\n */\nexport class ColorContextProvider extends ColorContextController implements ReactiveController {\n  protected attribute: string;\n\n  /** Cache of context callbacks. Call each to update consumers */\n  private callbacks = new Set<ContextCallback<ColorTheme|null>>();\n\n  /** Mutation observer which updates consumers when `on` or `color-palette` attributes change. */\n  private mo = new MutationObserver(() => this.update(this.contextVariable));\n\n  /**\n   * Cached (live) computed style declaration\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\n   */\n  protected style: CSSStyleDeclaration;\n\n  /** Return the current CSS `--context` value, or null */\n  protected get contextVariable(): ColorTheme | null {\n    return this.style.getPropertyValue('--context').trim() as ColorTheme || null;\n  }\n\n  constructor(host: ReactiveElement, options?: ColorContextOptions) {\n    super(host, options);\n    this.style = window.getComputedStyle(host);\n    this.attribute = options?.attribute ?? 'color-palette';\n  }\n\n  /**\n   * When a context provider connects, it listens for context-request events\n   * it also fires all previously fired context-request events from their hosts,\n   * in case this context provider upgraded after and is closer to a given consumer.\n   */\n  hostConnected() {\n    this.host.addEventListener('context-request', e => this.#onChildContextEvent(e));\n    this.mo.observe(this.host, { attributes: true, attributeFilter: [this.attribute, 'on'] });\n    this.update(this.contextVariable);\n    for (const [host, fired] of contextEvents) {\n      host.dispatchEvent(fired);\n    }\n  }\n\n  /**\n   * When a context provider disconnects, it disconnects its mutation observer\n   */\n  hostDisconnected() {\n    this.callbacks.forEach(x => this.callbacks.delete(x));\n    this.mo.disconnect();\n  }\n\n  /** Was the context event fired requesting our colour-context context? */\n  private isColorContextEvent(\n    event: ContextEvent<UnknownContext>\n  ): event is ContextEvent<Context<ColorTheme|null>> {\n    return (\n      event.target !== this.host &&\n      event.context.name === `${this.prefix}-color-context`\n    );\n  }\n\n  /**\n   * Provider part of context API\n   * When a child connects, claim its context-request event\n   * and add its callback to the Set of children if it requests multiple updates\n   */\n  #onChildContextEvent(event: ContextEvent<UnknownContext>) {\n    // only handle ContextEvents relevant to colour context\n    if (this.isColorContextEvent(event)) {\n      // claim the context-request event for ourselves (required by context protocol)\n      event.stopPropagation();\n\n      // Run the callback to initialize the child's colour-context\n      event.callback(this.contextVariable);\n\n      // Cache the callback for future updates, if requested\n      if (event.multiple) {\n        this.callbacks.add(event.callback);\n      }\n    }\n  }\n\n  /** Sets the `on` attribute on the host and any children that requested multiple updates */\n  public update(next: ColorTheme | null) {\n    for (const cb of this.callbacks) {\n      cb(next);\n    }\n  }\n}\n\n/**\n * A color context consumer receives sets it's `on` attribute based on the context provided\n * by the closes color context provider.\n * The consumer has no direct access to the context, it must receive it from the provider.\n */\nexport class ColorContextConsumer extends ColorContextController implements ReactiveController {\n  protected attribute: string;\n\n  private dispose?: () => void;\n\n  private override: ColorTheme | null = null;\n\n  constructor(host: ReactiveElement, options?: ColorContextOptions) {\n    super(host, options);\n    this.attribute ??= 'on';\n  }\n\n  /**\n   * When a color context consumer connects,\n   * it requests colour context from the closest context provider,\n   * then updates it's host's `on` attribute\n   */\n  hostConnected() {\n    const event = new ContextEvent(this.context, e => this.contextCallback(e), true);\n    this.override = this.host.getAttribute(this.attribute) as ColorTheme;\n    this.host.dispatchEvent(event);\n    contextEvents.set(this.host, event);\n  }\n\n  /**\n   * When a color context consumer disconnects,\n   * it removes itself from the collection of components which request color context\n   * then updates it's host's `on` attribute\n   */\n  hostDisconnected() {\n    this.dispose?.();\n    this.dispose = undefined;\n    contextEvents.delete(this.host);\n  }\n\n  /** Register the dispose callback for hosts that requested multiple updates, then update the colour-context */\n  private contextCallback(value: ColorTheme|null, dispose?: () => void) {\n    // protect against changing providers\n    if (dispose && dispose !== this.dispose) {\n      this.dispose?.();\n      this.dispose = dispose;\n    }\n    this.update(value);\n  }\n\n  /** Sets the `on` attribute on the host and any children that requested multiple updates */\n  public update(next: ColorTheme|null) {\n    if (!this.override && next !== this.last) {\n      this.last = next;\n      this.logger.log(`setting context from ${this.host.getAttribute(this.attribute)} to ${next}`);\n      if (next == null) {\n        this.host.removeAttribute(this.attribute);\n      } else {\n        this.host.setAttribute(this.attribute, next);\n      }\n    }\n  }\n}\n\nexport function colorContextProvider<T extends ReactiveElement>(options?: ColorContextOptions) {\n  return function(proto: T, _: string) {\n    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {\n      // @ts-expect-error: this is strictly for debugging purposes\n      instance.__colorContextProvider =\n        new ColorContextProvider(instance, options);\n    });\n  };\n}\n\nexport function colorContextConsumer<T extends ReactiveElement>(options?: ColorContextOptions) {\n  return function(proto: T, _: string) {\n    (proto.constructor as typeof ReactiveElement).addInitializer(instance => {\n      // @ts-expect-error: this is strictly for debugging purposes\n      instance.__colorContextConsumer =\n        new ColorContextConsumer(instance, options);\n    });\n  };\n}\n"]}