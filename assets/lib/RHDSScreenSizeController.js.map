{"version":3,"file":"RHDSScreenSizeController.js","sourceRoot":"","sources":["RHDSScreenSizeController.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,gBAAgB,EAChB,kBAAkB,EAClB,sBAAsB,EACtB,sBAAsB,EACtB,yBAAyB,EACzB,uBAAuB,EACvB,yBAAyB,EACzB,wBAAwB,GACzB,MAAM,aAAa,CAAC;AAYrB,MAAM,OAAO,wBAAwB;IAkBnC;IACE,0DAA0D;IACnD,IAA4B;QAA5B,SAAI,GAAJ,IAAI,CAAwB;QAN9B,WAAM,GAAG,wBAAwB,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,OAAO,IAAI,KAAK,CAAC;QAQ/E,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC;QAC7B,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,wBAAwB,CAAC,OAAO,EAAE;YAC1D,IAAI,GAAG,KAAK,QAAQ,IAAI,IAAI,CAAC,OAAO,EAAE;gBACpC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;aACjB;SACF;IACH,CAAC;IAED,aAAa;QACX,wBAAwB,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB;QACd,wBAAwB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;;AApCM,kCAAS,GAAG,IAAI,GAAG,EAA4B,CAAC;AAEhD,gCAAO,GAAG,IAAI,GAAG,CAAgC;IACtD,CAAC,QAAQ,EAAE,UAAU,CAAC,0BAA0B,gBAAgB,GAAG,CAAC,CAAC;IACrE,CAAC,gBAAgB,EAAE,UAAU,CAAC,0BAA0B,wBAAwB,GAAG,CAAC,CAAC;IACrF,CAAC,iBAAiB,EAAE,UAAU,CAAC,0BAA0B,yBAAyB,GAAG,CAAC,CAAC;IACvF,CAAC,eAAe,EAAE,UAAU,CAAC,0BAA0B,uBAAuB,GAAG,CAAC,CAAC;IACnF,CAAC,iBAAiB,EAAE,UAAU,CAAC,0BAA0B,yBAAyB,GAAG,CAAC,CAAC;IACvF,CAAC,UAAU,EAAE,UAAU,CAAC,0BAA0B,kBAAkB,GAAG,CAAC,CAAC;IACzE,CAAC,cAAc,EAAE,UAAU,CAAC,0BAA0B,kBAAkB,qBAAqB,sBAAsB,GAAG,CAAC,CAAC;IACxH,CAAC,cAAc,EAAE,UAAU,CAAC,0BAA0B,sBAAsB,GAAG,CAAC,CAAC;CAClF,CAAC,CAAC;AA4BL,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,wBAAwB,CAAC,OAAO,EAAE;IAC1D,IAAI,GAAG,KAAK,QAAQ,EAAE;QACpB,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;YACtC,KAAK,MAAM,QAAQ,IAAI,wBAAwB,CAAC,SAAS,EAAE;gBACzD,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC;gBAChC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;aAC/B;QACH,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE;YACtC,KAAK,MAAM,QAAQ,IAAI,wBAAwB,CAAC,SAAS,EAAE;gBACzD,IAAI,KAAK,CAAC,OAAO,EAAE;oBACjB,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC;oBACpB,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;iBAC/B;aACF;QACH,CAAC,CAAC,CAAC;KACJ;CACF","sourcesContent":["import type { ReactiveControllerHost, ReactiveController } from 'lit';\n\nimport {\n  mobileBreakpoint,\n  mobileXlBreakpoint,\n  desktopLargeBreakpoint,\n  desktopSmallBreakpoint,\n  tabletLandscapeBreakpoint,\n  tabletPortaitBreakpoint,\n  mobileLandscapeBreakpoint,\n  mobilePortraitBreakpoint,\n} from './tokens.js';\n\nexport type BreakpointKey =\n  | 'mobile'\n  | 'mobileXl'\n  | 'desktopLarge'\n  | 'desktopSmall'\n  | 'tabletLandscape'\n  | 'tabletPortait'\n  | 'mobileLandscape'\n  | 'mobilePortrait'\n\nexport class RHDSScreenSizeController implements ReactiveController {\n  static instances = new Set<RHDSScreenSizeController>();\n\n  static queries = new Map<BreakpointKey, MediaQueryList>([\n    ['mobile', matchMedia(`screen and (max-width: ${mobileBreakpoint})`)],\n    ['mobilePortrait', matchMedia(`screen and (max-width: ${mobilePortraitBreakpoint})`)],\n    ['mobileLandscape', matchMedia(`screen and (max-width: ${mobileLandscapeBreakpoint})`)],\n    ['tabletPortait', matchMedia(`screen and (max-width: ${tabletPortaitBreakpoint})`)],\n    ['tabletLandscape', matchMedia(`screen and (max-width: ${tabletLandscapeBreakpoint})`)],\n    ['mobileXl', matchMedia(`screen and (max-width: ${mobileXlBreakpoint})`)],\n    ['desktopSmall', matchMedia(`screen and (min-width: ${mobileXlBreakpoint}) and (max-width: ${desktopSmallBreakpoint})`)],\n    ['desktopLarge', matchMedia(`screen and (min-width: ${desktopLargeBreakpoint})`)],\n  ]);\n\n  public mobile = RHDSScreenSizeController.queries.get('mobile')?.matches ?? false;\n\n  public size: Omit<BreakpointKey, 'mobile'>;\n\n  constructor(\n    /** reference to the host element using this controller */\n    public host: ReactiveControllerHost,\n  ) {\n    this.host.addController(this);\n    this.size = 'mobilePortrait';\n    for (const [key, list] of RHDSScreenSizeController.queries) {\n      if (key !== 'mobile' && list.matches) {\n        this.size = key;\n      }\n    }\n  }\n\n  hostConnected() {\n    RHDSScreenSizeController.instances.add(this);\n  }\n\n  hostDisconnected() {\n    RHDSScreenSizeController.instances.delete(this);\n  }\n}\n\nfor (const [key, list] of RHDSScreenSizeController.queries) {\n  if (key === 'mobile') {\n    list.addEventListener('change', event => {\n      for (const instance of RHDSScreenSizeController.instances) {\n        instance.mobile = event.matches;\n        instance.host.requestUpdate();\n      }\n    });\n  } else {\n    list.addEventListener('change', event => {\n      for (const instance of RHDSScreenSizeController.instances) {\n        if (event.matches) {\n          instance.size = key;\n          instance.host.requestUpdate();\n        }\n      }\n    });\n  }\n}\n"]}